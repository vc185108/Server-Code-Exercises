<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Retalix.StoreServices.Model</name>
    </assembly>
    <members>
        <member name="T:Retalix.StoreServices.Model.ApplicationLink.IApplicationLinkValidator">
            <summary>
            validates that the given string is a valid URL
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Certificate.ICertificateConfiguration.StoreName">
            <summary>
            represents value from the enum X509Certificates.StoreName
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Certificate.ICertificateConfiguration.StoreLocation">
            <summary>
            represents value from the enum X509Certificates.StoreLocation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Certificate.ICertificateConfiguration.FindType">
            <summary>
            represents value from the enum X509Certificates.X509FindType
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.CodeSignatureVerification.VerificationModeType.Disabled">
            <remarks/>
        </member>
        <member name="F:Retalix.StoreServices.Model.CodeSignatureVerification.VerificationModeType.Info">
            <remarks/>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.ExternalLoyaltyProviderOfflineException">
            <summary>
            Represents an error of External Loyalty Provider Offline.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.InvalidAccountResetHourConfigurationValueException">
            <summary>
            The reset hours value in the configuration is invalid as a TimeStamp 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.LoyaltyAccountTypeNotDefinedOnAnyToLoyaltyProgramException">
            <summary>
            Represents an error of failure to locate account type on any loyalty program
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.CustomerSubscriptionNotFoundException">
            <summary>
            Represents an error of failure to locate customer subscription
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.CustomerSubscriptionNotFoundException.#ctor">
            <summary>
             Instance of <see cref="T:Retalix.StoreServices.Model.Customer.Exceptions.CustomerNotFoundException"/>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.CdmConfigurationDbException">
            <summary>
            Represents an error of failure for Missing CDM DB configuration in order of using CdmSession
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.CdmConfigurationDbException.#ctor">
            <summary>
            Missing CDM DB configuration in order of using CdmSession
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.CdmConfigurationDbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.CustomerOfflineException">
            <summary>
            Represents an error of failure to locate customer by a customer identification due to offline connection.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.StoredValueAccountNotAllowedNegativeBalanceException">
            <summary>
            Raised when withdrawal of a request amount from a <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount">stored value account</see> reduces the account balance to negative.
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.StoredValueAccountNotAllowedNegativeBalanceException.#ctor">
            <summary>
             Instance of <see cref="T:Retalix.StoreServices.Model.Customer.Exceptions.StoredValueAccountNotAllowedNegativeBalanceException"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.StoredValueAccountNotAllowedNegativeBalanceException.#ctor(System.Exception)">
            <summary>
             Instance of <see cref="T:Retalix.StoreServices.Model.Customer.Exceptions.StoredValueAccountNotAllowedNegativeBalanceException"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.StoredValueAccountNotAllowedNegativeBalanceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.SubscriptionPendingActivationException">
            <summary>
            Represents an error of failure to locate customer by a customer identification
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.SubscriptionPendingActivationException.#ctor">
            <summary>
             Instance of <see cref="T:Retalix.StoreServices.Model.Customer.Exceptions.CustomerNotFoundException"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.SubscriptionPendingActivationException.#ctor(System.Exception)">
            <summary>
             Instance of <see cref="T:Retalix.StoreServices.Model.Customer.Exceptions.CustomerNotFoundException"/>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.TrustLevelNotFoundException">
            <summary>
            Represents an error of unknown trust level
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.TrustLevelNotFoundException.#ctor(System.String)">
            <summary>
             Instance of <see cref="F:Retalix.StoreServices.Model.Customer.Exceptions.TrustLevelNotFoundException.TrustLevelNotFoundExceptionMessage"/>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.CustomerAccountNotFoundException">
            <summary>
            Represents an error of failure to locate customer account  by a account type.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.CustomerAccountNotFoundException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="customerId"></param>
            <param name="accountCode"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.CustomerAccountNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.CustomerAlreadySignedException">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.CustomerAlreadySignedException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.CustomerAlreadySignedException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.CustomerIdentityAlreadyInUseException">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.CustomerIdentityAlreadyInUseException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.CustomerIdentityAlreadyInUseException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.CustomerNotFoundException">
            <summary>
            Represents an error of failure to locate customer by a customer identification
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.CustomerNotFoundException.#ctor">
            <summary>
             Instance of <see cref="T:Retalix.StoreServices.Model.Customer.Exceptions.CustomerNotFoundException"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.CustomerNotFoundException.#ctor(System.String)">
            <summary>
             Instance of <see cref="T:Retalix.StoreServices.Model.Customer.Exceptions.CustomerNotFoundException"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.CustomerNotFoundException.#ctor(System.Exception)">
            <summary>
             Instance of <see cref="T:Retalix.StoreServices.Model.Customer.Exceptions.CustomerNotFoundException"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.CustomerNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.SubscriptionServiceNotFoundException">
            <summary>
            Represents an error of failure to locate customer by a customer identification
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.SubscriptionServiceNotFoundException.#ctor">
            <summary>
             Instance of <see cref="T:Retalix.StoreServices.Model.Customer.Exceptions.SubscriptionServiceNotFoundException"/>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Exceptions.UknownCustomerIdentificationTypeException">
            <summary>
             Trying to identify a customer by an unknown identificastion type
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Exceptions.UknownCustomerIdentificationTypeException.#ctor(System.String)">
            <summary>
             Instance of <see cref="T:Retalix.StoreServices.Model.Customer.Exceptions.UknownCustomerIdentificationTypeException"/>
            </summary>
            <param name="identificationType"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.IAccumulatorAccountType">
            <summary>
             Accumulator account type defines account type that 
             accumulate over multiple tickets.
             This account type is base for promotion related account that requires accumulation over multiple tickets.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.IAccumulatorAccountType.AccumulatorIdentifier">
            <summary>
            Accumulator account type accumulates over multiple tickets.
            <see cref="P:Retalix.StoreServices.Model.Customer.Accounts.IAccumulatorAccountType.AccumulatorIdentifier">Accumulator identifier</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.IRewardLimitAccountType">
            <summary>
             Reward account type defines account type that 
             accumulate Reward over multiple tickets.
             This account type use for limit executing reward by using earlier discounts.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.IUomQuantityAccountType">
            <summary>
             Uom Quantity account type defines account type that 
             accumulate rewarded unit of measure over multiple tickets.
             This account type use to limit the rewarded UOM by using rewarded UOM from earlier purchases.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.AccountTransactionAuditIdentifier">
            <summary>
             Customer account identifier
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.AccumulatorIdentifier">
            <summary>
            Accumulator identifier is the identifier of the source accumulator.
            The accumulator can be defined by a <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see>. and <see cref="T:Retalix.StoreServices.Model.Promotion.Conditions.IContinuable">continuity condition</see>,
            or by promotion with <see cref="T:Retalix.StoreServices.Model.Promotion.IMultipleTicketsMatchLimit">redemption limit</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.AccumulatorIdentifier.PromotionId">
            <summary>
             Gets or sets the relevant promotion id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.AccumulatorIdentifier.ConditionId">
            <summary>
             Gets or sets the relevant condition id.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.IContinuityAccountType">
            <summary>
             Continuity account type defines account type that 
             accumulate purchases over multiple tickets.
             This account type use for executing promotion by using earlier purchases.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountCreator">
            <summary>
            Represents customer account creator
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountCreator.Create(System.String,System.String)">
            <summary>
            Create customer account by the given customer and account typeId(if the account type is Loyalty, then we will validate if the account type is part of 
            a valid loyalty program and the customer subscribed to it or affiliated to customer which is subscribed to the loyalty program)
            </summary>
            <param name="customerId"></param>
            <param name="accountTypeId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountRestrictionByTender">
            <summary>
            Restrict specific tenders from contributing to <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount"/> deposits.
            <remarks>
            Some tenders may not be eligible for contributing into account accumulation. This is usually the case with vouchers and other tender types that were given to the customer 
            in return for points reduction from his <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount">account</see>.
            The equivalent amount of the non eligible tender should be reduced from the items amount used for account accumulation calculation.
            R10 is optimizing the points accumulation calculation whenever non eligible tenders are in use. The accumulation contribution of each item is calculated, based on the active promotions; 
            the non eligible tender amount is deducted from these items that contributes the least to the accumulation, this maximizing the total amount accumulated in the transaction.
            </remarks>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountRestrictionByTender.TenderId">
            <summary>/// the non eligible tender id
            </summary>
            <remarks>
            Payments done with this tender may not contribute to any deposit made into the <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount"/>
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountRestrictionByTender.CanDeposit(Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm)">
            <summary>
            Check if a given payment term is restricted from accumulating into the customer account balance.
            </summary>
            <remarks>
            Some tenders are not allowed to contribute to any account accumulation; 
            these are usually voucher tenders that were given to customers in return for points.
            </remarks>
            <param name="paymentTerm"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountRestrictionByTender.CanWithdraw(Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm)">
            <summary>
            
            </summary>
            <param name="paymentTerm"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerSubscriptionWithdrawalRestrictionByCustomer">
            <summary>
            Restricting specific <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">customers</see> from updating <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount">customer account</see> balance.
            <remarks>
            <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount"/> may be shared by several customers by means of <see cref="T:Retalix.StoreServices.Model.Customer.IAffiliation">affiliation</see>. Some customers may 
            only be eligible for deposits and not for withdrawals; this may be the case when the customer hasn't provided certain details that the retailer defines mandatory.
            </remarks>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.ICustomerSubscriptionWithdrawalRestrictionByCustomer.RestrictedCustomerId">
            <summary>
            The restricted customer ID
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.ICustomerSubscriptionWithdrawalRestrictionByCustomer.Subscription">
            <summary>
            Restricted customer subscription
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.ICustomerSubscriptionWithdrawalRestrictionByCustomer.ReasonCode">
            <summary>
            The restriction reason code.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.ICustomerSubscriptionWithdrawalRestrictionByCustomer.IsActive">
            <summary>
             Is active
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerSubscriptionWithdrawalRestrictionByCustomer.CanWithdraw(Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
            Check if a given <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">customer</see> is restricted from performing deposits into the <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount"/>
            </summary>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.ILoyaltyAccountType">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.ILoyaltyAccountType.AccumulationRestrictions">
            <summary>
            accumulation restrictions for current account
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerSubscriptionWithdrawalRestrictionByCustomerFactory">
            <summary>
            Customer account restrictions factory
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerSubscriptionWithdrawalRestrictionByCustomerFactory.Create">
            <summary>
            Create a new customer account restriction
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountUpdateRestriction">
            <summary>
            <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount"/> update restriction of either deposits or withdrawals from the account's <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount">stored value account</see>.
            <remarks>
            This is the base interface for any account deposit/withdrawal restriction, such as <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountRestrictionByTender"/>, that restricts the deposit amount corresponding to non eligible tender payments.
            </remarks>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.IAccountType">
            <summary>
             Customer account type definition
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.IAccountType.ExternalId">
            <summary>
             The account's external ID
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.IAccountType.Description">
            <summary>
             The account's description collection (per culture)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.IAccountType.Precision">
            <summary>
            The number of digits to be displayed after the decimal point.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.IAccountType.RoundingType">
            <summary>
            Direction of rounding.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.IAccountType.ExpirationPolicy">
            <summary>
             The account's expiration rule (never or by period of time)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.IAccountType.InitialValue">
            <summary>
             The account's initial value to reset to. Currently read only and fixed as "0".
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.IAccountType.Round(System.Decimal)">
            <summary>
            Format an amount with the accuracy defined in the account type.
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.IAccountTypeDao">
            <summary>
             Represents an entity which is responsible to store and retrieve <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.IAccountType">IAccountType</see> in the persistent storage.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.IAccountTypeDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Accounts.IAccountType})">
            <summary>
            Save the given customer account type.
            </summary>
            <param name="accountTypes"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.IAccountTypeDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Accounts.IAccountType})">
            <summary>
            Delete the given customer account type.
            </summary>
            <param name="accountTypes"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.IAccountTypeDao.Get(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            searches for customer account type by code.
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.IAccountTypeDao.GetAll``1">
            <summary>
            Get all accounts
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.IAccountTypeDao.Get(System.String)">
            <summary>
            searches for customer account type by code.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.IAccountTypeDao.GetByRestrictedTender(System.String)">
            <summary>
            searches for accounts by restricted tender id.
            </summary>
            <param name="restrictedTenderId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.IAccountTypeDao.GetByPromotionId(System.String)">
            <summary>
            searches for accounts by promotion id.
            </summary>
            <param name="promotionId">the promotion id to search by</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.IAccountTypeDao.GetByPromotionIds(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            searches for accounts by promotion ids.
            </summary>
            <param name="promotionIds">the promotion ids to search by</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.IAccountTypeFactory">
            <summary>
             Customer account type factory
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.IAccountTypeFactory.Create``1(System.String)">
            <summary>
             Create a new account type with an external ID.
            </summary>
            <param name="externalId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount.Owner">
            <summary>
            The customer who is the owner of this account. This is the customer that was subscribed to the <see cref="T:Retalix.StoreServices.Model.Customer.ISubscriptionService">service</see>.
            </summary>
            <remarks>
            Other customers may have access to this customer account by means of affiliation with the accounts owner. The may be restricted to perform some operations on the account
            (see CanDeposit, CanWithdraw methods)
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount.AccountType">
            <summary>
            Account 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount.CanDeposit(Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
            Checks if a customer is allowed to deposit into the customer account's <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount">stored value account</see>.
            </summary>
            <param name="requestor"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount.CanWithdraw(Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
            Checks if a customer is allowed to redeem from the customer account's <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount">stored value account</see>.
            </summary>
            <param name="requestor"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount.StoredValueAccount">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount">Stored value account</see> which stored the balance.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountDao">
            <summary>
            Represents an entity which responsible to store and retrieve <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount">ICustomerAccount</see> in the persistent storage.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountDao.GetCustomerAccountOwner(System.String,System.String)">
            <summary>
            Find customer account owner
            </summary>
            <param name="customerId"></param>
            <param name="accounTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount})">
            <summary>
            Stores the customer's account
            </summary>
            <param name="accounts"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountDao.GetByAccountType(Retalix.StoreServices.Model.Customer.Accounts.IAccountType)">
            <summary>
            Rerieves a collection of customer accounts according to the account type.
            </summary>
            <param name="accountType"></param>
            <param name="limit">limit the result set</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount})">
            <summary>
            Delete customer accounts
            </summary>
            <param name="accounts"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountFactory">
            <summary>
            Customer accounts factory
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountFactory.Create(Retalix.StoreServices.Model.Customer.Accounts.IAccountType,Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
            Creates a new customer account
            </summary>
            <param name="accountType"></param>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountFactory.Create(Retalix.StoreServices.Model.Customer.Accounts.IAccountType,Retalix.StoreServices.Model.Customer.ICustomer,System.Decimal)">
            <summary>
            Create a customer account with initial balance
            </summary>
            <param name="accountType"></param>
            <param name="customer"></param>
            <param name="initialBalance"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountTotalizer">
            <summary>
            A totalize for retrieving the total accumulations and redemptions done in a customer order for a customer account
            </summary>
            <remarks>
            During the course of a customer order, a <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount">customer account</see> may be modified.
            For example: by a promotion that accumulate value; by a promotion that redeems value in order to give a reward; when a customer wishes to pay by points.    
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountTotalizer.GetTotalDepositsAndWithdrawals(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Returns the total customer earnings and redemptions in a given customer order.
            </summary>
            <param name="customerOrder"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccountTotalizer.GetCustomerAccountTotals(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.String)">
            <summary>
            Returns the total customer account earnings and redemptions in a given customer order
            </summary>
            <param name="customerOrder"></param>
            <param name="accountTypeId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.IRedemptionAccountType">
            <summary>
             Redemption account type defines account type that 
             accumulate redemptions over multiple tickets.
             This account type use for limit executing promotion by using earlier executed redemptions.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Accounts.PointsSource">
            <summary>
            Points source enumeration (e.g promotions\tender etc)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Accounts.PointsSource.Promotion">
            <summary>
            Points which were derived from Promotions.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Accounts.PointsSource.Tender">
            <summary>
            Points which were derived from tender (e.g "Pay by points" tender).
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Accounts.RoundingTypeEnumeration.Nearest">
            <summary>
            Round to the nearest number.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Accounts.RoundingTypeEnumeration.Up">
            <summary>
            Round up.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Accounts.RoundingTypeEnumeration.Down">
            <summary>
            Round down.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.AutoAdd.CustomerAutoAddedEvent">
            <summary>
            Triggered after new customer card number was identified in the middle of transaction and the customer was auto generated.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.AutoAdd.ICustomerCreationTemplateDao">
            <summary>
            Represents repository for customer creation template.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.AutoAdd.ICustomerCreationTemplateDao.Save(Retalix.StoreServices.Model.Customer.AutoAdd.ICustomerCreationTemplate)">
            <summary>
            Save the given template.
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.AutoAdd.ICustomerCreationTemplateDao.GetByDataPatternExternalId(System.String)">
            <summary>
            Get template by data pattern identifier.
            </summary>
            <param name="dpId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.AutoAdd.ICustomerCreationTemplateDao.IsTemplateExists(System.String)">
            <summary>
            Return true whether a template exist by the given data pattern identifier,otherwise false.
            </summary>
            <param name="dpId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.AutoAdd.ICustomerCreationTemplateDao.Delete(Retalix.StoreServices.Model.Customer.AutoAdd.ICustomerCreationTemplate)">
            <summary>
            Delete the given creation template.
            </summary>
            <param name="template"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Affiliation.IAffiliationFactory">
            <summary>
             Affiliation factory
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Affiliation.IAffiliationFactory.Create">
            <summary>
            Create a new affiliation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreement">
            <summary>
             Define the account redemption policy agreement
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreement.AccountType">
            <summary>
             The Account type which related to the current agreement
            </summary>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreement.MinimumRequiredAccountBalance">
            <summary>
             The minimum required Account balance in order to fulfill the agreement
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreement.MaximumRedemtionPoints">
            <summary>
             The Maximum redeem amount of points per transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreement.ConversionRate">
            <summary>
            The conversion rate to convert point to E-Money
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreement.GetPointAsset(Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
             Get points assets by given money amount.
            </summary>
             <param name="amount">
             Amount of money to convert.
             </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreement.GetPointAsset(System.Decimal,Retalix.StoreServices.Model.Finance.Money.CurrencyInfo)">
            <summary>
             Get points assets by given points and currency.
            </summary>
            <param name="points">
             Point amount to convert.
            </param>
            <param name="currencyInfo">
             The currency of the converted amount.
            </param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreementConversionRate">
            <summary>
             Define conversion rate of money to points
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreementConversionRate.Points">
            <summary>
             The amount of points needed to convert to X money in Y currency
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreementConversionRate.Money">
            <summary>
             The amount of money that you can convert X points to in Y currency
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreementConversionRate.Currency">
            <summary>
             The currency ISO symbol
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreementDao">
            <summary>
            Represents an entity which is responsible to store and retrieve <see cref="T:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreement">ICustomerAgreement</see> in the persistent storage.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreementDao.SaveOrUpdate(Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreement)">
            <summary>
             save or update a new/existing agreement type
            </summary>
            <param name="customerAgreement"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreementDao.Get">
            <summary>
             Get agreement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreementDao.Delete">
            <summary>
             Delete agreement
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreementFactory">
            <summary>
            Customer agreement factory
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreementFactory.Create">
            <summary>
             Create new agreement with all parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreementConversionRateFactory">
            <summary>
            Customer agreement conversion rate factory
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Agreement.ICustomerAgreementConversionRateFactory.Create">
            <summary>
             Create new agreement conversion rate with all parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.AccountFilterArgs">
            <summary>
            Segments account filter arguments
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.AccountFilterArgs.AccountType">
            <summary>
            Account type to filter
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.AccountFilterArgs.AccountBalance">
            <summary>
            Collection of balances with matching filter type operation
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.CouponFilterArgs">
            <summary>
            Segments coupons filter arguments
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.CouponFilterArgs.CouponId">
            <summary>
            Coupon ID to filter
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.CouponFilterArgs.CouponNumberOfTimesIssued">
            <summary>
            Collection of number of coupon issuances with matching filter type operation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.CouponFilterArgs.CouponNumberOfTimesRedeemed">
            <summary>
            Collection of number of coupon redempotion with matching filter type operation
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.HistoryDecimalFilterArgs">
            <summary>
            Segments transaction decimal value filter arguments
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.HistoryDecimalFilterArgs.FilterType">
            <summary>
            Filter operation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.HistoryDecimalFilterArgs.Value">
            <summary>
            Decimal value to filter by
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.HistoryIntFilterArgs">
            <summary>
            Segments transaction integral value filter arguments
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.HistoryIntFilterArgs.FilterType">
            <summary>
            Filter operation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.HistoryIntFilterArgs.Value">
            <summary>
            Integral value to filter by
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.ItemFilterArgs">
            <summary>
            Segments transaction items filter arguments
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.ItemFilterArgs.ItemId">
            <summary>
            Item ID to filter
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.ItemFilterArgs.HierarchyName">
            <summary>
            Collection of item values (e.g. quntities or amounts) with matching filter type operation
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.ItemActionType">
            <summary>
            Transaction items dimention filter enumeration
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.PromotionFilterArgs">
            <summary>
            Segments promotion filter arguments
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.PromotionFilterArgs.PromotionId">
            <summary>
            Promotion ID to filter
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.PromotionFilterArgs.IsRegistered">
            <summary>
            Registration status to filter
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.PromotionFilterArgs.PromotionNumberOfTimesRedeemed">
            <summary>
            Collection of number of promotion redemptions with matching filter type operation
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.SegmentFilterArgs">
            <summary>
            Segments segment filter arguments
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.SegmentFilterArgs.SegmentId">
            <summary>
            Segment ID to filter
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.StoreFilterArgs">
            <summary>
            Segments store filter arguments
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterArgs.StoreFilterArgs.StoreId">
            <summary>
            Store ID to filter
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterOperation">
            <summary>
            Segments filter operators enumerator
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterType">
            <summary>
            Segments filter operation type enumarator
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.IExpressionBuilder">
            <summary>
            Segments criteria expression builder delegate
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.BISegment.Criteria.IExpressionBuilder.GetExpression``1(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.BISegment.Criteria.IFilterable},Retalix.StoreServices.Model.Customer.BISegment.Criteria.FilterOperation)">
            <summary>
            Create a boolean expression that can calcluate given set of filters
            </summary>
            <typeparam name="T"></typeparam>
            <param name="operands"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.IValueFilter`1">
            <summary>
            Generic value filter
            </summary>
            <typeparam name="TFilter"></typeparam>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.IValueFilter`1.Value">
            <summary>
            Value to filter
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.IValueFilter`1.FilterType">
            <summary>
            Filter type operation
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.Criteria.IFilterable">
            <summary>
            Main interface to define an object as filterable
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.IFilterable.ApplicantName">
            <summary>
            Defines the name of the filter (group/property)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.IFilterable.Excluded">
            <summary>
            Unary operator on the filter.
            Defines the inclusion logic for the filter in filter collection
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.Criteria.IFilterable.Query">
            <summary>
            Returns an expression applying the filter
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.BISegment.Criteria.IFilterable.Apply(Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
            Applies the filter on the object
            </summary>
            <param name="obj">An object we want to filter</param>
            <returns>True in case the object suites the filter criteria</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.BISegment.Criteria.IFilterable.Apply(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.ICustomer})">
            <summary>
            Applies the filter on the collection of the objects
            </summary>
            <param name="obj">A collection of the objects we want to filter</param>
            <returns>Population of the objects that suite the filter criteria</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.IAccountCriteria">
            <summary>
            Define a tier segment (balance range)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.IAccountCriteria.AccountId">
            <summary>
            Account ID to which balance tier range relates to 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.IAccountCriteria.From">
            <summary>
            Lower bound of tier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.IAccountCriteria.To">
            <summary>
            Upper bound of tier
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.BISegment.IAccountCriteria.IsMet(Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
            Indicate whether a customer is within this tier according to current customer's account balance
            </summary>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.IBISegment">
            <summary>
            Define a tier as a collections of segments
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.BISegment.IBISegment.IsMet(Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
            If Condition IsMet - Customer relates to segment
            </summary>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.BISegment.IBISegment.Criterias">
            <summary>
            Criteria collection
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.ICriteria">
            <summary>
            Represents a criteria for BI segments.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.BISegment.ICriteria.IsMet(Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
            Tells if the customer fulfills the criteria. 
            </summary>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.IBISegmentFactory">
            <summary>
            A factory for creating <see cref="T:Retalix.StoreServices.Model.Customer.BISegment.IBISegment"/> entities.    
            /// </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.BISegment.IBISegmentFactory.Create(System.String)">
            <summary>
            Create BI segment by the given identifier.
            </summary>
            <param name="externalId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.IAccountCriteriaFactory">
            <summary>
            A factory to create a new Account Criteria
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.BISegment.IAccountCriteriaFactory.Create(System.String,System.Int32,System.Int32)">
            <summary>
            Create new account criteria
            </summary>
            <param name="accountId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.BISegment.IFilterableFactory">
            <summary>
            Create a filter
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Contacts.IAddressOld">
             <summary>
             Represent collection of information, presented in a fixed format, used for describing the location of a building, apartment, or other structure of 
             <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer"/> that can be used to send mail and packages .
             </summary>
            
             <example>
             The following example demonstrates how to create an <see cref="T:Retalix.StoreServices.Model.Customer.Contacts.IAddressOld"/>, populate it with with the specified address and add it to the contacts collection of an <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer"/>:
            
             455 Larkspur Dr. 
             California Springs, CA 92926 
             United States 
             
             <code>
               IAddress address = new Address()
                                           {
                                               CountryCode = "US", // Country code of United States
                                               State = "CA",
                                               City = "California Springs",
                                               PostalCode = "92926",
                                               AddressLine1 = "455 Larkspur Dr."
                                           };
                person.Contacts.AddContact(address);
             </code>
             
             </example>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IAddressOld.Type">
            <summary>
            Gets the type of the <see cref="T:Retalix.StoreServices.Model.Customer.Contacts.IAddressOld"/>, for example: Home, work, Billing, etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IAddressOld.CountryCode">
            <summary>
             Gets or sets an alpha-2 code of ISO-3166 country code standard.
             For a full list of supported countries and their code, See <see href="http://www.iso.org/iso/home/standards/country_codes/iso-3166-1_decoding_table.htm"> Country code decoding table</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IAddressOld.State">
            <summary>
            Gets or set a state, province, or other region within a country.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IAddressOld.City">
            <summary>
            Gets or sets the city.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IAddressOld.PostalCode">
            <summary>
            Gets or sets a code assigned by the postal authority.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IAddressOld.AddressLine1">
            <summary>
            Gets or sets the Street, building number, apartment number, or any additional information that cannot be included in other <see cref="T:Retalix.StoreServices.Model.Customer.Contacts.IAddressOld"/> fields.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IAddressOld.AddressLine2">
            <summary>
            Gets or sets additional <see cref="T:Retalix.StoreServices.Model.Customer.Contacts.IAddressOld"/> information that cannot be contained in <see cref="P:Retalix.StoreServices.Model.Customer.Contacts.IAddressOld.AddressLine1"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Contacts.IAddressFactory">
            <summary>
            Abstract factory for creating different types of Contacts.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Contacts.IAddressFactory.Create(System.String)">
            <summary>
            Create a new instance of <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress"/> with a specific <see cref="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress.AddressType"/>.
            </summary>
            <param name="type">A category definition of the requested <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress"/> For example: Home, Work etc.</param>
            <returns>An instance of <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress"/>.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Contacts.IContactInformation">
            <summary>
             Container of contacts that can be used to communicate with the person or customer. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IContactInformation.HomePhone">
            <summary>
             Gets or sets the customer's home phone number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IContactInformation.MobilePhone">
            <summary>
             Gets or sets the customer's mobile phone number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IContactInformation.Email">
            <summary>
             Gets or sets the customer's  email number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IContactInformation.Addresses">
            <summary>
             Gets a collection of key/value pair, where key is <see cref="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress.AddressType"/> and value is <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Contacts.IEmail">
            <summary>
            Represent an electronic address of a <see cref="T:Retalix.StoreServices.Model.Customer.Person.IIndividual">Person</see> or organization that is used to send messages.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IEmail.Type">
            <summary>
            Gets the type of the <see cref="T:Retalix.StoreServices.Model.Customer.Contacts.IEmail"/>, for example: Home, work, etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IEmail.Address">
            <summary>
            Gets or set the E-mail address.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Contacts.IEmail.IsVerified">
            <summary>
            Gets or set if the  E-mail address was verified by the user.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.CustomerTypeEnum">
            <summary>
            Represent customer types like 'Anonymous', 'Loyalty' etc...
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.CustomerTypeEnum.#ctor(System.String)">
            <summary>
            Creates an instance with a given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.CustomerTypeEnum.Anonymous">
            <summary>
            'Anonymous' customer type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.CustomerTypeEnum.Loyalty">
            <summary>
            'Loyalty' customer type
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.EmailVerification.IMailServiceProvider">
            <summary>
             interface of an mail service provider externally implemented
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.EmailVerification.IMailServiceProvider.Receivers">
            <summary>
             destination mail address
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.EmailVerification.IMailServiceProvider.SendMail(Retalix.StoreServices.Model.Infrastructure.Message.IResolvedMessage)">
            <summary>
             send the mail
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.EmailVerification.SendEmailArgs">
            <summary>
             Arguments for sending email messages.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.EmailVerification.SendEmailArgs.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            </summary>
            <param name="smtpServerAddress"></param>
            <param name="emailSender"></param>
            <param name="smtpUserName"></param>
            <param name="smtpPassword"></param>
            <param name="smtpPortNumber"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.EmailVerification.SendEmailArgs.SmtpServerAddress">
            <summary>
             SMTP server address
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.EmailVerification.SendEmailArgs.EmailSender">
            <summary>
             The Email sender address or name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.EmailVerification.SendEmailArgs.SmtpUserName">
            <summary>
             The SMTP credentials user name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.EmailVerification.SendEmailArgs.SmtpPassword">
            <summary>
             The SMTP credentials password
             ///</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.EmailVerification.SendEmailArgs.SmtpPortNumber">
            <summary>
             The SMTP server port
             ///</summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.EmailVerification.ICustomerEmailVerification">
            <summary>
             Customer email verification flow.
            </summary>
             <remarks>
             Some <see cref="T:Retalix.StoreServices.Model.Customer.ISubscriptionService">subscription services</see>, such as mobile and portal services, require email verification.
             ICustomerEmailVerification follows the steps of email verification: verification request and response.
             </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.EmailVerification.ICustomerEmailVerification.RequestEmailVerfication(Retalix.StoreServices.Model.Customer.ICustomer,Retalix.StoreServices.Model.Customer.Loyalty.ISubscription)">
            <summary>
            Initiate the flow of email verification.
            </summary>
            <remarks>
            Email verification is sent to the customer email that was provided during registration process. R10 generates a unique token 
            and associates it with the customer subscription. The token is embedded in email body.
            </remarks>
            <param name="customer"></param>
            <param name="subscription"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.EmailVerification.ICustomerEmailVerification.VerifyEmail(System.String)">
            <summary>
             Complete the flow of email verification
            </summary>
            <param name="token"></param>
             <remarks>
             When customer clicks the token link in the email verification mail that was sent by 'RequestEmailVerfication', the email is considered verified and the subscription status is changed to active.
             The customer may not enjoy the benefits of the service (for example, he may be able to login into the portal/mobile application)
             Throws CustomerNotFoundException
             </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ICustomerScanDataTLogProvider">
            <summary>
            Provide Customer Scan data to write it to TLog
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerScanDataTLogProvider.GetScanData(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Get Customer scan data
            </summary>
            <returns>Customer scan data</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Receipt.IReceiptPreference">
            <summary>
             Contains info about how to process Pos Client receipt for customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Receipt.IReceiptPreference.ReceiptBehavior">
            <summary>
             Customer Receipt Configuration could be : Ask Always or No Receipt or Retailer Default or Delivery Channel
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.SearchCriteria.CustomerEagerLoadingClassification">
            <summary>
             Classification for which customer data(segments,accounts) is need to be fethced in eager mode.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Search.SearchResult`1">
            <summary>
            Define the collection of search results
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Search.Limit">
            <summary>
            Represents the paging search criteria
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Search.OrderDirection">
            <summary>
             class for ascending/descending
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Search.OrderDirection.#ctor(System.String)">
            <summary>
            OnCreate a new <see cref="T:Retalix.StoreServices.Model.Customer.Search.OrderDirection"/> with an existing value;
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Search.OrderDirection.Ascending">
            <summary>
            ordering in ascending order
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Search.OrderDirection.Descending">
            <summary>
            ordering in descending order
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Search.SearchOperator">
            <summary>
             class for search operators
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Search.SearchOperator.#ctor(System.String)">
            <summary>
            OnCreate a new <see cref="T:Retalix.StoreServices.Model.Customer.Search.SearchOperator"/> with an existing value;
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Segmentation.SegmentAttributionType">
            <summary>
            The segment type.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Segmentation.SegmentAttributionType.Personal">
            <summary>
            Personal segment.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Segmentation.SegmentAttributionType.Shared">
            <summary>
            Shared segment.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Segmentation.ISegmentDao">
            <summary>
            Represents repository for segments.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Segmentation.ISegmentDao.Save(Retalix.StoreServices.Model.Customer.Segmentation.ISegment)">
            <summary>
             save the given segment.
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Segmentation.ISegmentDao.Get(System.String)">
            <summary>
             Get segment by code.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Segmentation.ISegmentDao.Get(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="codes"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Segmentation.ISegment">
            <summary>
            Represents a customer segmentation.
            <remarks>
            Segmentation is a marketing strategy that involves dividing a broad target market into subsets of consumers who have common needs. 
            ISegment represents a subsets. Subsets may be divided by criteria such as age and gender, or other distinctions, such as location or income. 
            </remarks>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Segmentation.ISegment.ExternalId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Segmentation.ISegment.Descriptions">
            <summary>
            Gets a collection of localized segment descriptions.
            </summary>
            <remarks>
            The following code demonstrates how to get a segment description for a specific culture.
            <code>
            public void GetDescription(string culture, ISegment segment)
            {
               return LocalizedDescription.GetLocalizedDescription(segment.Description, culture);
            }
            </code>
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Segmentation.ISegmentFactory">
            <summary>
            A factory for creating <see cref="T:Retalix.StoreServices.Model.Customer.Segmentation.ISegment"/> entities.    
            /// </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Segmentation.ISegmentFactory.Create(System.String)">
            <summary>
             Create segment by the given identifier.
            </summary>
            <param name="externalId">
             The segment identifier
            </param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.v5.ICustomerBusinessUnitDao.Save(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Save the customer's affiliation to a business unit.
            </summary>
            <param name="customerId"></param>
            <param name="businessUnits"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.v5.ICustomerBusinessUnitDao.Save(Retalix.StoreServices.Model.Customer.ICustomer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Save the customer's affiliation to a business unit.
            </summary>
            <param name="customer"></param>
            <param name="businessUnits"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.v5.ICustomerBusinessUnitDao.GetByCustomerId(System.String)">
            <summary>
            Get all of a customer's affiliated business units.
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.v5.ICustomerBusinessUnitDao.Delete(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete certain affiliations between a customer and a business unit (or units).
            </summary>
            <param name="customerId"></param>
            <param name="businessUnits"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.v5.ICustomerBusinessUnitDao.Delete(System.String)">
            <summary>
            Delete all of a customer's affiliations with business units.
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequestProvider">
            <summary>
            Provider of <see cref="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequest"/> for a given customer order.
            </summary>
            <remarks>
            Each implementation of <see cref="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequest"/> should also have a corresponding ICustomerAssetUpdateRequestProvider that can generate the customer 
            assets update request based on the customer modification required by a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order</see>
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequestProvider.GetRequests(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Get all <see cref="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequest">customer asset update requests</see>
            </summary>
            <param name="customerOrder"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAccountUpdateRequest">
            <summary>
            A request to withdraw an amount from the <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount"/> of a  <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount"/>.
            </summary>
            <remarks>
            Sent whenever the customer wishes to redeem points balance from his <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount"/>
            see also <see cref="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequest"/>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAccountUpdateRequest.AccountType">
            <summary>
            The customer account from which the balance is to be redeemed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAccountUpdateRequest.StoredValueAccountCertificate">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount"/> certificate that prescribes the redemption request.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerIdentifier">
            <summary>
            Represent an identifier of <see cref="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequest"/> , like customer id or customer card number
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerRegisteredPromotionUsageRequest">
            <summary>
            A request to use a registered <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see>.
            </summary>
            <remarks>
            Customers may register to promotions and get a limited number of times to enjoy their reward.
            When a registered promotion is triggered in a customer order, the CDM is updated with the redemption, so double redemptions can be prevented.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerRegisteredPromotionUsageRequest.PromotionId">
            <summary>
            Registered Promotion Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerRegisteredPromotionUsageRequest.RedemptionQuantity">
            <summary>
            Number of times the promotion was triggered (used to control reward limitation when the registered promotion is active for multiple usages).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateAuthorizer">
            <summary>
            Online redemption authorizer processed <see cref="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequest">online redemption requests</see> whenever an online validation is required.
            </summary>
            <remarks>
            The retailer may offer his <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">customers</see> various rewards that has limited use, a common example is unique coupons and <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount"/> points redemption.
            When a customer claims his reward (i.e. pays with points, redeems a unique coupon), the <see cref="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateAuthorizer">online redemption authorizer</see> ensures
            that the reward is still valid and was not already used by the <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">customer</see>.
            The authorization process handles a single request at a time, to ensure no double redemption is allowed. If the redemption request is approved, the quantity of redemption is reduced;
             hence, if a points redemption request is approved, then the <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount">customer's account</see> <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount">balance</see> is decreased.
            Also, if a unique coupon request is authorized, the coupon is marked as used and cannot be used again. 
            </remarks>   
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateAuthorizer.Authorize(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequest})">
            <summary>
            Authorize a number of redemption requests.
            </summary>
            <remarks>
            All requests must be authorized. If at least one request fails to get authorized, all of them fail.
            Upon successful completion, the authorizer returns a unique authorization code for all the requests.
            </remarks>        
            <param name="authorizationRequests"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateAuthorizer.AuthorizeRetroactive(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequest},Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
            when the authorizing source was offline during customer order completion, the retailer may have decided to authorize the redemption requests and accept 
            any potential costs, like over redemption of a <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount">customer account</see> balance. The accepted <see cref="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequest">requests</see>
            are logged in the transaction log and when the communication is back online, the authorizing source gets updated retroactively. 
            Any restrictions that may cause a request to be rejected in an online mode, are accepted in retroactive mode, since this is after the fact.
            The retroactive authorization may be used to track and handle over redemption scenarios. 
            </summary>
            <param name="authorizationRequests"></param>
            <param name="customer"> </param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequest">
            <summary>
            Online redemption request is processed by <see cref="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateAuthorizer"/> whenever an online validation is required.
            </summary>
            <remarks>
            The retailer may offer his <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">customers</see> various rewards that has limited use, a common example is unique coupons and <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount"/> points redemption.
            When a customer claims his reward (i.e. pays with points, redeems a unique coupon), the <see cref="T:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateAuthorizer">online redemption authorizer</see> ensures
            that the reward is still valid and was not already used by the <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">customer</see>.
            The authorization process handles a single request at a time, to ensure no double redemption is allowed. If the redemption request is approved, the quantity of redemption is reduced;
             hence, if a points redemption request is approved, then the <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount">customer's account</see> <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount">balance</see> is decreased.
            Also, if a unique coupon request is authorized, the coupon is marked as used and cannot be used again. 
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequest.CustomerId">
            <summary>
            Requesting customer Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequest.CustomerIdentifier">
            <summary>
            Requesting customer identifiers, like customer id or customer card number
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.OnlineRedemption.ICustomerAssetUpdateRequest.AuthorizationCode">
            <summary>
            Authorization code as proof that the request was authorized.
            </summary>
            <remarks>
            If the request was not authorized, <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.NoAuthorization"/> is returned.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerBusinessUnitDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.ICustomerBusinessUnit})">
            <summary>
            Save the customer's affiliation to a business unit.
            </summary>
            <param name="businessUnits"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerBusinessUnitDao.GetByCustomerId(System.String)">
            <summary>
            Get all of a customer's affiliated business units.
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerBusinessUnitDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.ICustomerBusinessUnit})">
            <summary>
            Delete certain affiliations between a customer and a business unit (or units).
            </summary>
            <param name="businessUnits"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerBusinessUnitDao.Delete(Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
            Delete all of a customer's affiliations with business units.
            </summary>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerBusinessUnitDao.ReTransmitFor(Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
             Re-transmit all businessunits of the given customer.
            </summary>
            <param name="customer"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ICustomerPreference">
            <summary>
            This interface represents the connection between customer and his preferences.
            Each preference represented in Key-Value structure.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomerPreference.ReceiveNewsletters">
            <summary>
            Does the customer allow receiving of newsletters
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomerPreference.ReceiveUpdatesByEmail">
            <summary>
            Does the customer allow receiving of emails
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomerPreference.ReceiveUpdatesBySms">
            <summary>
            Does the customer allow receiving of sms
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomerPreference.PreferredCulture">
            <summary>
            Customer's Preferred Culture - see CultureInfo in MSDN. For example : en-GB,en-US,etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomerPreference.PreferredStore">
            <summary>
             The preferred business unit which the customer refer to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomerPreference.Receipt">
            <summary>
             Contains info about how to process Pos Client receipt for a customer
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.IFamilyMemberDao">
            <summary>
            Represent a repository for customer family member
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.IFamilyMemberDao.Get(System.String)">
            <summary>
            Get all family members of given customer.
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.CustomerPromotionStatus">
            <summary>
             Status of customer registration to promotion.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.CustomerPromotionStatus.Registered">
            <summary>
             registered to promotion
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.CustomerPromotionStatus.Unregistered">
            <summary>
             unregistered from promotion
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.CustomerPromotionStatus.Burned">
            <summary>
             cashed in the promotion
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.CustomerPromotionStatus.Expired">
            <summary>
             promotion is expired
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.CustomerToken">
            <summary>
             A unique token that is generated for a customer for email verification or password change.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.CustomerToken.Token">
            <summary>
             A unique token
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.CustomerToken.CreationDate">
            <summary> 
             Token creation date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.CustomerToken.CustomerId">
            <summary>
             Customer Identification for which the token was generated
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.CustomerValidationRule.ICustomerValidationRuleDao">
            <summary>
            Represents an entity which is responsible to store and retrieve <see cref="T:Retalix.StoreServices.Model.Customer.CustomerValidationRule.IValidationRule">IValidationRule</see> in the persistent storage.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.CustomerValidationRule.ICustomerValidationRuleDao.Get">
            <summary>
            sss
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.CustomerValidationRule.ICustomerValidationRuleDao.SaveOrUpdate(Retalix.StoreServices.Model.Customer.CustomerValidationRule.IValidationRule)">
            <summary>
            sss
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.CustomerValidationRule.IValidationRule">
            <summary>
            Define a validation rule
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.CustomerValidationRule.IValidationRule.RuleKey">
            <summary>
            Rule key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.CustomerValidationRule.IValidationRule.RuleExpression">
            <summary>
            Rule expression
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.CustomerValidationRule.IValidationRule.RuleError">
            <summary>
            Rule error
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.CustomerValidationRule.IValidationRule.RuleHint">
            <summary>
            Rule hint
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.DescriptionData">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.DescriptionData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.DescriptionData.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <param name="value"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.DescriptionData.Type">
            <summary>
            Gets or sets the type of the description, which can be short or long.
            </summary>
            <example>ShortDescription,LongDescription</example>
            <value>A <see cref="T:System.String">String</see> that contains the description type.</value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.DescriptionData.CreateDefualt(System.String)">
            <summary>
            Creates the default parameters for the descriptions, which include the default culture and type.
            </summary>
            <param name="value">Description text</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Customer.DescriptionData">DescriptionData</see> object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.DescriptionData.Equals(System.Object)">
            <summary>
            A method for comparing two descriptions.
            </summary>
            <param name="obj">A description for comparing the descriptions.</param>
            <returns>A Boolean indication if the descriptions are equal.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.DescriptionData.Equals(Retalix.StoreServices.Model.Customer.DescriptionData)">
            <summary>
            A method for comparing two descriptions.
            </summary>
            <param name="other">A description to compare the descriptions. <see cref="T:Retalix.StoreServices.Model.Customer.DescriptionData"/></param>
            <returns>A Boolean indication if the descriptions are equal.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.DescriptionData.GetHashCode">
            <summary>
            Calculates the hash code of the object.
            </summary>
            <returns>The hash code number.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.IAffiliationDao">
            <summary>
            Represent a repository for customer affilation
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.IAffiliationDao.Get(System.String)">
            <summary>
            Get all customers which are affiliated with the given customer.
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.IAffiliationDao.GetAffilatedCustomerId(System.String)">
            <summary>
            Get the affiliated customer id of a given customer.
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.IAccountBalanceUpdater">
            <summary>
            IAccountBalanceUpdater
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.IAccountBalanceUpdater.UpdateBalance(System.String,System.String,System.Decimal,System.DateTime)">
            <summary>
            Reset records up to given dateTime and Update Amount of points
            </summary>
            <param name="customerId"></param>
            <param name="accountCode"></param>
            <param name="pointsToUpdate"></param>
            <param name="businessDate"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ICustomerPromotion">
            <summary>
             A <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see> to which a <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">customer</see> has registered (for example: via mobile or portal)
            </summary>
             <remarks>
             The registered promotion ID has a corresponding <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion"/> in R10; the reward of this promotion will only be given to a registered customer.
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomerPromotion.PromotionId">
            <summary>
             the <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see> ID in R10 (this is R10 internal identifier) 
            </summary>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomerPromotion.RegistrationDate">
            <summary>
             The registration date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomerPromotion.ExpirationDate">
            <summary>
             The expiration date for the specific customer. After this date, the customer is no longer eligible for the reward.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomerPromotion.Status">
            <summary>
             The registration status, see <see cref="T:Retalix.StoreServices.Model.Customer.CustomerPromotionStatus"/>
            </summary>
             <remarks>
             Some promotions can be redeemed by customers only limited number of times, after which the <see cref="T:Retalix.StoreServices.Model.Customer.ICustomerPromotion"/> is marked as 'burned'
             and can no longer reward the customer.
             </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerPromotion.IsActive(System.DateTime)">
            <summary>
            True - whether the promotion is active by the given dateTime, otherwise false
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomerPromotion.BurnningDate">
            <summary>
             The burnning date for the specific customer. If the date is defined then the customer is no longer eligible for the reward.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ICustomerTokenDao">
            <summary>
             A unique token (GUID) generator for means of customer sign-up and email verification.
            </summary>
             <remarks>
             As part of customer signup process, email verification may be required by the retailer. A customer token is generated per each request and used to authenticate
             the email verification made by the customer. When a token is generated, a <see cref="T:Retalix.StoreServices.Model.Customer.CustomerToken"/> record is saved in CDM. This record is deleted when 
             a customer successfully verifies his email, or by a <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy">retention policy</see> that handles these records.
             </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerTokenDao.Save(Retalix.StoreServices.Model.Customer.CustomerToken)">
            <summary>
            Save a new customer token
            </summary>
            <param name="customerToken"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerTokenDao.Delete(Retalix.StoreServices.Model.Customer.CustomerToken)">
            <summary>
            Delete customer token
            </summary>
            <param name="customerToken"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerTokenDao.GetByToken(System.String)">
            <summary>
            Get customer token record by token unique identifier
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerTokenDao.GetByCustomerId(System.String)">
            <summary>
            Get a token record by the customer Id
            </summary>
            <remarks>
            The customer id represents a customer who has recently signed up or reset his password
            </remarks>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerTokenDao.GetTokensCreatedBefore(System.DateTime)">
            <summary>
            Get customer token records that were created before the given date.
            </summary>
            <returns>
            Returns number of deleted records
            </returns>
            <remarks>
            When new customers are created in CDM as a result of a sign up to the retailer online services, the retail may wish to request email verification
            before the customers are considered as valid. If a signed up customer does not validate his email after a period of time (defined by a retention policy), 
            these customer deleted from CDM with their pending token.
            In an existing customer also signs up to the retailer online service with an email address, and the customer does not validate his email, only the token is deleted
            but the customer record remains intact in CDM.
            </remarks>
            <param name="deleteEntitiesEarlierThan"></param>        
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Identification.IDataPatternCredentials">
            <summary>
            A customer can be identified by different credentials, some of which are extension credentials.
            The IDataPatternCredentials is en extension point that allows the injection of a new kind of customer credentials into the customer identification flow.
            </summary>
            <remarks>
            When customer is added by a barcode, the server decodes the barcode into <see cref="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DecodedData"/> options. These options are given to <see cref="T:Retalix.StoreServices.Model.Customer.Identification.IDataPatternCredentials"/>
            which should return a valid <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials"/>, or null if the decoded data is unidentified.
            
            Example:
            The core supports the following customer credentials:
            <see cref="T:Retalix.StoreServices.Model.Customer.Identification.ILoyaltyCardCredentials"/> - identifying a customer by a loyalty card number
            <see cref="T:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdCredentials"/> - identifying a customer by a customer id in CDM. This may by the case with mobile application which don't necessarily involve loyalty cards.
            
            A colleague card is a common extension points, where a customer needs to be identified by a colleague card, however there is no record in CDM for that customer.
            The extension should define a data-pattern, identifying the colleague card and implement IDataPatternCredentials for that pattern.
            The core will load all registered implementations of <see cref="T:Retalix.StoreServices.Model.Customer.Identification.IDataPatternCredentials"/> and will try to get a valid credentials from all of them.
            The first credentials that produces an <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim"/> by which a valid customer is retrieved, is selected and the respective customer is identified.
            
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Identification.IDataPatternCredentials.ToCredentials(Retalix.StoreServices.Model.Selling.Customer.CustomerInfo)">
            <summary>
            Get <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials"/> based on a customer.
            </summary>
            <remarks>
            The returned <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials"/> is used to get an <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim"/> that should be able to identify a <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer"/> identity.
            </remarks>
            <param name="customerInfo">
            <see cref="T:Retalix.StoreServices.Model.Selling.Customer.CustomerInfo"/>
            </param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdCredentials">
            <summary>
            Customer R10 identification credentials
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdCredentials.CustomerId">
            <summary>
            Customer R10 ID
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentification">
            <summary>
             Represents the identifications for a customer authentication.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentification.CustomerId">
            <summary>
             Associated customer's Id for this identification
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentificationDao">
            <summary>
            Represents the data access for customer identifications.
            </summary>    
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentificationDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentification})">
             <summary>
             Save or update identifications
            </summary>
            <param name="identifications"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentificationDao.Add(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentification})">
             <summary>
             Add customer identifications
            </summary>
            <param name="identifications"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentificationDao.Update(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentification})">
             <summary>
             Update customer identifications
            </summary>
            <param name="identifications"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentificationDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentification})">
             <summary>
             Delete identifications
            </summary>
            <param name="identifications"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentificationDao.GetCustomerId(Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentification)">
            <summary>
             Get customer Id by customer identification
            </summary>
            <param name="identification"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentificationDao.GetLoyaltyCardIdentificationByCardNumber(System.String)">
            <summary>
             Get the loyalty card identification by card number
            </summary>
            <param name="cardNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentificationDao.GetLoyaltyCardIdentification(System.String)">
            <summary>
            Get the loyalty card identification of a given customer
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentificationDao.GetCustomerIdentifications(System.String)">
            <summary>
            Get customer identifications of a given customer
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentificationDao.GetCustomerPasswordIdentification(System.String)">
            <summary>
            Get  <see cref="T:Retalix.StoreServices.Model.Customer.Identification.ICustomerPasswordIdentification">username password identification</see> of a given customer
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentificationDao.GetCustomerPasswordIdentificationByUserName(System.String)">
            <summary>
            Get  <see cref="T:Retalix.StoreServices.Model.Customer.Identification.ICustomerPasswordIdentification">username password identification</see> of a given customer
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentificationDao.HasUsernamePasswordIdentification(System.String)">
            <summary>
            Check if a given customer id has a username\password identification method
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Identification.ICustomerIdentificationDao.LoadCustomersByLoyalty(System.Collections.Generic.List{System.String})">
            <summary>
            Load Customers by loyalty ID's from the DB
            </summary>
            <param name="loyaltyCardNumberList">ID's of loyalty cards</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Identification.ICustomerOpenIdCredentials">
            <summary>
            Customer OpenID identification credentials
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ICustomerOpenIdCredentials.OpenId">
            <summary>
            Customer ID
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ICustomerOpenIdCredentials.Provider">
            <summary>
            Identification provider
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Identification.ICustomerOpenIdIdentification">
            <summary>
            Customer OpenID identification
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ICustomerOpenIdIdentification.OpenId">
            <summary>
            OpenID ID
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ICustomerOpenIdIdentification.Provider">
            <summary>
            Open ID provider
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Identification.ICustomerPasswordCredentials">
            <summary>
            Customer username and password credentials
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ICustomerPasswordCredentials.Username">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ICustomerPasswordCredentials.Password">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Identification.ICustomerPasswordIdentification">
            <summary>
            Customer username and password identification
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ICustomerPasswordIdentification.Username">
            <summary>
             Unique string which identifies the user
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ICustomerPasswordIdentification.Password">
            <summary>
             Encripted password
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ICustomerPasswordIdentification.DateTime">
            <summary>
             Date and time the password was updated
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Identification.ILoyaltyCardCredentials">
            <summary>
            Loyalty cars <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials">credentials</see>. Used to identify a <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">customer</see> by his loyalty card number.
            </summary>
            <remarks>
            A customer may have numerous identification methods, one if which is a loyalty card. A loyalty card indicates that the customer 
            is <see cref="T:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltySubscription">subscribed</see> to a <see cref="T:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltyProgram">loyalty program</see>.    
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ILoyaltyCardCredentials.LoyaltyCardNumber">
            <summary>
            The loyalty card number which was assigned to the customer for his <see cref="T:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltySubscription">subscription</see>> to a loyalty program.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Identification.ILoyaltyCardIdentification">
            <summary>
             LoyaltyCardIdentification
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ILoyaltyCardIdentification.LoyaltyCardNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ILoyaltyCardIdentification.IssueDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Identification.ILoyaltyCardIdentification.ExpirtaionDate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.IFamilyMemberFactory">
            <summary>
            Familiy member factory
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.IFamilyMemberFactory.CreateFamilyMember">
            <summary>
            Create a new family member
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.IHousehold">
            <summary>
            Household represents a group of customers who enjoy of same benefits.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltySubscriptionFactory">
            <summary>
            Loyalty program subscription factory
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltySubscriptionFactory.Create">
            <summary>
            Create a new loyalty program subscription
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualImage">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualImage.ImageType">
            <summary>
            Gets or sets the club image type.
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Customer.Loyalty.Visual.LoyaltyProgramImageType">Loyalty Program Image Type</see>ImageType</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualImage.Image">
            <summary>
            Gets or sets the Image.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.Visual.LoyaltyProgramImageType">
            <summary>
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Loyalty.Visual.LoyaltyProgramImageType.Big">
            <summary>
             Big image
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Loyalty.Visual.LoyaltyProgramImageType.Small">
            <summary>
             Small image
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisual">
            <summary>
             A visual display of a Loyalty program - It's referred to as "Club" in Loyalty Pro and in Customer Portal
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisual.LoyaltyProgramId">
            <summary>
             The Loyalty program that is featured in the visual entity.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisual.SuggestedLoyaltyProgramIds">
            <summary>
             The other Loyalty programs (ID only) you may like as a result of subscribing to this one.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisual.Descriptions">
            <summary>
            Gets or sets the description.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualDescription">Description data</see>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisual.Images">
            <summary>
            Gets or sets the Images.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualImage">Loyalty program visual image</see>.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualDao">
            <summary>
             Loyalty program visual Dao
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualDao.GetAll">
            <summary>
             Get all the entities - for customer portal usage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualDao.Get(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Get the visuals list by the linked entity ID's.
            </summary>
            <param name="loyaltyProgramIds"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisual})">
            <summary>
             Save one or several entities.
            </summary>
            <param name="entitiesToSave"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisual})">
            <summary>
             Delete one or several entities.
            </summary>
            <param name="entitiesToDelete"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualFactory">
            <summary>
             Creates a Loyalty program visual
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualFactory.Create(System.String)">
            <summary>
             Create Loyalty program visual by the given linked Loyalty program.
            </summary>
            <param name="linkedLoyaltyProgramId">
             The linked loyalty program ID
            </param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualFactory.CreateLoyaltyProgramDescription">
            <summary>
            Creates a single loyalty program visual ad description type.
            </summary>
            <returns>The loyalty program visual ad description<see cref="T:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualDescription">object</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualFactory.CreateLoyaltyProgramImage">
            <summary>
            Creates a single loyalty program visual ad image type.
            </summary>
            <returns>The loyalty program visual ad image<see cref="T:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualImage">object</see>.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualDescription">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualDescription.Section">
            <summary>
             Title/Description/Additional
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.Visual.ILoyaltyProgramVisualDescription.Text">
            <summary>
             Translatable description
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.Visual.LoyaltyProgramVisualDescriptionSection">
            <summary>
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Loyalty.Visual.LoyaltyProgramVisualDescriptionSection.Title">
            <summary>
             Title
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Loyalty.Visual.LoyaltyProgramVisualDescriptionSection.Description">
            <summary>
             Description
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Loyalty.Visual.LoyaltyProgramVisualDescriptionSection.AdditionalInfo">
            <summary>
             Additional info / benefits
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltyProgram">
            <summary>
            A loyalty program is a service provided by the retailer to subscribed (enrolled) customers.
            Loyalty program is usually associated with <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount">customer accounts</see>, such as E-money or points accounts.
            During customer subscription process, new accounts are created for the customer. New accounts types may be 
            added to the program at any time, the loyalty program handles the creation of the new account to customers that 
            are already subscribed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltyProgram.AccountTypes">
            <summary>
            The account types associated with the loyalty program.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltyProgram.Segments">
            <summary>
            Pseudo Tiers
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltyProgramFactory">
            <summary>
            A factory for creating <see cref="T:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltyProgram"/> entities.    
            /// </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltyProgramFactory.Create">
            <summary>
             Create a <see cref="T:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltyProgram"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltySubscription">
            <summary>
            ILoyaltySubscription
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltySubscription.GetSegments">
            <summary>
            Return Segments for them IsMet is true
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltySubscription.Restrictions">
            <summary>
            Customer subscription restrictions regarding withdrawal from <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount"/>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.SubscrptionStatus">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.ISubscription">
            <summary>
            A proof of subscription of a customer to a subscription-service.
            <remarks>
            The concept of subscription-services is broad and covers any service that the retailer offers to the customer; a common example is a loyalty program.
            Loyalty program requires customer registration. The process of registration produces a subscription that is associated with the customer.
            </remarks>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.ISubscription.SubscriptionService">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Customer.ISubscriptionService"/> to which the customer has subscribed. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.ISubscription.Customer">
            <summary>
            The subscribed <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer"/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.ISubscription.EffectiveDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.ISubscription.Status">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Loyalty.ISubscription.LastUpdated">
            <summary>
            
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Customer.Loyalty.ISubscription.OnSubscriptionStatusChanged">
            <summary>
             Occurs after a subscription status has changes
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Loyalty.ISubscriptionServiceDao">
            <summary>
            Represents the data access for subscription service.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.ISubscriptionServiceDao.Get(System.String)">
            <summary>
            Get subscription service by given subscription service identifier.
            </summary>
            <param name="subscriptionServiceId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.ISubscriptionServiceDao.Get(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get subscription services by given subscription service identifiers.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.ISubscriptionServiceDao.GetByType``1">
            <summary>
            Get subscription service by type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.ISubscriptionServiceDao.Save(Retalix.StoreServices.Model.Customer.ISubscriptionService)">
            <summary>
            Save the given subscription service.
            </summary>
            <param name="subscriptionService"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Loyalty.ISubscriptionServiceDao.Delete(Retalix.StoreServices.Model.Customer.ISubscriptionService)">
            <summary>
            Delete the given subscription service.
            </summary>
            <param name="subscriptionService"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.OnlineServices.ICustomerOnlineServiceSubscriptionFactory">
            <summary>
            Customer online service subscription factory
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.OnlineServices.ICustomerOnlineServiceSubscriptionFactory.Create">
            <summary>
            Create a new customer online service subscription
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.OnlineServices.ICustomerOnlineService">
            <summary>
             The Online service (such as Mobile, Portal, any other online service that requires subscription)
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.OnlineServices.ICustomerOnlineServiceFactory">
            <summary>
            A factory for creating <see cref="T:Retalix.StoreServices.Model.Customer.OnlineServices.ICustomerOnlineService"/> entities.    
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.OnlineServices.ICustomerOnlineServiceFactory.Create">
            <summary>
             Create a <see cref="T:Retalix.StoreServices.Model.Customer.OnlineServices.ICustomerOnlineService"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.OnlineServices.IOnlineServiceSubscription">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Person.FamilyMemberTypeEnumeration">
            <summary>
            Defines FamiltyType enum. should be equal to FamilyMemberTypeEnumeration in the contracts
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Person.IFamilyMember">
            <summary>
            Define a family member personal details and relationships to the customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Person.IFamilyMember.RelationType">
            <summary>
            Gets or sets RelationType
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Person.IFamilyMember.Name">
            <summary>
            Gets or sets Name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Person.IFamilyMember.Gender">
            <summary>
            Gets or sets gender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Person.IFamilyMember.DateOfBirth">
            <summary>
            Gets or sets date of birth.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Person.IFamilyMember.RelatedCustomerId">
            <summary>
            Gets or sets related customer Id
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Person.Gender">
            <summary>
            Defines a person gender
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Person.Gender.Unknown">
            <summary>
            The sex of a <see cref="T:Retalix.StoreServices.Model.Customer.Person.IIndividual"/> has not been provided or recorded.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Person.Gender.Male">
            <summary>
            Defines a person as male.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Person.Gender.Female">
            <summary>
            Defines a person as female.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Person.Gender.NoSpecified">
            <summary>
             Indeterminate, i.e. unable to be classified as either male or female.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Person.IIndividual">
            <summary>
            Represents an individual consumer with whom the retailer is doing business.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Person.IIndividual.Salutation">
            <summary>
            Gets or sets person salutation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Person.IIndividual.FirstName">
            <summary>
            Gets or sets person first name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Person.IIndividual.LastName">
            <summary>
            Gets or sets person last name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Person.IIndividual.MiddleName">
            <summary>
            Gets or sets person middle name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Person.IIndividual.CitizenId">
            <summary>
            Gets or sets person citizen id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Person.IIndividual.DateOfBirth">
            <summary>
            Gets or sets person date of birth.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Person.IIndividual.Gender">
            <summary>
            Gets or sets person gender.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Promotion.ICustomerPromotionFactory">
            <summary>
            Customer promotion factory
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Promotion.ICustomerPromotionFactory.Create(System.String)">
            <summary>
            Create a new promotion based on the DB promotion with the given ID
            </summary>
            <param name="promotionId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Promotion.ICustomerPromotionFactory.Create">
            <summary>
            Create a new promotion
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Promotion.ICustomerPromotionFactory.Create(Retalix.StoreServices.Model.Promotion.IPromotion)">
            <summary>
            Create a new promotion based on the given promotion
            </summary>
            <param name="promotion">loaded promotion</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Promotion.ICustomerPromotionFactory.Create(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create new promotions based on the DB promotions with the given IDs
            </summary>
            <param name="promotionIds">existing promotions IDs</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceProgramFactory">
            <summary>
            A factory for creating <see cref="T:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceProgram"/> entities.    
            /// </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceProgramFactory.Create">
            <summary>
             Create <see cref="T:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceProgram"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscriptionFactory">
            <summary>
            Customer's self service subscription factory
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscriptionFactory.Create">
            <summary>
            Create a new customer's self service subscription
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceProgram">
             <summary>
            
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription">
            <summary>
            Define a customer's self service subscription
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription.NumberOfSelfScanTransactions">
            <summary>
            Number Of Self Scan Transactions held by the Customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription.NumberOfSSCTransactionsSinceLastRescan">
            <summary>
            Number Of Self Scan Transactions held by the Customer since the last rescan (full or partial)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription.TrustLevelId">
            <summary>
            The Self Scan Trust id Level of the Customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription.LastSelfScanDate">
            <summary>
            Last Self Scan Transaction Date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription.LastSelfScanTransactionAmount">
            <summary>
            The amount of the last Self Scan Transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription.LastFullRescanDate">
            <summary>
            Date of the last full Rescan applied to a transaction of this customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription.LastFullRescanResult">
            <summary>
            The result of the last full Rescan applied to a transaction of this customer (true = rescan succeeded)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription.LastPartialRescanDate">
            <summary>
            Date of the last partial Rescan applied to a transaction of this customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription.LastPartialRescanResult">
            <summary>
            The result of the last partial Rescan applied to a transaction of this customer (true = rescan succeeded)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription.SuspensionReason">
            <summary>
            The reason for the Customer Suspension (in case that IsSuspended is true)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription.ForceScan">
            <summary>
            Type of the Rescan forced to a transaction of this customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription.TotalNumberOfFullRescans">
            <summary>
            Number of transaction which had a full rescan executed of this customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.SelfService.ISelfServiceSubscription.TotalNumberOfPartialRescans">
            <summary>
            Number of transaction which had a partial rescan executed of this customer
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Subscription.ISubscriptionDao">
            <summary>
            Represents the data access for customer subscription.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Subscription.ISubscriptionDao.Get(System.String)">
            <summary>
            Get customer subscriptions
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Subscription.ISubscriptionDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Loyalty.ISubscription})">
            <summary>
            Save customer subscriptions
            </summary>
            <param name="subscriptions"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Subscription.ISubscriptionDao.Add(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Loyalty.ISubscription})">
            <summary>
            Add customer subscriptions
            </summary>
            <param name="subscriptions"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Subscription.ISubscriptionDao.Update(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Loyalty.ISubscription})">
            <summary>
            Update customer subscriptions
            </summary>
            <param name="subscriptions"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Subscription.ISubscriptionDao.IsExists(Retalix.StoreServices.Model.Customer.Loyalty.ISubscription)">
            <summary>
            Check whether the given subscription exists.
            </summary>
            <param name="subscription"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.PasswordReset.ICustomerResetPassword">
            <summary>
             Define methods for processing a customer's request to reset his/her password
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.PasswordReset.ICustomerResetPassword.RequestPasswordReset(Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
             Request to start the process of reset a customer's password
            </summary>
            <param name="customer"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.PasswordReset.ICustomerResetPassword.ResetPassword(System.String,System.String)">
            <summary>
             Reset a customer's password to a new password pending the validity of the provided token
            </summary>
            <param name="tokenId"></param>
            <param name="newPassword"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Wallet.ICustomerWallet">
            <summary>
            Define a customer's wallet containing his/her payment means
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Customer.Wallet.ICustomerWallet.PaymentCardAdding">
            <summary>
             Occurs after a Card has added to the customer.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Customer.Wallet.ICustomerWallet.PaymentCardAdded">
            <summary>
             Occurs before a Card has added to the customer.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Customer.Wallet.ICustomerWallet.PaymentCardUpdating">
            <summary>
             Occurs after a Card has updating to the customer.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Customer.Wallet.ICustomerWallet.PaymentCardUpdated">
            <summary>
             Occurs before a Card has updated to the customer.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Customer.Wallet.ICustomerWallet.PaymentCardAddingFailed">
            <summary>
            Occurs after a Card has failed to the customer.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Wallet.ICustomerWallet.AddPaymentCard(Retalix.StoreServices.Model.Customer.ICustomer,Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDetails)">
            <summary>
            Add a new payment mean to the customer's wallet
            </summary>
            <param name="customer"> </param>
            <param name="creditCardData"> </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Wallet.ICustomerWallet.UpdatePaymentCard(Retalix.StoreServices.Model.Customer.ICustomer,Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDetails)">
            <summary>
            Update a payment mean to the customer's wallet
            </summary>
            <remarks>
            Only Friendly name and default status can be updated
            </remarks>
            <param name="customer"> </param>
            <param name="paymentMeanDetails"> </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Wallet.ICustomerWallet.GetPaymentCards(System.String)">
            <summary>
            Get all payment cards associated with a given customer
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Wallet.ICustomerWallet.RemovePaymentCard(Retalix.StoreServices.Model.Customer.ICustomer,System.String)">
            <summary>
            Remove a payment card from the customer's wallet
            </summary>
            <param name="customer"></param>
            <param name="cardId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Wallet.ICustomerWallet.GetCardByCardId(System.String)">
            <summary>
             Get a payment card by card id;
            </summary>
            <param name="cardId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Wallet.ICreditCardData">
            <summary>
            Represents a credit card
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Wallet.ICreditCardData.ExpiryDateMonth">
            <summary>
            Card expiration month
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Wallet.ICreditCardData.ExpiryDateYear">
            <summary>
            Card expiration year
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Wallet.ICreditCardData.CardNumber">
            <summary>
            credit card number
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Wallet.ICreditCardValidator">
            <summary>
            Validates that a given credit card will be saved if it fits to validation rules in implementing class
            </summary>
            <remarks>
            When adding a customer payment mean, certain validation algorithms can be employed. 
            An implementation of this interface is injected, and used in the CustomerPaymentMeanAdd service.
            <b/>
            As an extension point, <see cref="T:Retalix.StoreServices.Model.Customer.Wallet.IProviderCreditCardValidator">IProviderCreditCardValidator</see> is provided 
            by injection and enables using extended validations.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Wallet.ICreditCardValidator.ValidateCard(Retalix.StoreServices.Model.Customer.Wallet.ICreditCardData)">
            <summary>
            Employs validation algorithm(s) to inspect card data before it is allowed to be saved for a customer.
            </summary>
            <remarks>
            Prior to associating the payment mean to a customer in the token server, the PAN and expiration date 
            can be validated by this method. 
            <b/>
            The default card validator checks the card had not yet expired and the PAN is run through a data pattern decoder 
            to make sure one of the data patterns configured recognizes it as a valid PAN, i.e. decodes it to Tender data.
            <b/>
            An exception is expected if the payment mean fails validation.
            </remarks>
            <param name="creditCardData">Represents a payment mean (card).</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Wallet.IProviderCreditCardValidator">
            <summary>
            Provides an extension point for additional options to validate new payment means (cards).
            </summary>
            <remarks>
            Provided to ICreditCardValidator by injection.
            </remarks>
            <seealso cref="T:Retalix.StoreServices.Model.Customer.Wallet.ICreditCardValidator"/>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Wallet.IProviderCreditCardValidator.ValidateCard(Retalix.StoreServices.Model.Customer.Wallet.ICreditCardData)">
            <summary>
            Provides additional validation in addition to the validation that is already done in ICreditCardValidator.
            </summary>
            <remarks>
            The default implementation of ICreditCardValidator calls this method when its own ValidateCard method is called. 
            An exception is expected if the payment mean (card) fails validation.
            </remarks>
            <param name="creditCardData"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.IAffiliation">
            <summary>
            Any relationship between customers is expressed by an Affiliation. The affiliation is a directed relationship (direction is important), the affiliation says something about 
            a customer and how he is related to other customers (the affiliated customers). The business meaning of the affiliation is defined by the implementation.
            </summary>
            <remarks>
            Common affiliation examples are: 
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.IAffiliation.Customer">
            <summary>
            The customer that this affiliation defines. 
            <remarks>
            An affiliation is a relationship with direction; the Customer is the origin, that is in a relationship with the affiliated customers. 
            This does not necessarily mean that any of the affiliated customers has the same affiliation with the Customer.
            </remarks>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.IAffiliation.AffiliatedCustomer">
            <summary>
            The affiliated customer that are in a relationship with the Customer (defined by the Customer attribute)
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.IAnonymousCustomer">
            <summary>
             Anonymous <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">customer</see> is an <see cref="T:Retalix.StoreServices.Model.Customer.Person.IIndividual">individual</see> which perform a purchase in a scope 
             of a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer</see> that has not yet identified himself by any mean.
            </summary>
             <remarks>
             An anonymous customer may be created by calling CreateAnonymous on the <see cref="T:Retalix.StoreServices.Model.Customer.ICustomerFactory">customer factory</see>.
             </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ICdmSessionProvider`1">
            <summary>
             Providing CDM database session.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICdmSessionProvider`1.GetSession">
            <summary>
            Get a session to CDM database
            </summary>
            <returns>A session to CDM database.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICdmSessionProvider`1.NotifyExtensionsOnSave``1(``0)">
            <summary>
            Notify Extensions on save
            </summary>        
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICdmSessionProvider`1.NotifyExtensionsOnLoad``1(``0)">
            <summary>
            Notify extensions on entity load.
            </summary>
            <param name="entity"></param>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICdmSessionProvider`1.NotifyExtensionsOnDelete``1(``0)">
            <summary>
            Notify extensions on entity delete.
            </summary>
            <param name="entity"></param>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ICustomer">
            <summary>
            Represents a customer of the retailer.
            <remarks>
            Customer can be uniquely identified as a person, collection of persons, or organization. 
            A customer purchases, may purchase, or did purchase goods and or services from a retailer. 
            </remarks>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomer.CustomerExternalIdentifier">
            <summary>
            Gets the unique external identification of the customer in the system.
            for exsample loyalty program
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the unique identification of the customer in the system.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomer.Name">
            <summary>
            Represents the customer name (either individual last name + first name, organization name etc)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomer.Contacts">
            <summary>
            Get a container of contacts that can be used to communicate with the person. 
            <remarks>
            R10 core implementation contains hone phone, mobile phone, email and addresses.
            </remarks>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomer.Subscriptions">
            <summary>
             Customer's subscriptions.
             <remarks>
             A <see cref="T:Retalix.StoreServices.Model.Customer.Loyalty.ISubscription">subscription</see> represent the fact that the customer subscribed to a service (for example: enrolled to a loyalty program)
             having a subscription may give some benefits to the customer, such as loyalty rewards (rewards that are given only to customers which have a loyalty program subscription).
             For more info, see <see cref="T:Retalix.StoreServices.Model.Customer.Loyalty.ISubscription"/>        
             </remarks>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomer.GetAccountByType(System.String)">
            <summary>
             Get customer account by type. 
            </summary>
             <remarks>
             When a customer registers to a service, he may be eligible for one or more customer accounts. For example, as part of registering to a loyalty program, the customer is associated
             with customer accounts into which he can start accumulate a balance (see <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount"/>
             </remarks>
            <param name="accountTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomer.GetCustomerAccounts">
            <summary>
            Get all customer account (personal and accounts to which the customer has access through affiliations)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomer.PersonalAccounts">
            <summary>
            Customer's personal accounts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomer.GetSubscriptions``1">
            <summary>
            Get all of the customer's subscriptions by a given subscriptionType.
            </summary>
            <remarks>
            Common example is a promotion condition that is eligible only for loyalty customers. The condition checks if the customer has a subscription to the specified loyalty program id. 
            </remarks>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomer.CreationDate">
            <summary>
                The customer creation date.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomer.GetAffiliatedCustomers">
            <summary>
            Get all customers with which this customer has an affiliation with.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomer.Segments">
            <summary>
            Customer's personal and shared segments.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomer.GetSegments">
            <summary>
            Get personal and shared customer and his household segments.
            </summary>
            /// <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomer.RegisteredPromotions">
            <summary>
            Customer's registered promotions.
            </summary>
            <remarks>
            The listed promotions were associated with the customer by online registrations (such as retailer portal)
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomer.GetRegisteredPromotions">
            <summary>
            Get all customer registered promotions (personal or promotions to which the customer has access through affiliated household)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomer.Identifications">
            <summary>
            Customer's Identifications.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomer.Affiliations">
            <summary>
            Customer's Affiliations.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomer.Preferences">
            <summary>
            Customer's preferences.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomer.ShareTheSameHousehold(System.String)">
            <summary>
            Whether the given customer is sharing the same household.
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomer.CustomerType">
            <summary>
            Customer types.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ICustomer.LastUpdated">
            <summary>
            Gets Last Modified Date of the customer record. Each time the customer is updated, the LastUpdated gets new value.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ICustomerAuthenticator">
            <summary>
             Provider of customer information 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerAuthenticator.GetCustomer(Retalix.StoreServices.Model.Selling.Customer.CustomerInfo)">
            <summary>
             Get customer by identification
            </summary>
             <param name="customerInfo">
             <see cref="T:Retalix.StoreServices.Model.Selling.Customer.CustomerInfo"/>
             </param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ICustomerOfflineAuthenticator">
            <summary>
             Offline provider for customer.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerOfflineAuthenticator.GetCustomer(Retalix.StoreServices.Model.Selling.Customer.CustomerInfo)">
            <summary>
             Get customer by identification
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ICustomerDao">
            <summary>
             Represents the data access for customers.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerDao.Get(System.Collections.Generic.IEnumerable{System.String},Retalix.StoreServices.Model.Customer.SearchCriteria.CustomerEagerLoadingClassification)">
            <summary>
            Get all customer identified by a given list of customer internal ids
            </summary>
            <param name="customerIds"></param>
            <param name="classification"><see cref="T:Retalix.StoreServices.Model.Customer.SearchCriteria.CustomerEagerLoadingClassification"/></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerDao.GetByCardNumbers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Get customers identified by a given list of card numbers
            </summary>
            <param name="cardNumbers"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerDao.Get(System.String)">
            <summary>
            Get a specific customer by his internal id
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerDao.GetByExternalLoyaltyMemberId(System.String)">
            <summary>
            </summary>
            <param name="externalLoyaltyMemberId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.ICustomer})">
            <summary>
            Save customers
            </summary>
            <param name="customers"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerDao.Add(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.ICustomer})">
            <summary>
            Add customers
            </summary>
            <param name="customers"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerDao.Update(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.ICustomer})">
            <summary>
            Update customers
            </summary>
            <param name="customers"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.ICustomer})">
            <summary>
            Delete customers
            </summary>
            <param name="customers"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerDao.GetHashCode">
            <summary>
            this is a bug fix - once the token server sends request to external source, Castle tries to dispose it using GetHashCode default function which must be decleared.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerDao.GetByCardNumber(System.String)">
            <summary>
            
            </summary>
            <param name="cardNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerDao.IsCustomerExists(System.String)">
            <summary>
            Check if the given customer identifier exist.
            </summary>
            <returns>
            True whether customer exists, otherwise false.
            </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ICustomerFactory">
            <summary>
            An abstract factory for creating new <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer"></see>.   
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerFactory.CreateAnonymous">
            <summary>
             Creates a new anonymous customer
            </summary>
             <returns>The corresponding <see cref="T:Retalix.StoreServices.Model.Customer.IAnonymousCustomer"></see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerFactory.CreateIndividual(System.String)">
            <summary>
             Create an individual customer
            </summary>
             <param name="customerId">The customerId unique id.</param>
             <returns>The corresponding <see cref="T:Retalix.StoreServices.Model.Customer.Person.IIndividual"></see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerFactory.CreateHousehold(System.String)">
            <summary>
             Create a Household
            </summary>
            <param name="customerId">The customerId unique id.</param>
            <returns>The corresponding <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer"></see>.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ICustomerIdGenerator">
            <summary>
             Customer id generator
            </summary> 
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ICustomerIdGenerator.Generate">
            <summary>
             Generate customer id
            </summary>
            <returns>Customer id</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ISubscriptionService">
            <summary>
            A Subscription Service is any service that requires a subscription.
            Examples of subscription services may be: loyalty program, self scan program, online services such as mobile shopper and portal.
            </summary>
            <remarks>
            A subscription service may have terms and conditions that should be validated before accepting a customer subscription.
            </remarks>
        </member>
        <member name="E:Retalix.StoreServices.Model.Customer.ISubscriptionService.OnCustomerSubscribed">
            <summary>
             Occurs after a customer has subscribed to the service.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ISubscriptionService.ExternalId">
            <summary>
            A unique service identifier (can be considered as the service name, examples: 'Self scan', 'Loyalty Program', 'Whiskey Club')
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ISubscriptionService.Subscribe(Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
            Subscribe a customer to the service
            </summary>
            <remarks>
            If there are any restrictions defined for the service, they are enforced as part of the Subscription process. For example: the customer should spend at least
            as certain amount in the store before being eligible for the service.
            </remarks>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPayment">
            <summary>
            Represents 'PayByPoints' payment entity.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPayment.GetPaymentTerms(Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
             Get payment terms for pay by points payment
            </summary>
            <param name="requestedAmount"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPayment.Pay(Retalix.StoreServices.Model.Selling.CustomerPayment.Tender)">
            <summary>
            Pay with points(points redemption).
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPayment.PaymentTermAdded">
            <summary>
            Occurs after payment term was calculated.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPayment.PaymentAdded">
            <summary>
            Occurs after payment was calculated.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPaymentDao">
            <summary>
            Repository for 'Pay by Points' payments (relevant only for transaction which are in-progress).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPaymentDao.Get(System.String,System.String,System.Int64)">
            <summary>
            Get specific payment by customer account, transactionId and tender sequence number)
            </summary>
            <param name="customerGroupId">
            Customer group identifier.
            </param>
            <param name="transactionId">
            Unique transaction identifier.
            </param>
            <param name="tenderSequenceNumber">
            Tender sequence in the transaction.
            </param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPaymentDao.Sum(System.String)">
            <summary>
             Get the total points by given customer account.
            </summary>
            <param name="customerGroupId">
            Customer group identifier.
            </param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPaymentDao.Sum(System.String,System.String)">
            <summary>
            Get the total points of specific transaction by given customer account.
            </summary>
            <param name="customerGroupId">
            Customer group identifier.
            </param>
            <param name="transactionId">
            Unique transaction identifier
            </param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPaymentDao.Save(Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPayment)">
            <summary>
            Save payment.
            </summary>
            <param name="payByPointsPayment">
            <see cref="T:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPayment"/>
            </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPaymentDao.Delete(Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPayment)">
            <summary>
             Delete payment.
            </summary>
            <param name="payByPointsPayment">
            <see cref="T:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPayment"/>
            </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPaymentDao.Delete(System.String,System.String)">
            <summary>
            Delete transaction payments of given customer account.
            </summary>
            <param name="customerGroupId">
            Customer group identifier.
            </param>
            <param name="transactionId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsPaymentDao.Delete(System.String)">
            <summary>
            
            </summary>
            <param name="transactionId"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsTenderInfo">
            <summary>
            Holds all the necessary information which relevant to pay by points tender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsTenderInfo.Balance">
            <summary>
            Current balance
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsTenderInfo.MaxRedeemptionAmount">
            <summary>
            The maximum number of points which can be redeemed in transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.PayByPoints.IPayByPointsTenderInfo.CustomerAccountId">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.PayByPoints.IPointsAsset">
            <summary>
            Reflects points worth.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.PayByPoints.IPointsAsset.Value">
            <summary>
            Points amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.PayByPoints.IPointsAsset.MonetaryValue">
            <summary>
            Points monetary value.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Payment.ICreditCardType">
            <summary>
             Card type entity
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICreditCardType.Id">
            <summary>
             external id of Card type entity
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICreditCardType.Description">
            <summary>
             description of Card type entity
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICreditCardType.Image">
            <summary>
             image of credit card type
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Payment.ICreditCardTypeDao">
            <summary>
             Represents an entity which is responsible to store and retrieve <see cref="T:Retalix.StoreServices.Model.Customer.Payment.ICreditCardType">ICreditCardType</see> in the persistent storage.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Payment.ICreditCardTypeDao.SaveOrUpdate(Retalix.StoreServices.Model.Customer.Payment.ICreditCardType)">
            <summary>
             save or update a new/existing Credit Card Type type
            </summary>
            <param name="creditCardType"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Payment.ICreditCardTypeDao.Get(System.String)">
            <summary>
             get method for existing Credit Card Type type
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Payment.ICreditCardTypeDao.GetAll">
            <summary>
              get all method for existing Credit Card Type types
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Payment.ICreditCardTypeDao.Delete(Retalix.StoreServices.Model.Customer.Payment.ICreditCardType)">
            <summary>
            
            </summary>
            <param name="creditCardType"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Payment.ICreditCardTypeFactory">
            <summary>
             factory to create new credit card type
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Payment.ICreditCardTypeFactory.Create(System.String)">
            <summary>
             /// factory method to create new credit card type gets an id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDetails">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDetails.CardType">
            <summary>
            credit card type to gets and sets the card type e.g: visa, American express etc..
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDetails.CardNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDetails.FreindlyName">
            <summary>
             Description of the payment mean for customer selection
            </summary>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDetails.ExpirationDate">
            <summary>
            property that  set and get the expiration date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDetails.IsDefault">
            <summary>
            property that  set and get if the card is default or not
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMean">
            <summary>
             credit card entity
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMean.CustomerId">
            <summary>
             this property gets and sets represent the customerId of the card owner
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMean.Type">
            <summary>
            credit card type to gets and sets the card type e.g: visa, American express etc..
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMean.FreindlyName">
            <summary>
             Description of the payment mean for customer selection
            </summary>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMean.Last4Digits">
            <summary>
             the last 4 digits of the credit card
            </summary>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMean.LongTermToken">
            <summary>
            property that  gets and sets the long ter token of the card owner
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMean.IsDefault">
            <summary>
            property that  indicates if this card is default or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMean.ExperationMonth">
            <summary>
            property that  set and get the expiration month
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMean.ExperationYear">
            <summary>
            property that  set and get the expiration Year
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMean.PaymentCardId">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDao">
            <summary>
             Represents an entity which is responsible to store and retrieve <see cref="T:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMean">ICustomerPaymentMean</see> in the persistent storage.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDao.SaveOrUpdate(Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMean)">
            <summary>
            </summary>
            <param name="customerPaymentMean"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDao.GetAll">
            <summary>
              This function retrieve all the payment means
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDao.GetCardByCustomerIdAndLongTermToken(System.String,System.String)">
            <summary>
              This function retrieve payment mean by customerId and longTermToken
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDao.GetCardsByCustomerId(System.String)">
            <summary>
            
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDao.GetCardByCardId(System.String)">
            <summary>
              This function Gets Card by CardId
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMeanDao.Delete(Retalix.StoreServices.Model.Customer.Payment.ICustomerPaymentMean)">
            <summary>
              This function remove te actual Card
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ShoppingList.Exceptions.ShoppingListLineNotFoundException">
            <summary>
            Thrown if no valid type is found
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ShoppingList.Exceptions.ShoppingListLineNotFoundException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ShoppingList.Exceptions.ShoppingListLineTypeNotFoundException">
            <summary>
            Thrown if no valid type is found
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ShoppingList.Exceptions.ShoppingListLineTypeNotFoundException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ShoppingList.Exceptions.ShoppingListNotFoundException">
            <summary>
            Thrown if no valid shoppingList is found
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ShoppingList.Exceptions.ShoppingListNotFoundException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ShoppingList.Exceptions.ShoppingListUnauthorizedAction">
            <summary>
            Thrown if User tries to manipulate list which does not belong to him
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ShoppingList.Exceptions.ShoppingListUnauthorizedAction.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingList">
            <summary>
            Represents a shopping list.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingList.Id">
            <summary>
            Gets the unique external identification of the shoppingList  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingList.Name">
            <summary>
            Represents the name the client has given to this list
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingList.ViewOrder">
            <summary>
            Represents the method to order items in the list
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the unique identification of the customer in the system.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingList.LastModifiedDate">
            <summary>
            Last modification date of the list
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the unique identification of the customer in the system.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingList.Lines">
            <summary>
            Gets the unique identification of the customer in the system.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the unique identification of the customer in the system.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingList.CustomerId">
            <summary>
            Represents the CustomerId
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListDao">
            <summary>
             Represents the data access for ShoppingList.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListDao.AddOrUpdate(Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingList)">
            <summary>
            Adds a shopping list to Database
            </summary>
            <param name="shoppingList"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListDao.Delete(Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingList)">
            <summary>
            Delete existing shoppingList
            </summary>
            <param name="shoppingList"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListDao.GetByCustomerId(System.String)">
            <summary>
            Returns all existing shopping list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListDao.GetSpecific(Retalix.StoreServices.Model.Customer.ShoppingList.ShoppingListCriteria)">
            <summary>
            Returns existing shopping list
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListFactory">
            <summary>
            Factory for creating shopping Lists
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListFactory.CreateShoppingList(System.String)">
            <summary>
            Generate new shoppingList
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListFactory.CreateShoppingList(System.Guid,System.String)">
            <summary>
            Generate new shoppingList
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListLine">
            <summary>
            Represents a line in shopping list.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListLine.Id">
            <summary>
            Represents the line id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListLine.Quantity">
            <summary>
            Represents the quantity of item in the line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListLine.ShoppingList">
            <summary>
            Gets the unique ShoppingListId of the Parent
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListLine.Sequence">
            <summary>
            Represents the ordered list
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListLineFactory">
            <summary>
            Factory for creating shopping list items
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.ShoppingList.IShoppingListLineFactory.CreateShoppingListLine(System.String)">
            <summary>
            Generate new line in shoppingList
            </summary>
            <param name="lineType">Represents the line type: Promotion, free text or Product </param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.ShoppingList.ShoppingListCriteria">
            <summary>
            Defines a set of criteria by which shoppingList can be quried with
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ShoppingList.ShoppingListCriteria.CustomerId">
            <summary>
            Gets or sets the CustomerId
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.ShoppingList.ShoppingListCriteria.ShoppingListId">
            <summary>
            Gets or sets the ShoppingListId
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.DMS.Versioning.IComponentInfo">
            <summary>
             Installed R10 component info which contains the version and other properties.
            </summary>        
        </member>
        <member name="P:Retalix.StoreServices.Model.DMS.Versioning.IComponentInfo.ComponentName">
            <summary>
             Gets and sets the name of the component that was installed on the server.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.DMS.Versioning.IComponentInfo.Version">
            <summary>
             Gets and sets the version of the component that was installed on the server.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.DMS.Versioning.IComponentInfo.LastUpdateTime">
            <summary>
             Gets and sets the last update time of this component.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.DMS.Versioning.IServerComponentInfo">
            <summary>
             Server Component version data
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.DMS.Versioning.IServerComponentInfo.ServerGuid">
            <summary>
             Guid of server data belong to
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.DMS.Versioning.IServerComponentsInfoDao">
            <summary>
             Interface to deal with database ServerComponentsInfo representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.DMS.Versioning.IServerComponentsInfoDao.GetCurrentServerComponentsInfo">
            <summary>
             Return collection of ServerComponentsInfo registered for current server
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.DMS.Versioning.IServerComponentsInfoDao.GetServerComponentsInfoByServerGuid(System.Guid)">
            <summary>
             Return collection of ServerComponentsInfo registered for server with serverGuid Guid
            </summary>
            <param name="serverGuid">Guid of target server</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.DMS.Versioning.IServerComponentsInfoDao.SaveOrUpdate(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.DMS.Versioning.IServerComponentInfo})">
            <summary>
             SaveOrUpdate Return collection of ServerComponentsInfo
             </summary>
            <param name="serverComponentInfos">collection of ServerComponentsInfo</param>
             <returns>the number of rows changed</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.DMS.Versioning.IServerComponentsInfoDao.GetServerComponentsInfoByServerGuidAndComponentName(System.Guid,System.String)">
            <summary>
             Look for existed component inside DB
            </summary>
            <param name="serverGuid"></param>
            <param name="componentName"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.DMS.Versioning.IServerComponentsInfoDao.Delete(System.Guid)">
            <summary>
            
            </summary>
            <param name="nodeId"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ControlTransaction.IControlTransactionLogDocumentCreationVisitor">
            <summary>
            Allow different domains to participate in the Control-Transaction-Log-Document building process
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransaction.IControlTransactionLogDocumentCreationVisitor.Visit(Retalix.StoreServices.Model.Document.IControlTransaction,Retalix.StoreServices.Model.Document.ControlTransaction.IControlTransactionLogDocumentWriter)">
            <summary>
            Allow writing to the log using the provided writer
            </summary>
            <param name="controlTransaction">The control transaction to write the log for</param>
            <param name="writer">The writer that allow writing of the log</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ControlTransaction.IControlTransactionLogDocumentWriter">
            <summary>
             Allow manipulation of the Log Document content during its creation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.IControlTransactionLogDocumentWriter.TransactionExternalId">
            <summary>
            Key for external systems
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransaction.IControlTransactionLogDocumentWriter.UpdateTransactionExternalId(System.String)">
            <summary>
             Set the Transaction External Id
            </summary>
            <param name="transactionExternalId"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.IControlTransactionLogDocumentWriter.XmlContent">
            <summary>
            The XML content that was written until now.
            Notice that it might not be valid.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransaction.IControlTransactionLogDocumentWriter.UpdateXmlDocument(System.String)">
            <summary>
            Set the content of the xml document.
            </summary>
            <param name="xmlContent">The new xml content to set</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.IProductAvailabilityControlTransaction.RetailSegmentId">
            <summary>
            The retail segment where the control transaction is created
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.IProductAvailabilityControlTransaction.ProductAvailabilityStatuses">
            <summary>
            Product list which had an availability update
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.IProductAvailabilityControlTransaction.IsAutoGenerated">
            <summary>
            True if log generated by automatic job
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ControlTransaction.PriceMaintenanceControlTransactionEntry">
            <summary>
            Price maintenace for change price
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.PriceMaintenanceControlTransactionEntry.ItemType">
            <summary>
            item type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.PriceMaintenanceControlTransactionEntry.ItemValue">
            <summary>
            item value (barcode)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.PriceMaintenanceControlTransactionEntry.OldCurency">
            <summary>
            old curency
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.PriceMaintenanceControlTransactionEntry.OldValue">
            <summary>
             old price
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.PriceMaintenanceControlTransactionEntry.OldUnitOfMeasureCode">
            <summary>
            old unit of measure
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.PriceMaintenanceControlTransactionEntry.OldValueTypeCode">
            <summary>
            old code type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.PriceMaintenanceControlTransactionEntry.NewCurency">
            <summary>
            new curency
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.PriceMaintenanceControlTransactionEntry.NewValue">
            <summary>
            new price
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.PriceMaintenanceControlTransactionEntry.NewUnitOfMeasureCode">
            <summary>
            new unit of measure
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransaction.PriceMaintenanceControlTransactionEntry.NewValueTypeCode">
            <summary>
            new code type
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptSplitTicketPromotionsStrategy">
            <summary>
            provides correct behaviour in case of required to split ticket promotions and print them with triggered items.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.ITdmConfigurationParametersValidator.Validate(System.Collections.Generic.IList{Retalix.StoreServices.Model.Document.TDM.TdmConfigurationModel})">
            <summary>
            Validates parameters before saving in the TDM Database
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.IRawDocument">
            <summary>
            This interface represents the raw data that can be retrived from the TDM to be used
            in creating transaction log documents.
            The data is the raw data and needs to be converted to the transaction log document
            and thus it is not derived from IDocument
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.TranDate">
            <summary>
            Gets the transaction date and time
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.EndDateTime">
            <summary>
            Gets the transaction completion date and time
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.BusinessDate">
            <summary>
            Gets the business date to which the transaction relates
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.ActivityName">
            <summary>
            Gets the activity that created this transaction (cash office)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.SourceAccountName">
            <summary>
            Gets the sources account for the (cash office) transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.TargetAccountName">
            <summary>
            Gets the target account of (cash office) transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.UserName">
            <summary>
            Gets the user name that perfromed the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.TranId">
            <summary>
            Gets the transaction ID
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.Reference">
            <summary>
            Gets the reference ID set on the (cash office) transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.OverShort">
            <summary>
            Gets the amount for over/short for this (cash office) transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.IsUpToDate">
            <summary>
            Gets the status of over/short for this (cash office) transaction, if it was synchronised to HQ
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.TotalAmount">
            <summary>
            Gets the amount of the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.CurrencyCode">
            <summary>
            Gets the currency code of the currency used in this transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.TouchPointId">
            <summary>
            Gets the touchpoint ID in which the transaction occured
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IRawDocument.LogText">
            <summary>
            Gets the contents of the transaction's document.
            Contents is in XML format.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmDatabaseFactory">
            <summary>
            TDM database instances factory.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmDatabaseFactory.Create(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates new TDM database instance.
            </summary>
            <param name="name">The TDM database name.</param>
            <param name="serverName">The server name.</param>
            <param name="loginName">The user name that should be used to connect the TDM database.</param>
            <param name="loginPassword">The password that should be used to connect the TDM database.</param>
            <param name="businessUnits">List of the business units that are connected to the TDM database.</param>
            <returns>The TDM database instance.</returns>       
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmConfigurationDao">
            <summary>
             Data access service for all TDM configuration.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmConfigurationDao.GetTdmDataBase(System.String,System.String)">
            <summary>
            Get a TDM database properties according to the database name and server
            </summary>
            <param name="name">the name of the database</param>
            <param name="server">the server where the database is located</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmConfigurationDao.GetAllTdmDatabases">
            <summary>
             Get all the TDM databases properties in descending sort order according to the start date of the TDM database.
            </summary>
            <returns>List of TDM databases in descending sort order according to the start date</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmConfigurationDao.SaveTdmDatabase(Retalix.StoreServices.Model.Document.TDM.Managment.ITdmDatabase)">
            <summary>
             Save a new TDM database properties or update an existing one.
            </summary>
            <param name="tdmDatabase"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmConfigurationDao.GetAllParameters">
            <summary>
            Get TDM retention policy configuration parameters 
            </summary>
            <returns>Collection of TDM retention policy defined parameters, required for TDM maintenance</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmConfigurationDao.SaveParameter(Retalix.StoreServices.Model.Document.TDM.TdmConfigurationModel)">
            <summary>
            Create or Update parameter in the TDM retention policy configuration table
            </summary>
            <param name="tdmConfigurationParameter">Name and Value with optional description contain a definition for TDM retention policy required parameters</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmDatabase">
            <summary>
             Properties of a TDM database
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmDatabase.Id">
            <summary>
            The id of the database
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmDatabase.Name">
            <summary>
             Name of the database
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmDatabase.ServerName">
            <summary>
             The server name where the database is installed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmDatabase.LoginName">
            <summary>
             Login user name of the database.
             Used only for tests!!
             When the value is null, the application uses windows authentication.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmDatabase.LoginPassword">
            <summary>
             Login password of the database.
             Used only for tests!!
             When the value is null, the application uses windows authentication.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmDatabase.Version">
            <summary>
             Version of the database.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmDatabase.BusinessUnits">
            <summary>
            a list of the business units that are connected to this tdm database
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmSessionsManager">
            <summary>
             Responsible for containing and managing all the TDM sessions.
            </summary>    
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmSessionsManager.CompleteSession``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
             Commit all transactions of TDM sessions.
             <typeparam name="TSession">Type of session</typeparam>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmSessionsManager.RollbackSessions``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>.
             Rollback all transactions of TDM sessions.
             <typeparam name="TSession">Type of session</typeparam>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmSessionsManager.GetSessions``1(System.Collections.Generic.IDictionary{System.String,``0},Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWorkContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Get all the sessions of the TDM databases, which hold TLogs according to input business units.
             If businessUnitIds list is empty, a default TDM session will be returned.
            </summary>
            <param name="businessUnitToSessionDict">BusinessUnit to session dictionary</param>
            <param name="unitOfWorkContext">The context of Unit of Work</param>
            <param name="businessUnitIds">a list of the business units for which a corresponding TDM session is required.</param>
            <typeparam name="TSession">Type of session</typeparam>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmSessionsManager.GetAllSessions``1(System.Collections.Generic.IDictionary{System.String,``0},Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWorkContext)">
            <summary>
             Get all the sessions of all the TDM databases
            </summary>
            <typeparam name="TSession">Type of session</typeparam>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmSessionsProvider`1">
            <summary>
             Providing TDM database sessions for all the TDM databases.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmSessionsProvider`1.GetSessions(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Get all the sessions of the TDM databases, which hold TLogs according to input business unit.
             If business unit ids collection is empty, a default TDM session will be returned.
            </summary>
            <returns>List of sessions in descending sort order according to the start date of the TDM database</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.Managment.ITdmSessionsProvider`1.GetAllSessions">
            <summary>
             Get all sessions of the TDM databases
            </summary>
            <returns>List of sessions in descending sort order according to the start date of the TDM database</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto">
            <summary>
            Contains data to be saved in a header storage that can be used for display transaction lists.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.Ik">
            <summary>
            Gets or Sets the ik of the transaction this header is related to.
            This property is automatically set during the save process.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.TranDate">
            <summary>
            Gets or Sets the transaction date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.UserName">
            <summary>
            Gets or Sets the user that made the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.CashierId">
            <summary>
            Gets or Sets the user that made the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.TotalAmount">
            <summary>
            Gets or Sets the transaction amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.TranType">
            <summary>
            Gets or Sets the transaction type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.TransactionTypeName">
            <summary>
            Gets or Sets the transaction type name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.BusinessDate">
            <summary>
            Gets or Sets the business date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.ActivityType">
            <summary>
            Gets or Sets the activity type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.SourceAccount">
            <summary>
            Gets or Sets the source account
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.TargetAccount">
            <summary>
            Gets or Sets the target account
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.Reference">
            <summary>
            Gets or Sets the transaction reference number
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.OverShort">
            <summary>
            Gets or Sets the over short
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.IsUpToDate">
            <summary>
            Gets or Sets the over short for this (cash office) transaction, if it was synchronized to HQ
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.TranStatus">
            <summary>
            Gets or Sets the TranStatus
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.CurrencyCode">
            <summary>
            Gets or Sets the CurrencyCode
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.StoreName">
            <summary>
            Gets or Sets the StoreName
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.ShiftStartDate">
            <summary>
            Gets or Sets shift start nominal date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.TransactionDisplayHeaderDto.ShiftStartOffset">
            <summary>
            Gets or Sets shift start offset value in ticks
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.ITdmRetransmitLookup">
            <summary>
            Responsible to provide <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument"> document</see> lookup functionality on local server.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.ITdmRetransmitLookup.Search(Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.IExtensionDataSearchCriteria})">
            <summary>
            Searches the TDM archive on local server by specified core and extension criteria.
            </summary>
            <param name="coreCriteria">The <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria">core criteria</see>.</param>
            <param name="extensionCriteria">The <see cref="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.IExtensionDataSearchCriteria">extension criteria</see>.</param>
            <returns>IEnumerable{IDocument}.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.ITdmRetransmitLookup.SearchAllGeneric(Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria)">
            <summary>
            Searches the TDM archive on local server by specified core criteria.
            </summary>
            <param name="coreCriteria">The <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria">core criteria</see>.</param>
            <returns>ALL DOCUMENTS AS GENERIC</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.IDocumentValidator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.IDocumentValidator.Validate(Retalix.StoreServices.Model.Document.TDM.IDocument)">
            <summary>
            
            </summary>
            <param name="document"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.IDocument">
            <summary>
            Represents a description of a business activity, that was chosen to be documented
            and stored for later use.
            <para>
            The scope of a document and the information preserved may differ between various
            system domains and activity types. For example:
            </para>
            <list type="bullet">
            <item>
            <term>System login:</term>
            <description>
            When a system user performs a login, a new IDocument object is created,
            containing information such as user name, date/time of the login attempt, and POS ID.
            </description>
            </item>
            <item>
            <term>Sale transaction complete:</term>
            <description>
            Upon completion of a sale, its generated IDocument object 
            contains payment terms, purchased items, customer details, etc.
            </description>
            </item>
            <item>
            <term>Return transaction complete:</term>
            <description>
            Upon completion of a return transaction, the created
            IDocument object will contain the return reason, initial purchase date, etc.
            </description>
            </item>
            </list>
            </summary>
            <remarks>
            <para>
            At the end of a selling session to a customer, the retail transaction is closed.
            At that time, the order is completed and paid, and a receipt is generated and
            given as a proof of purchase to the customer.
            </para>
            <para>
            In addition, the same retail transaction is documented in ARTS POSLog 6.0 format,
            together with the formatted receipt, to be stored for later inquiry by various systems.
            </para>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocument.Created">
            <summary>
            Gets the date and time the log document was created.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocument.Document">
            <summary>
            Gets the contents of the document. According to ARTS POSLog 6.0 format, the
            contents are in XML format.
            </summary>
            <value>The document.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocument.LogDocumentDaoName">
            <summary>
            Gets the name of the relevant DAO to handle current log document.
            </summary>
            <value>The name of the log document DAO.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocument.ObjectContent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocument.BusinessUnitId">
            <summary>
            The id of the business unit in which the document was created.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.IDocumentDao">
            <summary>
            Interface ILogDocumentDao
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.IDocumentDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Document.TDM.IDocument})">
            <summary>
            Saves the specified log documents.
            </summary>
            <param name="logDocuments">The log documents.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.IDocumentDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Document.TDM.IDocument},System.Action{Retalix.StoreServices.Model.Document.TDM.IDocument,System.Exception})">
            <summary>
            Saves the specified log documents.
            </summary>
            <param name="logDocuments">The log documents.</param>
            <param name="errorHandler">An action to be called when there is an error saving a document</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.IDocumentDao.Search(Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.IExtensionDataSearchCriteria})">
            <summary>
            Search for log documents according to the specified search criteria.
            </summary>
            <param name="coreCriteria">The search criteria.</param>
            <param name="extensionCriteria"></param>
            <returns>IEnumerable{ILogDocument}.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.IDocumentDao.SearchDisplayHeader(Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.IExtensionDataSearchCriteria})">
            <summary>
            Search for the document display header according to the specified search criteria.
            this method is used in order to improve performance.
            </summary>
            <param name="coreCriteria">The search criteria.</param>
            <param name="extensionCriteria">The extensions search criteria.</param>
            <returns>IEnumerable{DocumentDisplayHeader}, a list of the specific fields needed for display</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.IDocumentDao.Delete(Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria)">
            <summary>
            Deletes log documents according to the specified search criteria.
            </summary>
            <param name="searchCriteria">The search criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.IDocumentDao.Deserialize(System.DateTime,System.String,System.String)">
            <summary>
            Deserialize the specified document.
            </summary>
            <param name="created">The creation date time of the document</param>
            <param name="document">The document to deserialize.</param>
            <param name="businessUnitId">The business unit where the document was created</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.IDocumentDao.ClearCaches(Retalix.StoreServices.Model.Document.TDM.IDocument)">
            <summary>
            Clear caches based on the specified document
            </summary>
            <param name="document">The document to use</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria">
            <summary>
            Contains set of arguments which is used for searching log documents.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria.CreatedFrom">
            <summary>
            Gets or sets the created from.
            </summary>
            <value>The created from.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria.CreatedTo">
            <summary>
            Gets or sets the created to.
            </summary>
            <value>The created to.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria.LogDocumentDaoName">
            <summary>
            Gets the name of the relevant DAO to handle current search criteria.
            </summary>
            <value>The name of the log document DAO.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria.Paging">
            <summary>
            Used for page navigation.
            </summary>
            <value>
            The page number and page size.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria.BusinessUnitIds">
            <summary>
            A list of the business units to search by
            if empty, search is done on all business units
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria.SortOrder">
            <summary>
            Defines return data sort order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria.TouchpointIds">
            <summary>
            A list of the touchpoint ids to search by
            if empty (or BusinessUnitIds is empty), search is done on all touchpoints
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria.StartingSequencNumber">
            <summary>
            Gets or sets the starting sequence number.
            </summary>
            <value>The sequence from.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria.EndingSequencNumber">
            <summary>
            Gets or sets the ending sequence number.
            </summary>
            <value>The sequence to.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria.TimeOfDayFrom">
            <summary>
            Gets or sets the time of day from.
            </summary>
            <value>The created time from.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria.TimeOfDayTo">
            <summary>
            Gets or sets the time of day to.
            </summary>
            <value>The created time to.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.ITdmArchive">
            <summary>
            Responsible to store, actually is facade, index and retrieve documents for the duration of their retention period.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Document.TDM.ITdmArchive.Saved">
            <summary>
            Occurs when save complete of provided <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">document</see> completed.
            The following event propagates saved documents to listeners.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Document.TDM.ITdmArchive.Saving">
            <summary>
            Occurs before saving of provided <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">document</see>.
            The following event propagates the documents that are about to be saved to listeners.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.ITdmArchive.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Document.TDM.IDocument})">
            <summary>
            Saves the specified <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">documents</see>.
            </summary>
            <param name="documents">The  <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">documents</see> to be saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.ITdmArchive.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Document.TDM.IDocument},System.Action{Retalix.StoreServices.Model.Document.TDM.IDocument,System.Exception})">
            <summary>
            Saves the specified <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">documents</see>.
            </summary>
            <param name="documents">The  <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">documents</see> to be saved.</param>
            <param name="handleDuplicatedError">An action to be called when there is a duplicated error saving a document</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.ITdmArchive.Search(Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.IExtensionDataSearchCriteria})">
            <summary>
            Searches the TDM archive by specified core and extension criteria via access services based on configured policy.
            </summary>
            <param name="coreCriteria">The <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria">core criteria</see>.</param>
            <param name="extensionCriteria">The <see cref="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.IExtensionDataSearchCriteria">extension criteria</see>.</param>
            <returns>IEnumerable{IDocument}.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.ITdmArchiveEventListener">
            <summary>
            Represents the connection point of different modules to be event listeners of <see cref="T:Retalix.StoreServices.Model.Document.TDM.ITdmArchive">ITdmArchive</see>. This done via implementation of method were specific instance 
            of <see cref="T:Retalix.StoreServices.Model.Document.TDM.ITdmArchive">ITdmArchive</see> is passed and events can be accessed.
            </summary>
            <example> 
            <code lang="cs" description="This example shows one of the possible way of subscription to the proposed events.">
            <![CDATA[
            public void Subscribe(ITdmArchive tdmArchive)
            {
               tdmArchive.Saved += delegate(IEnumerable<IDocument> documents)
                   {
                       foreach (var document in documents)
                       {
                           AfterSaved(document);
                       }
                   };
            }
            ]]>
            </code> 
            </example>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.ITdmArchiveEventListener.Subscribe(Retalix.StoreServices.Model.Document.TDM.ITdmArchive)">
            <summary>
            Provides point to add listener to proposed events of <see cref="T:Retalix.StoreServices.Model.Document.TDM.ITdmArchive">ITdmArchive</see>.
            </summary>
            <param name="tdmArchive">Specific instance of <see cref="T:Retalix.StoreServices.Model.Document.TDM.ITdmArchive">ITdmArchive</see> is passed to subscribe to proposed event</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.Paging">
            <summary>
            Used for page navigation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.Paging.PageNumber">
            <summary>
            Zero-based requested page number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.Paging.PageSize">
            <summary>
            Number of requested transactions in each page.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ExtensionDataType">
            <summary>
            Represents data type stored in <see cref="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ITlogExtensionData">ITlogExtensionData</see> to describe to the search mechanism data type.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ExtensionDataType.String">
            <summary>
            Stands for string values or values can be represented as string, usually used for equals/not equals search operations.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ExtensionDataType.DateTime">
            <summary>
            Stands for data types should be represented as date time.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ExtensionDataType.Double">
            <summary>
            Stands for data types should be represented as numeric values, so the greater/less equality operators can be applied in search mechanism.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ExtensionSearchOperator">
            <summary>
             Extension data search operator used in <see cref="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.IExtensionDataSearchCriteria">IExtensionDataSearchCriteria</see>. 
             Represents basic filtering operator for extension data lookup.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ExtensionSearchOperator.Eq">
            <summary>
            Equals
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ExtensionSearchOperator.Gt">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ExtensionSearchOperator.Ge">
            <summary>
            Greater or equal
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ExtensionSearchOperator.Lt">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ExtensionSearchOperator.Le">
            <summary>
            Less or equal
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ExtensionSearchOperator.IN">
            <summary>
            Specify multiple values
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.IExtensionDataExtractor">
            <summary>
            Responsible for retrieval of <see cref="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ITlogExtensionData">ITlogExtensionData</see> stored on given <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">ILogDocument</see>.
            This interface represents extension point to future extension of <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">ILogDocument</see> data members.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.IExtensionDataExtractor.Get(Retalix.StoreServices.Model.Document.TDM.IDocument)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ITlogExtensionData">extension </see> data stored on specific instance of <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">ILogDocumentM</see>.
            </summary>
            <param name="logDocument">current instance to extract extension data from</param>
            <returns>All data extensions this <see cref="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.IExtensionDataExtractor">IExtensionDataExtractor</see> was able to discover.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.IExtensionDataSearchCriteria">
            <summary>
            Represents search criteria for extensions data stored on <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">ILogDocument</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.IExtensionDataSearchCriteria.Operator">
            <summary>
            Gets or sets <see cref="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ExtensionSearchOperator">search operator</see> used to filter the extension data
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ITlogExtensionData">
            <summary>
             The following interface represents part of extension data stored on <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">ILogDocument</see>, used in search mechanism to filter <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">ILogDocuments</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ITlogExtensionData.Name">
            <summary>
            Gets the name of current <see cref="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ITlogExtensionData">ITlogExtensionData</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ITlogExtensionData.DataType">
            <summary>
            Gets the type of current <see cref="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ITlogExtensionData">ITlogExtensionData</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ITlogExtensionData.Value">
            <summary>
            Gets the value of current <see cref="T:Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.ITlogExtensionData">ITlogExtensionData</see>
            to set list of values, add the values with ',' seperator between
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ITranLogXmlToDocumentConverter">
            <summary>Convert any type of xml transaction string to IDocument</summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ITranLogXmlToDocumentConverter.Deserialize(System.String)">
            <summary>Convert xml transaction string to IDocument</summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Dimensions">
            <summary>
             contain the Dimensions Height and Width of an Endorsement
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Dimensions.Height">
            <summary>
             Endorsement Height
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Dimensions.Width">
            <summary>
             Endorsement Width
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.EndorsementNameCriterion">
            <summary>
            Used to get an Endorsement by name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.EndorsementNameCriterion.Name">
            <summary>
            Name of the Endorsement to get.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Exceptions.AlreadyExistActiveReceiptLayoutForStartDateException">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Exceptions.AlreadyExistActiveReceiptLayoutForStartDateException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Exceptions.AlreadyExistActiveReceiptLayoutException">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Exceptions.AlreadyExistActiveReceiptLayoutException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Exceptions.DeleteActiveReceiptLayoutException">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Exceptions.DeleteActiveReceiptLayoutException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Exceptions.DeleteInexistingLineDefinitionException">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Exceptions.DeleteInexistingLineDefinitionException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="slipTypeName"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Exceptions.DuplicateEndorsementNameException">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Exceptions.DuplicateEndorsementNameException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Exceptions.DuplicateLineDefinitionNameException">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Exceptions.DuplicateLineDefinitionNameException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Exceptions.DuplicateSlipTypeNameException">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Exceptions.DuplicateSlipTypeNameException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Exceptions.EndorsementNotFoundException">
            <summary>
             Exception which is thrown when the Endorsement doesn't exist.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Exceptions.EndorsementNotFoundException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="endorsementName">Name of the missing Endorsement</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Exceptions.UpdateInexistingEndorsementException">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Exceptions.UpdateInexistingEndorsementException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Exceptions.UpdateInexistingLineDefinitionException">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Exceptions.UpdateInexistingLineDefinitionException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="slipTypeName"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.GeneratedSlip">
            <summary>
            Contains a single slip generated by the receipt engine and its type.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.GeneratedSlip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Document.GeneratedSlip" /> class.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.GeneratedSlip.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Document.GeneratedSlip" /> class.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.GeneratedSlip.Type">
            <summary>
            Gets or sets the slip type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.GeneratedSlip.Data">
            <summary>
            Gets or sets the slip data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IControlTransaction.ReportText">
            <summary>
            Contains printed report text, for example XReport
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IControlTransaction.BadPassword">
            <summary>
            Indicated if bad password was specified when changing password
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IControlTransaction.RetailTransactionLink">
            <summary>
            Gets the transaction details of a linked transaction.
            </summary>
            <value>
            The transaction link details.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IControlTransaction.FailedSignAttempts">
            <summary>
            Failed Sign Attempts count for a user
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IDocumentQueueWriter">
            <summary>
            Writes the received log documents to the IMessageQueue.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IEndOfDayControlTransaction">
            <summary>
            Parameters requirements for end of day control transacton log.
            TODO Once IControlTransaction will have ITouchPoint and IBusinessUnit members, remove "Tenders" and "Culture" member.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IEndOfDayControlTransaction.StartTime">
            <summary>
            start time of end of day process.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IEndOfDayControlTransaction.EndTime">
            <summary>
            end time of end of day process.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IEndOfDayControlTransaction.CurrentBusinessDay">
            <summary>
            current business day value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IEndOfDayControlTransaction.NextBusinessDay">
            <summary>
            end of day changed to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IEndOfDayControlTransaction.Tenders">
            <summary>
             All the tenders which can be relevant for the end of day process.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IEndOfDayControlTransaction.Culture">
            <summary>
             Name of the culture to use
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IEndorsement">
            <summary>
             Definition of Layouts for endorsing a document.
             Definitions are created per businessUnit and Tender and include a front and back layout.
             Endorsement Definition knows how to Generate Receipts for itself given printable Data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IEndorsement.Name">
            <summary>
             the name of the endorsement
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IEndorsement.ChequeUse">
            <summary>
             indicate where to use the endorsement - the options are payment or deposit. if empty the endorsement relevant for both
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IEndorsement.Front">
            <summary>
              the layout of the front endorsement
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IEndorsement.Back">
            <summary>
              the layout of the back endorsement
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IEndorsement.BusinessUnitIds">
            <summary>
             The relevant business unit ids of the endorsement
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IEndorsement.TenderTypeIds">
            <summary>
             The relevant tender type ids
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IEndorsement.GenerateReporting(System.Xml.Linq.XDocument)">
            <summary>
             generate endorsement using the receipt engine.
             lineContent contains the tender data for the endorsement. 
            </summary>
            <param name="printableData"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IEndorsement.IsEndorsementRequired(System.Int32)">
            <summary>
            </summary>
            <param name="tenderId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IEndorsementDao">
            <summary>
            Responsible for persistence of Endorsement Printing Layouts
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IEndorsementDao.Save(Retalix.StoreServices.Model.Document.IEndorsement)">
            <summary>
            Saves a new Endorsement.
            Throws exception if the Endorsement already exist.
            </summary>
            <param name="newEndorsement"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IEndorsementDao.Update(Retalix.StoreServices.Model.Document.IEndorsement)">
            <summary>
            Update an existing Endorsement.
            Throws exception if Endorsement doesn't exist.
            </summary>
            <param name="newEndorsement"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IEndorsementDao.Delete(System.String)">
            <summary>
            Delete an existing Endorsement.
            Throws exception if Endorsement doesn't exist.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IEndorsementDao.Find``2(Retalix.StoreServices.Infrastructure.DataAccess.IQuery{Retalix.StoreServices.Model.Document.IEndorsement,``0,``1})">
            <summary>
            Find Endorsements according to the query.
            </summary>
            <typeparam name="TRole"></typeparam>
            <param name="query">A query which returns Endorsements according to its fetching strategy.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IEndorsementDao.GetByTenderId(System.Int32,System.String)">
            <summary>
            </summary>
            <param name="tenderId"></param>
            <param name="type">deposit or payment</param>
            <returns>get the endorsement for tenderId</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IEndorsementDao.GetByTenderId(System.Int32)">
            <returns>get the endorsement for a specific TenderId</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IEndorsementFactory">
            <summary>
             Used to create a new Endorsement entity.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IEndorsementFactory.CreateNewEndorsement(System.String,System.String,Retalix.StoreServices.Model.Document.Dimensions,Retalix.StoreServices.Model.Document.Dimensions,System.Collections.Generic.IList{Retalix.StoreServices.Model.Document.IReceiptLayoutLine},System.Collections.Generic.IList{Retalix.StoreServices.Model.Document.IReceiptLayoutLine},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Create a new Endorsement entity according to the parameters.
            </summary>
            <param name="name">The name of the endorsement</param>
            <param name="chequeUse">Indicate where to use the endorsement - the options are payment or deposit. if empty the endorsement relevant for both</param>
            <param name="backDimensions">Height and Width of the back endorsement</param>
            <param name="backLayoutLines">The layout of the back endorsement</param>
            <param name="frontLayoutLines">The layout of the front endorsement</param>
            <param name="businessUnitIds">The relevant business unit ids of the endorsement</param>
            <param name="tenderTypeIds">The relevant tender type ids</param>        
            <param name="frontDimensions">Height and Width of the front endorsement</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IEndorsementLayout">
            <summary>
             Provides a layout to be used for printing an endorsement on the back or front of a document.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IEndorsementLayout.Dimensions">
            <summary>
             Height and Width of the endorsement
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IEndorsementLayout.AddLayoutLine(System.String,System.String,Retalix.StoreServices.Model.Document.IReceiptLayoutLineTemplate,System.String,System.String)">
            <summary>Add a Line (connection between lineDefinition and template) to this Receipt Layout</summary>
            <param name="lineDefinitionName">The contained template should be applied to data matching this line definition</param>
            <param name="description">A description to be used for identifying this Receipt Line</param>
            <param name="template">The template to be applied to the matching data.</param>
            <param name="sectionName">The sectionName for this line (specified)</param>
            <param name="layout">The actual layout (used if this line has a layout that is not a saved template)</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ILayout">
            <summary>Represents a layout used by the receipt engine to produce formatted output.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ILayout.Name">
            <summary>
            The unique name of the layout
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ILayout.Description">
            <summary>
            The description of the layout
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ILayout.CultureName">
            <summary> The culture for this layout (or null if default)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ILayout.SlipType">
            <summary>
             The type of the slip this layout is used for
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ILayout.LayoutLines">
            <summary>
             Specification of Layouts/Templates and the binding expression used to determine for which data it is printed. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ILineDefinitionRepository">
            <summary>
             Responsible for persisting and retrieving receipt line definition entities.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ILineDefinitionRepository.Get(System.String,System.String)">
            <summary>
             Gets a single receipt line definition entity.
            </summary>
            <param name="name">Unique name of the receipt line definition entity to get</param>
            <param name="version">The version of the receipt required. null for current version</param>
            <returns>The desired receipt line definition entity. Returns null when no entity found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ILineDefinitionRepository.GetAll(Retalix.StoreServices.Model.Document.VersionSelector)">
            <summary>
             Returns all receipt line definitions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ILineDefinitionRepository.Create(Retalix.StoreServices.Model.Document.IReceiptLineDefinition)">
            <summary>
             Save a receipt line definition entity.
             Throws exception if receipt line definition entity already exist.
            </summary>
            <param name="receiptLineDefinition"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ILineDefinitionRepository.Update(Retalix.StoreServices.Model.Document.IReceiptLineDefinition)">
            <summary>
             Updates a receipt line definition entity.
             Throws exception if receipt line definition entity doesn't exist.
            </summary>
            <param name="receiptLineDefinition"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ILineDefinitionRepository.Delete(System.String,Retalix.StoreServices.Model.Document.VersionSelector)">
            <summary>
             Deletes a receipt line definition entity.
             Throws exception if receipt line definition entity doesn't exist.
            </summary>
            <param name="name">Unique name of the receipt line definition entity to delete</param> 
             <param name="versionSelector">Indicates whether to delete receipt line definition of all\current\spacific version, default is current version</param>    
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ILineDefinitionRepository.DeleteAll(Retalix.StoreServices.Model.Infrastructure.DataMovement.DeleteAllProviders.ITruncateHelperDao)">
            <summary>
             Deletes all the receipt line definition entities in the system.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IPrintableDataAdaptor">
            <summary>Adaptor used to specify what data to add to printableData XML for use in the receipt engine.
             Adaptor specifies the type it can extract data from, where to place the data, and the parameters it is able to retrieve.
             Each implementation also includes methods for returning the data for each of the described parameters (not specified in interface) which are called using reflection.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IPrintableDataAdaptor.SourceType">
            <summary>The type that this adaptor can retrieve data from</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IPrintableDataAdaptor.TargetDataNode">
            <summary>The location in PrintableData XML that each retrieved item should be placed</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IPrintableDataAdaptor.ItemNode">
            <summary>The name to call the node for each retrieved item</summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IPrintableDataAdaptor.GetDescriptors">
            <summary>Retrieves a list of parameters that this adaptor can retrieve.</summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptConfigurationParameter">
            <summary>
            Holds a single configuration parameter for the receipt engine
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptConfigurationParameter.Key">
            <summary>
             The key of the configuration Parameter
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptConfigurationParameter.Value">
            <summary>
             The value of the configuration parameter
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptConfigurationParameter.Environment">
            <summary>
             The environment for which this configuration parameter is relevant.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationParameter.AddEnvironment(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
            Adds an environment to the receipt configuration parameter
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationParameter.GetValue">
            <summary>Gets a typed value for this parameter
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptEnvironment">
            <summary>
            Defines an environment (BusinessUnit and retailSegment) for which a Layout is relevant.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptEnvironment.BusinessUnit">
            <summary>
            The business unit
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptEnvironment.RetailSegment">
            <summary>
            The Retail Segment
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptLayoutLine">
            <summary>
            Provides a link between the binding instructions from a LineDefinition and the Layout or Template (containing a Layout) to use for formatting the data that matches.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLayoutLine.LineDefinitionName">
            <summary>The name of the Line Definition to be used for finding data relevant for this layout line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLayoutLine.Description">
            <summary>A description of this line</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLayoutLine.Template">
            <summary>An optional reusable Template that will hold the formatting instructions for the data that matches.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLayoutLine.SectionName">
            <summary>The Section of the receipt in which to put this Layout Line.  See <see cref="T:Retalix.StoreServices.Model.Document.IReceiptLineWithData"></see></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLayoutLine.Layout">
            <summary>
            Layout of the receipt line.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptLayoutLineTemplate">
            <summary>
            A reusable template for use with a specific LineDefinition.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLayoutLineTemplate.Name">
            <summary>
            Name of the Template
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLayoutLineTemplate.LineDefinitionName">
            <summary>
            Name of the LineDefinition (ie. Header, SingleItem, EFTMainSlip, etc)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLayoutLineTemplate.Layout">
            <summary>
            The actual layout
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptLineDefinition">
            <summary>
             Defines which data should be used for a specific receipt Line, as well as the default section and order within that section for the formatted receipt segment.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineDefinition.Name">
            <summary>Name for the Line Definition (for Lookup)</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineDefinition.DisplayName">
            <summary>Display Text for use in UI for the Line Definition</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineDefinition.BindingPriority">
            <summary>Indicates the order in which it should be considered for data binding (lower is bound first)</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineDefinition.SelectionRoot">
            <summary>The XPath to the data node in the tree to use as the root for data selection.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineDefinition.BindingExpression">
            <summary>The selection expression to be used for selecting Nodes to bind to this Line Definition</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineDefinition.SectionName">
            <summary>The name of the section (or area) or the receipt to display this line definition</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineDefinition.OrderWithinSection">
            <summary>The order for this line definition within its section.  null indicates that the sequence number should be used.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineDefinition.SlipTypes">
            <summary>A comma delimited list of the slipypes for which this line definition should be displayed when creating an instance of the slipType</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineDefinition.BindFirstMatchOnly">
            <summary>If true, only one result is bound even if multiple child nodes match.  If false, all matching nodes are bound.</summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptPostBindingProcessor">
            <summary>
            Responsible for processing bound receipt data to prepare for formatting
             Generally, this is for ordering and grouping.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptPostBindingProcessor.ProccesingPriority">
            <summary>
            Products to indicate processing priority for this processor.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptPostBindingProcessor.Process(System.Collections.Generic.IList{Retalix.StoreServices.Model.Document.IReceiptLineWithData})">
            <summary>
            Process the bound data
            </summary>
            <returns>IList of SectionsWithData</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptPreBindingProcessor">
            <summary>
            Responsible for processing printableData to prepare for binding with Layout Lines
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptPreBindingProcessor.ProccesingPriority">
            <summary>
            Products to indicate processing priority
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptPreBindingProcessor.Process(System.Xml.Linq.XDocument,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Document.IReceiptConfigurationParameter})">
            <summary>
            Process the data before binding
            </summary>
            <returns>PrintableData XML</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptPrintModeStrategy">
            <summary>
            Delegates the decision on whether to print a receipt to extensions.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptPrintModeStrategy.SelectMode(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            Selects the print mode.
            </summary>
            <param name="retailTransaction">The retail transaction.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptSlipType">
            <summary>Holds the details of a slipType and its binding</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptSlipType.Name">
            <summary>Name for the slip Definition (for Lookup)</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptSlipType.DisplayName">
            <summary>Display Text for use in UI for the Slip Definition</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptSlipType.SelectionRoot">
            <summary>The XPath to the data node in the tree to use as the root for data selection.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptSlipType.Sections">
            <summary>The names of the sections in this slip type.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptSlipType.BindingExpression">
            <summary>The selection expression to be used for selecting Nodes to bind to this Line Definition</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptSlipType.BindToCompleteTree">
            <summary>If true, then the receipt engine is sent the Complete Tree if any child matches the selection Expression.  If false, the tree is sent with only one child within the Selection Root.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptSlipType.IndicatorParameterName">
            <summary>Name of parameter to add to bound node to indicate the slip being printed.  Used in section data binder to limit use of sections by receipt type.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptSlipType.CopyCountParameterName">
            <summary>Name of parameter holding the number of copies to print of this slip.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptSlipType.ReceiptKind">
            <summary>Kind (type) or Receipt. Used for selecting Receipts for Reprint.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptSlipType.BindFirstMatchOnly">
            <summary>If true, only one result is bound even if multiple child nodes match.  If false, all matching nodes are bound.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptSlipType.ConsolidateStrategy">
            <summary>
             the consolidate strategy for the slip
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptSlipType.GroupingStrategy">
            <summary>
             the grouping strategy for the slip
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptSlipType.ConsolidateSlipData(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
             Consolidate the list of matching data for a slip using the specified strategy.
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptSlipType.GroupSlipData(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
             Grouping the list of matching data for a slip using the specified strategy.
            </summary>
            <param name="nodes">The printable data nodes to organize</param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptSlipType.Order">
            <summary>
            the priniting order of the slip.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ISlipTypeRepository">
            <summary>Responsible for persistence of <see cref="T:Retalix.StoreServices.Model.Document.IReceiptSlipType">SlipType</see> objects
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ISlipTypeRepository.Get(System.String,System.String)">
            <summary>
             Gets a single receipt slip type entity.
            </summary>
            <param name="name">Unique name of the receipt slip type entity to get</param>
            <param name="version">The required version of the receipt type to get. null for current version</param>
            <returns>The desired receipt slip type entity. Returns null when no entity found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ISlipTypeRepository.GetAll(Retalix.StoreServices.Model.Document.VersionSelector)">
            <summary>
             Returns all receipt slip types.
            </summary>
             <param name="versionSelector">Indicates whether to retreive receipt slip type of all\current\spacific version, default is current version</param>    
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ISlipTypeRepository.Create(Retalix.StoreServices.Model.Document.IReceiptSlipType)">
            <summary>
             Save a receipt slip type entity.
             Throws exception if receipt slip type entity already exist.
            </summary>
            <param name="receiptSlipType"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ISlipTypeRepository.Update(Retalix.StoreServices.Model.Document.IReceiptSlipType)">
            <summary>
             Updates a receipt slip type entity.
             Throws exception if receipt slip type entity doesn't exist.
            </summary>
            <param name="receiptSlipType"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ISlipTypeRepository.Delete(System.String,Retalix.StoreServices.Model.Document.VersionSelector)">
            <summary>
             Deletes a receipt slip type entity.
             Throws exception if receipt slip type entity doesn't exist.
            </summary>
            <param name="name">Unique name of the receipt slip type entity to delete</param>   
             <param name="versionSelector">Indicates whether to delete receipt slip type of all\current\spacific version, default is current version</param>    
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ISlipTypeRepository.DeleteAll(Retalix.StoreServices.Model.Infrastructure.DataMovement.DeleteAllProviders.ITruncateHelperDao)">
            <summary>
             Deletes all the receipt slip type entities in the system.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ParameterDescriptor`1">
            <summary>Holds meta data for a parameter</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ParameterDescriptor`1.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Constructor that takes all of the parts</summary>
            <param name="parameterName"></param>
            <param name="parameterGroup"></param>
            <param name="relevantSections"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ParameterDescriptor`1.#ctor(System.String)">
            <summary>Constructor that takes just parameter name</summary>
            <param name="parameterName"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ParameterDescriptor">
            <summary>Holds Basic Information about Parameters</summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.ParameterDescriptor.ParameterName">
            <summary>Name of Parameter that can be retrieved</summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.ParameterDescriptor.ParameterObjectType">
            <summary>Object Type of the parameter that can be retrieved</summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.ParameterDescriptor.ParameterGroup">
            <summary>Group to be used for organizing parameters in UI</summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.ParameterDescriptor.Sections">
            <summary>Receipt Layout Sections for which this parameter should be displayed.</summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.ParameterDescriptor.DefaultLength">
            <summary>Default length for this parameter.</summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.ParameterDescriptor.ParameterType">
            <summary>Type of the parameter (Barcode, Embedded Message, etc)</summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.ParameterDescriptor.DefaultAlign">
            <summary>Default Alignment for the parameter (Left, Right, Center)</summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.ParameterDescriptor.CurrencySignElement">
            <summary>Default CurrencySignElement for the parameter (CS, ConditionalCS, StoreCurrencySymbol)</summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.ParameterDescriptor.OptionFilter">
            <summary>Filter used to limit choices for option selectors in the UI</summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ParameterDescriptor.#ctor(System.String,System.Type,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Constructor Allows assignment on all relevant information</summary>
            <param name="parameterName"></param>
            <param name="parameterObjectType"></param>
            <param name="parameterGroup"></param>
            <param name="relevantSections"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ParameterDescriptor.#ctor(System.String,System.Type)">
            <summary>Create parameter descriptor with name and object type</summary>
            <param name="parameterName"></param>
            <param name="parameterObjectType"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Receipt">
            <summary>
            Represents a collection of slips generated by the receipt engine
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Receipt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Document.Receipt" /> class.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Receipt.#ctor(System.Collections.Generic.ICollection{Retalix.StoreServices.Model.Document.GeneratedSlip})">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Document.Receipt" /> class.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Receipt.Slips">
            <summary>
            Gets or sets the slips.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptLineWithData">
            <summary>
            Holds layout templates and their relevant data after they are bound together.
            For now, it also holds the enumeration of Sections for ReceiptLayoutLines
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineWithData.LineDefinition">
            <summary>
            The line definition for this receipt line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineWithData.Section">
            <summary>
            Section of Receipt (Header, Footer, Items, etc)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineWithData.RelevantData">
            <summary>
            Contains the Data needed to fill in this template
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineWithData.FormattingInstructions">
            <summary>The formatting instructions to be used to print this line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineWithData.SequenceNumber">
            <summary>
            Sequence Number for Lines
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineWithData.SectionOrder">
            <summary>
            Section Order for Lines
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineWithData.OrderWithinSection">
            <summary>
            Order with in section for Lines
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineWithData.ParentSequenceNumber">
            <summary>
            Parent Sequence Number for Lines
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineWithData.SequenceNumberDefaultValue">
            <summary>
            Sequence Default Value for Lines
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineWithData.SequenceNullValue">
            <summary>
            Sequence Null Value for Lines
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLineWithData.ParentSequenceNumberDefaultValue">
            <summary>
            Parent Sequence Number Default Value for Lines
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ReceiptPrintMode">
            <summary>
            Receipt print mode possiblities
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.ReceiptPrintMode.Always">
            <summary>
            The receipt should be always printed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.ReceiptPrintMode.OnDemand">
            <summary>
            The receipt should be printed based on client response
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.ReceiptPrintMode.Never">
            <summary>
            The receipt should not be printed
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Sections">
            <summary>
            Contains the options for Section Types
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.Header">
            <summary>
            Header
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.Billboard1">
            <summary>
            Billboard below header - billboard1
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.Items">
            <summary>
            Holds all Items and Promotions
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.VoidedItems">
            <summary>
            Item that were voided Details
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.Promotions">
            <summary>
            Holds all Ticket level Promotions
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.Billboard2">
            <summary>
            Billboard below items and promotions - billboard2
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.Totals">
            <summary>
            Transaction Totals
            </summary>,
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.Tenders">
            <summary>
            Tender Details
            </summary>,
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.DenominationsOfficeHeader">
            <summary>
            Cash Office layout - Denominations Section Header
            </summary>,
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.Denominations">
            <summary>
            Cash Office layout - Denominations Section 
            </summary>,
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.VoidTenders">
            <summary>
            Tenders that were voided Details
            </summary>,
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.TaxSummary">
            <summary>
            Transaction Tax Summary
            </summary>,
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.TaxExemptionSummary">
            <summary>
            Transaction Tax Exemption Summary
            </summary>,
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.Payment">
            <summary>
            Electronic Payment Information
            </summary>,
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.Loyalty">
            <summary>
            Loyalty Section of the Receipt
            </summary>,
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.PaymentAfterLoyalty">
            <summary>
            Electronic Payment Information After Loyalty Section
            </summary>,
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.Billboard3">
            <summary>
            Billboard Section before footer - billboard3
            </summary>,
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.ExternalSlipSection">
            <summary>
            ExternalSlipSection
            </summary>,
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.Sections.Footer">
            <summary>
            Footer
            </summary>,
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IPrintableDataBuilder">
            <summary>
            Builder responsible for creating PrintableData out of the provided object
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ControlTransactionLog.ControlTransactionLogSearchCriteria">
            <summary>
            set of arguments to search control transaction logs 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransactionLog.ControlTransactionLogSearchCriteria.BusinessDayDateFrom">
            <summary>
            Gets or sets the BusinessDayDate range start, which searches for transactions which were closed after or equal to this value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransactionLog.ControlTransactionLogSearchCriteria.BusinessDayDateTo">
             <summary>
            Gets or sets the BusinessDayDate range end, which searches for transactions which were closed after or equal to this value.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransactionLog.ControlTransactionLogSearchCriteria.BusinessUnitIds">
             <summary>
            Gets or sets the identifiers of the business units at which the transactions were performed.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransactionLog.ControlTransactionLogSearchCriteria.TouchPointIds">
             <summary>
            Gets or sets the identifiers of the touch points at which the transactions were performed.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransactionLog.ControlTransactionLogSearchCriteria.SequenceNumberFrom">
             <summary>
            Gets or sets the Sequence number range start, 
             which will search for transactions with the Sequence ID starting from this value.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransactionLog.ControlTransactionLogSearchCriteria.SequenceNumberTo">
             <summary>
            Gets or sets the Sequence number range end, 
             which will search for the transactions with the Sequence ID up to this value.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransactionLog.ControlTransactionLogSearchCriteria.UserId">
            <summary>
             The operatorId of the transaction
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.GenericDocument">
            <summary>
            Class GenericDocument
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.GenericDocument.GenericLogDocumentDaoName">
            <summary>
            Gets the resolve name of the generic log document DAO.
            </summary>        
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.GenericDocument.#ctor(System.DateTime,System.String,Retalix.StoreServices.Model.Document.TDM.IDocumentValidator,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Document.GenericDocument" /> class.
            </summary>
            <param name="created">The created.</param>
            <param name="document">The document.</param>
            <param name="documentValidator"></param>
            <param name="businessUnitId"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IPrintableSourceDataRetriever`1">
            <summary>Provide the PrintableDataBuilder with a list of objects to retrieve information from.</summary>
            <typeparam name="TIn">The main type used as a source of data for this builder.  An object of this type is passed to the GetSourceData function.</typeparam>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IPrintableSourceDataRetriever`1.GetSourceData(`0)">
            <summary>The function called by the builder to retrieve a list of objects to retrieve data from.
            The type of those objects can be retrieved from the TargetType property.</summary>
            <param name="container">The general object that the enumerable is extracted from.</param>
            <returns>An enumerable of objects of type TargetType</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IPrintableSourceDataRetriever`1.TargetType">
            <summary>Provides the type of the data contained in the IEnumerable that is returned.
            This type information is used by the builder to help it retrieve information from the returned data.</summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptOrganizationConsolidationStrategy">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptOrganizationConsolidationStrategy.Execute(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            </summary>
            <param name="slipData"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptOrganizationGroupingStrategy">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptOrganizationGroupingStrategy.Execute(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            </summary>
            <param name="slipData"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Employee.EmployeeSaleAppliedEvent">
            <summary>
            Raised after EmployeeSale was applied.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Employee.EmployeeSaleApplyEvent">
            <summary>
            Raised before EmployeeSale is applied.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.ITouchPointProfileTypeResolver">
            <summary>
            Resolves an Account Profile type for the touchpoint
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.ITouchPointProfileTypeResolver.GetTouchPointProfileMode(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            Account profile under which touchpoint works
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.AccountId">
            <summary>
            A class representing a unique key that identifies an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.AccountId.Id">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see>'s Id.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.Criterion.AccountProfileExternalIdsSpecification">
            <summary>
            Defines a list of account profile external ids, passed as a parameter to the query.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.Criterion.AccountProfileExternalIdsSpecification.AccountProfileExtIds">
            <summary>
            Gets or sets the list of account profile external ids.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.Criterion.AccountPagingSpecification">
            <summary>
            Used for paging criteria that applies skip and take (page) on the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see> lookup results.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.Criterion.AccountPagingSpecification.Skip">
            <summary>
            Gets or sets an integer value used to skip to row number. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.Criterion.AccountPagingSpecification.Take">
            <summary>
            Gets or sets an integer value represting the result size.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.IAccountNamingStrategy">
            <summary>
            Represents a strategy that can retrives Account name according to a given context.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountNamingStrategy.GetAccountName``1(``0)">
            <summary>
            Returns a string that represents the Account name from a given context parameter.
            </summary>
            <typeparam name="T">The type of the context</typeparam>
            <param name="context">The value of the context. Can be a list of strings, object types, etc'.</param>
            <returns>A string that represents the Account name, null if not found</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountNamingStrategy.GetAccountProfileName``1(``0)">
            <summary>
            this is the account profile name
            </summary>
            <typeparam name="T">The type of the context</typeparam>
            <param name="context">The value of the context. Can be account profile name</param>
            <returns>A string that represents the Account profile name, null if not found</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountNamingStrategy.GetTouchpointMode(System.String)">
            <summary>
            Returns the relevant touchpoint profile in cashier / drawer mode
            </summary>
            <param name="touchpointType"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.ICashOfficeActivityAuthorizationStrategy">
            <summary>
            Interface implementation will be invoked on each fund transfer operation,
            and determine if cash office activity is allowed to be performed on account
            and on which direction 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.ICashOfficeActivityAuthorizationStrategy.IsAllowed(Retalix.StoreServices.Model.Finance.Account.IAccount,Retalix.StoreServices.Model.Finance.CashOfficeActivityName,Retalix.StoreServices.Model.Finance.Account.CashOfficeActivityDirection)">
            <summary>
            Allows to determine if cash office activity<see cref="T:Retalix.StoreServices.Model.Finance.CashOfficeActivityName">CashOfficeActivityName</see> allowed to be performed on account 
            <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">IAccount</see> on desired <see cref="T:Retalix.StoreServices.Model.Finance.Account.CashOfficeActivityDirection">CashOfficeActivityDirection</see> direction.
            </summary>
            <param name="account">cash office account to check</param>
            <param name="cashOfficeActivity">cash office activity name</param>
            <param name="direction">to check the direction</param>
            <returns>is allowed returns true </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.ITaxableProfile">
            <summary>
            Represents an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile">accountProfile</see> which is also taxable. 
            This means that when using an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see> with such a profile in a transaction, 
            if the tax entry is allowed then the user will need to specify the tax amount and that will be logged on the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.ITaxableProfile.AllowTaxEntry">
            <summary>
            Gets or sets a value which indicates if this profile should allow tax entry or not.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.PagingCriteria">
             <summary>
            Represents paging search criteria of <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>s.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.PagingCriteria.Take">
            <summary>
             Represents the maximum number of elements to retrieve.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.PagingCriteria.Skip">
            <summary>
             Represents the number of elements to skip out of the retrived collection of <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>s.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.PagingCriteria.IncludeCount">
            <summary>
            Should the total number of the corresponding <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>'s result set be calculated.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.PagingCriteria.TotalCount">
            <summary>
            Represents the total number of the corresponding <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>'s result set.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.CarryOverMethodName">
            <summary>
            All possible type names of an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.CarryOverMethodName.GetAll">
            <summary>
             Retrieves a list of all available account type names
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.AccountAvailableActivities">
            <summary>
            Class containing all available activities for a an account type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.AccountAvailableActivities.AccountType">
            <summary>
            The account type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.AccountAvailableActivities.AvailableSourceActivities">
            <summary>
            All available source activities for the account type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.AccountAvailableActivities.AvailableTargetActivities">
            <summary>
            All available target activities for the account type.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.AccountCreationArgs">
            <summary>
            Class containing the arguments used for creating a new <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.AccountCreationArgs.Name">
            <summary>
            Account name to use
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.AccountCreationArgs.Description">
            <summary>
            Account Description to use
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.AccountCreationArgs.ExternalSystemId">
            <summary>
            Account's id in external systems
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.AccountCreationArgs.TypeName">
            <summary>
            Name of the profile to assign, must be one of the names in <see cref="T:Retalix.StoreServices.Model.Finance.Account.AccountTypeName"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.AccountCreationArgs.Store">
            <summary>
            The business unit in which the account is used
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.AccountTypeName">
            <summary>
            All possible type names of an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/>.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Account.AccountTypeName.Safe">
            <summary>
             Name for account of type safe
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Account.AccountTypeName.BankingSafe">
            <summary>
             Name for account of type banking safe
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Account.AccountTypeName.StoreTill">
            <summary>
             Name for account of type till
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Account.AccountTypeName.Cashier">
            <summary>
             Name for account of type till
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Account.AccountTypeName.Bank">
            <summary>
             Name for account of type bank
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Account.AccountTypeName.IncomeAndExpense">
            <summary>
             Name for account of type income and expense
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Account.AccountTypeName.AutoReconcile">
            <summary>
             Name for account of type auto reconcile (for auto reconciled tenders)
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.AccountTypeName.GetAll">
            <summary>
             Retrieves a list of all available account type names
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.CashOfficeActivityDirection">
            <summary>
            Possible direction for an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> to participate as, in a Cash office activity.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Account.CashOfficeActivityDirection.Source">
            <summary>
             The account is the source account for the activity.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Account.CashOfficeActivityDirection.Target">
            <summary>
             The account is the target account for the activity.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Account.CashOfficeActivityDirection.Both">
            <summary>
             The account is the both source and target for the activity.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Account.CashOfficeActivityDirection.None">
            <summary>
             The account is not the source neither the target account for the activity.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.IAccount">
            <summary>
            Represents a retailer's financial entity which has the ability to hold funds.
            Common examples are till and safe.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccount.ExternalId">
            <summary>
            Gets or sets the external ID of the account. The ID must be unqiue.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccount.ExternalSystemId">
            <summary>
            Gets or sets the ID of the account in an external system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccount.Name">
            <summary>
            Gets or sets the account's displayed name. The combination of Name and
             <see cref="P:Retalix.StoreServices.Model.Finance.Account.IAccount.Store">Store</see> must be unique.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccount.Description">
            <summary>
            Gets or sets the description of the account.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccount.Store">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> store which 
            the account belongs to. The combination of <see cref="P:Retalix.StoreServices.Model.Finance.Account.IAccount.Name">Name</see> and 
            Store must be unique.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccount.Profile">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile">IAccountProfile</see> assigned 
            to the account. The profile contains the authorized activities for this 
            specific account.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccount.IsAllowed(Retalix.StoreServices.Model.Finance.CashOfficeActivityName,Retalix.StoreServices.Model.Finance.Account.CashOfficeActivityDirection)">
            <summary>
            Check whether the account may serve as the source and/or the target of 
            a certain cash office activity.
            </summary>
            <param name="cashOfficeActivity">The activity that is being searched for.</param>
            <param name="direction">The direction this account participates as, in this 
            activity</param>
            <returns><see langword="true"/> if the given activity is allowed for the 
            account in the given direction; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccount.IsActive">
            <summary>
            Check wheter the account is avaliable for finance activities
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccount.LastUpdated">
            <summary>
            Gets Last Modified Date of the account record. Each time the account is updated, the LastUpdated gets new value.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.IAccountable">
            <summary>
            An entity which holds an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> (e.g. a TouchPoint).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccountable.Account">
            <summary>
            The account owned by the entity.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.IAccountAvailableAcitvitiesProvider">
            <summary>
            Represents the component in charge of retrieving all available account types (<see cref="T:Retalix.StoreServices.Model.Finance.Account.AccountTypeName"/>) 
            and their respective source and target activities.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountAvailableAcitvitiesProvider.GetActivtiesForAllAccountTypes">
            <summary>
            Retrieves all account types and their source\target activities.
            </summary>
            <returns>A list of the available activities</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.IAccountDao">
            <summary>
             Provides all the DAL functionality regarding a cash office <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountDao.Add(Retalix.StoreServices.Model.Finance.Account.IAccount)">
            <summary>
            Add a new account.
            </summary>
            <param name="account">The new account that will be added</param>
            <returns>The new account that was added</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountDao.Update(Retalix.StoreServices.Model.Finance.Account.IAccount)">
            <summary>
            Update an existing account.
            </summary>
            <param name="account">The account that will be updated</param>
            <returns>The new account that was updated</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountDao.FindBy(System.String,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Boolean)">
            <summary>
            Get accounts belonging to the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/> which hold this profileName.
            </summary>
            <param name="accountProfileName">The profile name the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>s are searched by</param>
            <param name="businessUnit">The business unit that the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>s searched belong to</param>
            /// <param name="includeInActiveAccounts">The includeInActiveAccounts unit that the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>s searched belong to</param>
            <returns>All <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>s that comply with the search criteria (have this profile and belong to this business unit)</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountDao.FindBy(System.String,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Finance.Account.PagingCriteria,System.Boolean)">
            <summary> 
            Get accounts by account profile name, business unit and paging criteria.
            </summary>
            <param name="accountProfileName">The account profile.</param>
            <param name="businessUnit">The business unit that the searched <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>s belong to.</param>
            <param name="pagingCriteria">paging criteria for retreiving by paging.</param>
              /// /// <param name="includeInActiveAccounts">The includeInActiveAccounts unit that the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>s searched belong to</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountDao.FindAll(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Get all existing accounts belonging to the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>.
            </summary>
            <param name="businessUnit">The business unit that the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>s searched belong to</param>
            <returns>Aall <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>s that comply with the search criteria (belong to this business unit)</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountDao.FindAll">
            <summary>
            Get all the existing accounts.
            </summary>
            <returns>All the accounts in the system</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountDao.GetBy(System.String)">
            <summary>
            Get the account with this ExternalId (since the external id is unique, there will only be one such account).
            </summary>
            <param name="externalId"></param>
            <returns>The account having this external id</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountDao.GetBy(System.String,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Get the account with this name that belongs to this business unit (since the name is unique in the store, there will only be one such account).
            </summary>
            <returns>The account having this name</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountDao.TryGetBy(System.String,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Finance.Account.IAccount@)">
            <summary>
            Try to Get the account with this name that belongs to this business unit (since the name is unique in the store, there will only be one such account).
            </summary>
            <returns>True if the account found, false if not</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountDao.Find``1(Retalix.StoreServices.Infrastructure.DataAccess.IQuery{Retalix.StoreServices.Model.Finance.Account.IAccount,Retalix.StoreServices.Model.Finance.Account.IAccount,``0})">
            <summary>
            Find <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see>s according to the query.
            </summary>
            <typeparam name="TRole">Used to describe the scope of the query.</typeparam>
            <param name="query">A query which returns <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see>s according to its fetching strategy.</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see>s found by the query.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.IAccountFactory">
            <summary>
            A factory for creating <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> entities.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountFactory.Create(Retalix.StoreServices.Model.Finance.Account.AccountCreationArgs)">
            <summary>
            Used to create an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> entity.
            </summary>
            <param name="creationArgs">The arguments used for creating the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> entity</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> created by the factory</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile">
            <summary>
             Represents an entity associated by a cash office <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> that 
             holds configuration data such as: The account type name (Till/Safe...), In which 
             cash office activities can the account participate and In what direction is the 
             account participating in the cash office activity (source/target/both/none)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccountProfile.AccountType">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Finance.Account.AccountTypeName">AccountTypeName</see> of the associated
            account (e.g. Till, Safe, Bank...).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccountProfile.SourceActivities">
            <summary>
            Gets or sets allowed activities for the associated account to participate as
            the source.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccountProfile.TargetActivities">
            <summary>
            Gets or sets allowed activities for the associated account to participate as
            the target.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountProfile.ActivityDirectionFor(Retalix.StoreServices.Model.Finance.CashOfficeActivityName)">
            <summary>
            Determine the direction in which the profile holder can participate in a cash office activity.
            </summary>
            <param name="cashOfficeActivity">The cash office activity (e.g. TenderLoan, PayIn, ...)</param>
            <returns>The direction in which the profile's holder can participate as (e.g. source)</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccountProfile.IsDefault">
            <summary>
            Gets or sets a value that indicates whether the profile is the default 
            profile in the system for the specific <see cref="T:Retalix.StoreServices.Model.Finance.Account.AccountTypeName"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccountProfile.ExternalId">
            <summary>
            The profile's external id (unique).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccountProfile.Description">
            <summary>
            The profile's description.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IAccountProfile.IsActiveAccount">
            <summary>
            Determines whether this profile is related to active account or not
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfileDao">
            <summary>
            Interface representing the component in charge of the persistence/fetching of the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> entity.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountProfileDao.Save(Retalix.StoreServices.Model.Finance.Account.IAccountProfile)">
            <summary>
            Saves the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/>
            </summary>
            <param name="accountProfile">The account profile to be saved</param>
            <returns>The account profile that was saved</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountProfileDao.GetAll">
            <summary>
            Retrieves all <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/>s in the system.
            </summary>
            <returns>All the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/>s in the system</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountProfileDao.Get(Retalix.StoreServices.Model.Finance.Account.AccountTypeName)">
            <summary>
            Retrieves all <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/>s in matching an account type in the system.
            </summary>
            <param name="accountTypeName">Type upon which to search <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/>s</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/>s having <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>s with the given type</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountProfileDao.Get(System.String)">
            <summary>
            Retrieves the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> with the given external Id.
            </summary>
            <param name="externalId">External id by which to search for the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/></param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> with the given external Id</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountProfileDao.GetDefault(Retalix.StoreServices.Model.Finance.Account.AccountTypeName)">
            <summary>
            Retrieves the default <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> having this <see cref="T:Retalix.StoreServices.Model.Finance.Account.AccountTypeName"/> (for every account type there is one default profile).
            </summary>
            <param name="accountTypeName">Type by which to search for the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/></param>
            <returns>The default <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> with the given account type</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountProfileDao.GetDefaultCashierProfileMode(Retalix.StoreServices.Model.Finance.Account.TouchpointProfileMode)">
            <summary>
             having this <see cref="T:Retalix.StoreServices.Model.Finance.Account.TouchpointProfileMode"/> (for cashier accounts).
            </summary>
            <param name="profileMode">Type by which to search for the <see cref="T:Retalix.StoreServices.Model.Finance.Account.TouchpointProfileMode"/></param>
            <returns>The default <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> with the given account type</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountProfileDao.Delete(System.String)">
            <summary>
            Deletes the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> from the system.
            </summary>
            <param name="accountProfileExternalId">External id of the profile to be deleted</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountProfileDao.DeleteAll(Retalix.StoreServices.Model.Infrastructure.DataMovement.DeleteAllProviders.ITruncateHelperDao)">
            <summary>
            Deletes all <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/>s from the system.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfileFactory">
            <summary>
            Represents the component in charge of instantiation and construction of an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountProfileFactory.Create(Retalix.StoreServices.Model.Finance.Account.AccountTypeName)">
            <summary>
            Creates an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> based on the given <see cref="T:Retalix.StoreServices.Model.Finance.Account.AccountTypeName"/>.
            </summary>
            <param name="accountTypeName">Account type that the new <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> will have</param>
            <returns>A new <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> with the given <see cref="T:Retalix.StoreServices.Model.Finance.Account.AccountTypeName"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IAccountProfileFactory.Create(Retalix.StoreServices.Model.Finance.Account.AccountTypeName,System.String)">
            <summary>
            Creates an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> based on the given <see cref="T:Retalix.StoreServices.Model.Finance.Account.AccountTypeName"/> (and sets the given external id).
            </summary>
            <param name="accountTypeName">Account type that the new <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> will have</param>
            <param name="externalId">External id that the new <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> will have</param>
            <returns>A new <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> with the given <see cref="T:Retalix.StoreServices.Model.Finance.Account.AccountTypeName"/> and external id</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.IActivityConfiguration">
            <summary>
            Defines enhancement to CashOfficeActivity used by a <see cref="T:Retalix.StoreServices.Model.Finance.Account.ISafeAccount"/> (holds that activity name 
            and the retail segments on which it can be performed).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IActivityConfiguration.Name">
            <summary>
            The CashOfficeActivity (e.g. TenderLoan, PayIn, ...)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IActivityConfiguration.RetailSegments">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment"/>s allowed for this activity
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.ISafeAccount">
            <summary>
            Defines a cash office account that is a safe (the concrete Safe class will implement both <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> and this interface).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.ISafeAccount.SaveActivityConfiguration(Retalix.StoreServices.Model.Finance.CashOfficeActivityName,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment})">
            <summary>
            Save an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IActivityConfiguration"/> on this safe account.
            </summary>
            <param name="activity">The cash office activity (e.g. TenderLoan)</param>
            <param name="retailSegment">The retail segments for which this configuration holds</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.ISafeAccount.GetActivityConfiguration(Retalix.StoreServices.Model.Finance.CashOfficeActivityName)">
            <summary>
            Get all the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment"/>s that there's an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IActivityConfiguration"/> for on this activity.
            </summary>
            <param name="activity">The cash office activity (e.g. TenderLoan)</param>
            <returns>The retail segments having configurations for this activity</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.ISafeAccount.GetAllActivityConfigurations">
            <summary>
             Get all the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IActivityConfiguration"/> of this safe account.
            </summary>
            <returns>All <see cref="T:Retalix.StoreServices.Model.Finance.Account.IActivityConfiguration"/>s of this safe account</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.ISafeAccount.ResetActivityConfigurations">
            <summary>
            Reset all ActivityConfigurations on this safe account.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.AccountBalanceSummaryLookupCriteria">
            <summary>
             keeps all the criteria options upon lookup for a specific Account Balance data
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.CashierAccountBalanceExternalKey.BusinessUnitId">
            <summary>
            The business unit id of the account the balance belongs to
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.CashierAccountBalanceExternalKey.BusinessDate">
            <summary>
            The business date of the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.CashierAccountBalanceExternalKey.AccountId">
            <summary>
            The external id of the account
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Balancing.CashierAccountBalanceExternalKey._shiftStart">
            <summary>
            The Shift of the transaction
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IOpenAccountBalanceFinder.Find(Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod)">
            <summary>
            find account balances where:
            cashier - end shift is missing
            Pos - end of day not arrived
            Drawer - exist a pos where eod not arrived
            </summary>
            <param name="storeBalancePeriod">The period to be settled</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.ISettleConfiguration.ReasonGroupCodeName">
            <summary>
            Name of the group reason code for settle an account balance
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.ISettleConfiguration.DefaultReasonCodeId">
            <summary>
            Id of the default reason code for settle an account balance
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.ISettleConfiguration.EnableMissingTransactionsView">
            <summary>
            Enable view for missing transactions
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.ISettleConfiguration.SettlementBeforeEndOfPeriodFlow">
            <summary>
            Allows or prohibits flow of settlement approval before End Of Day
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.SettleConfigurationBeforeEndOfDayEnum">
            <summary>
            Types of flow to enable or disable settle till before end of a period
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Balancing.SettleConfigurationBeforeEndOfDayEnum.Prohibit">
            <summary>
            Default behavior, to support existing flow
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Balancing.SettleConfigurationBeforeEndOfDayEnum.ApprovalFlow">
            <summary>
            Enable approve flow of a transaction before end of period
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalancePos.TouchPointId">
            <summary>
            The touch point Id where the shift was created
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalancePos.AccountBalance">
            <summary>
            The user name that started the current shift
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceShiftAccount.ShiftStart">
            <summary>
            The Date and Time that the shift has started 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceShiftAccount.ShiftEnd">
            <summary>
            The Date and Time that the shift has ended 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceShiftAccount.BusinessDate">
            <summary>
            The current business day
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceShiftAccount.BusinessUnitId">
            <summary>
            The business unit Id where the shift was created
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceShiftAccount.TouchPointId">
            <summary>
            The touch point Id where the shift was created
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceShiftAccount.UserName">
            <summary>
            The user name that started the current shift
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceShiftAccount.AccountBalance">
            <summary>
            the connected account balance
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IOpenAmountCalculator.Calculate(Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance)">
            <summary>
            calc open amount by acount balance
            </summary>
            <param name="accountBalance"></param>
            <returns>Calculate</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IShiftAccount">
            <summary>
             Provides all the information regarding the shift account of a specific cash office <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> (in an <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IShiftAccount.ShiftStart">
            <summary>
            The Date and Time that the shift has started 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IShiftAccount.ShiftEnd">
            <summary>
            The Date and Time that the shift has ended 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IShiftAccount.BusinessDate">
            <summary>
            The current business day
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IShiftAccount.BusinessUnitId">
            <summary>
            The business unit Id where the shift was created
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IShiftAccount.TouchPointId">
            <summary>
            The touch point Id where the shift was created
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IShiftAccount.UserName">
            <summary>
            The user name that started the current shift
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IShiftAccount.ShiftAccountStatusType">
            <summary>
            The user name that started the current shift
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.AccountBalanceExternalKey">
            <summary>
             Provides Store Balance External Key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.AccountBalanceExternalKey.BusinessUnitId">
            <summary>
            The business unit id of the account the balance belongs to
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.AccountBalanceExternalKey.BusinessDate">
            <summary>
            The business date of the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.AccountBalanceExternalKey.AccountId">
            <summary>
            The external id of the account
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.ActivitySummary">
            <summary>
            A class holding summary data related to monetary activities:
            The number of transactions that are summed, and the tenders and amounts (including foreign currency)
            used in these transactions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.ActivitySummary.TenderSummary">
            <summary>
            Gets or sets a key value pair representing the tender's id and the amount data summed for the transactions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.ActivitySummary.TransactionCount">
            <summary>
            Gets or sets the number of transactions that are being summed.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.AccountBalanceInfo">
            <summary>
             Provides account balance info
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Balancing.AccountBalanceInfo.AccountBalanceId">
            <summary>
               The Id of the account balance
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Balancing.AccountBalanceInfo.AccountBalanceStartDate">
            <summary>
               The first date of the account balance's period
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.BalancingActivityData">
            <summary>
            This class represents data for a balancing activity.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.BalancingActivityData.ActivityName">
            <summary>
            Gets or sets the balancing activity's name: either a CashOffice activity name (e.g. "TenderLoan"), or "Sales" or "Cashback".
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.BalancingActivityData.ActivityCount">
            <summary>
            Gets or sets an integer representing the number of times the activity was performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.BalancingActivityData.ActivityTenderDirection">
            <summary>
            Gets or sets the direction the tenders are in when the activity was performed (e.g.: if the ActivityName is "TenderLoan"
            then for a TillAccount the value will be "In" and for a SafeAccount the value will be "Out").
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.BalancingActivitySummary">
            <summary>
            This class represents a balancing activity's aggregated data:
            For a relevant <see cref="P:Retalix.StoreServices.Model.Finance.Balancing.BalancingActivitySummary.BalancingActivityData">BalancingActivityData</see> (which is comprised of the activity name, count and tenders direction),
            there are <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.BalancingTenderLine">tender line</see>s for the tenders that were used in the activity (the tender's amount is aggregated). 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.BalancingActivitySummary.BalancingActivityData">
            <summary>
            Gets or sets the balancing activity data for this aggregation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.BalancingActivitySummary.BalancingTenderLines">
            <summary>
            Gets or sets the balancing tender lines for this aggregation.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.BalancingTenderLine">
            <summary>
            This class represents balancing data: the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender type</see>'s id as well as the aggregated amounts (base and converted).
            For each balancing activity, there will be as many BalancingTenderLines as <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender type</see>s 
            used in the activity. The amount represents an aggregation of all the amounts of the certain tender used in the activity.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.BalancingTenderLine.TenderTypeId">
            <summary>
            Gets or sets the Id of the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender type</see> for whom the amount is summed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.BalancingTenderLine.BaseAmount">
            <summary>
            Gets or sets the summed base amount (foreign amount) for the relevant <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender type</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.BalancingTenderLine.ConvertedAmount">
            <summary>
            Gets or sets the summed local amount for the relevant <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender type</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.BalancingTenderLine.ActivityCount">
            <summary>
            Gets or sets an integer representing the number of times the activity was performed.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.CashOfficeTenderDirection">
            <summary>
            This enum is used to distinguish the tender flow direction, In or Out (of a certain <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see>).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">
            <summary>
             Provides all the information regarding the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance"/> of a specific cash office <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> (in an <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance.IsApproved">
            <summary>
            Flag indicating that the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance"/> for the specified <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> has been approved.
            IsApproved = true means that all the data in this class is read only and cannot be changed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance.Reason">
            <summary>
            Reason specified for the account balance being closed in an unbalanced state.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance.Account">
            <summary>
            The cash office account that is represented by this account balance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance.Balance">
            <summary>
            The balance of the account (containing data such as: TotalIn, TotalOut, OverShort and Declaration).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance.BalanceShiftAccount">
            <summary>
            The balance shift in case of cashier balance account 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance.SettleReasonCode">
            <summary>
            The reason code for settle
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance.TransactionAfterSettleExist">
            <summary>
            exist transaction after settle of the period
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance.BalancePoses">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Finance.TenderAmount">TenderAmount</see> of the associated
            for constant carry over method
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance.SetReason(System.String)">
            <summary>
            Set the Reason property.
            </summary>
            <param name="reason">Reason property to set</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance.SetDeclaration(Retalix.StoreServices.Model.Finance.Funds,System.DateTime)">
            <summary>
            Set the Declaration property of the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance"/>.
            </summary>
            <param name="declaration">The amount that was declared</param>
            <param name="declarationCreationDate">The creation date of the declaration transaction</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance.ChangeStatus(System.Boolean)">
            <summary>
            Changes the status of the account balance (sets the IsApproved property).
            If (isApproved = true) then verifies that if "Balance"!=0, then "Reason" can't be empty, and then sets the "IsApproved" flag to true
            else (isApproved = false) sets IsApproved to false.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance.StoreBalancePeriod">
            <summary>
             the period where the account balance connect to
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance">
            <summary>
             Provides business information related to the balance of an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> (in an <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.TotalIn">
            <summary>
            Sum of all sales and incoming fund transfers during the specified <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.TotalInFunds">
            <summary>
            Sum of all sales and incoming fund transfers during the specified <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.TotalOut">
            <summary>
            Sum of all outgoing fund transfers during the specified <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.TotalOutFunds">
            <summary>
            Sum of all outgoing fund transfers during the specified <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.OverShort">
            <summary>
            In case there is a valid declaration: Declaration - ExpectedAmount.
            In case there is no valid declaration: ExpectedAmount * (-1) .
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.OverShortFunds">
            <summary>
            In case there is a valid declaration: Declaration - ExpectedAmount.
            In case there is no valid declaration: ExpectedAmount * (-1) .
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.TotalBalance">
            <summary>
            The balance calculated across all <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>s for this <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> up to and including the containing period.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.TotalBalanceFunds">
            <summary>
            The balance calculated across all <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>s for this <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> up to and including the containing period. Divided to tenders ans amounts.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.Declaration">
            <summary>
            Valid Declaration amount. Declaration is valid when 
            1) Declaration was done within the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>'s time frame
             And
            2) There are no sales or fund transfers between the declaration time and the end of the period.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.DeclarationFunds">
            <summary>
            Valid Declaration amount. Declaration is valid when 
            1) Declaration was done within the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>'s time frame
             And
            2) There are no sales or fund transfers between the declaration time and the end of the period.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.DeclarationDate">
            <summary>
            The creation date of the declaration transaction (whose funds appear in DeclarationFunds property), if exists.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.PeriodBalance">
            <summary>
            Balance for the specific period, calculated as (Total In - Total Out).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.OpeningAmount">
            <summary>
            The Opening Amount available to the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> at the start of the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.OpeningAmountFunds">
            <summary>
            Sum of all closing amounts of previous <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalance.SetDeclaration(Retalix.StoreServices.Model.Finance.Funds,System.DateTime)">
            <summary>
            Set the Declaration property.
            </summary>
            <param name="declaration">The amount declared</param>
            <param name="declarationCreationDate">The creation date of the declaration transaction</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalance.SetTotalBalanceAsFixedValue">
            <summary>
            Sets the total balance field as a fixed value, can be called only when the containing <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> is settled.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.IsZeroed">
            <summary>
            Returns true when Balance is all zeroed (TotalIn=0 and TotalOut=0 and OpeningAmount=0 and Declaration==null),
            Returns false otherwise.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.ExpectedAmount">
            <summary>
             The expected amount based on activities and opening amount (== PeriodBalance + OpeningAmount).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalance.ExpectedAmountFunds">
            <summary>
             The expected amount based on activities and opening amount (== PeriodBalance + OpeningAmount). Divided to tenders and amounts.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableAccount">
            <summary>
             Represents an account that can participate in an <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableAccount.CalculateBalance(Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Creates a new <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance"/> and populates it with:
            1. Sum of incoming fund transfers and sales made on this <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> between the given dates, if applicable (= TotalIn).
            2. Sum of outgoing funds made on this <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> between the given dates (= TotalOut).
            3. Last valid declared amount on this <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> between the given dates (= Declaration).
            </summary>
            <param name="startDate">Start date of the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/></param>
            <param name="endDate">End date of the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/></param>
            <returns>The new balance created for the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> in the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingSummaryProvider">
            <summary>
            This interface represents a component that is in charge of providing aggregated balancing data for a certain <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see>
            in a certain <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">store balance period</see>. The provided result holds the aggregated tender amounts for each activity held during the period.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingSummaryProvider.LookupAccountBalanceSummary(Retalix.StoreServices.Model.Finance.Balancing.AccountBalanceSummaryLookupCriteria)">
            <summary>
            /// Lookup account balance summaries for a certain <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see> in a certain <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>.
            The start and end dates are those of the relevant <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingSummaryProvider.LookupAccountBalanceSummary(Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod)">
            <summary>
            Lookup account balance summaries for a certain <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see> in a certain <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>.
            The start and end dates are those of the relevant <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>.
            </summary>
            <param name="storeBalancePeriod">  store period where to get the balance data from</param>
            <returns>BalanceActivitySummaries, which are DTOs that hold amount aggregations (per tender) for a certain balancing activity per account balance id</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IBusinessDaySelector`1">
            <summary>
            Provides a selection of business date.
            </summary>
            <typeparam name="T">ex: IFundTransferTransactionLog</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBusinessDaySelector`1.GetBusinessDateBy(`0)">
            <summary>
            Get business date by context
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IDepositTenderLineAmountCalculator">
            <summary>
            Update deposit tender line amount to be summed for account balancing.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IDepositTenderLineAmountCalculator.ShouldCalculate(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog)">
            <summary>
            Checks if the calculator should handle this tender line
            </summary>
            <param name="tenderLine"></param>
            <returns>true - for tender lines with specific property</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IDepositTenderLineAmountCalculator.CalculateAmountForBalance(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog)">
            <summary>
            Update the tender line foreign amount according to the specific calculator type
            </summary>
            <param name="tenderLine"></param>
            <returns>The updated line amount  (including foreign currency data)</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IFundTransferAutoReconcileLinesCollector">
            <summary>Collect all tenders and deposits to add to the Autoreconsile transaction</summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IFundTransferAutoReconcileLinesCollector.CollectDepositTenderLines(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog,System.Collections.Generic.IDictionary{System.String,Retalix.StoreServices.Model.Finance.Money.Money},System.Collections.Generic.IDictionary{System.String,Retalix.StoreServices.Model.Finance.Money.ExchangeMoney})">
            <summary>Collect all tenders and deposits to add to the Autoreconsile transaction</summary>
            <param name="retailTransactionLog"></param>
            <param name="autoReconciliationTenders"></param>
            <param name="convertedTenders"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">
            <summary>
             Provides all the information and functionality related to balance period of a specific store, as well
             as a list of balances per account in that store
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.AccountBalanceApproving">
            <summary>
            Occurs before approving account balance.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.ExternalId">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period's</see> unique identifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.IsSettled">
            <summary>
            Flag indicating that the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see> has been settled. 
            IsSettled = true means that all the data in this class is read only and can't be changed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.CreationDate">
            <summary>
            The physical creation <see cref="T:System.DateTime">DateTime</see> of the balance period.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.Start">
            <summary>
            The start <see cref="T:System.DateTime">DateTime</see> for this balance period.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.End">
            <summary>
            The end <see cref="T:System.DateTime">DateTime</see> for this balance period.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.SettlementDate">
            <summary>
            <see cref="T:System.DateTime">DateTime</see> representing when the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>
            was settled.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.Type">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account type</see> this <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see> 
            is meant to balance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.AccountBalances">
            <summary>
            Balance of the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">store's</see> related <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">account balances</see> in this period
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.Store">
            <summary>
            <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">Store</see> associated with this <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">balance period</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.PopulateAccountBalances">
            <summary>
            Populates <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">account balances</see> collection with balancing information according 
            to the current <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.GetAccountBalanceByAccountId(System.String)">
            <summary>
            Get <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance"/> from <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance"/>s according to an account's id.
            </summary>
            <param name="accountExternalId">External id belonging to the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see></param>
            <returns><see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">AccountBalance</see> found for the given external id</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.GetAllAccountBalancesByAccountId(System.String)">
            <summary>
            Get sequence of <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance"/> objects  according to an account id.
            </summary>
            <param name="accountExternalId">External id belonging to the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see></param>
            <returns>All <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">AccountBalance</see>s found for the given external id</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.GetAccountBalanceByAccountIdAndSiftStart(System.String,Retalix.StoreServices.Model.Infrastructure.Globalization.AbsoluteDateTime)">
            <summary>
            Get <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance"/> from <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance"/>s according to an account's id.
            </summary>
            <param name="accountExternalId">External id belonging to the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see></param>
            <param name="shiftSatrtTime"></param>
            <returns><see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">AccountBalance</see> found for the given external id</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.AddNewAccountBalance(Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance)">
            <summary>
            Adds an <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance"/> to the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>.
            </summary>
            <param name="accountBalance">The <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">account balance</see> to add to the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.SetEndDate(Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Set the "EndDate" for this <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>
            </summary>
            <param name="endDate"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.Settle">
            <summary>
            Verify that all <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">accounts balanced periods</see> are settled, and then sets the "IsSettled" flag to true.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.UpdateAccountBalance(System.String,System.Boolean,System.String,Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReason,Retalix.StoreServices.Model.Infrastructure.Globalization.AbsoluteDateTime)">
            <summary>
            Updates an <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">account balance</see> based on the sent parameters.
            </summary>
            <param name="accountExternalId">Used to identify the account balance on which to perform the update</param>
            <param name="isApproved">Flag indicating the new <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">balance</see> approval status.</param>
            <param name="reason">Reason used when approving the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">balance</see></param>
            <param name="settleReason"></param>
            <param name="shiftStartDateTime">Time when the shift was started</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.UpdateAccountBalance(System.String,System.Boolean,System.String)">
            <summary>
            Updates an <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">account balance</see> based on the sent parameters.
            </summary>
            <param name="accountExternalId">Used to identify the account balance on which to perform the update</param>
            <param name="isApproved">Flag indicating the new <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">balance</see> approval status.</param>
            <param name="reason">Reason used when approving the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance">balance</see></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod.LastUpdated">
            <summary>
            Gets Last Modified Date of the StoreBalancePeriod record. Each time the StoreBalancePeriod is updated, the LastUpdated gets new value.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodSettleValidator">
            <summary>
            This interface is used in order to validate that the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">StoreBalancePeriod</see> meets 
            the relevant criteria in order to be settled (if not, the implementer of this interface will throw an exception).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodSettleValidator.Validate(Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod)">
            <summary>
            Validate if the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">StoreBalancePeriod</see> can be settled. If not, an exception will be thrown.
            </summary>
            <param name="storeBalancePeriod">The period to be settled</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodSettleValidator.Priority">
            <summary>
            the execution priority of the validator,
            the higher the priory is , it will be execute earlier
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.ITenderLineAmountCalculator">
            <summary>
            Determine line amount to be summed for account balancing.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.ITenderLineAmountCalculator.ShouldCalculate(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog)">
            <summary>
            Checks if the calculator should handle this tender line
            </summary>
            <param name="tenderLine"></param>
            <returns>true - for tender lines with specific property</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.ITenderLineAmountCalculator.CalculateAmountForBalance(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog)">
            <summary>
            Update the tender line foreign amount according to the specific calculator type
            </summary>
            <param name="tenderLine"></param>
            <returns>The updated line amount (including foreign currency data)</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.TransactionAccumulating.ICashbackTransactionsActivitySummariesAccumulator">
            <summary>
            This interface is used for accumulating <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">retail transaction log</see>s of sales transactions containing Cashback.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.TransactionAccumulating.IRetailTransactionsActivitySummariesAccumulator">
            <summary>
            This interface is used for processing of <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">retail transaction log</see>s, 
            in order to extract CashOffice balancing information from them. The data extracted exists on the ActivitySummary.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.TransactionAccumulating.IRetailTransactionsActivitySummariesAccumulator.ActivitySummary">
            <summary>
            Holds the balancing data extracted from the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">retail transaction log</see>s.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.TransactionAccumulating.IRetailTransactionsActivitySummariesAccumulator.Process(System.Collections.Generic.IList{Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog})">
            <summary>
            This method is used to process <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">retail transaction log</see>s for balancing purposes.
            </summary>
            <param name="retailTransactionLogs">The logs that will be processed for balancing purposes</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.TransactionAccumulating.ISaleTransactionsActivitySummariesAccumulator">
            <summary>
            This interface is used for accumulating <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">retail transaction log</see>s of sales transactions.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancingStrategy">
            <summary>
             provides a strategy for a specific store balance period, for a till or a safe account
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancingStrategy.GetBalancePeriodStartDateTime(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
             get the first timestamp in calculation of a balance period, when there were no previously
             calculated balance periods
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IThresholdRestriction">
            <summary>
             Contains parameters which describe a threshold.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IThresholdRestriction.Method">
            <summary>
            The threshold method.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IThresholdRestriction.Value">
            <summary>
            The threshold value.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancingType">
            <summary>
             provides types for store balance periods, upon accounts types (till or safe)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancingType.TillBalancing">
            <summary>
             this store balance is related to till accounts
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancingType.SafeBalancing">
            <summary>
             this store balance is related to safe accounts
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancingType.CashierBalancing">
            <summary>
             this store balance is related to safe accounts
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancingType.DrawerBalancing">
            <summary>
             this store balance is related to safe accounts
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancingType.XzStubBalancing">
            <summary>
            this is XZ Report related entity, to prevent stuck token on XZ Report.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancingType.BankingSafeBalancing">
            <summary>
             this store balance is related to bank safe accounts
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.ThresholdMethod">
            <summary>
             Determines the method in with which a threshold is to be calculated.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Balancing.ThresholdMethod.Percentage">
            <summary>
            Percentile.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Balancing.ThresholdMethod.Amount">
            <summary>
            Amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.OpenDrawer.IOpenDrawer.OpenDrawerOnLogIn">
            <summary>
            Gets true if open drawer on POS LogIn requiered
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.OpenDrawer.IOpenDrawer.OpenDrawerOnLogOff">
            <summary>
            Gets true if open drawer on POS Logout requiered
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Period.IBusinessDayManyUnits">
            <summary>
            Business date BC to change current business date.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IBusinessDayManyUnits.FilterEndOfDayExpected(System.String,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint})">
            <summary>
            filters the list of touchpoints that EOD should be executed on basing on the following rule:  
            check current date and future business date. return true if need to execute EOD.
            </summary>
            <remarks>It is expected that all touchPointIds are related to the given storeId</remarks>
            <param name="storeId">the id of the store that the touchpoints are assigned too.</param>
            <param name="touchPoints">the list of touch points that should be filtered</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IBusinessDayManyUnits.IncreaseBusinessDay(System.String,System.String)">
            <summary>
            update business date
            </summary>
            <param name="storeId"></param>
            <param name="touchPointIds"></param>        
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IBusinessDayManyUnits.ManualApprovalPeriod(System.String,System.String,System.String)">
            <summary>
            validate if there is manual approval period before end of day.
            </summary>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
            <param name="touchPointGroupId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IBusinessDayManyUnits.CalculateNextRunOffset(System.String,System.String)">
            <summary>
            Returns time in seconds from original requested execution time of the EOD per touch point
            </summary>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IMobileFarmEodTouchPointsProvider.TouchPointsForEod">
            <summary>Selects the touch points that are ready to run.</summary>
            <param name="touchPoints">the touchPoints to select from</param>
            <returns>the touch points that are ready to run</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Period.IBusinessDay">
            <summary>
            end of day configuration.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IBusinessDay.DayOfWeekIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IBusinessDay.Time">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IBusinessDay.NextDay">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IBusinessDay.Active">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Period.IBusinessDayHistory">
            <summary>
            Business day history.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IBusinessDayHistory.Id">
            <summary>
            Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IBusinessDayHistory.StoreId">
            <summary>
            Store id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IBusinessDayHistory.PosId">
            <summary>
            POS terminal id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IBusinessDayHistory.CurrentBusinessDay">
            <summary>
            Current business day.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IBusinessDayHistory.BusinessDayClosedAt">
            <summary>
            Business day closed at.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IBusinessDayHistory.LastBusinessDay">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Period.IBusinessDayUnit">
            <summary>
            Business date BC to change current business date.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IBusinessDayUnit.IsEndOfDayExpected(System.String,System.String)">
            <summary>
            check current date and future business date. return true if need to execute EOD.
            </summary>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IBusinessDayUnit.IncreaseBusinessDay(System.String,System.String)">
            <summary>
            update business date
            </summary>
            <param name="storeId"></param>
            <param name="touchPointId"></param>        
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IBusinessDayUnit.ManualApprovalPeriod(System.String,System.String,System.String)">
            <summary>
            validate if there is manual approval period before end of day.
            </summary>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
            <param name="touchPointGroupId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IBusinessDayUnit.CalculateNextRunOffset(System.String,System.String)">
            <summary>
            Returns time in seconds from original requested execution time of the EOD per touch point
            </summary>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.ICurrentBusinessDay.GetDate(System.String,System.String)">
            <summary>
            Returns the Date of the current business day.
            </summary>
            <param name="storeId">
            The business unit ID (usually a store) we want to get business day for.
            Must be a valid business unit ID or null.
            Must be a valid business unit ID is touchPointId is not null
            </param>
            <param name="touchPointId">
            The touchpoint ID we want to get business day for.
            Must be a valid touchpoint ID or null.
            </param>
            <returns>NominalDateTime representing Date only (time part is zero)</returns>
            <remarks>
            Business Day scheduling is managed per business unit and Touchpoint. 
            If storeId and touchPointId are not null, the method returns the current business day as defined
            by the End Of Day scheduling management of the POS.
            If storeId is not null but touchPointId is null, the method returns the current local date
            at the business unit (or date of the host if time zone is not defined for this business unit).
            If both storeId and touchPointId are null, the method returns the current date of the host.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Period.IEndOfDay">
            <summary>
            end of day data
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEndOfDay.BusinessUnit">
            <summary>
             Link to store hierarchy location
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEndOfDay.DaysOfWeek">
            <summary>
            scheduling times
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEndOfDay.ExceptionalInformation">
            <summary>
            data used to exchange scheduling times
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEndOfDay.PreviousExceptionalInformation">
            <summary>
            represent historical exceptional information
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDay.AddExceptionalInformation(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Finance.Period.IEndOfDayException})">
            <summary>
            append exceptional information
            </summary>
            <param name="added">add each of it to exceptional information</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDay.UpdateExceptionalInformation(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Finance.Period.IEndOfDayException})">
            <summary>
            update existing exceptional information
            </summary>
            <param name="updated">each of it will update an old exceptional information</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDay.DeleteExceptionalInformation(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Finance.Period.IEndOfDayException})">
            <summary>
            remove exceptional information
            </summary>
            <param name="deleted">exceptional information that will be removed</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEndOfDay.ExternalId">
            <summary>
             External id the EOD entry
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDay.UpdateNextRunOffset(System.String,System.Int32)">
            <summary>
            Updates a ManualApproval object per touch point id
            </summary>
            <param name="touchPointId"></param>
            <param name="totalSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDay.ResetNextRunOffset(System.String)">
            <summary>
            Resets a ManualApproval from the end of day once executed
            </summary>
            <param name="touchPointId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDay.GetNextRunOffset(System.String)">
            <summary>
            Returns the next run offset time in seconds per touch point id
            </summary>
            <param name="touchPointId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Period.IEndOfDayException">
            <summary>
            end of day exceptional information
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEndOfDayException.EffectiveDate">
            <summary>
            Gets or sets the nominal value of the actual date when this exception is set to occur.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEndOfDayException.IsReoccurringDate">
            <summary>
            Gets or sets a boolean value stating whether this exception is a reoccuring or not.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEndOfDayException.TimeToRun">
            <summary>
            Gets or sets the time when the end of day process should begin (only the time is relevant, the date isn't).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEndOfDayException.NextDay">
            <summary>
            Gets or sets a boolean value stating whether this exception (of end of day process) should run on the next day or not.
            For example: if its configured for 1:00 on 16-8-2014 with nextday, then the exception will be relevant on 17-8-2014 01:00.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEndOfDayException.Active">
            <summary>
            Gets or sets a boolean value stating whether the exception is active.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEndOfDayException.EndDate">
            <summary>
            Gets or sets the exceptional information active until this date (relevant while IsReoccurring is on).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEndOfDayException.ExternalId">
            <summary>
            Gets or sets a unique string representing the identity of the end of day exception.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Period.IEndOfDayProcessObserver">
            <summary>
            Observer for the end of day process.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayProcessObserver.BeforeExecute(System.String,System.String)">
            <summary>
            Method executed before end of day process.
            </summary>
            <param name="storeId"></param>
            <param name="terminalId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayProcessObserver.FailToProcess(System.String,System.String,System.Exception)">
            <summary>
            Method executed in case an error occurs during an end of day process
            </summary>
            <param name="storeId"></param>
            <param name="terminalId"></param>
            <param name="exception"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository">
            <summary>
            responsible to receive end of day configuration.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.FindEndOfDayDefinitions">
            <summary>
            Returns all existing definitions for end of date
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.FindEndOfDayDefinitions(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Boolean)">
            <summary>
            Returns existing definitions for end of date by businessUnit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.FindEndOfDayDefinitions(System.Int32)">
            <summary>
            Returns existing definitions for end of date by key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.GetOrCreate(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Boolean)">
            <summary>
            try to receive exiting data, otherwise create new and empty end of day definition with businessUnit.
            </summary>
            <param name="businessUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.SaveOrUpdate(Retalix.StoreServices.Model.Finance.Period.IEndOfDay)">
            <summary>
            Update End Of Day data
            </summary>
            <param name="endOfDay"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.DeleteByHierarchyNode(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
             Delete end of day data assigned to businessUnit
            </summary>
            <param name="businessUnit"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.UpdateBusinessDay(System.String,System.String,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Update business date for current pos.
            </summary>
            <param name="nextBusinessDay"></param>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.UpdateBusinessDay(System.String,System.String,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Update business date for current pos.
            </summary>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
            <param name="currentBusinessDay"></param>
            <param name="businessDayClosedAt"></param>
            <param name="lastBusinessDay"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.FindBusinessDays(System.String,System.String)">
            <summary>
            receive list of business dates, by store and touch point ids.
            </summary>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.GetCurrentBusinessDay(System.String,System.String)">
            <summary>
            Get current business date
            </summary>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.GetCurrentBusinessDayClosedAt(System.String,System.String)">
            <summary>
            receive exactly time when last business day was closed.
            </summary>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.GetLastClosedBusinessDay(System.String,System.String)">
            <summary>
            Retrieve the last closed business day according to the given parameters, 
            if none exists null is returned.
            </summary>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.GetAll">
            <summary>
            Retrieve all end of day definitions. Used by DMS for cold start process
            if none exists null is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.GetAll(Retalix.StoreServices.Model.Finance.Period.IEndOfDay)">
            <summary>
            Retrieve end of day definitions starting from a specific one. Used by DMS for resuming cold start process
            if none exists null is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.DeleteAll">
            <summary>
            Deletes all EndOfDay entities. Used by DMS for cold start.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.DeleteBusinessDayHistory(System.String,System.String)">
            <summary>
            Delete business day history.
            </summary>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.GetAllBusinessDayHistory">
            <summary>
            Get all business day history.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.GetAllBusinessDayHistory(Retalix.StoreServices.Model.Finance.Period.IBusinessDayHistory)">
            <summary>
            Get all business day history from starting position.
            </summary>
            <param name="startingPosition">Starting business day history.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.DeleteAllBusinessDayHistory">
            <summary>
            Delete all business day history.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.GetBusinessDayHistory(System.String,System.String)">
            <summary>
            Get business day history.
            </summary>
            <param name="storeId">Store id.</param>
            <param name="touchPointId">Terminal id.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Period.IEndOfDayRepository.GetBusinessDayHistories(System.String)">
            <summary>
            Get all the business day histories according to the store id.
            if none exists exception is thrown.
            </summary>
            <param name="storeId">Store id</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Period.IEODManualApproval">
            <summary>
            End of day manual approval data
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEODManualApproval.StoreId">
            <summary>
            Store id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEODManualApproval.TouchPointId">
            <summary>
            POS terminal id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Period.IEODManualApproval.NextRunOffset">
            <summary>
            When to run the EOD in seconds from original schedual
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.XZReports.IZReportVisitor">
            <summary>
            Extensibility interface used to specify what data will be added to ZReport printableData XML for use in the receipt engine.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.XZReports.IZReportVisitor.Visit(System.Xml.Linq.XDocument,Retalix.StoreServices.Model.Finance.XZReports.ZReportData,Retalix.StoreServices.Model.Infrastructure.Message.IExpressionContext,System.Int32)">
            <summary>
            Executed after core data added to printableData XML
            </summary>
            <param name="transactionData">ZReport ZReport printableData XML</param>
            <param name="zReportData">Totals and counters</param>
            <param name="expressionContext">Execution context used to evaluate descriptors</param>
            <param name="sequenceNumber">Last sequence number</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.XZReports.IXReportGeneralDetailsPrintableDataAdaptor">
            <summary>
            Markup interface for XReport general details
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.XZReports.IXReportTenderLinePrintableDataAdaptor">
            <summary>
            Represents XReport tender line printable adaptor
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.XZReports.IXReportTenderLinePrintableDataAdaptor.Key">
            <summary>
            Aggregation type key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.XZReports.IXReportTenderLinePrintableDataAdaptor.SubKey">
            <summary>
            Aggregation sub type key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.XZReports.IXReportTenderLinePrintableDataAdaptor.TenderId">
            <summary>
            current tenderId 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.XZReports.IXReportTenderLinePrintableDataAdaptor.IsMatch(Retalix.StoreServices.Model.Finance.XZReports.XZReportTotal)">
            <summary>
            Check if XZReportTotal match the IZReportTenderLinePrintableDataAdaptor.
            </summary>
            <param name="reportTotal">XZReportTotal to test for match</param>
            <returns>true if matched</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.XZReports.IXReportTotalPrintableDataAdaptor">
            <summary>
            Represents XReport total printable adaptor
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.XZReports.IXReportTotalPrintableDataAdaptor.Key">
            <summary>
            Aggregation type key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.XZReports.IXReportTotalPrintableDataAdaptor.SubKey">
            <summary>
            Aggregation sub type key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.XZReports.IXReportTotalPrintableDataAdaptor.Description">
            <summary>
            Aggregation description
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.XZReports.IXReportTotalPrintableDataAdaptor.IsMatch(Retalix.StoreServices.Model.Finance.XZReports.XZReportTotal)">
            <summary>
            Check if XZReportTotal match the IXReportTotalPrintableDataAdaptor
            </summary>
            <param name="reportTotal">XZReportTotal to test for match</param>
            <returns>true if matched</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.XZReports.IXReportTotalPrintableDataAdaptor.IsMatch(Retalix.StoreServices.Model.Finance.XZReports.XZReportCount)">
            <summary>
            Check if XZReportCount match the IXReportTotalPrintableDataAdaptor
            </summary>
            <param name="reportCount">XZReportCount to test for match</param>
            <returns>true if matched</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.XZReports.IZReportGeneralDetailsPrintableDataAdaptor">
            <summary>
            Markup interface for ZReport general details
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.XZReports.IZReportTenderLinePrintableDataAdaptor">
            <summary>
            Represents ZReport tender line printable adaptor
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.XZReports.IZReportTenderLinePrintableDataAdaptor.Key">
            <summary>
            Aggregation type key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.XZReports.IZReportTenderLinePrintableDataAdaptor.SubKey">
            <summary>
            Aggregation sub type key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.XZReports.IZReportTenderLinePrintableDataAdaptor.TenderId">
            <summary>
            current tenderId 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.XZReports.IZReportTenderLinePrintableDataAdaptor.IsMatch(Retalix.StoreServices.Model.Finance.XZReports.XZReportTotal)">
            <summary>
            Check if XZReportTotal match the IZReportTenderLinePrintableDataAdaptor.
            </summary>
            <param name="reportTotal">XZReportTotal to test for match</param>
            <returns>true if matched</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.XZReports.IZReportTotalPrintableDataAdaptor">
            <summary>
            Represents ZReport total printable adaptor
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.XZReports.IZReportTotalPrintableDataAdaptor.Key">
            <summary>
            Aggregation type key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.XZReports.IZReportTotalPrintableDataAdaptor.SubKey">
            <summary>
            Aggregation sub type key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.XZReports.IZReportTotalPrintableDataAdaptor.Description">
            <summary>
            Aggregation description
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.XZReports.IZReportTotalPrintableDataAdaptor.IsMatch(Retalix.StoreServices.Model.Finance.XZReports.XZReportTotal)">
            <summary>
            Check if XZReportTotal match the IZReportTotalPrintableDataAdaptor
            </summary>
            <param name="reportTotal">XZReportTotal to test for match</param>
            <returns>true if matched</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.XZReports.IZReportTotalPrintableDataAdaptor.IsMatch(Retalix.StoreServices.Model.Finance.XZReports.XZReportCount)">
            <summary>
            Check if XZReportCount match the IZReportTotalPrintableDataAdaptor
            </summary>
            <param name="reportCount">XZReportCount to test for match</param>
            <returns>true if matched</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.BusinessRules.ITenderCashOfficeActivityBehavior.Activities">
            <summary>
            Gets or sets the activites for which this behavior is relevant
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Events.TenderCashOfficeActivityEvent">
            <summary>
            Event used by ITenderCashOfficeActivityBehavior upon rule evaluation.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Events.TenderCashOfficeActivityEvent.#ctor(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Finance.CashOfficeActivityName,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            Constructor for this event.
            </summary>
            <param name="tenderType"></param>
            <param name="cashOfficeActivityName"></param>
            <param name="businessUnit"></param>
            <param name="touchPoint"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Events.TenderCashOfficeActivityEvent.TenderType">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tenderType</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Events.TenderCashOfficeActivityEvent.CashOfficeActivityName">
            <summary>
            Gets the <see cref="P:Retalix.StoreServices.Model.Finance.Events.TenderCashOfficeActivityEvent.CashOfficeActivityName">activityName</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Events.TenderCashOfficeActivityEvent.BusinessUnit">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">businessUnit</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Events.TenderCashOfficeActivityEvent.TouchPoint">
            <summary>
            Touchpoint used for the activity
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.TenderAmount">
            <summary>
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.CashOfficeActivityLogDao">
            <summary>
             Dao name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.UserName">
            <summary>
            UserName of the user who performed the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.CreatedFrom">
            <summary>
            Logs that occurred on (or after) this date will be returned (according to Date).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.CreatedTo">
            <summary>
            Logs that occurred on (or before) this date will be returned (according to Date).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.Paging">
            <summary>
            Used for page navigation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.BusinessUnitIds">
            <summary>
            Identifiers of the business units at which the transactions were performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.AccountExternalId">
            <summary>
            Logs of transactions that were performed on this account will be returned.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.TouchPointIds">
            <summary>
            Identifiers of the touch points at which the transactions were performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.FromBusinessDate">
            <summary>
            BusinessDayDate range start, will search for transactions which were closed after or equal to this value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.ToBusinessDate">
            <summary>
            BusinessDayDate range end, will search for transactions which were closed after or equal to this value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.IsSequenceNumberRange">
            <summary>
            Determines whether the sequence numbers in "TransactionSequenceNumbers" represent a range
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.TransactionSequenceNumbers">
            <summary>
             Sequence numbers of the transaction logs.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.Activities">
            <summary>
            Logs of transactions with this type will be returned.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.TargetAccountExternalId">
            <summary>
            Logs of transactions that have this account as target will be returned.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.SourceAccountExternalId">
            <summary>
            Logs of transactions that have this account as source will be returned.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.HeadersOnly">
            <summary>Determines if the service should return all data or just headers</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.AdjustedTransactionsOnly">
            <summary>Determines if the service should return all transactions or just adjusted transactions.
            Note: when flag is true no declaration transactions will be returned</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria.ShiftStart">
            <summary>
            Determines the date and time when user started his shift
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Activity.IActivityLog">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.IActivityLog.TouchPointId">
            <summary>
            Id of the touchpoint where the transaction occured (will be null if the transaction came from Office).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.IActivityLog.TouchPointType">
            <summary>
            the touchpointType where the transaction occured (will be null if the transaction came from Office).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.IActivityLog.Location">
            <summary>
            Location where the transaction occured (e.g. TouchPoint, Office).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.IActivityLog.UserName">
            <summary>
            UserName of the user that initiated the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.IActivityLog.IsTrainingMode">
            <summary>
            True when fund transfer created in training mode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.IActivityLog.OperatorId">
            <summary>
            Operator id 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.IActivityLog.BusinessDate">
            <summary>
            The relevant business date of the fund transfer operation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.IActivityLog.TransactionExternalId">
            <summary>
            The transaction log's External Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.IActivityLog.EndDateTime">
            <summary>
            Get  and sets db recordset  time
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.IActivityLog.TotalAmount">
            <summary>Gets or sets the total amount in local currency of the transaction</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Activity.IActivityLog.BalanceShiftStart">
            <summary>
            Gets the date and time WHERE the shift starts.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Activity.ICashOfficeActivityLogDao">
            <summary>
            returns polymorphic list of activity logs (can be either fund transfer or declaration)
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Activity.ICashOfficeActivityLogDao.Lookup(Retalix.StoreServices.Model.Finance.Activity.ActivityLogSearchCriteria)">
            <summary>
            Lookup ActivityAuditTrailLog according to search criteria received.
            </summary>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.BalanceTenderSummary">
            <summary>
            This class handles aggregated summary of amounts paid by tender and related to account balance
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.BalanceTenderSummary.TenderTypeId">
            <summary>
            Tender Id related to the summary
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.BalanceTenderSummary.AccountBalanceId">
            <summary>
            Account Balance Id related to the summary
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.BalanceTenderSummary.Direction">
            <summary>
            Direction of payment - In or Out
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.BalanceTenderSummary.Amount">
            <summary>
            Aggregated total amount related to the summary
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.BalanceTenderSummary.BaseAmount">
            <summary>
            Aggregated total base amount related to the summary(the amount in the STROE currency)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.BalanceTenderSummary.Updated">
            <summary>
            Last update date of the summary
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Funds">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Funds._tenderAmounts">
            <summary>
            Gets or sets The tenders total amount.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Funds.#ctor(Retalix.StoreServices.Model.Finance.Funds)">
            <summary>
             Copy constructor 
            </summary>
            <param name="funds"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Funds.TenderAmounts">
            <summary>
            Gets The tenders total amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Funds.TenderExcnageAmounts">
            <summary>
            Gets The tenders total amount.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Funds.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,Retalix.StoreServices.Model.Finance.Money.Money}})">
            <summary>
             Construct instance based on tenders and amounts 
            </summary>
            <param name="tenderAmounts"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Funds.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,Retalix.StoreServices.Model.Finance.Money.ExchangeMoney}})">
            <summary>
             Construct instance based on tenders and amounts 
            </summary>
            <param name="tenderAmounts"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Funds.op_Addition(Retalix.StoreServices.Model.Finance.Funds,Retalix.StoreServices.Model.Finance.Funds)">
            <summary>
            Override the + operator.
            </summary>
            <param name="m1">The operator on the left side of the equation</param>
            <param name="m2">The operator on the right side of the equation</param>
            <returns>The result of this addition</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Funds.op_Subtraction(Retalix.StoreServices.Model.Finance.Funds,Retalix.StoreServices.Model.Finance.Funds)">
            <summary>
            Override the - operator.
            </summary>
            <param name="m1">The operator on the left side of the equation</param>
            <param name="m2">The operator on the right side of the equation</param>
            <returns>The result of this addition</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Funds.Empty">
            <summary>
            will be used for representing (usually temporary) an empty instance of Funds
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.AccountTransactionAuditCriterion">
            <summary>
            Filters Retail transaction with Sequence Number Store id and POS id.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAuditFactory">
            <summary>
             A factory for creating new <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAudit"></see>.   
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAuditFactory.Create">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.AuthorizationCodeNotFoundExcpetion">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.StoredValueAccount.AuthorizationCodeNotFoundExcpetion.#ctor">
            <summary>
             Instance of <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.AuthorizationCodeNotFoundExcpetion"/>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAudit">
            <summary>
            An audit record that reflects any modification done to the balance of a stored value account.
            The audit record is used as proof of the authorization of the balance change. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAudit.CustomerId">
            <summary>
            Customer id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAudit.AccountTypeId">
            <summary>
            Account type id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAudit.ReferenceId">
            <summary>
            A reference to the source of the account change, for example retail transaction id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAudit.Amount">
            <summary>
            Amount to modify balance. Deposit is a positive value, withdrawal is negative value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAudit.BusinessDate">
            <summary>
            Date and time of balance modification
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAudit.TransferType">
            <summary>
             Can be deposit, withdraw, or points adjustment.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAudit.ExpirationDate">
            <summary>
            Expiration date of the points
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAuditDao">
            <summary>
            Repository for account transaction audits
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAuditDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAudit})">
            <summary>
            Save audits
            </summary>
            <param name="audits"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAuditDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Customer.Accounts.AccountTransactionAuditIdentifier},System.Nullable{System.DateTime})">
            <summary>
            Delete transaction audits by accountIds and date
            </summary>
            <param name="accountTransactionAuditIdentifiers"></param>
            <param name="toBusinessDate">Delete audits that were created prior to this date. If null, retrieve all by identifier.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAuditDao.Find``2(Retalix.StoreServices.Infrastructure.DataAccess.IQuery{Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAudit,``0,``1})">
            <summary>
            Finds audits based on a custom query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAuthorizationCode">
            <summary>
            Authorization code that is returned by <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccountCertificate">Stored Value Account Certificate</see>.
            Only authorized certificates may update the balance of <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount">Stored Value Account</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAuthorizationCode.UniqueCode">
            <summary>
            A unique code that identifies the authority source if the account modification request.
            The code may embed any business logic that can later be used to trace the back the origin of authority.
            For example: when a promotion in a customer order deposit points to a store value account in the form of a points 
            reward, the authorization code may be constructed from [TransactionID + PromotionID], this code can be used
            to trace back the balance deposit to the transaction which caused it. Similarly, when the stored value account
            is updated manually by a cashier operation, the authorization code may be constructed from [TransactionID + CashierID].
            As long as the code is unique, it is valid. The level of information that can be extracted from the code is the implementation's
            responsibility.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.NoAuthorization">
            <summary>
            Null object when authorization not granted.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount">
            <summary>
            Stored value accounts manage the balance and dues, either monetary balance like in case of an obligo accounts or points
            like in case of loyalty club accounts. The stored value account is part of the Finance Domain and is used by the Customer Domain 
            is part of a customer account
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount.Deposit(Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccountCertificate)">
            <summary>
            deposit an amount to the account. The deposit needs to be authorized by a certificate, which produces an authorization code 
            that is used to trace the value deposit to its authorizing source. Example: points deposit certificate that is created by a points 
            reward can use the customer order Id as an authorization code; this code can be used to trace the points earning back to the 
            customer order that generated it. The account balance is not affected until the deposit authorization code is cleared. 
            </summary>
            <param name="certificate"> </param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount.Withdraw(Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccountCertificate)">
            <summary>
            withdraw an amount from the account. The withdrawal must be authorized by a certificate. The account balance is not affected 
            until the deposit authorization code is cleared.
            </summary>
            <param name="certificate"> </param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount.Reset(Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccountCertificate)">
            <summary>
            Reset the account(Revoke all deposits and withdrawals) and deposit amount to the account.
            </summary>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount.Balance">
            <summary>
            get the customer account balance. The balance may vary based on cleared and un-cleared deposits/withdrawal requests.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccountBalance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccountBalance.TotalAmount">
            <summary>
            Get total amount, including both cleared and un-cleared deposits/withdrawals.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.AccountValueTransferType">
            <summary>
            Supported operations on the stored value account balance
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.StoredValueAccount.AccountValueTransferType.Deposit">
            <summary>
            Increment account balance
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.StoredValueAccount.AccountValueTransferType.Withdraw">
            <summary>
            Decrement account balance
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.StoredValueAccount.AccountValueTransferType.PointsAdjustment">
            <summary>
            Reset account balance
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccountCertificate">
            <summary>
            An means of authorizing any modification to a <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccount">stored value account</see> balance.
            The stored value account requires an authorization code before accepting any request to modify its balance (Deposit, Withdraw, Reset)
            It is up to the caller to enforce any business logic that should prevent a customer from modifying the account.
            For example: if the business allows account withdrawals only during working hours, the certificate implementation of Authorize method should
            enforce that rule and not provide an authorization code. 
            If a certain customer is only allowed to deposit but not allowed to withdraw, the specific implementation of the certificate should
            enforce that rule. The stored value account is only aware of the balance and responsible for its modification and auditing.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccountCertificate.ReferenceId">
            <summary>
            A unique reference that serves as a proof that the certificate is valid.
            </summary>
            <remarks>
            The reference is logged in a <see cref="T:Retalix.StoreServices.Model.Finance.StoredValueAccount.IAccountTransactionAudit"/> and can be used to trace back the account transaction to its origin.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccountCertificate.Amount">
            <summary>
            Amount to be authorized for the stored value account
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccountCertificate.AccountValueTransferType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.StoredValueAccount.IStoredValueAccountCertificate.BusinessDate">
            <summary>
            Date and time of certificate request. This is the date in which the request was issued.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.CashOfficeActivityName">
            <summary>
            A class with all the cash office activity names.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.op_Implicit(System.String)~Retalix.StoreServices.Model.Finance.CashOfficeActivityName">
            <summary>
            
            </summary>
            <param name="someString"></param>
            <returns></returns>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.TenderLoan">
            <summary>
             Cash office activity name for tender loan
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.OpenLoan">
            <summary>
             Cash office activity name for open loan
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.PaidOut">
            <summary>
             Cash office activity name for paid out
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.PaidIn">
            <summary>
             Cash office activity name for paid in
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.BankReceipt">
            <summary>
             Cash office activity name for bank receipt
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.BankDeposit">
            <summary>
             Cash office activity name for bank deposit
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.SafeTransfer">
            <summary>
             Cash office activity name for transfer on safe account
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.SafeDeclaration">
            <summary>
             Cash office activity name for declaration on safe account
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.BankingSafeDeclaration">
            <summary>
             Cash office activity name for declaration on safe account
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.TenderPickup">
            <summary>
             Cash office activity name for tender pickup
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.AutoReconcile">
            <summary>
             Cash office activity name for automated pickup
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.SystemPickup">
            <summary>
             Cash office activity name for system pickup, 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.TillDeclaration">
            <summary>
             Cash office activity name for declaration on till account
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.CashierDeclaration">
            <summary>
             Cash office activity name for declaration on cashier account
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.DrawerDeclaration">
            <summary>
             Cash office activity name for declaration on cashier account in drawer mode
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.CashOfficeActivityName.ManualStartShiftAddLoan">
            <summary>
            Cash office activity name for declaration on pos account in ManualStartShiftAddLoan on sign in mode
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.BalancingActivityName.Sales">
            <summary>
             Cash office activity name for Sales
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.BalancingActivityName.Cashback">
            <summary>
             Cash office activity name for CashBack
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.BalancingActivityName.ConstantCarryOver">
            <summary>
             Cash office activity name for ConstantCarryOver
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo">
            <summary>
             Currency Info holds data regarding the currency (e.g. the currency symbol, least monetary unit) and enables mathematical operations to be done on it
             (e.g. add, subtract).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo.Register(System.String,System.Decimal)">
            <summary>
            Registers CurrencyInfo with its ISO code and least monetary unit (LMU).
            The suggested way of registering currencies is during application initialization through <see cref="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationInitializer.RegisterComponents(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)"/>
            </summary>
            <param name="isoCurrencySymbol"></param>
            <param name="leastMonetaryUnit"></param>
            <returns>newly registered CurrencyInfo instance</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo.GetByISO(System.String)">
            <summary>
            Retrieves CurrecnyInfo by its ISO code
            In case no such CurrencyInfo was registered, will register it with default LMU (0.01)
            </summary>
            <param name="isoCurrencySymbol"></param>
            <returns>registered CurencyInfo</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo.IsoCurrencySymbol">
            <summary>
            Currency code (e.g. 'GBP').
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo.CurrencySymbol">
            <summary>
            Represents the currency symbol.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo.LeastMonetaryUnit">
            <summary>
            Represents the Least Monetary Unit of the currency (e.g. 0.01 for USD and 1.00 for JPY)
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo.#ctor">
            <summary>
            Default constructor for the serialization.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo.#ctor(System.String)">
            <summary>
            Creates a new CurrencyInfo instance equal to registered CurrencyInfo by its ISO symbol.
            </summary>
            <param name="isoCurrencySymbol"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo.Equals(Retalix.StoreServices.Model.Finance.Money.CurrencyInfo)">
            <summary>
            Override the Equals method. Currency equality is by its ISO symbol
            </summary>
            <param name="other">CurrencyInfo</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo.op_Equality(Retalix.StoreServices.Model.Finance.Money.CurrencyInfo,Retalix.StoreServices.Model.Finance.Money.CurrencyInfo)">
            <summary>
            Override the == operator. 
            Comparing between CurrencyInfo objects.
            </summary>
            <param name="left">The operator on the left side of the equation</param>
            <param name="right">The operator on the right side of the equation</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo.op_Inequality(Retalix.StoreServices.Model.Finance.Money.CurrencyInfo,Retalix.StoreServices.Model.Finance.Money.CurrencyInfo)">
            <summary>
            Override the != operator.
            Comparing between CurrencyInfo objects.
            </summary>
            <param name="left">The operator on the left side of the equation</param>
            <param name="right">The operator on the right side of the equation</param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo.None">
            <summary>
            will be used for representing an (usually temporary) empty instance of CurrencyInfo
            will replace any "null" currency in the system for simpler tracing
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Money.DenominationSelectionType">
            <summary>
             The denomination type represents a monetary unit, such as a dollar bill (Note) , a 5 rupee coin, a roll of 20 coins of 1 euro. 
            </summary>    
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Money.DenominationSelectionType.Roll">
            <summary>
            A coin is a piece of hard material that is standardized in order to facilitate trade, and primarily can be used as a medium of legal tender.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Money.DenominationSelectionType.Coin">
            <summary>
            A coin is a piece of hard material that is standardized in order to facilitate trade, and primarily can be used as a medium of legal tender.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Money.DenominationSelectionType.Note">
            <summary>
            A piece of paper money, constituting a central bank's promissory note to pay a stated sum to the bearer on demand.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney">
            <summary>
            Exchange money is composed of the defined exchange rate for the foreign currency selected against the local currency. 
            This enables cashiers to receive or withdraw different currencies to give change, or accept from customers. 
            The system can then convert the different currencies accordingly.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney.#ctor">
            <summary>
            Default constructor - this is for the HBMs in the DAL projects which make use of ExchangeMoney
            (for example ..\Hbm\FundTransferTransactionLogLine.hbm.xml, FundTransferTransactionLogLine.OriginalAmount).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney.#ctor(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.Money,System.Decimal,Retalix.StoreServices.Model.Infrastructure.Globalization.AbsoluteDateTime)">
            <summary>
            Construct instance based on baseAmount ,convertedAmount,exchangeRate and exchangeDate.
            </summary>
            <param name="baseAmount">The amount in the base currency</param>
            <param name="convertedAmount">The amount in the converted currency</param>
            <param name="exchangeRate">The exchange rate between the base and converted amounts</param>
            <param name="exchangeDate">The date and time of the exchange</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney.BaseAmount">
            <summary>
            Gets the money amount to exchange.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney.ConvertedAmount">
            <summary>
             Gets the money amount which results from the exchange operation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney.ExchangeRate">
            <summary>
             Gets the exchange rate which was used for the exchange operation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney.InverseExchangeRate">
            <summary>
             Gets the inversed of the Exchange Rate. In fact: (1 / ExchangeRate)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney.ExchangeDate">
            <summary>
            Gets the exchange rate date which was used for the exchange operation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney.IsConverted">
            <summary>
                Whether the base amount was converted (false if the base and converted amounts have equal currencies, true otherwise).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Money.InvalidIsoCurrencySymbolException">
            <summary>
             Represents an exception of an invalid ISO currency symbol (when trying to initialize a new <see cref="T:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo">CurrencyInfo</see>).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.InvalidIsoCurrencySymbolException.#ctor(System.String)">
            <summary>
             Overrides the derived exception, in order to supply the relevant error message.
            </summary>
            <param name="isoCurrencySymbol">The invalid ISO currency symbol received</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Money.Money">
            <summary>
            A medium that can be exchanged for goods and services. 
            This class represents money as a numeric value and its currency.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.Money.Value">
            <summary>
            Gets or sets The numeric value of the money.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.Money.Currency">
            <summary>
            Gets or sets The currency of the money.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.#ctor">
            <summary>
            Default constructor
            this is for the HBM's in the DAL projects which make use of Money
            (for example DAL.AccessServices\Retalix.StoreServer.DataAccess.Item\Hbm\Consumable.hbm.xml, ConsumablePrice.Price.Money)
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.#ctor(System.Decimal,Retalix.StoreServices.Model.Finance.Money.CurrencyInfo)">
            <summary>
            Construct instance based on value and currency
            </summary>
            <param name="value">The value of the medium</param>
            <param name="currency">The currency info of the medium</param>        
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.#ctor(System.Collections.Generic.List{Retalix.StoreServices.Model.Finance.Money.Money})">
            <summary>
            Constructor that gets enumeration of money objects and summarizes the value.
            Currencies must be identical.
            </summary>
            <param name="moneyList">Money</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.Equals(Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Override the Equals method.
            Comparing between money objects - value and currency (currency code).
            </summary>
            <param name="other">Another instance of <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">Money</see> to be compared to</param>
            <returns>True if both instances have the same values and currencies, false otherwise</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_Equality(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Override the == operator.
            Comparing between money objects - value and currency (currency code).
            </summary>
            <param name="left">The operator on the left side of the equation</param>
            <param name="right">The operator on the right side of the equation</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_Inequality(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Comparing between money objects - value and currency (currency code).
            </summary>
            <param name="left">The operator on the left side of the equation</param>
            <param name="right">The operator on the right side of the equation</param>
            <returns>The result of this compare (false if they're equal, true otherwise)</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_Addition(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Override the + operator.
            Adding values and setting one of its currencies.
            </summary>
            <param name="m1">The operator on the left side of the equation</param>
            <param name="m2">The operator on the right side of the equation</param>
            <returns>The result of this addition</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_Subtraction(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Override the - operator.
            Subtracting values and setting one of its currencies.
            </summary>
            <param name="m1">The operator on the left side of the equation</param>
            <param name="m2">The operator on the right side of the equation</param>
            <returns>The result of this subtraction</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_UnaryNegation(Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Override the unary - operator.
            Performs unary - operation on the deciaml value.
            </summary>
            <param name="m">The operator on the right side</param>
            <returns>The result of this operation</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_Addition(Retalix.StoreServices.Model.Finance.Money.Money,System.Decimal)">
            <summary>
            Override the + operator.
            Adding values and setting one of its currencies.
            </summary>
            <param name="money">The operator on the left side of the equation</param>
            <param name="val">The operator on the right side of the equation</param>
            <returns>The result of this addition</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_Subtraction(Retalix.StoreServices.Model.Finance.Money.Money,System.Decimal)">
            <summary>
            Override the - operator.
            Subtracting values and setting one of its currencies.
            </summary>
            <param name="money">The operator on the left side of the equation</param>
            <param name="val">The operator on the right side of the equation</param>
            <returns>The result of this subtraction</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_Multiply(Retalix.StoreServices.Model.Finance.Money.Money,System.Decimal)">
            <summary>
            Override the * operator.
            Multiplying values and setting one of its currencies.
            </summary>
            <param name="money">The operator on the left side of the equation</param>
            <param name="multiplier">The operator on the right side of the equation</param>
            <returns>The result of this multiplication</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_Division(Retalix.StoreServices.Model.Finance.Money.Money,System.Decimal)">
            <summary>
            Dividing values and setting one of its currencies
            </summary>
            <param name="money">The operator on the left side of the equation</param>
            <param name="denominator">The operator on the right side of the equation</param>
            <returns>The result of this division</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_Division(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Dividing values and setting one of its currencies
            </summary>
            <param name="m1">The operator on the left side of the equation</param>
            <param name="m2">The operator on the right side of the equation</param>
            <returns>The result of this division</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_GreaterThan(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Comparing between money objects - value and currency (currency code) and returning the bigger one
            </summary>
            <param name="m1">The operator on the left side of the equation</param>
            <param name="m2">The operator on the right side of the equation</param>
            <returns>The result of this comparison (true if m1 is bigger than m2, false otherwise)</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_LessThan(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Comparing between money objects - value and currency (currency code) and returning the lower one
            </summary>
            <param name="m1">The operator on the left side of the equation</param>
            <param name="m2">The operator on the right side of the equation</param>
            <returns>The result of this comparison (true if m1 is smaller than m2, false otherwise)</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_GreaterThanOrEqual(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Comparing between money objects - value and currency (currency code) and returning the bigger one
            </summary>
            <param name="m1">The operator on the left side of the equation</param>
            <param name="m2">The operator on the right side of the equation</param>
            <returns>The result of this comparison (true if m1 is bigger or equal to m2, false otherwise)</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.op_LessThanOrEqual(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Comparing between money objects - value and currency (currency code) and returning the lower one
            </summary>
            <param name="m1">The operator on the left side of the equation</param>
            <param name="m2">The operator on the right side of the equation</param>
            <returns>The result of this comparison (true if m1 is smaller or equal to m2, false otherwise)</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.Abs">
            <summary>
            Returns Money with Absolute value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.Money.Empty">
            <summary>
            will be used for representing (usually temporary) an empty instance of Money
            will replace any new Money(0m, null) in the system for simpler tracing
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.Money.Create(System.Decimal,System.String)">
            <summary>
             factory method for money class 
            </summary>
            <param name="value">The value of the medium</param>
            <param name="currencyCode">The currency code of the medium</param>
            <returns>The new instance of Money</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Money.MoneyCurrenciesMismatchException">
            <summary>
            Represents an exception of mismatch between the currencies of 2 <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">Money</see> instances on which an arithmetic operation is performed.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.MoneyCurrenciesMismatchException.#ctor(System.String)">
            <summary>
            Overrides the derived exception, in order to supply the relevant custom error message.
            </summary>
            <param name="message">The exception's message</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.MoneyCurrenciesMismatchException.#ctor">
            <summary>
            Overrides the derived exception, in order to supply the relevant error message.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Money.MoneyExtensions">
            <summary>
             Money extensions.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.MoneyExtensions.Sum(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Finance.Money.Money})">
            <summary>
             Sums numerous <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money"/> instances into one.
            </summary>
            <param name="amounts"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.MoneyExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,Retalix.StoreServices.Model.Finance.Money.Money})">
            <summary>
            Sums numerous <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money"/> instances into one, with selector.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.MoneyExtensions.Absolute(Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Returns the absolute (positive or 0) representation of the money value.
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.MoneyExtensions.TwoDigitsPrecision(System.Decimal)">
            <summary>
            Returns the 2 digit precision for decimal number that is usually the value property of money.
            In case the decimal has more than 2 decimal places, it will be rounded (to even) and presented with 2 digits accuracy.
            In case the decimal has less than 2 decimal places, it will be extended to 2 digits accuracy.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.MoneyExtensions.WithPrecisionOf(System.Decimal,System.Int32)">
            <summary>
            Returns decimal value with defined precision after a decimal point
            </summary>
            <param name="value">Value to format</param>
            <param name="digits">Precision after decimal points</param>
            <returns>Formatted decimal with defined precision</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.DelayedSolution">
            <summary>
             Indicate whether the solution of the current result is enable to be delayed.
             While selling with SelfCheckout clients - this ability is required.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.DelayedSolution.IsEnabled">
            <summary>
             Indicate whether the solution of the current result is enable to be delayed.
             While selling with SelfCheckout clients - this ability is required.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.DelayedSolution.Message">
            <summary>
             The message about the delaying of solving the action.
             While delaying solving an action - this message should be return by the RuleResult<see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.RuleResult"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.DelayedSolution.IsDelayed">
            <summary>
             Indicate if all conditions for delaying satisfied.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.DelayedSolution.AudioKey">
            <summary>
             The key of the audio of delaying the BRM.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IDelayedSolutionAbility">
            <summary>
             A configuration of ability to enable delaying the solution of the current problem.
             As a rule, relevant for SelfCheckout clients.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IDelayedSolutionAbility.DelayedSolution">
            <summary>
             The delaying configuration type.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IFormAction">
            <summary>
            Represents an form action configured as the result of a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> object.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IFormAction.FormName">
            <summary>
            Gets or sets the name of the form
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ISupportsAttendantAction.RequiresAttendant">
            <summary>
             Gets an indication wether the current result requires attendant of an assistent.
             As a rule, relevant for SelfCheckout clients.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext">
            <summary>
            Represents contextual data required for evaluating and recording a triggered <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction">IRuleAction</see> instances
            to the audit log and later to the TLog.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext.TransactionalEntity">
            <summary>
            Gets or sets an <see cref="T:Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible">IExtensible</see> object that can store data for the 
            lifetime of the current transaction.
            </summary>
            <remarks>
            This transaction entity is required by IRuleAction objects to
            read and write result-related data that is relevant to the current transaction.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext.AffectedLineSequenceNumber">
            <summary>
            Gets or sets the sequence number of the line the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IRuleBehavior">IRuleBehavior</see> was applied on (if was run on several lines - the last one is recorded).
            </summary>
            <remarks>
            If a rule isn't associated with any line in a transaction, then sequence number value will be 0.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext.AffectedLines">
            <summary>
            Gets a collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLine">IAuditLine</see> instances on which the rule was applied.
            </summary>
            <remarks>
            May be used to record lines that was rejected in the Tlog.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext.Create``1(Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new ActionEvaluationContext instance within the specified <paramref name="transactionalEntity"/> and 
            <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext.AffectedLines">AffectedLines</see> containing one of the <paramref name="entities"/>.
            </summary>
            <typeparam name="T">The type of the entity in <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext.AffectedLines">AffectedLine</see>.</typeparam>
            <param name="transactionalEntity">
                The ambient transactional entity (such as <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction"/>, etc.), 
                within which the creating <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance was triggered. 
            </param>
            <param name="entities">
                Sequence of line entity on which the creating <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance was triggered 
                (such as <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine"/>, <see cref="N:Retalix.StoreServices.Model.Tender"/>, etc.).
            </param>
            <returns>
            A new ActionEvaluationContext instance within the specified <paramref name="transactionalEntity"/> and 
            an <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext.AffectedLines">AffectedLines</see> containing one of the <paramref name="entities"/>.
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext.Create``1(Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible,``0)">
            <summary>
            Creates a new ActionEvaluationContext instance within the specified <paramref name="transactionalEntity"/> and 
            an <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext.AffectedLines">AffectedLine</see> containing <paramref name="entity"/>.
            </summary>
            <typeparam name="T">The type of the entity in <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext.AffectedLines">AffectedLine</see>.</typeparam>
            <param name="transactionalEntity">
                The ambient transactional entity (such as <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction"/>, etc.), 
                within which the creating <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance was triggered. 
            </param>
            <param name="entity">
                The line entity on which the creating <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance was triggered 
                (such as <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine"/>, <see cref="N:Retalix.StoreServices.Model.Tender"/>, etc.).
            </param>
            <returns>
            A new ActionEvaluationContext instance within the specified <paramref name="transactionalEntity"/> and 
            an <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext.AffectedLines">AffectedLine</see> containing <paramref name="entity"/>
            </returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext.AdditionalData">
            <summary>
            Further information to be passed in a key/value format.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext.MatchedSet">
            <summary>
            Gets or sets the matched conditions
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction">
            <summary>
            Represents an action configured as the result of a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> object.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction.Id">
            <summary>
            This property is required for persistence.
            Gets the unique ID of this instance in the data store.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction.Behavior">
            <summary>
            This property is required for persistence.
            Gets or sets the rule behavior that contains this action.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction.Message">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">message</see> defined for this result.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction.Scope">
            <summary>
            Gets or sets a value, indicating the scope for which the result remains applicable.
            </summary>
            <remarks>
            See <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.RuleScope">ResultScope</see> for the currently supported values.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction.TypeKey">
            <summary>
             Gets key of rule result 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction.Execute(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext)">
            <summary>
            Attempts to satisfy the rule result in order to change its state to a non-blocking state, so that execution of the ambient action may continue.
            </summary>
            <param name="context"></param>
            <remarks>
            If satisfy fails, throws a RuleResultNotSatisfiedException.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction.Validate">
            <summary>
            Validate that the action configuration is valid and supported by the action implementation.
            For example, not all Actions support RuleScope.Transaction.
            The implementation should throw a BusinessException in case of invalid configuration.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction.ExecutePriority">
            <summary>
            Returns the action execution priority.
            This priority must be a positive integer and is relative to built-in 
            priorities of other action types:
            ProhibitAction = 0 (Nothing should precede a Prohibit)
            ApprovalAction = 2.0
            LoyaltyCardIdentificationAction = 3.0
            ReasonCodeAction = 4.0
            ConfirmationAction = 5.0
            InputDataAction = 6.0
            NotificationAction = 10.0
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction.CreateResolvedMessage(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext)">
            <summary>
            Returns the resovled of current <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction.Message">message</see>.
            If the Action is <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IDelayedSolutionAbility">IDelayedSolutionAbility</see>, and the buisnesse is to delay the solution -
            the message that will be resolved is the <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.DelayedSolution.Message">DelayedSolution Message</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.RuleScope">
            <summary>
            Represents the scope for which a satisfied IRuleAction object
            remains applicable.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.RuleScope.Request">
            <summary>
            Indicates a IRuleAction object that remains satisfied
            for the scope of the current request.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.RuleScope.Transaction">
            <summary>
            Indicates a IRuleAction object that remains satisfied
            for the scope of the current transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.RuleScope.Item">
             <summary>
            Indicates a IRuleAction object that remains satisfied
             for the scope of the current item.
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.LoyaltyMemberValidationException">
            <summary>
            Occurrs when a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> object has an unsatisfied.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.LoyaltyMemberValidationException.RejectReason">
            <summary>
            Describes the reason due to which the Loyalty Member Validation was rejected.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.LoyaltyMemberValidationException.#ctor(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction,Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.LoyaltyMemberValidationException">LoyaltyMemberValidationException</see>object instance.
            </summary>
            <param name="ruleAction">the pre requisite that was not satisfied.</param>
            <param name="inputName">a list of the reason codes required</param>
            <param name="inputType"></param>
            <param name="inputLabel"></param>
            <param name="rejectReason">The reason due to which the input data was rejected</param>
            <param name="additionalData">Further information</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.MissingEventMappingException">
            <summary>
            Represents an exception that indicates that no event mapping between the specified
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition"/> context could be found.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ApprovalRequiredException">
            <summary>
            Occurs when a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> object is triggered that requires approval in order to be satisfied.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ApprovalRequiredException.RejectReason">
            <summary>
            Describes the reason due to which the approver was rejected.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ApprovalRequiredException.#ctor(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction,Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ApproverRejectReason,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ApprovalRequiredException">ApprovalRequiredException</see> object instance that applies to <paramref name="ruleAction"/>.
            </summary>
            <param name="ruleAction">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction">IRuleAction</see> object that was triggered by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> object, 
            which requires valid credentials in order to be satisfied.</param>
            <param name="rejectReason">The reason due to which the approver was rejected.</param>
            <param name="additionalData">Further information</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ConfirmationRequiredException">
            <summary>
             Occurs when a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> object is triggered that requires confirmation to be satisfied.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ConfirmationRequiredException.#ctor(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ConfirmationRequiredException">ConfirmationRequiredException</see> instance that applies to <paramref name="ruleAction"/>.
            </summary>
            <param name="ruleAction">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction">IRuleAction</see> object that was triggered by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> object</param>
            <param name="additionalData">Further information</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.InputDataRequiredException">
            <summary>
            Occurrs when a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> object has an unsatisfied.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.InputDataRequiredException.RejectReason">
            <summary>
            Describes the reason due to which the Input data was rejected.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.InputDataRequiredException.#ctor(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ReasonCodeRequiredException">ReasonCodeRequiredException</see>object instance.
            </summary>
            <param name="ruleAction">the pre requisite that was not satisfied.</param>
            <param name="inputName">a list of the reason codes required</param>
            <param name="inputType"></param>
            <param name="inputLabel"></param>
            <param name="rejectReason">The reason due to which the input data was rejected</param>
            <param name="additionalData">Further information</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.InvalidConditionConfigurationDataException">
            <summary>
            Occurrs when attempting to create a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition">ICondition</see> object from a IConditionDefinition object
            whose IConditionConfigurationData object is not valid for the condition being created.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.InvalidConditionConfigurationDataException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.InvalidConditionConfigurationDataException">InvalidConditionConfigurationDataException</see> object instance.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.InvalidRuleConfigurationDataException">
            <summary>
            Occurrs when attempting to create an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> object via RTI
            whose configuration data is not valid for the rule being created, or one of its constituents.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.InvalidRuleConfigurationDataException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.InvalidRuleConfigurationDataException">InvalidRuleConfigurationDataException</see> object instance.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.LoyaltyCardIdentificationRequiredException">
            <summary>
             Occurs when a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> object is triggered that requires loyalty card identification to be satisfied.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.LoyaltyCardIdentificationRequiredException.#ctor(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction)">
            <summary>
             Creates a new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.LoyaltyCardIdentificationRequiredException">LoyaltyCardIdentificationRequiredException</see>object instance that applies to <paramref name="ruleAction"/>.
            </summary>
            <param name="ruleAction">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction">IRuleAction</see> object that was triggered by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see></param> object
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ReasonCodeRequiredException">
            <summary>
            Occurs when a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see>object has an unsatisfied  .
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ReasonCodeRequiredException.#ctor(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ReasonCodeRequiredException">ReasonCodeRequiredException</see> object instance.
            </summary>
            <param name="ruleAction">the pre requisite that was not satisfied.</param>
            <param name="reasonCodes">a list of the reason codes required</param>
            <param name="additionalData">Further information</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.RuleResultNotSatisfiedException">
            <summary>
            Occurs when a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> object is triggered that is not satisfied.
            All <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction">IRuleAction</see> object exceptions should inherit from this exception in order to benefit from the full BRMS infrastructure capabilities.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.RuleResultNotSatisfiedException.RuleAction">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction">IRuleAction</see> object that was triggered by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> object, 
            which, given the current context, was not satisfied.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.RuleResultNotSatisfiedException.InterventionInfo">
            <summary>
            intervention of the rule result. to be saved on server as intervention.
            Used when the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction">IRuleAction</see> is delayed.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.RuleResultNotSatisfiedException.#ctor(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.RuleResultNotSatisfiedException">RuleResultNotSatisfiedException</see> object instance that applies to <paramref name="ruleAction"/>.
            </summary>
            <param name="ruleAction">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction">IRuleAction</see> object that was triggered by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> object, 
            which, given the current context, is not satisfied.</param>
            <param name="reasonCodes"></param>
            <param name="additionalData"> </param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.TransactionScopeNotSupportedException">
            <summary>
            Object is not valid for the rule being created.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ApproverRejectReason">
            <summary>
            Describes the reasons due to which an approval required exception was thrown by a business rule.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ApproverRejectReason.NoCredentials">
            <summary>
            Indicates that the approver was rejected because the logged in user is not authorized and no additional credentials were supplied.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ApproverRejectReason.NotAuthenticated">
            <summary>
            Indicates that the approver was rejected because the supplied credentials could not be authenticated.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ApproverRejectReason.NotAuthorized">
            <summary>
            Indicates that the approver was rejected because the user matching the supplied credentials does not have the required privileges.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ApproverRejectReason.Blocked">
            <summary>
            Indicates that the approver was rejected because the user matching the supplied credentials is currently blocked.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ExternalServicesRequestRequiredException">
            <summary>
             Occurs when a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> object is triggered that requires ExternalServiceRequestRequired to be satisfied.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ICustomMapping`1">
            <summary>
            Represents mapping configuration for an entity of type <typeparam name="T">T</typeparam> to and from a version 10.4.2 contract.
            </summary>
            <typeparam name="T">Represents the type of the mapping entity.</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ICustomMapping`1.FromContract(System.Func{Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyConfigurationData,`0})">
            <summary>
            Configures a mapping for an entity of type <typeparam name="T">T</typeparam> from a version 10.4.2 contract.
            </summary>
            <param name="entityBuilder">Represents the mapping configuration from <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyConfigurationData">LegacyConfigurationData</see>
            to an entity of type <typeparam name="T">T</typeparam>.</param>
            <returns>This <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ICustomMapping`1">ICustomMapping</see> instance for further configuration.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ICustomMapping`1.ToContract(System.Func{`0,Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyConfigurationData})">
            <summary>
            Configures a mapping for an entity of type <typeparam name="T">T</typeparam> to a version 10.4.2 contract.
            </summary>
            <param name="contractBuilder">Represents the mapping configuration from an entity of type <typeparam name="T">T</typeparam> 
            to <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyConfigurationData">LegacyConfigurationData</see>.</param>
            <returns>This <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ICustomMapping`1">ICustomMapping</see> instance for further configuration.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping`1">
            <summary>
            Represents mapping configuration for one property on an entity of type <typeparam name="T">T</typeparam> to and from a version 10.4.2 contract.
            This property may represent a single element or a collection of elements.
            </summary>
            <typeparam name="T">Represents the type of the entity which contain the mapping property.</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping`1.ToProperty(System.Action{System.String,`0},System.Object)">
            <summary>
            Configures a mapping for an entry in a version 10.4.2 contract to a non-collection property on an entity 
            of type <typeparam name="T">T</typeparam>.
            </summary>
            <param name="setter">Represents the mapping configuration, where T1 is the value of the contract entry, 
            and T2 is an instance of type <typeparam name="T">T</typeparam> on which to set the matching property.</param>
            <param name="defaultValue">Represents the value to use in case the contract does not contain an entry whose key is this mapping's key.</param>
            <returns>This <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping`1">IKeyMapping</see> instance for further configuration.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping`1.FromProperty(System.Func{`0,System.Object})">
            <summary>
            Configures a mapping for a non-collection property on an entity of type <typeparam name="T">T</typeparam> 
            to an entry in a version 10.4.2 contract.
            </summary>
            <param name="getter">Represents the mapping configuration, where T is the instance of type <typeparam name="T">T</typeparam>
            and TResult is the matching property on the instance of type <typeparam name="T">T</typeparam>.</param>
            <returns>This <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping`1">IKeyMapping</see> instance for further configuration.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping`1.ToCollection(System.Action{System.Collections.Generic.IEnumerable{System.String},`0})">
            <summary>
            Configures a mapping for an entry in a version 10.4.2 contract to a collection property on an entity of type <typeparam name="T">T</typeparam>.
            </summary>
            <param name="setter">Represents the mapping configuration, where T1 is a collection of values of the contract entry, 
            and T2 is an instance of type <typeparam name="T">T</typeparam> on which to set the matching collection.</param>
            <returns>This <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping`1">IKeyMapping</see> instance for further configuration.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping`1.FromCollection(System.Func{`0,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Configures a mapping for a collection property on an entity of type <typeparam name="T">T</typeparam> 
            to an entry in a version 10.4.2 contract.
            </summary>
            <param name="getter">Represents the mapping configuration, where T is the instance of type <typeparam name="T">T</typeparam>
            and TResult is the matching collection property on the instance of type <typeparam name="T">T</typeparam>.</param>
            <returns>This <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping`1">IKeyMapping</see> instance for further configuration.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping`1.ToAndFromString(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.Object)">
            <summary>
            Configures a mapping for a string property on an entity of type <typeparam name="T">T</typeparam> 
            to and from an entry in a version 10.4.2 contract.
            </summary>
            <param name="getterExpression">Represents the mapping configuration, where T is the instance of type <typeparam name="T">T</typeparam>
            and TResult is the matching string property on the instance of type <typeparam name="T">T</typeparam>.</param>
            <param name="defaultValue">Represents the value to use in case the contract does not contain an entry whose key is this mapping's key.</param>
            <returns>This <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping`1">IKeyMapping</see> instance for further configuration.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping`1.Required">
            <summary>
            Configure the mapping to indicate that an entry with this key is required.
            In case no macthing entry is found a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.InvalidRuleConfigurationDataException">InvalidRuleConfigurationDataException</see> will be thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractConfigurationParticipant">
            <summary>
            Represents configuration of mappin for entities of type or part of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> to and from a version 10.4.2 contract.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractConfigurationParticipant.Configure(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractMapper)">
            <summary>
            Configures a mapping for entities of type or part of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> to and from a version 10.4.2 contract.
            </summary>
            <param name="legacyRuleContractMapper"><see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractMapper">ILegacyRuleContractMapper</see> use to configure a mapping.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractMapper">
            <summary>
            Represents a mapper for entities of type or part of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IRuleBehavior">IRuleBehavior</see> to and from a version 10.4.2 contract.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractMapper.FromContract``1(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyRuleContractData)">
            <summary>
            A mapper for an entity of type <typeparam name="T">T</typeparam> from a version 10.4.2 contract.
            </summary>
            <typeparam name="T">Represents the type of the map entity.</typeparam>
            <param name="legacyRuleContractData">Represents a DTO for version 10.4.2 contract.</param>
            <returns>An entity of type <typeparam name="T">T</typeparam>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractMapper.ToContract``1(``0)">
            <summary>
            A mapper for an entity of type <typeparam name="T">T</typeparam> to a version 10.4.2 contract.
            </summary>
            <typeparam name="T">Represents the type of the map entity.</typeparam>
            <param name="entity">Represents the entity to map.</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyRuleContractData">LegacyRuleContractData</see> an DTO for version 10.4.2 contract.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractMapper.Configure``1(System.String)">
            <summary>
            Configures a mapping for entities of type or part of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> to and from a version 10.4.2 contract.
            </summary>
            <typeparam name="T">Represents the type of the map entity.</typeparam>
            <param name="configurationKey">Represents the Key of the entity mapper, should be macth an entry type in a version 10.4.2 contract.</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractMapping`1">ILegacyRuleContractMapping</see> instance for further configuration.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractMapping`1">
            <summary>
            Represents mapping configuration for an entity of type <typeparam name="T">T</typeparam> to and from a version 10.4.2 contract.
            </summary>
            <typeparam name="T">Represents the type of the entity which contain the mapping property.</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractMapping`1.ForKey(System.String,System.Action{Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping{`0}})">
            <summary>
            Configures a mapping for per single property on an entity of type <typeparam name="T">T</typeparam> from to an entry in a version 10.4.2 contract.
            </summary>
            <param name="configurationKey">Represents the Key of the property mapper, should be macth a property key in a version 10.4.2 contract.</param>
            <param name="keyConfigurator">Represents the mapping configuration using <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.IKeyMapping`1">IKeyMapping</see>.</param>
            <returns>This <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractMapping`1">ILegacyRuleContractMapping</see> instance for further configuration.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractMapping`1.Custom(System.Action{Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ICustomMapping{`0}})">
            <summary>
            Configures a mapping for all the properties on an entity of type <typeparam name="T">T</typeparam> from to an entry in a version 10.4.2 contract.
            </summary>
            <param name="configurator">Represents the mapping configuration using <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ICustomMapping`1">ICustomMapping</see>.</param>
            <returns>This <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.ILegacyRuleContractMapping`1">ILegacyRuleContractMapping</see> instance for further configuration.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyConfigurationData">
            <summary>
            Contains the keys and values of the data in a version 10.4.2 business rules contract,
            that represents the configuration data for a business rule and its conditions and action.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyConfigurationData.Add(System.String,System.String)">
            <summary>
            Adding new key/value entry to the configuration data.
            </summary>
            <param name="key">Represents the key of the property, should be match a property key in a version 10.4.2 contract.</param>
            <param name="value">Represents the value of the property.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyConfigurationData.Get(System.String)">
            <summary>
            Gets all values from the configuration data whose key is <param name="key"/>.
            </summary>
            <param name="key">Represents the key of the property.</param>
            <returns>All values from the configuration data whose key is <param name="key"/>.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyRuleContractData">
            <summary>
            Contains <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyConfigurationData">LegacyConfigurationData</see> and key type 
            that represents the configuration data for a single element of a business rule.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyRuleContractData.TypeKey">
            <summary>
            Gets or sets a key type of the element, should be macth an entry type in a version 10.4.2 contract.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyRuleContractData.ConfigurationData">
            <summary>
            Gets or sets <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.Legacy.LegacyConfigurationData">LegacyConfigurationData</see> objects that represent a configuration data of the element.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.IBusinessRuleMapper">
            <summary>
            This API is used for mapping Business Rule entities from Contract object to model object and from model object to contract object.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.IBusinessRuleMapper.ExtendMap``2">
            <summary>
            Used for extending a mapping configuration from source object to destination object.
            </summary>
            <typeparam name="TSource">Type of source object to configure</typeparam>
            <typeparam name="TDestination">Type of destination object to configure</typeparam>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.IBusinessRuleMapper.Map``1(``0)">
            <summary>
            Used for mapping a source object to its destination object without the need to specify the type of the destination object.
            </summary>
            <typeparam name="TSource">Type of source object to map from</typeparam>
            <param name="source">Source object to map from</param>
            <returns>Mapped destination object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.IBusinessRuleMapper.Map``2(``0,``1)">
            <summary>
            Used for mapping a source object to the input destination object.
            </summary>
            <typeparam name="TSource">Type of source object to map from</typeparam>
            <typeparam name="TDestination">Type of destination object to map to</typeparam>
            <param name="source">Source object to map from</param>
            <param name="destination">Destination object to map to</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.IMappingExpression`2">
            <summary>
            A mapping expression which is used by <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.IBusinessRuleMapper"/> to map business rule entities.
            </summary>
            <typeparam name="TSource">Type of source object to map from</typeparam>
            <typeparam name="TDestination">Type of destination object to map to</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.IMappingExpression`2.As(System.Func{`1})">
            <summary>
            Optional. Used for setting a method for generating the destination object, which will be used during the mapping process.
            If isn't used, the default constructor of destination object will be used or incase the TDestination is of type interface, 
            the destination object will be created by R10 Resolver.       
            </summary>
            <param name="constructorExpression">A method for generating the destination object</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Maintenance.Mapping.IMappingExpression`2.OnlyWhen(System.Predicate{System.Object})">
            <summary>
            Optional, Used for specifying a condition which determines whether the current mapping expression can be used for mapping.
            </summary>
            <param name="canMapExpression">A method that gets the source object and determines whether the source object can be mapped by the current mapping expression.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleExpressionCriteria">
            <summary>
            Represents a criteria used to filter <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> by certain conditions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleExpressionCriteria.BehaviorCriteria">
            <summary>
            Gets a critria for filtering according conditions on<see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule.Behavior">businesse rule behavior</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleExpressionCriteriaBuilder">
            <summary>
            Builder
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleExpressionCriteriaBuilder.Build(System.Func{Retalix.StoreServices.Model.Infrastructure.BusinessRules.IRuleBehavior,System.Boolean})">
            <summary>
            Builds a lookup criteria based on the function provided.
            </summary>
            <param name="criteria">criteria</param>
            <example>
            <code lang="cs" descriotion="The following example build and criteria.">
            <![CDATA[
            Public void BuildCriteria()
            
                //Define Criteria
                Func</IRuleBehavior, bool> maxAllowedPercentChangExpression = (behavior => behavior is IPriceOverrideRestrictionBehavior && ((IPriceOverrideRestrictionBehavior)behavior).MaxAllowedPercentChange == 10m);
            
            
                var criteriaExpression = Resolver.Resolve<IBusinessRuleExpressionCriteriaBuilder>();
                ///Set the a single criteria
                criteriaExpression.Build(maxAllowedPercentChangExpression);
            
                //in this case: Criteria is maxAllowedPercentChangExpression
                var Criteria = criteriaExpression.GetExpressionCriteria();
                
            ]]>
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleExpressionCriteriaBuilder.And(System.Func{Retalix.StoreServices.Model.Infrastructure.BusinessRules.IRuleBehavior,System.Boolean})">
            <summary>
            Adds a criteria to an exists built criteria, with a logical AND operator, in order to formulate an expression of
            ([criteria1, .. , criteriaN]) AND secoundCriteria
            </summary>
            <param name="secoundCriteria">represet the secound criteria</param>
            <example>
            <code lang="cs" descriotion="The following example demonstrates AND criteria according to 2 given criteria.">
            <![CDATA[
            Public void ChaningAndCriteria()
            
                //Define First Criteria
                Func</IRuleBehavior, bool> maxAllowedPercentChangExpression = (behavior => behavior is IPriceOverrideRestrictionBehavior && ((IPriceOverrideRestrictionBehavior)behavior).MaxAllowedPercentChange == 10m);
            
                //Define Second Criteria  
                Func<IRuleBehavior, bool> maxTotalTendersAmountExpression = (behavior => behavior is IPaymentRestrictionBehavior &&((IPaymentRestrictionBehavior)behavior).MaxTotalTendersAmount == 10m);
            
                var criteriaExpression = Resolver.Resolve<IBusinessRuleExpressionCriteriaBuilder>();
                ///Set the a single criteria
                criteriaExpression.Build(maxAllowedPercentChangExpression);
            
                //Chaining the second criteria., 
                criteriaExpression.And(maxTotalTendersAmountExpression);
                
                //in this case: Criteria is maxAllowedPercentChangExpression AND maxTotalTendersAmountExpression
                var Criteria = criteriaExpression.GetExpressionCriteria();
                
            ]]>
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleExpressionCriteriaBuilder.Or(System.Func{Retalix.StoreServices.Model.Infrastructure.BusinessRules.IRuleBehavior,System.Boolean})">
            <summary>
            Adds a criteria to an exists built lookup criteria, with a logical OR operator, in order to formulate an expression of
            ([criteria1, .. , criteriaN]) OR secoundCriteria
            </summary>
            <example>
            <code lang="cs" descriotion="The following example demonstrates OR criteria according to 2 given criteria.">
            <![CDATA[
            Public void ChaningAndCriteria()
            
                //Define First Criteria
                Func</IRuleBehavior, bool> maxAllowedPercentChangExpression = (behavior => behavior is IPriceOverrideRestrictionBehavior && ((IPriceOverrideRestrictionBehavior)behavior).MaxAllowedPercentChange == 10m);
            
                //Define Second Criteria  
                Func<IRuleBehavior, bool> maxTotalTendersAmountExpression = (behavior => behavior is IPaymentRestrictionBehavior &&((IPaymentRestrictionBehavior)behavior).MaxTotalTendersAmount == 10m);
            
                var criteriaExpression = Resolver.Resolve<IBusinessRuleExpressionCriteriaBuilder>();
                ///Set the a single criteria
                criteriaExpression.Build(maxAllowedPercentChangExpression);
            
                //Chaining the second criteria., 
                criteriaExpression.Or(maxTotalTendersAmountExpression);
                
                //in this case: Criteria is maxAllowedPercentChangExpression OR maxTotalTendersAmountExpression
                var Criteria = criteriaExpression.GetExpressionCriteria();
                
            ]]>
            </code>
            </example>
            <param name="secoundCriteria">represet the secound criteria</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleExpressionCriteriaBuilder.GetExpressionCriteria">
            <summary>
            Gets the generated <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleExpressionCriteria.BehaviorCriteria">lookup criteria</see> out of the 
            provided criteria given to the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleExpressionCriteriaBuilder">IBusinessRuleExpressionCriteriaBuilder</see>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.BusinessRuleCriteria">
            <summary>
            Defines a set of criteria by which business rules may be retrieved from the data store.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.BusinessRuleCriteria.RuleName">
            <summary>
            Gets or sets the <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule.Name">IBusinessRule Name</see> of the business rule that should be retrieved.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.BusinessRuleCriteria.IsExactRuleName">
            <summary>
            Gets or sets whether to find exact string or substring of <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule.Name">IBusinessRule name</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.BusinessRuleCriteria.RuleTag">
            <summary>
            Gets or sets list of <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IRuleBehavior.Tag">IRuleBehavior Tag</see> of the business rules that should be retrieved.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.BusinessRuleCriteria.BehaviorType">
            <summary>
            Get or set concrete business rule behavior type of the business rules that should be retrieved.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleDao">
            <summary>
            Represents a data access object responsible for retrieving and persisting <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> objects.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleDao.Find(Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.BusinessRuleCriteria)">
            <summary>
            Returns all <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> object matching <paramref name="lookupCriteria"/>.
            </summary>
            <param name="lookupCriteria"><see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.BusinessRuleCriteria">business rule criteria</see> object </param>
            <returns>A collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> object</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleDao.GetAllRules">
            <summary>
            Returns all <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleDao.FindByName(System.String)">
            <summary>
             Returns <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> object by it's name which represents as the rule definition unique identifier
            </summary>
            <param name="name">the unique <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> object identifier</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> object </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleDao.Save(Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule)">
            <summary>
            Persists <paramref name="businessRule"/><see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> object to the data store.
            </summary>
            <param name="businessRule"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleDao.Delete(Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule)">
            <summary>
             Delete business rule definition from the data store
            </summary>
            <param name="businessRule">Represents the data that defines <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> object, which is persisted to the data store.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleDao.FindByExpressionCriteria(Retalix.StoreServices.Model.Infrastructure.BusinessRules.DAO.IBusinessRuleExpressionCriteria)">
            <summary>
            Returns all <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> objects matching <paramref name="criteriaExpressions"/>.
            </summary>
            <param name="criteriaExpressions"></param>
            <returns>A collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> objects</returns>.
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup">
            <summary>
            Encapsulates a sequence of audits which together represent one part of a 
            "conversation" between a client and the server that occurred within the context
            of one request.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup.TransactionId">
            <summary>
            Gets the id of the common associated transactional entity.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup.SequenceNumber">
            <summary>
            Gets the common <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.SequenceNumber">IRestrictionAuditLogData.SequenceNumber</see> object of the group.
            </summary>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup.RequestId">
            <summary>
            Gets the common <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.RequestId">IRestrictionAuditLogData.SequenceNumber</see> object of the group.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup.AuditKey">
            <summary>
            Gets the common <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.RequestId">IRestrictionAuditLogData.AuditKey</see> object of the group.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup.ServiceName">
            <summary>
            Gets the common <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.ServiceName">IRestrictionAuditLogData.ServiceName</see> object of the group.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup.AreAllSatisfied">
            <summary>
             Gets an indication of whether all of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> instances in the group are satisfied.
             <seealso cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.IsSatisfied"/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup.AreAllAutomatic">
            <summary>
             Gets an indication of whether all of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> instances in the group are automatic.
             <seealso cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.IsAutomatic"/>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationsBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationsBuilder.GroupingStrategy">
            <summary>
            Gets or sets <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IGroupingStrategy"/> object.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationsBuilder.Build(System.Collections.Generic.List{Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData})">
            <summary>
            Creates sequence of <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConversationAudit"/> objects from <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData"/> objects list
            </summary>
            <param name="auditLogsData">List of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData"/> objects to be devides to <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConversationAudit"/> objects</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationErrorAuditLogData">
            <summary>
            Audits of this type are logged by the business rules domain to identify scenarios
            in which an error that was not caused by a business rule action, prevented a client-server
            conversation from completing.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository">
            <summary>
            Represents an audit log writer for saving <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> 
            and getting as group of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository.ConversationsBuilder">
            <summary>
            Gets or sets <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationsBuilder">IConversationsBuilder</see> object.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository.AddAuditData(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData,Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible)">
            <summary>
            Save a single audit data of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see>
            object.
            </summary>
            <param name="restrictionAuditLogData">Represent the audit log data to be saved</param>
            <param name="transactionalEntity">Represent the associated <see cref="T:Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible">IExtensible</see> 
            insatance of the <paramref name="restrictionAuditLogData"/>.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository.AddAuditDataSuccessfulUnitOfWork(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData,Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible)">
            <summary>
            Save a single audit data of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see>
            object in case of sucsseful request.
            </summary>
            <param name="restrictionAuditLogData">Represent the audit log data to be saved</param>
            <param name="transactionalEntity">Represent the associated <see cref="T:Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible">IExtensible</see> 
            insatance of the <paramref name="restrictionAuditLogData"/>.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository.GetConversations(Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible)">
            <summary>
            Retrive sequence of <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConversationAudit">IConversationAudit</see> intances
            associated with <paramref name="transactionalEntity"/>
            </summary>
            <param name="transactionalEntity">Represent the associated <see cref="T:Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible">IExtensible</see> intance.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository.GetConversationsByLineSequence(Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible,System.Int64)">
            <summary>
            Retrive sequence of <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConversationAudit">IConversationAudit</see> intances
            Associate with <paramref name="transactionalEntity"/> and a specific line.
            </summary>
            <returns>A collection of <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConversationAudit">IConversationAudit</see> intances.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IFormActionExtensionData">
            <summary>
            Represents domain-specific data of form that is appended to an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> object
            in order to be written to the audit log.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IFormActionExtensionData.FormName">
            <summary>
            Gets or sets the name of the form
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IFormActionExtensionData.InputData">
            <summary>
            Gets or sets the dictionaty that contain data that was insert into the form
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IGroupingStrategy">
            <summary>
            Represents strategy of grouping <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> objects.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IGroupingStrategy.CreateAuditGroups(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData})">
            <summary>
            Devides <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> objects to groups.
            </summary>
            <param name="auditLogData">Sequence of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> objects to be devided to groups</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRequestIdGroupingStrategy">
            <summary>
            Represents strategy that combiens <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData"/> objects that have same service name and request id to one group.  
            </summary>
            <remarks>Currently is used for logging BRM</remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">
            <summary>
            Represents an audit of a triggered restriction, that may occur within a wider context of a conversation between a client and the server.
            Used by the various restriction mechanisms to ultimately record data about the triggered restrictions to the TLog.
            </summary>
            <remarks>
            Current restriction mechanisms using the audit type are age restrictions and business rules.
            <seealso cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleRunner"/>
            <seealso cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule"/>
            <seealso cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository"/>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.TransactionId">
            <summary>
            Gets or sets the id of the associated transactional entity.
            </summary>
            <remarks>
            Transactional entities, in this context, include <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see> entities,
            <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> entities, and other cash-office related transactional entities.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.IsSatisfied">
            <summary>
            Gets or sets an indication of whether the current restriction was satisfied (automatically or by input from the user).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.AuditKey">
            <summary>
            Gets or sets a key that distinguishes this audit data and enables relating and grouping different audits together 
            within the context of a client/server conversation.
            </summary>
            <remarks>
            Currently used by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository">IConversationRepository</see> instance to group 
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> objects into <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConversationAudit">IConversationAudit</see> objects.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.SequenceNumber">
            <summary>
            Gets or sets the sequence number of the line the restriction was applied on.
            Use to record the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> on the relevant line in the TLog.
            </summary>
            <remarks>
            <para>
            If a restriction isn't associated with any line in a transaction, then sequence number value will be 0.
            If a restriction was run on several lines, the sequence number of the last one will usually be used.
            </para>
            <para>
            Also used by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository">IConversationRepository</see> instance to group 
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> audits into <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup">IAuditGroup</see> objects.
            </para>
            <para>
            May be used as part of the key according to which audits are grouped into <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup">IAuditGroup</see>
            objects. This becomes relevant for grouping when a restriction is run on several lines in the same request, 
            e.g., when an intervention is resolved, and restrictions are re-evaluated on all lines.
            </para>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.RequestId">
            <summary>
            Gets or sets the unique request id for the incoming service call.
            Use to group by <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> into <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup">IAuditGroup</see>
            </summary>
            <remarks>
            <para>
            Currently used by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository">IConversationRepository</see> instance to group 
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> audits into <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup">IAuditGroup</see> objects.
            </para>
            <para>
            May be used as part of the key according to which audits are grouped into <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup">IAuditGroup</see>
            objects. This becomes relevant for grouping when a restriction is run multiple times on the same line, which
            has already been added to the order, or when a restriction is not associated with any line, 
            in which case aggregation of audits into groups is done according to the request identifiers.
            </para>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.IsAutomatic">
            <summary>
            Gets or sets a value indicating whether the triggered restriction associated with this audit was
            automatically resolved by the system, without any option for user intervention.
            </summary>
            <remarks>
            If <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.IsSatisfied">IsSatisfied</see> is false, an <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.IsAutomatic">IsAutomatic</see> 
            value of true indicates that the restriction prohibited the triggering action, without any option
            for the user to approve the activity.
            If <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.IsSatisfied">IsSatisfied</see> is true, an <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.IsAutomatic">IsAutomatic</see> 
            value of true indicates that the restriction was automatically approved by the system.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.ServiceName">
            <summary>
            Gets or sets the name of the incoming service call.
            </summary>
            <remarks>
            <para>
            Currently used by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository">IConversationRepository</see> instance to group 
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> audits into <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup">IAuditGroup</see> objects.
            </para>
            <para>
            May be used as part of the key according to which conversations are grouped into <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConversationAudit">IConversationAudit</see>
            objects. Whenever the service-name changes, we may assume that a new conversation has begun.
            </para>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData.ExtensionData">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionExtensionData">IRestrictionExtensionData</see> objects that represent additional domain-specific data
            in this audit.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionExtensionData">
            <summary>
            Represents domain-specific data that is appended to an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> object
            in order to be written to the audit log.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IApprovalActionExtensionData">
            <summary>
            Represents additional audit data about an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IApprovalAction">IApprovalAction</see> object that was executed by a 
            triggered <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IApprovalActionExtensionData.IsApproved">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IApprovalAction">IApprovalAction</see> was approved.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IApprovalActionExtensionData.OperatorName">
            <summary>
            Gets or sets the name of the operator that was required to approve the operation.
            </summary>
            <value>The name of the operator.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IApprovalActionExtensionData.OperatorId">
            <summary>
            Gets or sets the ID number of the operator that approved the operation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IApprovalActionExtensionData.OperatorType">
            <summary>
            Gets or sets the type of the operator that approved the operation.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditEntityExtractor`1">
            <summary>
            Represents an object that is responsible for extracting audit-related data about an entity of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditEntityExtractor`1.Extract(`0,Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLine)">
            <summary>
            Updates <paramref name="auditLine"/> with data about <paramref name="entity"/> 
            required for organizing audits into groups and conversations by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository"/>
            and for recording relevant data to the TLog.
            </summary>
            <param name="entity">
            An entity (usually representing a line in a transaction) from which <paramref name="auditLine"/>
            is updated with line-specific data that is required for auditing purposes.
            </param>
            <param name="auditLine">A line on which a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance was applied</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IBusinessRuleAuditLog">
            <summary>
            Represents an audit of a triggered <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IBusinessRuleAuditLog.ActionType">
            <summary>
            Gets or sets the type of the result that was invoked.
            </summary>
            <value>The type of the result.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IBusinessRuleAuditLog.RuleId">
            <summary>
            Gets or sets the name of the rule that was invoked.
            </summary>
            <value>The name of the rule.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IBusinessRuleAuditLog.RuleType">
            <summary>
            Gets or sets the type of the rule that was invoked.
            </summary>
            <value>The type of the rule.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IBusinessRuleAuditLog.MessageName">
            <summary>
            Gets or sets the name of the message that was displayed when the rule has been invoked
            </summary>
            <value>The name of the message.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IBusinessRuleAuditLog.AffectedEntity">
            <summary>
            Gets or sets the line entity on which the owning <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance was triggered 
            (such as <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine"/>, <see cref="N:Retalix.StoreServices.Model.Tender"/>, etc.).
            </summary>
            <remarks>
            May be used to record a line that was rejected in the TLog.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IBusinessRuleAuditLog.AffectedEntityKey">
            <summary>
            Gets the entity key <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance was triggered 
            </summary>
            <remarks>
            May be used to record a product ID that was rejected in the TLog.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogFactory">
            <summary>
             Encapsulates the logic for creating <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> instances.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogFactory.Create(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction,Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext,System.Boolean)">
            <summary>
            Creates a sequence of new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IBusinessRuleAuditLog">IBusinessRuleAuditLog</see> instances with data 
            from <paramref name="action"/> and <paramref name="context"/>.
            </summary>
            <param name="action">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction">
                    IRuleAction</see> instance that was triggered and whose
                data should be included in the resultant audit.
            </param>
            <param name="context">
                The <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.ActionEvaluationContext">ActionEvaluationContext</see> containing contextual data
                that should be included in the resultant audit.
            </param>
            <param name="isSatisfied">
            A boolean indicating whether or not <paramref name="action"/> was satisfied. This information
            is added to the resultant audit.
            </param>
            <returns>
            A sequence of new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IBusinessRuleAuditLog">IBusinessRuleAuditLog</see> instances with data 
            from <paramref name="action"/> and <paramref name="context"/>.
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogFactory.CreateError">
            <summary>
            Creates a new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationErrorAuditLogData">IConversationErrorAuditLogData</see> instance that
            indicates that an error that was not caused by a business rule action, prevented a client-server
            conversation from completing.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLine">
            <summary>
            Represents a line on which a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance was applied,
            including the line entity itself as well as additional data extracted from this entity by a matching
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditEntityExtractor`1">IAuditEntityExtractor{T}</see> instance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLine.Key">
            <summary>
            The key, for auditing purposes, extracted from <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLine.Entity">Entity</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLine.SequenceNumber">
            <summary>
            The sequence number of the line represented by <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLine.Entity">Entity</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLine.Entity">
            <summary>
            The entity of the line on which the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance was applied
            (such as <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine"/>, <see cref="N:Retalix.StoreServices.Model.Tender"/>, etc.).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IInputDataActionExtensionData">
            <summary>
            Represents additional audit data about an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IInputDataAction">IInputDataAction</see> object that was executed by a 
            triggered <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IInputDataActionExtensionData.InputName">
            <summary>
             Gets or sets the name of the input field received form the client in response to an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.InputDataRequiredException">InputDataRequiredException</see> exception.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IInputDataActionExtensionData.InputType">
            <summary>
             Gets or sets the type of the data received form the client in response to an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.InputDataRequiredException">InputDataRequiredException</see> exception.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IInputDataActionExtensionData.InputData">
            <summary>
             Gets or sets the data received form the client in response to an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.InputDataRequiredException">InputDataRequiredException</see> exception.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IReasonCodeActionExtensionData">
            <summary>
            Represents additional audit data about an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IReasonCodeAction">IReasonCodeAction</see>  object that was executed by a 
            triggered <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IReasonCodeActionExtensionData.ReasonCodeId">
            <summary>
            Gets or sets the reason code ID received form the client in response to an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ReasonCodeRequiredException">ReasonCodeRequiredException</see> exception.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IReasonCodeActionExtensionData.ReasonCodeName">
            <summary>
             Gets or sets the name of the reason code received form the client in response to an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ReasonCodeRequiredException">ReasonCodeRequiredException</see> exception.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IReasonCodeActionExtensionData.ReasonCodeGroupId">
            <summary>
            Gets or sets the reason code group ID received form the client in response to an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.ReasonCodeRequiredException">ReasonCodeRequiredException</see> exception.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.ISequenceNumberGroupingStrategy">
            <summary>
            Represents strategy that combiens <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData"/> objects to one group based on service name, request id and line's sequence number.  
            </summary>
            <remarks>Currently is used for logging conditionl restrictions from intervention list</remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLineFactory">
            <summary>
            Encapsulates the logic for creating <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLine">IAuditLine</see> instances from
            line entities, with the help of matching <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditEntityExtractor`1">IAuditEntityExtractor{T}</see> objects.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLineFactory.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a collection of new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLine">IAuditLine</see> instances that includes data about 
            <paramref name="entities"/> required for organizing audits into groups and conversations by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository"/>
            and for recording relevant data to the TLog.
            </summary>
            <typeparam name="T">The type of the entity from which to create the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLine">IAuditLine</see> instance.</typeparam>
            <param name="entities">
                An entity (usually representing a line in a transaction) about which an audit is being craeted, and for which a
                matching <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditEntityExtractor`1">IAuditEntityExtractor{T}</see> instance should be found and used for extraction of
                the  <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLine">IAuditLine</see> data.
            </param>
            <returns>
            A collection of new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditLine">IAuditLine</see> instances that includes data about <paramref name="entities"/>.
            </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog">
            <summary>
            Represents an audit of a triggered <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.TransactionId">
            <summary>
            Gets or sets the customer order id the activity was registered on.
            </summary>
            <value>The customer order id.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.IsSatisfied">
            <summary>
            Gets or sets a value indicating whether this rule has been satisfied.
            </summary>
            <value><c>true</c> if the rule was satisfied; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.ActionType">
            <summary>
            Gets or sets the type of the result that was invoked.
            </summary>
            <value>The type of the result.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.RuleId">
            <summary>
            Gets or sets the name of the rule that was invoked.
            </summary>
            <value>The name of the rule.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.RuleType">
            <summary>
            Gets or sets the type of the rule that was invoked.
            </summary>
            <value>The type of the rule.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.MessageName">
            <summary>
            Gets or sets the name of the message that was displayed when the rule has been invoked
            </summary>
            <value>The name of the message.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.AffectedEntity">
            <summary>
            Gets or sets the line entity on which the owning <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance was triggered 
            (such as <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine"/>, <see cref="N:Retalix.StoreServices.Model.Tender"/>, etc.).
            </summary>
            <remarks>
            May be used to record a line that was rejected in the TLog.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.AffectedEntityKey">
            <summary>
            Gets or sets the entity key <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> instance was triggered 
            </summary>
            <remarks>
            May be used to record a product ID that was rejected in the TLog.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.AuditKey">
            <summary>
            Gets or sets a key.
            Use to group by associated <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> into <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConversationAudit">IConversationAudit</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.SequenceNumber">
            <summary>
            Gets or sets the sequence number of the line the rule was applied on (if was run on several lines - the last one is recorded).
            </summary>
            <value>The sequence number.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.RequestId">
            <summary>
            Gets or sets request id according to <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessServiceRequestContext">BusinessServiceRequestContext</see>.
            Use to group by <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> into <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup">IAuditGroup</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.IsAutomatic">
            <summary>
            Gets or sets a value indicating whether the triggered restriction associated with this audit was
            automatically resolved by the system, without any option for user intervention.
            </summary>
            <remarks>
            If <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.IsSatisfied">IsSatisfied</see> is false, an <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.IsAutomatic">IsAutomatic</see> 
            value of true indicates that the restriction prohibited the triggering action, without any option
            for the user to approve the activity.
            If <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.IsSatisfied">IsSatisfied</see> is true, an <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.IsAutomatic">IsAutomatic</see> 
            value of true indicates that the restriction was automatically approved by the system, and 
            therefore the user was never prompted to handle the restriction.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.ServiceName">
            <summary>
            Gets or sets the name of the incoming service call.
            </summary>
            <remarks>
            Currently used by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository">IConversationRepository</see> instance to group 
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionAuditLogData">IRestrictionAuditLogData</see> audits into <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup">IAuditGroup</see> objects.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.ExtensionData">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRestrictionExtensionData">IRestrictionExtensionData</see> objects that represent additional domain-specific data
            in this audit.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog.GetActionAttributes">
            <summary>
            Returns the Attributes that need to be logged for the Rule Action.
            </summary>
            <returns>A Dictionary where the Key is the Attribute name and the Value is the Attribute Value.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRuleAuditLogWriter">
            <summary>
            Represents an audit log writer for saving <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog">BusinessRuleAuditLogs</see>,
            representing business rule events that occurred over the course of a transaction.
            </summary>
            <remarks>
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog">BusinessRuleAuditLogs</see> are usually used for documenting rule events
            in the TLog.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRuleAuditLogWriter.Write(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog,Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible)">
            <summary>
            Persists a single <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog">BusinessRuleAuditLog</see> object to the data store.
            This audit log is persisted immediately regardless of the success or failure of the ambient unit of work.
            </summary>
            <seealso cref="T:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork"/>.
            <param name="businessRuleAuditLog"><see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog">BusinessRuleAuditLog</see> object to persist.</param>
            <param name="transactionalEntity">The ambient transaction entity with which to associate <paramref name="businessRuleAuditLog"/>.
            If null, <paramref name="businessRuleAuditLog"/> will be saved only for the scope of the current request.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IRuleAuditLogWriter.WriteOnSuccessfulUnitOfWork(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog,Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible)">
            <summary>
            Persists a single <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog">BusinessRuleAuditLog</see> object to the data store.
            If the ambient unit of work is rolled back, <paramref name="businessRuleAuditLog"/> will also be rolled back.
            </summary>
            <seealso cref="T:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork"/>.
            <param name="businessRuleAuditLog"><see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.BusinessRuleAuditLog">BusinessRuleAuditLog</see> object to persist.</param>
            <param name="transactionalEntity">The ambient transaction entity with which to associate <paramref name="businessRuleAuditLog"/>.
            If null, <paramref name="businessRuleAuditLog"/> will be saved only for the scope of the current request.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.OperatorBypassActivityAuditLog">
            <summary>
            Audit of bypass made by an operator.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.OperatorBypassActivityAuditLog.OperatorName">
            <summary>
            The display name of the operator that approved the bypass
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.OperatorBypassActivityAuditLog.OperatorType">
            <summary>
            The type of the operator that approvad the bypass
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.OperatorBypassActivityAuditLog.WorkerId">
            <summary>
            The internal user id of the operator in it's original system
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.OperatorBypassActivityAuditLog.ApproverId">
            <summary>
            The unique user name of the operator.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.OperatorBypassActivityAuditLog.Description">
            <summary>
            The description of the bypassed activity.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.OperatorBypassActivityAuditLog.EntryMethod">
            <summary>
            The entry method of the bypass.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.OperatorBypassActivityAuditLog.LineSequenceNumber">
            <summary>
            A line sequence number this activity relates to.
            In practice this property holds item no
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.OperatorBypassActivityAuditLog.OriginalLineSequenceNumber">
            <summary>
            A line sequence number this activity relates to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.OperatorBypassActivityAuditLog.SolvedWithoutOperator">
            <summary>
            The bypass activity was solved without operator attendance.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.EntityReference.IEntityReferenceFactory">
            <summary>
            Represents a factory for creating lazy references to entities.
            </summary>
            <remarks>
            An entity reference is an object that represents an entity of the defined type,
            but only loads the actual entity instance on-demand when a member of that
            entity other than it's key is accessed.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.EntityReference.IEntityReferenceFactory.Create``1(Retalix.StoreServices.Model.Infrastructure.BusinessRules.EntityReference.IReferenceDefinition{``0},System.Object)">
            <summary>
            Creates a new reference to an entity of type <typeparamref name="T"/> whose key is <paramref name="entityKey"/>.
            </summary>
            <typeparam name="T">The type of the entity for which to create a reference.</typeparam>
            <param name="referenceDefinition">
            Defines the key of the created entity of type <typeparamref name="T"/>
            and how to lazily load the entity given <paramref name="entityKey"/>.
            </param>
            <param name="entityKey">The key of the entity reference to create.</param>
            <returns>An entity reference for type <typeparamref name="T"/> with the key defined by <paramref name="entityKey"/>.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.EntityReference.IReferenceDefinition`1">
            <summary>
            Defines the parameters required for creating a lazy reference to an entity.
            </summary>
            <typeparam name="T">The type of the entity for which a lazy reference should be created.</typeparam>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.EntityReference.IReferenceDefinition`1.KeyGetter">
            <summary>
            Gets or sets the expression that defines how to retrieve the key
            from an entity of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            The parameter to the <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.EntityReference.IReferenceDefinition`1.KeyGetter"/> func, of type <typeparamref name="T"/>,
            is the entity from which to retrieve the key.
            The return type of the <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.EntityReference.IReferenceDefinition`1.KeyGetter"/> func, of type object,
            is the key of the entity passed to the function.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.EntityReference.IReferenceDefinition`1.EntityLoader">
            <summary>
            Gets or sets the expression that defines how to retrieve an entity 
            of type <typeparamref name="T"/> given the entity's key.
            </summary>
            <remarks>
            The parameter to the <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.EntityReference.IReferenceDefinition`1.EntityLoader"/> func, of type object,
            is the key of the entity to load.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.IDocumentRequestContainer">
            <summary>
            Add new api for saving and reading an<see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.IDocumentRequestContainer.Initialize(Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest)">
            <summary>
            Add the entire <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest"/> to be parsed when needed.
            </summary>
            <param name="request"> The <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest"/> that encapsualtes the incoming xml</param>.
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.ApprovalInput">
            <summary>
            Contains input data required to satisfy a result that requires credentials to be supplied (i.e., manager approval) in order to allow the requested action.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.ApprovalInput.Username">
            <summary>
            The username of the approving operator.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.ApprovalInput.Password">
            <summary>
            The password of the approving operator.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.ConfirmationInput">
            <summary>
             Contains input data required to satisfy a result that requires confirmation input
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.DataInput">
            <summary>
            Contains input data required to satisfy aresult that requires additional inputs to be supplied for the requested action.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.DataInput.Input">
            <summary>
            The data provided by the client to satisfy a result that requires additional inputs to be supplied for the requested action.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.IRuleInputContainer">
            <summary>
            Represents a container for <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.RuleInput">RuleInput</see> object.
            The lifespan of a container ends when the current request ends. 
            Therefore inputs added remain accessible only for the duratino of the current request.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.IRuleInputContainer.Add(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.RuleInput)">
            <summary>
            Adds <paramref name="ruleInput"/> to the container.
            </summary>
            <param name="ruleInput">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.RuleInput">RuleInput</see> object to save.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.IRuleInputContainer.AddRequest(Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest)">
            <summary>
            Add the entire <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest"/> to be parsed when needed
            </summary>
            <param name="request">the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest"/> that encapsualtes the incoming xml</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.LoyaltyCardIdentificationInput">
            <summary>
              Contains input data required to satisfy a result that requires loyalty card identification input
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.LoyaltyCardIdentificationInput.LoyaltyCardNumber">
            <summary>
            Loyalty card Id
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.ReasonCodeInput">
            <summary>
            Contains input data required to satisfy a result that requires a reason code to be supplied for the requested action.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.ReasonCodeInput.ReasonCodeId">
            <summary>
            The ID of the reason code describing the reason for the requested action.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.RuleInput">
            <summary>
            A data class encapsulating a single business-rule-related set of input-data.
            </summary>
            <remarks>
            Rule inputs will generally be provided by an R10 server client in order to satisfy a business rule's result.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.RuleInput.RuleName">
            <summary>
            Gets or sets the Name of the business rule for which this input is intended.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.RuleInput.ResultTypeName">
            <summary>
            Gets or sets the type-name of the result definition for which this input is intended.
            </summary>
            <remarks>
            See BRMS SDK for more information on BRMS type-names.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Inputs.ExternalServicesCallInput">
            <summary>
             Contains input data required to satisfy a result that requires ExternalServicesCall input
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapper">
            <summary>
            The singleton mapper used to mapfrom business events to other data types used by business rules and conditions.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapper.Map(Retalix.StoreServices.Model.Infrastructure.Events.IDomainEvent,System.Type)">
            <summary>
            Maps <paramref name="domainEvent"/> to a newly created instance of the parameter expected by
            an instance of <paramref name="conditionType"/>.
            </summary>
            <param name="domainEvent">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEvent">IDomainEvent</see> instance to map to the resultant </param> 
            <param name="conditionType">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition">ICondition</see> type for which the resultant
            </param>
            <returns>
            An object of the type that was configured as the target type via the <see cref="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapper.Configure``1"/> method.
            </returns>
            <exception cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.MissingEventMappingException">
            No mapping has been configured to support mapping from <paramref name="domainEvent"/> to the context 
            expected by a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition">ICondition</see> object of type <paramref name="conditionType"/>.
            </exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapper.Map``1(Retalix.StoreServices.Model.Infrastructure.Events.IDomainEvent)">
            <summary>
            Maps <paramref name="domainEvent"/> to a newly created instance of type <typeparamref name="TDestination"/>.
            </summary>
            <param name="domainEvent">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEvent">IDomainEvent</see> instance to map to the destination type.</param>
            <typeparam name="TDestination">The type to which to map <paramref name="domainEvent"/> to.</typeparam>
            <returns>An object of type <typeparamref name="TDestination"/>.</returns>
            <exception cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Exceptions.MissingEventMappingException">
            No mapping has been configured to support mapping from <paramref name="domainEvent"/> to <typeparamref name="TDestination"/>.
            </exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapper.CanMap(System.Type,System.Type)">
            <summary>
            Returns true if any mapping was cconfigured from type <paramref name="businessEventType"/> 
            for condition of type <paramref name="conditionType"/>.
            </summary>
            <param name="businessEventType">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEvent">IDomainEvent</see> type for which to determine if a mapping exists.</param>
            <param name="conditionType">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition">ICondition</see> type for which to determine if a mapping exists.</param>
            <returns>True if ann instance of type <paramref name="businessEventType"/> can be mapped to the context configured for
            a condition of type <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition">ICondition</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapper.Configure``1">
            <summary>
            Configures a new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapping`1">IEventMapping{TEvent}</see> instance on which mappings
            can be configured from <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEvent">IDomainEvent</see> types matching <typeparamref name="TEvent"/>
            or its derived types.
            </summary>
            <typeparam name="TEvent">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEvent">IDomainEvent</see> type for which to create the mapping.</typeparam>
            <returns>A new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapping`1">IEventMapping{TEvent}</see> instance.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapping`1">
            <summary>
            Represents a mapping configuration that defines how an instance of type <typeparamref name="TEvent"/>
            or a defined derived type is mapped to a destination type, and which <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition">ICondition</see>
            types receive this destination type as parameter to their <see cref="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition.Evaluate(System.Object)">Evaluate</see>
            method.
            </summary>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapping`1.As``1(System.Func{`0,``0})">
            <summary>
            Maps <typeparamref name="TEvent"/> to a new instance of <typeparamref name="TDestination"/> 
            using the specified  <paramref name="constructorExpression"/>.
            </summary>
            <typeparam name="TDestination">
            The destination type that is created from the given instance of type <typeparamref name="TEvent"/>.
            </typeparam>
            <param name="constructorExpression">
            An expression that receives an instance of type <typeparamref name="TEvent"/> and returns a new instance of <typeparamref name="TDestination"/>.
            </param>
            <returns>The current IEventMapping{TEvent} instance.</returns>
            <exception cref="T:System.InvalidOperationException">A constructor expression has already been defined on this mapping instance. 
            Do not call <see cref="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapping`1.As``1(System.Func{`0,``0})"/> more than once.</exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapping`1.Include``1">
            <summary>
            Indicates that <typeparamref name="TDerived"/> can also be mapped using this mapping configuration.
            </summary>
            <typeparam name="TDerived">A type derived from <typeparamref name="TEvent"/> that should be included in this mapping configuration.</typeparam>
            <returns>The current IEventMapping{TEvent} instance.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapping`1.ForCondition``1">
            <summary>
            Indicates that <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition">conditions</see> of type <typeparamref name="TCondition"/> use the destination
            type defined in this mapping configuration as parameter to their <see cref="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition.Evaluate(System.Object)">Evaluate</see>
            method.
            This method may be called multiple times to add additional supported condition types.
            </summary>
            <typeparam name="TCondition"></typeparam>
            <returns>The current IEventMapping{TEvent} instance.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapping`1.ForConditions(System.Type[])">
            <summary>
            Indicates that <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition">conditions</see> of the types specified in <paramref name="conditionTypes"/> use the destination
            type defined in this mapping configuration as parameter to their <see cref="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition.Evaluate(System.Object)">Evaluate</see>
            method.
            </summary>
            <param name="conditionTypes"></param>
            <returns>The current IEventMapping{TEvent} instance.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMappingConfigurationParticipant">
            <summary>
            Represents a configurator that adds mapping configurations to the singleton IEventMapper instance.
            This class is instantiated and called only once during the application lifespan.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMappingConfigurationParticipant.Configure(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapper)">
            <summary>
            Derived types should add their mapping configurations to the <paramref name="mapper"/> instance.
            </summary>
            <param name="mapper">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Mapping.IEventMapper">IEventMapper</see> instance to be configured.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Lookup.Mapping.IRuleBehaviorNameToTypeMapper">
            <summary>
            This API is used for mapping business rule behavior name from Contract to business rule behavior type.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Lookup.Mapping.IRuleBehaviorNameToTypeMapper.AddMapping(System.String,System.Type)">
            <summary>
            Derived types of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Lookup.Mapping.IRuleBehaviorNameToTypeParticipant">IRuleBehaviorNameToTypeParticipant</see>should add their mapping configurations.
            </summary>
            <param name="businessRuleBehaviorName">business rule behavior name according the BusinessRuleLookup schema</param>
            <param name="behaviorType">type of concrete IRuleBehavior</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Lookup.Mapping.IRuleBehaviorNameToTypeMapper.Map(System.String)">
            <summary>
            Used for mapping a business rule behavior name string to its business rule behavior type.
            </summary>
            <param name="businessRuleBehaviorName">business rule behavior name according the BusinessRuleLookup schema</param>
            <returns>type of concrete IRuleBehavior</returns>
            <exception cref="T:System.ArgumentException">throw exception in case mapping for businessRuleBehaviorName not exists</exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Lookup.Mapping.IRuleBehaviorNameToTypeMapper.MapBack(System.Type)">
            <summary>
            Used for mapping a business rule behavior type to its business rule behavior string name.
            </summary>
            <param name="businessRuleBehaviorName">business rule behavior name according the BusinessRuleLookup schema</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Lookup.Mapping.IRuleBehaviorNameToTypeParticipant">
            <summary>
            Represents a configurator that adds mapping configurations to the singleton IRuleBehaviorNameToTypeMapper instance.
            This class is instantiated and called only once during the application lifespan.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Lookup.Mapping.IRuleBehaviorNameToTypeParticipant.Configure(Retalix.StoreServices.Model.Infrastructure.BusinessRules.Lookup.Mapping.IRuleBehaviorNameToTypeMapper)">
            <summary>
            Derived types <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Lookup.Mapping.IRuleBehaviorNameToTypeParticipant">IRuleBehaviorNameToTypeParticipant</see>should add their mapping configurations to the <paramref name="mapper"/> instance.
            </summary>
            <param name="mapper">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Lookup.Mapping.IRuleBehaviorNameToTypeMapper">IRuleBehaviorNameToTypeMapper</see> instance to be configured.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition">
            <summary>
             Represents a condition that can be defined for business rule in order to participate in their evaluation process.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition.Evaluate(System.Object)">
            <summary>
            Evaluates the condition and returns a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatch">IMatch</see> object containing the items that matched the condition, if any.
            </summary>
            <param name="evaluationData">The object containing the data according to which this condition evaluates its criteria.</param>
            <returns>A <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatch">IMatch</see>object containing the items that matched the condition, or an empty match if no items matched.</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition.Priority">
            <summary>
            Sets the priority for and Ordered execution of BRM conditions, to improve the performance
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.IFilter`1.Evaluate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Evaluates the condition and returns a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatch">IMatch</see> object containing the items that matched the condition, if any.
            </summary>
            <param name="evaluationData">The object containing the data according to which this condition evaluates its criteria.</param>
            <returns>A <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatch">IMatch</see>object containing the items that matched the condition, or an empty match if no items matched.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.Match`1">
            <summary>
            Represents a matched object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the encapsulated object match.</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.Match`1.#ctor">
            <summary>
            Creates an empty match instance.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.Match`1.#ctor(`0)">
            <summary>
            Creates a match instance containing <paramref name="matched"/> as the match.
            </summary>
            <param name="matched">The matched object.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.Match`1.HasMatch">
            <summary>
            Returns true if the match contains a non-default matched object.
            </summary>
            <returns>True if the match contains a non-default matched object; otherwise false.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IExtensionDataDao">
            <summary>
            Represents a generic dao for saving extension data that is to be associated with an extensible entity
            and that entity's lifecycle.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IExtensionDataDao.Save``1(System.String,``0)">
            <summary>
            Persists <paramref name="extensionData"/> to the data store with the associated <paramref name="relatedEntityKey"/>.
            </summary>
            <param name="relatedEntityKey">The key of the entity with whose lifetime <paramref name="extensionData"/>
            should be associated.</param>
            <param name="extensionData">The entity to be persisted.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IExtensionDataDao.Find``1(System.String)">
            <summary>
            Finds an entity of type <typeparamref name="T"/> that is associated with <paramref name="relatedEntityKey"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="relatedEntityKey"></param>
            <returns>The first found matching entity, or null if no matching entity was found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IExtensionDataDao.Delete``1(System.String)">
            <summary>
            Deletes an extension data record of type <typeparam name="T"/> that is 
            associated with <paramref name="relatedEntityKey"/>, from the data store.
            </summary>
            <param name="relatedEntityKey">The key of the entity with whose lifetime the extension data was associated.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IRuleResultManager">
            <summary>
            Represents a manager that encapsulates the business of how <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction">IRuleAction</see> objects
            should be handled at runtime.
            Among other things, this business includes the priority of results, i.e., the order and time in which they
            should be handled.
            <para>
            During normal service execution flow, this class is called after service execution completes,
            at which point all pending, unhandled <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction">IRuleAction</see> objects are handled.
            </para>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IRuleResultsWriter">
            <summary>
            Represents a writer for <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.RuleResult">rule results</see> that have been outputted by triggered <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rules</see>
            during the execution of the current request. 
            </summary>
            <remarks>
            The writer maintains a buffer of pending satisfied results. 
            If no errors occur during the execution of the request, the pending satisfied results are written to the output stream.
            If a triggered <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">business rule</see> returns a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.RuleResult">RuleResult</see> that is not satisfied and stops the execution of the current request,
            the writer will ignore pending satisfied results and write only the unsatisfied <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.RuleResult">RuleResult</see>.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IRuleResultsWriter.AddSatisfiedResult(Retalix.StoreServices.Model.Infrastructure.BusinessRules.RuleResult)">
            <summary>
            Adds a satisfied <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.RuleResult">RuleResult</see> object to the write-buffer of results waiting to be written to the output.
            </summary>
            <param name="ruleResult">The satisfied <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.RuleResult">RuleResult</see> object that should be written if no execution error occurs.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatch">
            <summary>
            Represents the data that was matched by the criteria of a <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition">condition</see> object.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatch.HasMatch">
            <summary>
            Returns true if match contains any matched data; otherwise returns false.
            A match that contains no data is, in effect, a failed match, indicating that the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition">condition</see>
            that returned it failed to find any matching data in its context.
            </summary>
            <returns>True if match contains any matched data; otherwise returns false.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatchedSet">
            <summary>
            Represents the the composite of all data that matched the criteria of a given business rule and all of its conditions.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatchedSet.AllMatch">
            <summary>
            Returns true if all <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatch">matches</see> contained by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatchedSet">matched set</see> are positive matches 
            (i.e., contain at least one matched item), or if the <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatchedSet">matched set</see> is empty. Otherwise returns false.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatchedSet.FindMatch``1">
            <summary>
            Returns all <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatch">matches</see> of the requested type.
            </summary>
            <typeparam name="TMatch">The type of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatch">matches</see> to return.</typeparam>
            <returns>All <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatch">matches</see> of the type <typeparamref name="TMatch"/>, or an empty set of no matching matches were found.</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IRuleBehavior.Id">
            <summary>
            This property is required for persistence.
            Gets the unique ID of this behaviour instance in the data store.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IRuleBehavior.Rule">
            <summary>
            This property is required for persistence.
            Gets or sets the business rule that contains this behavior.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IRuleBehavior.Action">
            <summary>
            This property is required for persistence.
            Gets or sets the action that needs to be executed by this behavior.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IRuleBehavior.Tag">
            <summary>
            This property is required for persistence.
            Gets or sets the Tag that is used to locate rule of specific familiy.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IRuleBehavior.GetApplicableEvents">
            <summary>
            Defines all the events this rule must respond to.
            R10 calls the rule behaviour Apply when these event types are raised, given rule conditions are met.
            </summary>
            <returns>Return an array of event types (derived from IDomainEvent)</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IRuleBehavior.Apply(Retalix.StoreServices.Model.Infrastructure.Events.IDomainEvent,Retalix.StoreServices.Model.Infrastructure.BusinessRules.Results.IMatchedSet)">
            <summary>
            Apply the rule behaviour.
            R10 calls Apply when registered event types are raised, given rule conditions are met.
            This is where the actual rule evaluation occures. The behaviour should inspect the event
            and condition matches and decide if the Action needs to be executed.
            If no action is required, return null.
            </summary>
            <param name="businessEvent">The event that needs to be evaluated</param>
            <param name="conditionMatches">The match results of the rule conditions</param>
            <returns>Return RuleResult with the configured Action, or null if rule is not applicable.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType">
            <summary>
            Activity types
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.OpenDrawer">
            <summary>
            Open drawer activity
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.Reprint">
            <summary>
            Reprint activity
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.TillDeclaration">
            <summary>
            Cash Office Till declaration activity
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.TillClosing">
            <summary>
            Cash Office Till closing activity
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.PaidIn">
            <summary>
            Cash Office Paid-In activity
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.PaidOut">
            <summary>
            Cash Office Paid-Out activity
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.EnterTrainingMode">
            <summary>
            Entering into training mode transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.RemoveLoyaltyCard">
            <summary>
            Removing the loyalty card from the customer order.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.SwitchLoyaltyCard">
            <summary>
            Replacing the loyalty card of the customer order with another loyalty card.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.RecallTransaction">
            <summary>
            Resuming not closed sales transaction at a POS.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.BlindPickup">
            <summary>
            Open drawer for Blind Pickup.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.TaxReverse">
            <summary>
             Tax reverse operation.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.TaxExempt">
            <summary>
             Tax exempt operation.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.ItemTaxExempt">
            <summary>
            Item tax exempt operation.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.PriceModify">
            <summary>
            Price Modifier operation.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.TenderLoan">
            <summary>
            Tender Loan operation
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.TenderPickup">
            <summary>
            Tender pickup operation
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.FuelPriceUpdate">
            <summary>
            Price Maintenance operation.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.ReverseEligibility">
            <summary>
            Reverse the tenders eligibilities of customer order
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.OpenColdstart">
            <summary>
            Open Coldstart activity
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.ReturnItem">
            <summary>
            Return Item operation in case no sale or within transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.ReturnAll">
            <summary>
            Return All transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.ReturnTransaction">
            <summary>
            Non-Receipt return transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.TransactionBasedReturn">
            <summary>
            Transaction Based Return
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.DepartmentSale">
            <summary>
            Department Sale in case no sale mode or within selling transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.DepartmentReturn">
            <summary>
            Department Return in case no sale mode or within return transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.XReportPrinting">
            <summary>
            XReport print
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.ZReportPrinting">
            <summary>
            ZReport print
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.ItemAvailability">
            <summary>
            Item Availability
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.GoToCtm">
            <summary>
            Go To Ctm
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.CtmErrors">
            <summary>
            Ctm Errors
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">
            <summary>
            Represents a business rule - a statement that defines or constrains some aspect of the business. 
            It is intended to control or influence the behavior of the business and
            describe the operations, definitions and constraints that apply to an organization.
            <para>
            In order to benefit from the full capabilities of the business rules infrastructure,
            implementors of this interface should derive their rule from <c>Retalix.StoreServices.BusinessComponents.BRMS.BusinessRuleBase</c>.
            </para>
            </summary>
            <remarks>
            A business rule inspects the system state and, if some conditions are met, responds according to defined behavior.
            The system state relevant to the rule is encapsulated by an object that is passed to the rule when it is evaluated.
            <para>
            Each rule implementation defines the criteria that can be configured for it, according to which its applicability is determined.
            In addition, a business rule may include one or more <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition">ICondition</see> objects that may participate
            in this evaluation process in order to determine if the rule is applicable.
            </para>
            <para>
            If a rule determines that it is applicable given the current system state, it returns an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Actions.IRuleAction">IRuleAction</see>
            object representing the behavior that the rule expects the system to follow. This result may be configured for a rule type
            when it is defined, or it may be predefined by the rule independent of any external configuration.
            </para>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule.Name">
            <summary>
            Gets the name of this rule.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule.Conditions">
            <summary>
             Get or sets the list of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Conditions.ICondition">ICondition</see> objects that determine if this rule is applicable
             in the current context.
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Configuration.BusinessConfigurationRetailSegment">
            <summary>
            Factory to create diffrent type retail segment identifiers for business configuration.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Configuration.BusinessConfigurationRetailSegment.None">
            <summary>
            Not retail segment dependent.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Configuration.BusinessConfigurationRetailSegment.All">
            <summary>
            Used to define configuration for all retail segments. (This will be returned only if the configuration was not found for specific segment.)
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Configuration.BusinessConfigurationRetailSegment.ForRetailSegment(Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
            Used to define configuration for specific retail segment. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Configuration.BusinessConfigurationTypeConverterAttribute">
            <summary>
            Used to call custom type converter for configuration property.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Configuration.BusinessConfigurationTypeConverterAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="converterType">Converter type must inherit from IBusinessConfigurationTypeConverter and have a default constructor.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationDao.GetOrCreate``1(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationRetailSegment)">
            <summary>
            Get or create is a factory method to create new configuration, or get an existing one. You can save or update configuration using this method.
            </summary>
            <typeparam name="TConfiguration">Business configuration type, that inherits from IBusinessConfiguration.</typeparam>
            <param name="location">Configuration for location (Business Unit).</param>
            <param name="businessConfigurationRetailSegment">Business configuration retail segment defenitiion.</param>
            <returns>Business configuration wrapped by a maintenance container.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationDao.GetOrCreate``1(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Get or create is a factory method to create new configuration for a not location dependent configuration, or get an existing one. You can save or update configuration using this method.
            </summary>
            <typeparam name="TConfiguration">Business configuration type, that inherits from IBusinessConfiguration.</typeparam>
            <param name="location">Configuration for location (Business Unit).</param>
            <returns>Business configuration wrapped by a maintenance container.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationDao.GetAll``1(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Gets all business configuration by specific type.
            </summary>
            <typeparam name="TConfiguration">Business configuration type, that inherits from IBusinessConfiguration.</typeparam>
            <param name="location">Configuration location.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationDao.FindRelevant``1(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
            Used to find relevant configuration by location and retail segment.
            </summary>
            <typeparam name="TConfiguration">Type of configuration to find.</typeparam>
            <param name="location">Configuration location AKA "business unit".</param>
            <param name="retailSegment">Configuration retail segment</param>
            <returns>Business configuration of type (TConfiguration) wrapped by a readonly container.</returns>
            <remarks>
            You can't save, update or delete configuration retrieved by using this method. It's purpose is to find relevant configuration and return it in the readonly manner as name of it's container sugests.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationDao.GetRelevantConfigurationWithIdentifier``1(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
            Used to find relevant configuration by location and retail segment.
            </summary>
            <typeparam name="TConfiguration">Type of configuration to find.</typeparam>
            <param name="location">Configuration location AKA "business unit".</param>
            <param name="retailSegment">Configuration retail segment</param>
            <returns>Business configuration of type (TConfiguration) wrapped by a BusinessMaintenanceContainer.</returns>
            <remarks>
            To save, update or delete configuration retrieved by using this method. It's purpose is to find relevant configuration and return it along with it's container details.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationDao.FindRelevant``1(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Used to find relevant configuration by location and only the configuration which is not retail segment dependent.
            </summary>
            <typeparam name="TConfiguration">Type of configuration to find.</typeparam>
            <param name="location">Configuration location AKA "business unit".</param>
            <returns>Business configuration of type (TConfiguration) wrapped by a readonly container.</returns>
            <remarks>
            You can't save, update or delete configuration retrieved by using this method. It's purpose is to find relevant configuration and return it in the readonly manner as name of it's container sugests.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationDao.SaveOrUpdate(Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationMaintenanceContainer)">
            <summary>
            Save or update business configuration can be used only on instances created using GetOrCreate factory method.
            </summary>
            <param name="businessConfigurationMaintenanceContainer">Business configuration that was created by using GetOrCreate.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationDao.Delete(Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationMaintenanceContainer)">
            <summary>
            Delete business configuration can be used only on instances created using GetOrCreate factory method.
            </summary>
            <param name="businessConfigurationMaintenanceContainer">Business configuration that was created by using GetOrCreate.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationDao.GetOrCreate``1(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationRetailSegment,System.String)">
            <summary>
            Get or create is a factory method to create new IGenericBusinessConfiguration, or get an existing one. You can save or update configuration using this method
            </summary>
            <typeparam name="TConfiguration"></typeparam>
            <param name="location"></param>
            <param name="businessConfigurationRetailSegment"></param>
            <param name="businessConfigurationName"> configuration name</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationDao.FindRelevant``1(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.String,Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationRetailSegment)">
            <summary>
            Used to find relevant configuration by location and retail segment.
            </summary>
            <typeparam name="TConfiguration">Type of configuration to find.</typeparam>
            <param name="location">Configuration location AKA "business unit".</param>
            <param name="businessConfigurationName">Configuration business configuration name</param>
            <param name="businessConfigurationRetailSegment">Configuration retail segment</param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationIdentifier.Name">
            <summary>
            Configuration name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationIdentifier.Location">
            <summary>
            Configuration location.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Configuration.IBusinessConfigurationIdentifier.ConfigurationRetailSegment">
            <summary>
            Configuration retail segment declaration.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessFlowException">
            <summary>
            Represents a Business Flow exception. 
            </summary>
            <remarks>Exceptions that inherit from this are excepted and part of the business flow</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessFlowException.#ctor(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Message.IMessagePart},System.Boolean,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException">BusinessException</see>.
            </summary>
            <param name="message">>The message that describes the error.</param>
            <param name="parssAsXml">True - parse as xml, False - parse as text.</param>
            <param name="errorCode">The code to identify this error.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessFlowException.#ctor(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Message.IMessagePart},System.Boolean,System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException">BusinessException</see>.
            </summary>
            <param name="message">>The message that describes the error.</param>
            <param name="parssAsXml">True - parse as xml, False - parse as text.</param>
            <param name="errorCode">The code to identify this error.</param>
            <param name="innerException">Inner exception used to create this exception.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException">
            <summary>
            Represents a business exception. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException.ErrorCode">
            <summary>
            The error code that can be used to identify this exception for configuration. Preferably the class name.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException.#ctor(System.String)">
            <summary>
            Override in derived exception, to supply the relevant business error message and code.
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException.#ctor(System.String,System.String,System.String)">
            <summary>
            Override in derived exception, to supply the relevant business error message and code.
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="domain">The domain the raised this error</param>
            <param name="eventId">The unique event id</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Override in derived exception, to supply the relevant business error message and code.
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="domain">The domain the raised this error</param>
            <param name="eventId">The unique event id</param>
            <param name="errorCode">The Error Code</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException.#ctor(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Override in derived exception, to supply the relevant business error message and code.
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="domain">The domain the raised this error</param>
            <param name="eventId">The unique event id</param>
            <param name="errorCode">The Error Code</param>
            <param name="innerException">The InnerException</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Override in derived exception, to supply the relevant business error message and code.
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="domain">The domain the raised this error</param>
            <param name="eventId">The unique event id</param>
            <param name="innerException">The InnerException</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException.#ctor(System.String,System.String)">
            <summary>
            Override in derived exception, to supply the relevant business error message and code.
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="errorCode">The code to identify this error</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException.#ctor(System.String,System.Exception)">
            <summary>
            Override in derived exception, to supply the relevant business error message and code.
            Allow passing an inner exception into this one.
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="inner">Inner exception used to create this exception</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Override in derived exception, to supply the relevant business error message and code.
            Allow passing an inner exception into this one.
            </summary>
            <param name="message">The message that describes the error</param>
            <param name="errorCode">The code to identify this error</param>
            <param name="inner">Inner exception used to create this exception</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data. 
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException.AdditionalData">
            <summary>
             Extra data that need to be passed in <see cref="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException">BusinessException</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes">
            <summary>
            Error codes for <see cref="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException">BusinessException</see>.
            The code listed here is only for cases where the specific business exception implementation is not exposed in the model itself.
            If the error has a matching id for the client it will be under the ClientResultCode attribute
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BusinessUnitIdNotFound">
            <summary>
            Not exists business unit
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidData">
            <summary>
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ProductMissingMandatoryField">
            <summary>
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidIsoCurrencySymbol">
            <summary>
                Invalid ISO currency symbol was given to initialize new CurrencyInfo instance.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NegativePriceIsForbidden">
            <summary>
             Appear when trying to create / update a price to a negative value
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConsumableIdNotFound">
            <summary>
             product id not exists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ExpirationDateIsLessThanEffectiveDate">
            <summary>
             verify expiration date is less than effective date
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceMaintenanceError">
            <summary>
             Appear when trying to maintain price and an error occurs
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ParentIdNotFound">
            ItemHierarchyMaintenance
            <summary>
            ParentIdNotFound
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.HierarchyNotFound">
            <summary>
            HierarchyNotFound
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ProductNotFound">
            ConsumableMaintenance////
             <summary>
             Product Not Found
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceEntryRequiredisNotValid">
            <summary>
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LocationGroupIsNotExist">
            <summary>
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IllegalSegmentType">
            <summary>
            Tried to create not existing Segment Type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LastColdStartFailedToRun">
            <summary>
            Last cold start failed to run
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DmsTokenInfoNotFound">
            <summary>
             DmsTokenInfo was not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnelineItemActivationFailedErrorCode">
            <summary>
            ScoIntervention sent by client code
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConfigurationNotExistForRequestedErrorCode">
            <summary>
            Requested configuration not exist 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InterventionConfigurationWrongPropertyValue">
            <summary>
             Intervention Configuration can't be saved with selected set of values.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InterventionConfigurationChangeNotAllowed">
            <summary>
             Change of specific property type is not allowed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemIsNotWeighableCanNotSetVolume">
            <summary>
            Provided units type was identified as weight, and was incompatible with the items available prices.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RepeatedItemMustBeEachAndOneUnit">
            <summary>
            Selling with "Repeat" entry method limited to each * 1
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RepeatRetrunItem">
            <summary>
            Returning item with "Repeat" entry method is not allowed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RepeatOnlineItem">
            <summary>
            Selling online item with "Repeat" entry method is not allowed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RepeatVoidedItem">
            <summary>
            Voiding item with "Repeat" entry method is not allowed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RepeatGs1Item">
            <summary>
            Selling Gs1 item with "Repeat" entry method is not allowed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.Gs1ItemQuantitySellNotAllowd">
            <summary>
            Gs1 item quantity sale not allowed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SumOfFixedRatesHigherThanPrice">
            <summary>
            Sum of all inclusive fixed tax rates is higher than the total price.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InhibitQuantityKeyed">
            <summary>
            Manual entered quantity not allowed for this item.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemPriceWithinRange">
            <summary>
            Price exceed the maximum allowed amount.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemPriceModifierLessThanLinkedItemAmount">
            <summary>
            Price Modifier is Less than a Linked Item Amount
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidUnitsInWeighableItem">
            <summary>
            Weight value is Zero.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidValueInWeighableItem">
            <summary>
            Quantity of weighable unit of measure selling is not one.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NotSelectedWeighableLine">
            <summary>
            Weighable line is not selected.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidValueInVolumeItem">
            <summary>
            Volume value is Zero.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidUnitsInVolumeItem">
            <summary>
            Quantity of volume unit of measure selling is not one.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NegativeItemLineValue">
            <summary>
            Item Line value is negative.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderNotFoundByReturnDefinitions">
            <summary>
            No valid return tender found in Return-Definition
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BusinessUnitNotFound">
            <summary>
            Not exists business unit
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderProcessedByEpsIsNotSupportedForRefundTransaction">
            <summary>
            No valid return tender found in Return-Definition
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateMessagePartType">
            <summary>
            Message part of this type was already added to this message.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSVoidFailure">
            <summary>
            Electronic Payment System failed a void action.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSMissingMerchantId">
            <summary>
            Eps missing merchant id for store,touchPointGroup and acquiererId combination
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderMissingConfirmationCode">
            <summary>
            Tender is missing confirmation code after authorization had been approved upon EOT.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EpsVoidNotMatchCardFailure">
            <summary>
            Electronic Payment System won't void payment that not originated from same transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoidReferenceNumberNotMatch">
            <summary>
            Electronic Payment System won't void payment that not originated from same transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSRefundFailure">
            <summary>
            Electronic Payment System failed a Refund action.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReasonCodeGroupContainsReasonCodes">
            <summary>
            Cannot delete a group that still contains reason codes.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingReasonCodeDescription">
            <summary>
            Description is missing in the Reason Code data.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingReasonCodeTransactionStatus">
            <summary>
            Transaction Status is missing in the Reason Code data.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingReasonCodeActionCode">
            <summary>
            Action Code is missing in the Reason Code data.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceVerifyRequired">
            <summary>
            The Items' price need to be verified for selling purposes
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RegexValidatorEncodingNotSupported">
            <summary>
            Regex Validator Encoding Not Supported by this Data Pattern
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSVoiceAuthorizationDisabled">
            <summary>
            Electronic Payment Voice Authorization Disabled
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderExchangeAmountIsOverLimits">
            <summary>
            Tender Exchange amount exceeded the defined limit.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderExchangeAmountsDontMatch">
            <summary>
            The amounts for paid tender and received tender (in tender exchange) don't match.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderExchangeIdNotExist">
            <summary>
            Tender Exchange id is not exist.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderExchangeIdAlreadyExist">
            <summary>
            Tender Exchange id is not exist.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoTenderExchangeDefinition">
            <summary>
            Tender Exchange definition not found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderExchangeNotInTenderExchangeGroup">
            <summary>
            The selected tender do not match any for the defined tenders for this exchange.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderExchageAmountNotAccordingMultiples">
            <summary>
            Tender exchange amount cannot be resolved into the defined tender denomination
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemActionNotAllowed">
            <summary>
            Online Item Action Not Allowed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ActivatorException">
            <summary>
            Electronic Payment System Failed to activate Online Item
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceModifierNotAllowed">
            <summary>
            No price modifier may be set to this item.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MultiplesQuantityNotAllowed">
            <summary>
            Item cannot be sold in multiplication quantity
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemActivationCodeRequired">
            <summary>
            Online Item Requires Activation Code
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemLocationGroupsRequired">
            <summary>
            Online Item Requires LocationGroups
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemMultipleGroupAssociation">
            <summary>
            Online Item can't be associate to more than one group
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GroupIdIsMissing">
            <summary>
            Cannot sell Online Item for Group Id is not set
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.KitIngredientPortionInvalid">
            <summary>
            Kit Ingredient portion is not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LinkGroupNotFound">
            <summary>
            Kit Ingredient portion is not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.KitOperationExceedsMaxOnLink">
            <summary>
            Kit operation exceeds max portion on link
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.KitOperationExceedsMaxOnLinkGroup">
            <summary>
            Kit operation exceeds max portion on link group
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.KitOperationLowerThanMinOnLinkGroup">
            <summary>
            Kit operation lower than min portion on link group
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.KitOperationLowerThanMinOnLink">
            <summary>
            Kit operation lower than min portion on link
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidKitIngredientConfiguration">
            <summary>
            Cannot add Kit Ingredient with invalid configuration
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MaxNumberOfFuelSalesHasBeenReached">
            <summary>
            Max number of sales on the fuelling point
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderIsNotAllowedInSaleTransaction">
            <summary>
            Tender is not allowed in sale transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderIsNotAllowedInRefundTransaction">
            <summary>
            Tender is not allowed in refund transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoidedLineNotFoundInTransaction">
            <summary>
            No voided lines were found in transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateMessageName">
            <summary>
            Cannot Add message when message with same name already exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MessageNotExists">
            <summary>
            Message not found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MessageIsNotOfRequiredType">
            <summary>
            Messageis not of required type.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoTransactionLinkFoundInPostVoidTenderResolve">
            <summary>
            No Transaction Link Found In Post Void Tender Resolve
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderMustBeReversedExplicitly">
            <summary>
            Must select what tender to use for tender reversal
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NewPriceIsEqualToCurrentPrice">
            <summary>
            Price adjustment is the same as the current items' price
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceMayNotBeChangedToZeroOrLess">
            <summary>
            Changing items price to zero or less is not allowed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceExceedsLimit">
            <summary>
            Changing items price to zero or less is not allowed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LocationInvalidForPriceStatusSet">
            <summary>
            The location is not valid for setting price status
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConsumablePriceInvalidForPriceStatusSet">
            <summary>
            the consumable price is not valid for setting price status
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionAlreadyPostVoided">
            <summary>
            Cannot post void this transaction ,for it is already post voided.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionAlreadyPostUpdated">
            <summary>
            Cannot post update this transaction ,for it is already post updated.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PostUpdateOnTenderExchangeTransaction">
            <summary>
            Cannot post update tender exchange
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PostVoidOnTenderExchangeTransactionForbiden">
            <summary>
            Cannot post void tender exchange
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PostUpdateOnCustomerChargeOrPayInTransaction">
            <summary>
            Cannot post update customer-charge.Cannot post update Pay-In
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PostUpdateOrPostVoidNegativeTransaction">
            <summary>
            Cannot post update or post void a negative (return) transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionIsNotValidForPostActions">
            <summary>
            No action may be performed on this transaction after it was closed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailedToIdentifyVoucherBarcode">
            <summary>
            Voucher Barcode Not Identified
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CanNotPostUpdateNotInSameBusinessDay">
            <summary>
            Post Update transaction from another business date is not allowed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DepartmentNotFound">
            <summary>
            Department Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DepartmentIsNotActive">
            <summary>
            Department Is Not Active
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionNotFoundForRetrieve">
            <summary>
            Transaction not found in closed transactions repository
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionAlreadyVoided">
            <summary>
            Cannot void transaction, Transaction Already Voided
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CanNotPostUpdateTransactionWithANonReversibleTender">
            <summary>
            Transaction cannot be post voided, for there is no return definition for its' tenders
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BaseActionFailed">
            <summary>
            Unspecified error code. For legacy actions only.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemAllreadyExistsInGroup">
            <summary>
            Cannot add item to consumable group when it was already added to that group.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConsumableGroupAllreadyExists">
            <summary>
            Cannot add consumable group that already exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NotValidProducException">
            <summary>
            One of the produce search parameters is invalid or missing.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NotValidSupplierException">
            <summary>
            Suppliers Package Suppliers' Id is unknown in the system.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderExchangeMaximumAmountLessThanMinimumAmount">
            <summary>
            The requested maximum amount is less then the requested minimum amount
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderExchangeDefinitionNotFound">
            <summary>
            Cannot find definition for tender exchange.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BlindPickUpBarcodeGenerationException">
            <summary>
            Blind pick up failed to generate barcode
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OriginalTenderLineWasNotFound">
            <summary>
            in post void , tried to replace original line with new line
            but original was not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionHasNoItems">
            <summary>
            empty-non-voided transaction on close
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TerminalClosed">
            <summary>
            no valid terminal to operate the transaction in
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoActiveCashier">
            <summary>
            no valid cashier to manage the transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoValidChangeFound">
            <summary>
            no valid change option found for current transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CtmNotAllowedForChange">
            <summary>
            CTM Not allowed for change
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CtmNotAllowedForCashBack">
            <summary>
            CTM Not allowed for cash back
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerNotFound">
            <summary>
            Customer not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerOrderNotFound">
            <summary>
            Customer not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ExternalProviderServiceFail">
            <summary>
            External Provider Service Failed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailedCreatingTenderLines">
            <summary>
            Tender line factory failure
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderLineSetAmountFailed">
            <summary>
            Tender line set amount failure
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouldNotRetrieveTender">
            <summary>
            failed to load tender from external params
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EftValidationServiceIsOffLine">
            <summary>
            Eft validation service is offline
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionNotFound">
            <summary>
            Transaction is not in the repository.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EligibilityPolicyNotFound">
            <summary>
            EligibilityPolicy is not in the repository.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EligibilityPolicyAlredyExist">
            <summary>
            EligibilityPolicy is not in the repository.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MultipleTransactionsFound">
            <summary>
            Multiple transactions found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionAlreadyClosed">
            <summary>
            Transaction Already Closed when try to close transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionNotBalanceDue">
            <summary>
            Transaction not balance due
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionIsSuspended">
            <summary>
             Transaction Is Suspended
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionIsNotSuspended">
            <summary>
             Transaction Is Not Suspended
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderAmountIsLowerThenRequieredMin">
            <summary>
            tender amount is lower than required minimum
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderAmountExceededTransactionLimit">
            <summary>
            tender amount is higher then max allowed per transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderAmountExceededMaxSingleAmountLimit">
            <summary>
            tender amount is higher then max allowed per line
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderAmountExceededMinSingleAmountLimit">
            <summary>
            tender amount is lower then max allowed per line
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderAmountMustBeSpecified">
            <summary>
            tender amount must be specified
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderAmountNotMultiplicationOfLowestCurrency">
            <summary>
            pay not by denomination
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderDiscountPromotionNotActive">
            <summary>
            for discount tender , if no promotion is configured
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NegativeChequeAmount">
            <summary>
            cheque amount cannot be negative
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EftOfflineAuthorizationRequired">
            <summary>
            eft offline authorization code is required
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerNotSetForPayInOut">
            <summary>
            pay in \ pay out is allowed only for identified customer
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ChequeAlreadyUsed">
            <summary>
            cheque already used in this ticket
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceEntryRequired">
            <summary>
            Price Entry is Required for selling item
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderMustCloseTheTicket">
            <summary>
            closing tender
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderCollideWithRefundPolicy">
            <summary>
            closing tender
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderRequireReferenceNumber">
            <summary>
            must have reference number
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotUseThisTenderForAnUnidentifiedCustomer">
            <summary>
            tender requires an identified customer
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotUseThisTenderSomeCustomerDetailsAreMissing">
            <summary>
            tender requires minimal customer details
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CreditNoteUsageIsNotGeneration">
            <summary>
            Tried to generate CreditNote with a wrong typ
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CreditNoteUsageIsNotRedemption">
            <summary>
            Tried to generate CreditNote with a wrong type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CreditNoteUsageIsNotSupported">
            <summary>
            Tried to generate CreditNote with a wrong type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderExternalValidationFailed">
            <summary>
            external validation failure
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoidingTenderCreationFailed">
            <summary>
            Voiding Tender ID not configure for this sepcific tender ID
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AnonymousTenderCustomerDetailsRequired">
            <summary>
            anonymous tender requires an identified customer
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AnonymousTenderTresholdExceeded">
            <summary>
            Anonymous tenders
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AnonymousTendersInTransactionTresholdExceeded">
            <summary>
            Maximum allowed Anonymous Tenders amount in Transaction Exceeded
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderNotAllowedByCustomerSegment">
            <summary>
            Tender is limited to a segment group
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoidTenderLineReasonCodeRequiered">
            <summary>
            Reason code required for voiding a tender line
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReasonCodeAlreadyExist">
            <summary>
            Reason code can be added to DB only once.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReasonCodeGroupAlreadyExist">
            <summary>
            Reason code group can be added to DB only once.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OwnBagConfigurationIsAlreadyExist">
            <summary>
            own bag configuration code can be added to DB only once for a specific touchpoint group and a specific touchpoint type.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReasonNotFound">
            <summary>
            Reason Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReasonGroupNotFound">
            <summary>
            ReasonGroup Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailToUpdateEndOfDay">
            <summary>
            Fail To Update End Of Day
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EndOfDayNotExpected">
            <summary>
            not need to execute end of day
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EndOfDayIsNotAllowed">
            <summary>
            End of day expected, but not allowed due to transactions in progress found etc.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LoyaltySwipeExpected">
            <summary>
            for personal account transaction should swiped loyalty card.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IllegalLineForPersonalAccountTransaction">
            <summary>
            illegal line for personal account transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NotValidTenderAmountForPersonalAccountDefinitions">
            <summary>
            tender amount up to maximum allowed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TouchPointNotFound">
            <summary>
            TouchPoint was not found by Computer Name.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidSecurityScaleValue">
            <summary>
            SecurityScaleValue should be either On or Off.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EndOfDayExpected">
            <summary>
            end of day should be called.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionFinishFailture">
            <summary>
            Fail to finish transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionFinishOnPaymentRequiredFailture">
            <summary>
            Fail to finish transaction when payment is required.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionFinishOnRefundPaymentRequiredFailture">
            <summary>
            Fail to finish transaction when refund payment is required.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NotRefundTransactionFinishFailture">
            <summary>
            Fail to finish not refund transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GetDefaultTenderOnTransactionRefundFailure">
            <summary>
            Fail to get default tender on transaction refund.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LastBusinessDayNotFound">
            <summary>
            fail to find last business day.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BusinessDayNotFound">
            <summary>
            fail to find any business day record.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotVoidChangeInPostUpdate">
            <summary>
            cannot void change tender in post update
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EftRefundTenderDeclined">
            <summary>
            eft service declined the action
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderIsNotAllowedInTransactionType">
            <summary>
            tender is not allowed in specific transaction type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailedToFetchEftService">
            <summary>
            failed to fetch eft service
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LoadRoundingTenderFailed">
            <summary>
            failed to create rounding tender
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ControlCheckRuleIsActivated">
            <summary>
            one or more Control Check Rule Is Activated
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ControlCheckUnexpectedRuleType">
            <summary>
            Control Check Unexpected / Unsupported Rule Type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ControlCheckUnsupportedAttributeOperator">
            <summary>
            Control Check - Unsupported Attribute Operator
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ControlCheckUnsupportedAttributeType">
            <summary>
            Control Check - Unsupported Attribute Type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ControlCheckUserApprovalInfoFailed">
            <summary>
            User Approval Info Failed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ElectronicNumberAndCardNumberMayNotBeBothDefined">
            <summary>
             SaleLineLog creation Failed due ElectronicNumberAndCardNumberMayNotBeBothDefined
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailedToFindLineInTransaction">
            <summary>
            failed to find a specific line in transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AggregatorImplementNotFound">
            <summary>
            Aggregator implementation not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidAutoReverseTenderSetupDetected">
            <summary>
            Invalid auto reverse tender setup detected
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PostVoidRuleDoesNotDefine">
            <summary>
            Post void rule does not define
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ComputedFieldImplementNotFound">
            <summary>
            Computed Field Implement Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LineQuantityMustBeLargerThenZero">
            <summary>
            line quantity must be larger then zero
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UniqueLineQuantityMustBeOne">
            <summary>
            Unique Line Quantity Must Be One
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemVolumeNotAvailale">
            <summary>
            Item Volume Not Availale
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemVolumeNotAvailaleForVoidQueryAction">
            <summary>
            Item Volume Not Availale
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OpenPriceNotSet">
            <summary>
            Open Price Not Set
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemSoldByVolume">
            <summary>
            Item sold by volume
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionNotClosed">
            <summary>
            Transaction Not Closed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoidLinesNoLinesFound">
            <summary>
            Void lines no lines found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoidWeighableItemByCode">
            <summary>
            fail to void weighable item by code
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoidVolumeItemByCode">
            <summary>
            fail to void weighable item by code
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoidLinesFailed">
            <summary>
            Void lines failed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AllLinesVoidedOnNonVoidTransaction">
            <summary>
            trying to close a transaction when all items are voided
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoSaleableLinesOnTransaction">
            <summary>
            trying to close a transaction with no saleable lines
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.StoreNotFound">
            <summary>
            store not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OperationNotAllowedForRelatedItem">
            <summary>
            Operation Not Allowed For Related Item
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RunningNumberDefinitionNotFound">
            <summary>
            Running Number Definition Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RunningNumberNotFound">
            <summary>
            Running Number Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderNotAllowedForVoid">
            <summary>
            Cannot void this tender
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnResultCode">
            <summary>
            Fail On return "ResultCodes"
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceOverrideItemNotFound">
            <summary>
            PriceOverrideItemNotFound
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceOverrideInfoReturenMultiLine">
            <summary>
            Price Override Info return multi lines
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemBusinessServiceNotFound">
            <summary>
            Business Service for item not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.StoreCodeNotFound">
            <summary>
            Store Code Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidResumeInfoException">
            <summary>
            Invalid Resume info
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderInfoNotFound">
            <summary>
            Tender info cannot be found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionTypeIncompatibleForRequestedOperation">
            <summary>
            Delivery validation exception
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionOutOfDate">
            <summary>
            Used by delivery validation
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PaymentNotReceived">
            <summary>
            Used by delivery validation
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DeliveryInputParametersValidation">
            <summary>
            used by delivery - user parameters validation failed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionInProgress">
            <summary>
            action not available for opened transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConfigurationMissingForCurentHierarchy">
            <summary>
            RDR configuration missing for current store hierarchy.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConfigurationMissingForAllHierarchies">
            <summary>
            RDR configuration missing for all stores hierarchies.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PartialConfigurationMissing">
            <summary>
            RDR configuration missing at least for one RDR file (template, layout, or-dd)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoStoreHierarchyFoundException">
            <summary>
            can`t found store hierarchy
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConfigurationRepositoryNotFound">
            <summary>
            can`t find configuration repository.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MultipleTransactionLogsFound">
            <summary>
            More then one transaction log was found using the search criteria
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LoyaltyUpgradeNeeded">
            <summary>
            Need to upgrade the loyalty information of the customer in the transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AttendanceEmployeeNotFound">
            <summary>
            Employee Not Found for Attendance
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidBarcode">
            <summary>
            Known Barcode is Invalid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotIssueInvoiceForVoid">
            <summary>
            Cannot Issue Invoice For Void
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PostUpdateOnExternalServicesTransaction">
            <summary>
            Post Update On External Services Transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ExternalServicesTransactionTypeRestriction">
            <summary>
            External Services Transaction Type Restriction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidInvoiceRetrieveParameters">
            <summary>
            The parameters for locating invoice is invalid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionTypeNotValidForInvoice">
            <summary>
            Cannot create invoice for this transaction type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionWithAllZeroAmountItemsInvalidForInvoice">
            <summary>
            Cannot create invoice when all transactions' items value is zero
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SubtotalNotAllowedForZeroTotalAmountTransaction">
            <summary>
            Subtotal Not Allowed For Zero Total Amount Transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OverTenderNotAllowed">
            <summary>
            Cannot resolve change tender.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceRuleNotFoundForRequest">
            <summary>
            Cannot find any price for the required item
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DeletePriceNotExist">
            <summary>
            When trying to delete price which not exists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemNotFound">
            <summary>
            Item not found in catalogue
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemNotFound">
            <summary>
            Online Item not found 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemStatusNotInStoreVariety">
            <summary>
            Item is not defined as valid for this store
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemStatusInactive">
            <summary>
            Item is marked as inactive
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemStatusLockedForSale">
            <summary>
            Item is marked as locked
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConsumableGroupNotFound">
            <summary>
            Consumable Group Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConsumableGroupParentNotFound">
            <summary>
            Consumable Group Parent Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConsumableGroupRootNotFound">
            <summary>
            Consumable Group Root Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LocationConsumableGroupNotFound">
            <summary>
            Location Consumable Group Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.WicTransactionBalanceDueGreaterThanMaximumWicCheckAmountException">
            <summary>
            Wic Transaction Balance-Due Greater Than Maximum Wic Check Amount
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionMustIncludeEligibleItemsForTenderException">
            <summary>
            Transaction doesn't have any items to be paid by a tender with specific eligibility.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderItemRestrictionException">
            <summary>
            Transaction doesn't have any tenders to pay  on an item with specific eligibility.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingProductOrGroup">
            <summary>
            Cant create tendr item restriction policy without product or group
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ProductPaymentRestrictionRequestIsNotValid">
            <summary>
            "ProductPaymentRestriction request is not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UsingWicCheckBeforeFirstDateToUse">
            <summary>
            The WIC check being redeemed is not active yet
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UsingWicCheckAfterLastDateToUse">
            <summary>
            The WIC check being redeemed is expired
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DataUndefined">
            <summary>
            No data pattern definition found for a provided pattern
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerAgeNotAvailable">
            <summary>
            Requiered Customer Age Not Available
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerIdNotSpecifiedException">
            <summary>
            Customer Id Not Specified
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidItemGroupId">
            <summary>
            Invalid Item Group Id
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidRequest">
            <summary>
            Request is invalid (i.e missing required parameter)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderNotAllowedToPayWith">
            <summary>
            Cannot use this tender for Payment
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemNotAllowedInTransactionType">
            <summary>
            Item is not allowed in specific transaction type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TaxToLookupNotFound">
            <summary>
            The tax a client requested to lookup is not found in the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TaxAuthorityAlreadyExists">
            <summary>
            The tax authority with the same ExternalId exists already.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TaxRateToLookupNotFound">
            <summary>
            The tax rate a client requested to lookup is not found in the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TaxRateAlreadyExists">
            <summary>
            The tax rate with the same ExternalId exists already.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TaxRateCantDependOnItself">
            <summary>
            Tax rate Cant be configured to depend upon itself.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTaxZoneConditionOfDependenceRate">
            <summary>
            Tax zone condition of dependence rate can't be different than containing rate (unless global zone).
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TaxRateCircularDependency">
            <summary>
            The dependency on the created/updated rate will cause to circular dependency.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TaxRateNoIndicator">
            <summary>
            Tax rate is defined without an indicator.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TaxRateNoProductConditions">
            <summary>
            Tax rate is defined without a product condition (either selection group or category).
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TaxRateWithUnknownGroup">
            <summary>
            Tax rate is defined with an unknown product selection group.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TaxWithUnknownTaxHierarchy">
            <summary>
            Tax rate is defined with an unknown tax category.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GovernmentProgramsParametersNotFound">
            <summary>
            The government programs parameters to lookup for a store were not found in the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.WicSalesTransactionNotAllowedException">
            <summary>
            WIC sales transaction not allowed for a store
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OperationNotAllowedForWicTransactions">
            <summary>
            Post operation on a given WIC transaction is not allowed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.WicCvvSalesTransactionNotAllowedException">
            <summary>
            WIC CVV sales transaction not allowed for a store
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NotAllowedToVoidWicCvvItemIfPartiallyPaidWithWicCvvTenderException">
            <summary>
            Void of WIC CVV item when transaction partially paid with WIC CVV tender not allowed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderAmountExceededEligibilityAmount">
            <summary>
            Payment exeeds an amount limited to total amount of items that are eligible to be paid with this tender
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RemoveTenderWithInvalidEligibility">
            <summary>
            The eligibility of the tender is invalid, please remove the tender from the transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PaymentAllocationConflict">
            <summary>
            Payment with the current tender causes a previous payment to become invalid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UsingWicCvvVoucherkBeforeFirstDateToUse">
            <summary>
            The WIC CVV voucher being redeemed is not active yet
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UsingWiccvvVoucherAfterLastDateToUse">
            <summary>
            The WIC CVV voucher being redeemed is expired
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EligibilityAmountExceededWicCvvVouchers">
            <summary>
            WIC CVV Eligibility is over accumulated vouchers amount and restriction cannot be overriden
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderNotFound">
            <summary>
            Tender not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PurchaseTenderNotProcessedByEps">
            <summary>
            Cashout tender exchange definition - purchase tender is not processed by EPS
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EligibilityAmountExceededWicCvvVouchersOverridable">
            <summary>
            WIC CVV Eligibility is over accumulated vouchers amount and restriction can be overriden
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoActionCodeExists">
            <summary>
            In maintance operation the action code defuuines how to operate such as AddUpdte or Delete
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ChildsFound">
            <summary>
            Not allowing to delete group if he has child links to it
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderExpired">
            <summary>
            Not allowing to pay with expired voucher
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ManualEntryIsNotAllowed">
            <summary>
            Not allowing to enter tender manually if it is marked "manual entry not allowed"
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderNotLoanable">
            <summary>
            Loan Action done on unloanable tender
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderNotAllowedForPickup">
            <summary>
            Pickup Action done on tender that isn't allowed for it.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderNotSafeTransferable">
            <summary>
            Safe Transfer Action performed with an invalid tender
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderNotAllowedForPayIn">
            <summary>
            PayIn Action done on tender that's not allowed for it
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderNotAllowedForPayOut">
            <summary>
            PayOut Action done on tender that's not allowed for it
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderNotBankable">
            <summary>
            Bank Action (deposit or receipt) done on tender that's not allowed for it
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderNotAutoReconciled">
            <summary>
            Auto-Reconcile done on tender that's not allowed for it
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CardParsingFailure">
             <summary>
            EPS failed to parse the EFT card information
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CardNotIdentify">
             <summary>
            EPS failed to Identify the EFT card provider
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CardDataNotIdentify">
             <summary>
            EPS failed to Identify the data of the EFT card
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSPayFailure">
             <summary>
            EPS pay failed
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSCashoutDeclined">
             <summary>
            EPS Cashout declined
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSDepositDeclined">
             <summary>
            EPS Deposit declined
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSDepositDisable">
             <summary>
            EPS Deposit Disable 
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSMerchantIdFailure">
             <summary>
            EPS MerchantId Failure
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSMerchantIdNotFound">
             <summary>
            EPS MerchantId Not Found
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSPaymentDecline">
            <summary>
            Payment decline by provider
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionClosed">
            <summary>
            Close was called on already closed transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionHasNoLines">
            <summary>
            Cash Office Transaction has no lines
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderIsNotAllowedForDeclaration">
            <summary>
            Declaration recieved tender which is not allowed for declaration
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FutureTransactionDate">
            <summary>
            Transaction Date is in the future
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FutureDate">
            <summary>
            Date is in the future
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DateRangeException">
            <summary>
            Invalid date range (e.g. startDate > endDate)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionAmountNotPositive">
            <summary>
            Transaction amount is not positive
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GeneralDataPatternError">
            <summary>
            General Data Pattern Error
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GenericParameterError">
            <summary>
            Generic Data Pattern Parameter Error
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingGenericParameterError">
            <summary>
            Missing Data Pattern Parameter
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicatedDataPatternException">
            <summary>
            Data Pattern already exist in store
            </summary> 
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SimilarDataPatternExistsException">
            <summary>
            Similar Data Pattern exists is store
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingDataPatternComponent">
            <summary>
            Unable to find Data Pattern component (extractor, validator, recognizer)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DataPatternNotExists">
            <summary>
            Data Pattern not exists in store
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateStoreId">
            <summary>
            Store Id already exists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateStoreName">
            <summary>
            Store Name already exists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateStoreHierarchyId">
            <summary>
            Store Hierarchy Id already exists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.StoreHierarchyParentUpdate">
            <summary>
            Update of Store hierarchy parent not allowed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.StoreHierarchyNotExists">
            <summary>
            Store hierarchy not exists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.StoreNotExists">
            <summary>
            Store not exists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserMustChangePassword">
            <summary>
            User must change password
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmInvalidUserStatusException">
            <summary>
            Wrong user status was provided
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmInvalidUserDataException">
            <summary>
            Wrong user data was provided
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserMustChangeBarcode">
            <summary>
            User must change password
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmPolicyValueOutOfBoundries">
            <summary>
            value in Idm Policy is out of boundries
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ValueOutOfBoundries">
            <summary>
            value is out of boundries
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmPolicyPinAlphanumeric">
            <summary>
            value in Idm Policy pin is invalid by the Alphanumeric definition
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmInvalidUserNamePasswordLoginProvided">
            <summary>
            Invalid User Name Password Login Provided
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmLoginIdentityIsNotIUserType">
            <summary>
            Identity is not of IUser type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserIsMissingCredentials">
            <summary>
            User is missing credentials
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmBlockedUser">
            <summary>
            User Provided is Blocked
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmCannotChangedPasswordWhenLoggedInWithBarcode">
            <summary>
            Cannot change password when authentication method is barcode
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmInvalidBarcodeLoginProvided">
            <summary>
            Invalid Barcode for Login Provided
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmNotAllowedForBarcodeAuthentication">
            <summary>
            this user cannot login using barcode authentication
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmCredentialAlreadyUsed">
            <summary>
            User must have at least one Role for login
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserHasNoRoleException">
            <summary>
            User must have at least one Role for login
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserHasNoRoleInLocation">
            <summary>
            User must have at least one Role in location for login
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserHasNoRoleInTouchPoint">
            <summary>
            User not permitted to login to touchPoint
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserHasNoAuthenticationMethodException">
            <summary>
            User must have at least one Role for login
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmRoleNameRequired">
            <summary>
            Role name required
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmRoleWithSameNameAlreadyExist">
            <summary>
            Role with same already exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmRoleAssociatedWithUser">
            <summary>
            Role belongs to a user
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserLockedException">
            <summary>
            User is Locked out
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmLoggedInUserCantDeleteYourself">
            <summary>
            User cant delete himself
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmCantDeleteLoggedInUser">
            <summary>
            Cant delete user that logged in to the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmAuthenticationMethodNotDefined">
            <summary>
            Authentication Method is not defined
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RetentionPolicyForEntityTypeNotExistException">
            <summary>
            Retention policy for entity type not exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserNameActiveDirectoryAlreadyExist">
            <summary>
            User Name in Active Directory Already Exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmInvalidCertificationException">
            <summary>
            Active Directory Invalid UserName Or Password / Locked out/ Disabled
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmActiveDirectoryInvalidUserNameOrPasswordException">
            <summary>
            Active Directory Invalid UserName Or Password / Locked out/ Disabled
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmActiveDirectoryServerNotAvailable">
            <summary>
            Active Directory Server Not Available
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmPolicyNotFound">
            <summary>
            Idm policy not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmPolicyInvalidPasswordHistoryGeneration">
            <summary>
            Idm policy not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoExemptableTaxesFound">
            <summary>
            No exemptable taxes found in the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoReversalTaxesFound">
            <summary>
            No taxes to reverse found in the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmPermissionDenied">
            <summary>
            User doesn't have permission
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmInvalidPolicyData">
            <summary>
            Idm Invalid policy data
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserDisabledException">
            <summary>
            User is Disabled
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.HqNotAvailable">
            <summary>
            Hq is not available
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NonIntegerIdentifier">
            <summary>
            [PosConfiguration -> TouchPoint migration] Integer identifier expected
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NonUniqueWithPosConfiguration">
            <summary>
            [PosConfiguration -> TouchPoint migration] Should be unique between two tables
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateComputerNameException">
            <summary>
            Computer name in a certain Touchpoint was already defined
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ManagerApprovalRoleRequiredException">
            <summary>
            Define Manager approval rule without any roles is not allowed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingTransactionTypeException">
            <summary>
            Defining certain businss rules without transaction type is not allowed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingReasonsOnAction">
            <summary>
            Defining certain businss rules without reasons.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingReasonOnReturnPolicy">
            <summary>
            Reason was not provided on Return Policy
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RefundReasonCodeInvalid">
            <summary>
            Defining Return Policy without ReasonCodePromtingMethod or without reason codes is not allowed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateTouchPointGroupNameException">
            <summary>
            Touchpoint group name already exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateTouchPointGroupIdException">
            <summary>
            Touchpoint group id already exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateTouchPointIdException">
            <summary>
            Touchpoint id already exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NonExistentRetailSegmentException">
            <summary>
            Retail Segment was not found by its name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RetailSegmentBusinessException">
            <summary>
            Retail Segment business error
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ExistingRetailSegmentCategoryUpdateProhibited">
            <summary>
            Existing Retail Segment Category Update is prohibited
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NonExistentTouchPointApplicationException">
            <summary>
            Touchpoint application id was not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdRequiredForTouchPointApplication">
            <summary>
            Touchpoint application id was not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TillIdNotFound">
            <summary>
            till id not found at RTI request header.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicatePromotionId">
            <summary>
            Promotion ID Exist in the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ContinuityPromotionNotValid">
            <summary>
            Continuity promotion not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoActiveDaysInCondition">
            <summary>
            No active days in DateTime condition in promotion
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTrainingPromotionDate">
            <summary>
            future promotion date on training mode not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTrainingPromotionEarlyDate">
            <summary>
            future promotion date on training mode not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTrainingModeStatus">
            <summary>
            training server status not appropriate to retail transaction status.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MessageIdNotFound">
            <summary>
            rti request message id can be found in RTI header.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReprintTrainingTransactionOnSaleMode">
            <summary>
            decline to reprint retail transaction created on training mode at sale mode.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReprintSaleModeTransactionOnTrainingMode">
            <summary>
            decline to reprint retail transaction created on sale mode at training mode.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BusinessExceptionNotFound">
            <summary>
            rti request message id can be found in RTI header.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ActionCodeNotValid">
            <summary>
            reason code mantanence action code is not valid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateExtensionDataKey">
            <summary>
            Extension container already have extension with same key.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ExtensionDataHandlerNotFound">
            <summary>
            ExtensionDataHandler was not found for provided ExtensionDataKey
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MultipleExtensionDataTypes">
            <summary>
            Extension container have multiple instances of requested type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderMissingRequiredParameters">
            <summary>
            Tender is missing required parameters.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSTenderWasNotAuthorized">
            <summary>
            Tender is missing Authorized information.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSAuthorizationDeclined">
            <summary>
            EPS Authorization has been declined by the provider.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSAuthorizationCanceled">
            <summary>
            EPS Authorization has been canceled by the client.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderNotPrinted">
            <summary>
            Not printed on tender yet
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderVoidBlocked">
            <summary>
            Tender cannot be voided
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DeviceTypeDoesNotExist">
            <summary>
            Indicates that a device type does not exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DeviceTypeInUse">
            <summary>
            Indicates that a device type is referenced by another entity and cannot be deleted
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateDeviceConfigurationKey">
            <summary>
            Duplicate Device Configuration Key
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingDeviceConfigurationType">
            <summary>
            Missing Device Configuration Key
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NonExistentDeviceConfiguration">
            <summary>
            Non Existent Device Configuration
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponParametersNotFound">
            <summary>
            The coupon parameters to lookup for a store were not found in the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponRewardValueOutOfRange">
            <summary>
            The coupon reward value out of range
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponBlocked">
            <summary>
            The coupon is blocked for scan/use
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponSeriesBlocked">
            <summary>
            coupon series blocked code
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponInstanceBlocked">
            <summary>
            coupon instance blocked code
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConflictingCouponConditionsRule">
            <summary>
            Conflicting coupon conditions Rule
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ManualCouponRuleInvalidCondition">
            <summary>
            Manual coupon rule invalid condition
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PromptRewardRuleInvalidCondition">
            <summary>
            Prompt reward rule invalid condition
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MaxPointsRewardRuleInvalidCondition">
            <summary>
            Prompt reward rule invalid condition
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnusedCouponRuleInvalidCondition">
            <summary>
            Unused coupon rule invalid condition
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnknownCouponRuleInvalidCondition">
            <summary>
            Unknown coupon rule invalid condition
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftCardRuleInvalidAction">
            <summary>
            Gift card rule invalid action
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EpsSessionActionNotValid">
            <summary>
            Eps Session action not validate
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnitOfMeasureNotExistingException">
            <summary>
            Unit of measure not existing exception
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotVoidTransactionWithTenderLines">
            <summary>
            Cannot void retail transaction with tender lines. All tender lines must be voided first.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotSuspendTransactionWithFuelLines">
            <summary>
            Cannot suspend retail transaction with fuel lines. All fuel lines must be voided first.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotChangeTransactionClasification">
            <summary>
            Cannot update transaction clasificationi if clasification was already set.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MaxAllowedCouponsExceeded">
            <summary>
            Cannot add another coupon since excced max allowed coupon.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IneligibleTenderException">
            <summary>
            Cannot close retail transaction with ineligible tender lines.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RedemptionCouponNotIssued">
            <summary>
            Cannot add coupon that not been issued.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotMergeTransactionWithMergedTransactions">
            <summary>
            Cannot add coupon that not been issued.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotMergeTransactionWithoutLineItems">
            <summary>
            Cannot merge transaction that do not have line items.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SystemParameterNotFound">
            <summary>
            Cannot get system parameter.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSSessionNotFound">
            <summary>
            Cannot get EPS Session
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSCardNotFound">
            <summary>
            Cannot get EPS Card
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponValueRequired">
            <summary>
            Manual value for vendor coupon is required
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderAmountIsZeroOrNegativeException">
            <summary>
            Tender Amount is zero or negative amount
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SameCustomerAlreadyExist">
            <summary>
            Same customer already exist on the transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DifferentCustomerAlreadyExist">
            <summary>
            Different customer already exist on the transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountNotValidForActivity">
            <summary>
            Account received is not valid for the cash office activity
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingReasonForUnbalancedPeriod">
            <summary>
            AccountBalancePeriod can't be settled if balance isn't zero and reason is empty
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SettledStoreBalancePeriodIsReadonly">
            <summary>
            StoreBalancePeriod can't be changed after it was settled
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PreviousBalancePeriodIsntSettled">
            <summary>
            Can't settle a balance period if the previous period isn't settled
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PendingBalancingCalculations">
            <summary>
            Can't settle a balance period if there are pending balancing calculations
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SomeAccountBalancesAreNotSettled">
             <summary>
            When attempting to settle StoreBalancePeriod, all its AccountBalances should be settled
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountBalanceNotFoundInStoreBalancePeriod">
            <summary>
            Account balance not found within the store balance period.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ApprovedAccountBalanceIsReadonly">
            <summary>
            AccountBalance can't be changed after it was approved
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnableToCreateStoreBalancePeriod">
            <summary>
            Couldn't create an IStoreBalancePeriod
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.StoreBalancePeriodOutdated">
            <summary>
            StoreBalancePeriod is outdated (was already created)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.StoreBalancePeriodDateNotInitialized">
            <summary>
            No valid dates where provided for the StoreBalancePeriod
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidFundTransferTransactionLogFormat">
            <summary>
            Invalid Fund Transfer Transaction Log XML docuemnt Format (can't parse as a known CO activity tlog)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidCashOfficeActivityName">
            <summary>
            Invalid Cash Office Activity Name 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PostVoidDefinitionMissing">
            <summary>
            Post void tender definition is missing.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemWeightEqualOrLessThanTareWeight">
            <summary>
            Not possible to sell Item with weight when the weihgt less than tare weight.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CashBackAmountNotValid">
            <summary>
            CashBack Amount Not Valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSMissingAuthorizationMessageCode">
            <summary>
            Missing authorization message code
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoMonetaryTransactionsFoundInStore">
            <summary>
            No monetary transactions (sales, fund transfer) found in store
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSFieldNotValid">
            <summary>
            Invalid Electronic Payment field provided
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TouchPointGroupNotLinkedToStoreException">
            <summary>
            TouchPoint Group Must Be Linked To Store
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftCardActionNotAllowed">
            <summary>
            Gift Card Action Not Allowed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConsumableChangeTypeNotAllowed">
            <summary>
            Consumable Change Type Not Allowed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoidAuthorizationCodeRequired">
            <summary>
            Void Authorization Code Required
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSMessageNotFound">
            <summary>
            EPS Message Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotGetBalanceInquiryForNonGiftCard">
            <summary>
            Cannot Get Balance Inquiry For Non Gift Card
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EncryptDecryptAccountFailed">
            <summary>
            Encrypt or Decrypt Account Failed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftCardMissingActivationCode">
            <summary>
            Gift Card Activation Code is Missing
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSValidatorExpiredDate">
            <summary>
            Expiration Date value is Not Valid for EPS
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EpsDeactivate">
            <summary>
            Failed to deactivate Electronic Payment
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EpsPay">
            <summary>
            Electronic Payment System Pay action failed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EpsVoid">
            <summary>
            Electronic Payment System Void action failed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSVoidNotAllowed">
            <summary>
            Electronic Payment System do not allow Void for this case
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AuthorizationCodeMaintenanceDuplicate">
            <summary>
            Authorization Code was already defined
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AuthorizationCodeNotExist">
            <summary>
            Authorization Code cannot be found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CardNotExist">
            <summary>
            Card Not Exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RestrictedEpsCardWithoutCategory">
            <summary>
            Restricted EpsCard Without Category
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidDefaultRestrictionCategory">
            <summary>
            Invalid Default Restriction Category
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EpsCardWithoutRule">
            <summary>
            Restricted EpsCard Without Category
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RestrictedEpsCardWithoutDefaultCategories">
            <summary>
            Restricted EpsCard Without Default categories
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnrecognizedOnlineServicesProfile">
            <summary>
            Unrecognized OnlineServices Profile
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnmappedProviderAuthorizationResultCode">
            <summary>
            No mapping was found for result code returned from provider
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineServicesProfileNotExist">
            <summary>
            OnlineServices Profile Not Exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnableToLoadOnlineServicesProvider">
            <summary>
            OnlineServicesProvider could not be loaded by providerKey
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AmbiguousOnlineServicesProfileRequest">
            <summary>
            Ambiguous request for OnlineServices Profile
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EpsMessageMaintenanceDuplicateMessage">
            <summary>
            Eps Message already exists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingEPSSession">
            <summary>
            Electronic Payment System session is missing
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingOriginalAuthorizationCode">
            <summary>
            Original Authorization Code is Missing
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TraningModeNotAllowed">
            <summary>
            Traning Mode Not Allowed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoDeviceAvailableException">
            <summary>
            SelfScan - There are no available devices at this moment
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DeviceReleaseException">
            <summary>
            SelfScan - Cannot release the device
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DeviceSupportReleaseException">
            <summary>
            SelfScan - Cannot release the device for technical support
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnidentifiedDeviceException">
            <summary>
            SelfScan - Device was not identified
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SuspendedShopper">
            <summary>
            SelfScan - customer self scan ability is suspended
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RescanContextNotValid">
            <summary>
            SelfScan - rescan context error, TrustLevel.Next with not valid context.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NotValidSelfScanTransaction">
            <summary>
            SelfScan - transaction is not valid or empty.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RescanPolicyInvalidNumberItemsToRescanRange">
            <summary>
            SelfScan - transaction is not valid or empty.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ScannerIsNotTransactionOwner">
            <summary>
            SelfScan - scanner references to transaction which is not attached to it
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidScannerCommand">
            <summary>
            SelfScan - invalid self scanner command
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NonNegativeTransaction">
            <summary>
            RetailTransaction value have to be negative in case of payback
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnsupportedSelfScannerOperation">
            <summary>
            SelfScan - Unsupported operation
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnPolicyConfigurationError">
            <summary>
             Return Policy was not configured properly
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OriginalTransactionLogLineNotFound">
            <summary>
            No line was found in the original transactions matching the parameters of the item being returned.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ProductCodeChangedSincePurchased">
            <summary>
            line was found in the original transactions with different code then the item being returned.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OriginalTransactionLogLineVoided">
            <summary>
            The line that was found in the original transactions matching the parameters of the item being returned is a voided line.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RetailTransactionLogNotFound">
            <summary>
            RetailTransactionLog could not be found by Logbook according to specified parameters
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TabIsLocked">
            <summary>
            Tab is already opened by another user
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TabWasRemoved">
            <summary>
            Unable to open tab. Tab was removed or completed in a different POS
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TouchPointWithoutVenue">
            <summary>
            Unable to open tab. Cuurent touch point is not related to any venue
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TabIsNotInCurrentVenue">
            <summary>
            Unable to open tab. Tab is not in current venue.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.WorkingOfflineTab">
            <summary>
            Unable to open tab. Working Offline, Tab may not be updated.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MoveTabToVenueWhenOffline">
            <summary>
            Unable to open tab. Working Offline, Tab may not be updated.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TabSynchronizationJobFailed">
            <summary>
            Tab info Synchronization Job Failed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnUnitsInCurrentTransactionGreaterThanPurchase">
            <summary>
            The units being returned in this transaction is larger than the units that were purchased (when UOM is not Each)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AllUnitsReturnedInPreviousTransactions">
            <summary>
            The quantity being returned is larger than the quantity that was purchased (when UOM is Each)
            All units have already been returned in previous return transactions.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnUnitsInCurrentAndPreviousTransactionsGreaterThanPurchase">
            <summary>
            The quantity being returned is larger than the quantity that was purchased (when UOM is Each)
            All units have already been returned in a combination of previous return transactions and the current transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnQuantityInCurrentTransactionGreaterThanPurchase">
            <summary>
            The quantity being returned is larger than the quantity that was purchased (when UOM is Each).
            Entire purchase quantity has already been returned in this transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AllMatchingItemsReturnedInPreviousTransactions">
            <summary>
            The quantity being returned is larger than the quantity that was purchased (when UOM is Each)
            Entire purchase quantity has already been returned in previous return transactions.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnQuantityInCurrentAndPreviousTransactionsGreaterThanPurchase">
            <summary>
            The quantity being returned is larger than the quantity that was purchased (when UOM is Each)
            Entire purchase quantity has already been returned in a combination of previous return transactions and the current transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnPolicyAlreadySubmitted">
            <summary>
             Fail on submit on Policy already submitted
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnPolicyReadOnlyOnSubmit">
            <summary>
             fail on validate policy - return policy submitted
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnPolicyStartDateInPast">
            <summary>
             StartDate for ReturnPolicy is in past
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DenyReturnedItem">
            <summary>
            Deny action on return
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DenyReturnThreshold">
            <summary>
            Deny action on return
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ManagerApprovalRequired">
            <summary>
            Deny action on return
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnPolicyContainsRulesWithDuplicateSequences">
            <summary>
            Return policy cannot contain rules with duplicate sequences
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OtherReturnPolicyAlreadySubmittedWithSameStartDate">
            <summary>
            Other return policy already submitted with specified startdate
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotReturnItemsOnVoidedTransaction">
            <summary>
            On Based Return Transaction Cannot Return Transaction When Transaction Is Void Or Suspended.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotReturnItemsOnSuspendedTransaction">
            <summary>
            On Based Return Transaction Cannot Return Transaction When Transaction Is Void Or Suspended.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CanNotRepeatAmountEmbeddedBarcode">
            <summary>
            Thrown when trying to perform Repeat on a Embedded Amount barcode
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GetGiftReceiptOnSuspendedTransaction">
            <summary>
            On Gift Receipt Transaction Cannot Return Transaction When Transaction Is Suspended.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoPurchasedProductsFoundInTheOriginalTransaction">
            <summary>
            On Based Transaction When All Items Are Return Items Or Void Items.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ControlTransactionNotAllowedForReturn">
            <summary>
            On Based Transaction When All Items Are Return Items Or Void Items.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoItemsToReturn">
            <summary>
            On Based Transaction When All Items Were Already Returned.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IsOpenInputRequired">
            <summary>
            A condition executing in a return-rule requires the following input from the user: IsOpen (is the item being returned open).
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IsOpenWithReasonInputRequired">
            <summary>
            A condition executing in a return-rule requires the following input from the user: IsOpenWithReason (the reason for item being returned open).
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RetailTransactionLogIsUnreachable">
            <summary>
            There is problem to access to original retail transaction log, the client can decide to work offline.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SomeTransactionLinesReturned">
            <summary>
            Return-All Transaction cannot be started because one or more lines have already been returned.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NotAllLinesReturned">
            <summary>
            One or more lines in a return-all transaction have not been returned.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerDetailsForReturnAreInvalid">
            <summary>
            Customer details are required in order to process a return, or some customer details are missing.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ForcedExchangeIsNotCompleted">
            <summary>
            Need to purchase more in order the purchased amount will be at least as returned that require exchange.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnTransactionIsBlockedForSaving">
            <summary>
            Return transaction is blocked for saving.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnTransactionCannotBeClosedException">
            <summary>
            Return transaction cannot be closed from specified reason in inner exception.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnAllTransactionCannotBeProcessed">
            <summary>
            ReturnAll transaction cannot be processed. Inner exception should point on the reason.  
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnPolicyStateInvalid">
            <summary>
            The state of the return-policy is not valid in the current context.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MultiplePricesNotSupported">
            <summary>
            Price could not be determined because original purchases of item were made with different prices.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoMatchingSaleLineFoundOrPurchasedQuantitySurpassed">
            <summary>
            Price could not be determined because no matching purchase line could be found or the quantity of the current item lookup surpasses the purchased quantity.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FutureDateNotAllowed">
            <summary>
            Future date is not allowed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DatabarCouponStartDateRequired">
            <summary>
            Databar Coupon Start Date Is Required
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DatabarCouponExpirationDateRequired">
            <summary>
            Databar Coupon Expiration Date Is Required
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotUseDatabarCouponBeforeStartDate">
            <summary>
            Cannot Use Databar Coupon Before Start Date
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DatabarCouponExpired">
            <summary>
            Databar Coupon Expired
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DatabarCodeNotSupported">
            <summary>
            Databar code is not supported
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PrintInfoMissing">
            <summary>
            Print info missing
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReceiptDeliveryChannelMissingData">
            <summary>
            Missing data about Email address or/and Phone Number where receipt should be sent
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReceiptDeliveryChannelCustomerNotificationRequired">
            <summary>
            Receipt Delivery Channel data (Email address or/and Phone Number) should be diaplayed for customer
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerReceiptDeliveryChannelWrongConfiguration">
            <summary>
            Misconfiguration detected for the Customer Receipt Delivery Channel
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EmailAddressNotFound">
            <summary>
            Print info missing
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CountryNotExists">
            <summary>
            Country not exists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSProviderAuthenticationResultCodeNotFound">
            <summary>
            EPS provider authentication result code not found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSUnknownResultCode">
            <summary>
            EPS provider authentication result code error.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SecurityScaleWeightReject">
            <summary>
            Security scale weight rejected
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmCantConfigureProtectedUser">
            <summary>
            can not preform changes on a protected user
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SecurityWeightToleranceNotFound">
            <summary>
            Item weight range not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemPriceNotMatchStoreCurrency">
            <summary>
            Item price and store must be in the same currency
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MoneyCurrenciesMismatch">
            <summary>
            Mismatch of the currencies of 2 Money instances on which an arithmetic operation is performed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponPromotionNotFound">
            <summary>
            can`t find promotion for coupon.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponPromotionSuspended">
            <summary>
            coupon is suspended
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponPromotionExpried">
            <summary>
            promotion coupon expired
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponPromotionNotYetBegun">
            <summary>
            Coupon promotion date hasn't arrived yet        
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponAttemptUsingReservedRewardType">
            <summary>
            Coupon attempt using reserved reward type 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponMemberCardRequired">
            <summary>
            Member card is required
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponMaxAllowedScans">
            <summary>
            promotion coupon max scan allow exeeded
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineAuthorizationRequired">
            <summary>
            Online authorization required
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RefundRequestRequired">
            <summary>
            Online authorization required for refund.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemAuthorizationDeclined">
            <summary>
            Online item authorization was declined
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemQuantitySellNotAllowd">
            <summary>
            Online item quantity sale not allowed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemQuantityReturnNotAllowd">
            <summary>
            Online item quantity return not allowed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AuthorizationExternalIdRequired">
            <summary>
            Authorization external id required
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemPriceOverrideForbidden">
            <summary>
            Online item price override forbidden
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineConfirmationRequired">
            <summary>
            Online confirmation required
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemActivationBarcodeContainsWrongItemId">
            <summary>
            Online Item Activation Barcode Contains Wrong ItemId
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EndorsementRequired">
            <summary>
            Endorsement required
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ElectronicItemExternalIdRequired">
            <summary>
            electronic item should be solved with unique identifier.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ElectronicItemExternalIdMismatch">
            <summary>
            electronic item should be solved with unique identifier.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ElectronicItemQuantitySellNotAllowd">
            <summary>
            should be single quantity.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MobilePhoneItemIMEIRequired">
            <summary>
            MobilePhone item should be solved with International Mobile Equipment Identity.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MobilePhoneIMEIIsNotValid">
            <summary>
            Mobile phone's IMEI is not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MobilePhoneQuantitySellNotAllowed">
            <summary>
            should be single quantity.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemMissingVoidAuthorizationCode">
            <summary>
            Online Item Missing Void Authorization Code
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmInvalidSession">
            <summary>
            security token is invalid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmSessionAlreadyExists">
            <summary>
            security token already exists for user
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmSessionTimeout">
            <summary>
            security token already exists for user
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmAuthenticationConfigurationInvalidSessionTimeout">
            <summary>
            Session Timeout parametr has invalid value in AuthenticationConfiguration
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TouchPointGroupInvalidSessionTimeout">
            <summary>
            Session Timeout parametr has invalid value in AuthenticationConfiguration
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemCannotBeRemovedFromLearning">
            <summary>
            item cannot be removed from security weight learning mode
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MultipleRatesSelectedForTaxException">
            <summary>
            Cannot apply more than one rate for the same tax
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidPredefinedTenderAmount">
            <summary>
            Invalid Tender / Amount added to opening fund configuration
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidOpeningFundsCreationgArgs">
            <summary>
            Invalid Tender / Amount added to opening fund configuration
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OpeningFundsMethodCannotBeNull">
            <summary>
            Opening Funds Method Cannot Be Null
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OpeningFundsConfigurationNotFound">
            <summary>
            Opening Funds Configuration Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BalancePeriodSchedulingConfigurationNotFound">
            <summary>
            Balance Period Scheduling Configuration NotFound
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BalancingDayConfigurationForInactiveEndOfDay">
            <summary>
            Cannot Configure Cash Office Balancing For Inactive End Of Day
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SafeBalancingWithoutTillBalancingForSameDay">
            <summary>
            Cannot Schedule Safe Balancing Without Till Balancing For The Same Day
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidOpeningFundsConfiguration">
            <summary>
            Invalid Opening Funds Configuration
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IncompleteDrawerCashOfficeConfiguration">
            <summary>
            Drawer Cash Office Configuration is incomplete
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NegativeDrawerLimitAmount">
            <summary>
            Drawer Cash Office Configuration has negative drawer limit amount
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LearnWeightThresholdNotDefined">
            <summary>
            Learn Weight Threshold Not Defined
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ScaleDigressionNotDefined">
            <summary>
            Scale digression Threshold Not Defined
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidSafeActivityException">
            <summary>
            The only activities allowed for safe are: Tender Loan, Open Loan and Tender Pickup
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidSafeDuplicateConfigurationException">
            <summary>
            Safe Configuration should be unique 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SavingAccountNotFound">
            <summary>
             personal account not found by key
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidAccountDescription">
            <summary>
             personal account description can't be null or empty
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidPromotionDescription">
            <summary>
             promotion description not valid, for example culture not exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidPromotionDaysAndHours">
            <summary>
             promotion active days and hours not valid, for example promotion is not active all week.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PromotionApplyConditionIsMissingId">
            <summary>
             promotion reward condition is missing id.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTenderDefinition">
            <summary>
             Tender definition should contain at least one definition and UpToAmount in the definition must be positive
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidProvider">
            <summary>
             Provider must be configured in Server
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateSavingAccount">
            <summary>
             Duplication of unique key on personal account.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateTenderDefinition">
            <summary>
             Duplication of unique key on personal account's Tender definition.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTenderDepositDefinitions">
            <summary>
             Tender deposit definitions are not valid according to personal account tender definitions
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTenderAutoReconciliationConfiguration">
            <summary>
            Add Loan, Declaration, Bankable can't be true when Auto Reconciliation set to true
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AutoreconcileActivitiesAreNotUpdatable">
            <summary>        
            /// Auto reconcile activities should not be updatable.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UpdataActivitiesToAlreadyApprovedAccount">
            <summary>        
            Account must be at disapproved state in order to do activities adjustments.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.WeightMismatchThresholdNotDefined">
            <summary>
            Weight mismatch threshold parameter not defined
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnConditionNotPassed">
            <summary>
             The Condition defined in the return rule of the return policy didnt passed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ExchangeMoneyConvertorException">
            <summary>
                 Failed to convert exchange money.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DataPatternMetadataInvalidUpdate">
            <summary>
            Data Pattern metadata update error
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NotFoundHierarchyCulturesException">
            <summary>
                 Failed to find cultures
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MultipleHierarchyNodes">
            <summary>
            Multiple rootnodes for the same hierarcy found in the system.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnrecognizedDataPatternDecodedDataType">
            <summary>
             Unrecognized data pattern decoded data type.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingDataPatternType">
            <summary>
            Data pattern type unspecified.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnrecognizedDataPatternExtractorTypeField">
            <summary>
             Unrecognized data pattern extractor type field.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MismatchingDataPatternExtractor">
            <summary>
             Mismatching data pattern extractor.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MismatchingDataPatternExtractorParameter">
            <summary>
             Mismatching data pattern extractor parameter.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingDataPatternMandatoryField">
            <summary>
             Missing data pattern mandatory field.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NotFoundSelfCheckoutInterventions">
            <summary>
                 Self Checkout Interventions Exception Not Found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateSlipTypeNameException">
            <summary>
                 add new slip type with an existing slip type name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UpdateInexistingLineDefinitionException">
            <summary>
                 update a slip type that does not exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UpdateInexistingEndorsementException">
            <summary>
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EndorsementNotFound">
            <summary>
                 Endorsement does not exist.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DeleteInexistingLineDefinitionException">
            <summary>
                 delete a slip type that does not exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateLineDefinitionNameException">
            <summary>
                 add new slip type with an existing slip type name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateEndorsementNameException">
            <summary>
                 add new endorsement with an existing endorsement name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UpdateInexistingSlipTypeException">
            <summary>
                 update a slip type that does not exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DeleteInexistingSlipTypeException">
            <summary>
                 delete a slip type that does not exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftReceiptReturnLine">
            <summary>
            Cannot create gift receipt for return line.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftReceiptVoidedLine">
            <summary>
            Cannot create gift receipt for voided line.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IncorrectLayoutMaintanenceServiceArgumentsException">
            <summary>
                 wrong arguments for receipt slipt type maintenece service
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IncorrectReceiptLayoutLookupServiceArgumentsException">
            <summary>
                 wrong arguments for receipt layout lookup service
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidDateRange">
            <summary>
             Invalid date range.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidStoreSalesReport">
            <summary>
            Invalid store sales report.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateReasonCode">
            <summary>
            Duplicate Reason Code 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReasonWithoutId">
            <summary>
            Reason with no Id provided
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReasonWithoutGroup">
            <summary>
            Reason with no Group provided
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReasonWithoutDescription">
            <summary>
            Reason with no Description provided
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidBusinessDay">
            <summary>
            Invalid Business day date
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftReceiptQuantityIsGreaterThenItemsInLineQuantity">
            <summary>
            Gift receipt print quantity cannot be greater than items quantity in line.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidImageSize">
            <summary>
            Receipt logo image size in chars validation
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnTransactionCannotBeSuspended">
            <summary>
            Return transaction cannot be suspended
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnWindowNotFound">
            <summary>
            Return window not found from BRM rules.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnPolicyForGiftReceiptNotFound">
            <summary>
            Return policy for gift receipt not found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotSetFixedTotalBalanceValuePeriodNotSettled">
            <summary>
            Unable to Set Fixed Total Balance value, period not settled.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingBusinessUnitId">
            <summary>
            Unable to Set Settle Configuration, Business Unit ID must exist in request.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingActivityName">
            <summary>
            Unable to Set Activity Reference Configuration, ActivityName must exist in request.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ActivityNameAlreadyExists">
            <summary>
            Unable to Set Activity Reference Configuration, Activity Name already exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ActivityNameDoesNotExists">
            <summary>
            Unable to Delete Activity Reference Configuration, Activity Name does not exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidActivityName">
            <summary>
            Unable to set Activity Reference Configuration, Activity Name is invalid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingRetailSegmentId">
            <summary>
            Unable to Set Settle Configuration, Retail Segment ID must exist in request.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingReasonGroupCodeName">
            <summary>
            Unable to Set Settle Configuration, ReasonGroupCodeName must exist, if ApprovalFlow is selected to be configured.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingDefaultReasonCodeId">
            <summary>
            Unable to Set Settle Configuration, DefaultReasonCodeId must exist, if ApprovalFlow is selected to be configured.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidReasonCodeForSettle">
            <summary>
            Unable to Set Fixed Total Balance value, period not settled.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RetailTransactionLogMoreThanOneFound">
            <summary>
            Retail Transaction Log More Than One Found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MoreThanOneTransactionLogFound">
            <summary>
            More than one transaction log found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionLogNoSaleLinesFound">
            <summary>
            Transaction log no sale lines found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftReceiptExpired">
            <summary>
            Gift Receipt has expired.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftReceiptRedempNotAllowedDuringTxn">
            <summary>
            Gift receipt redemption is not allowed during transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftReceiptExpirationDateIsMissing">
            <summary>
            Gift receipt expiration date is missing.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftReceiptReturnItemIsMissing">
            <summary>
            The return item of gift receipt is missing.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftReceiptRedemptionQuantityNotAllowd">
            <summary>
            Cannot use quantity in gift receipt redemption.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftReceiptItemDoesntMatchReturnItem">
            <summary>
            Gift receipt item doesnt match the actual item which was returned.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSCardFactoryFailled">
            <summary>
             Could not find suitable EPSCard for the given paymentMean
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidBalancePeriodSchedulingConfiguration">
            <summary>
            Invalid Balance Period Scheduling Configuration
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftReceiptLineIsNotEligibleForGiftReceipt">
            <summary>
            Line is not eligible for gift receipt.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ManualCouponBarcodeRequired">
            <summary>
            Barcode for manual coupon is required but was not specified 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidMaintenanceAction">
            <summary>
            Invalid maintenance action.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RetentionPolicyNotFound">
            <summary>
            Retention policy was not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RetentionPolicyConfigEntryNotFound">
            <summary>
            Retention policy configuration entry was not found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ShortDateFormatNotValidException">
            <summary>
             Invalid Date Format
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ShortTimeFormatNotValidException">
            <summary>
             Invalid Time Format
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CurrencyDecimalSeparatorNotValidException">
            <summary>
            Invalid Currency Decimal Separator.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CurrencyGroupSeparatorNotValidException">
            <summary>
            Invalid Currency Group Separator.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CurrencySeparatorNotValidException">
            <summary>
            Invalid Currency Group Separator and Currency Decimal Separator.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConflictingFieldsInItemPattern">
            <summary>
            Conflicting fields in Item Pattern
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemVendorIdIsMissing">
            <summary>
            Online consumable that belong to group with AuthorizationExternalIdType = External value must have vendor id value 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ResourcePackageAlreadyTranslated">
            <summary>
            Resource Package Already Translated 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotCalculatePriorityForLine">
            <summary>
            Cannot calculate priority for line.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidCouponAmount">
            <summary>
            Coupon amount is not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuItemNotFoundByExternalId">
            <summary>
            Menu item not found by external id
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuDisplayTermsNotFoundById">
            <summary>
            Menu display terms not found by id
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuAlreadyExistsForLocationException">
            <summary>
            Menu item already exists for location
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuAlreadyExistsForRoleException">
            <summary>
            Menu Already Exists For Role Exception
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuItemMissingIdentifier">
            <summary>
            Menu item already exists for location
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountConfigurationException">
            <summary>
            Account Configuration was not define correctly 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DrawerLimitNoConfigurationForTouchPointGroup">
            <summary>
            no configuration found for Touchpoint group
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotSellOnlineItemWithEmbeddedAmount">
            <summary>
            Cannot sell online item with embedded amount
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoLineWithSpecifiedAmountWasFound">
            <summary>
            Line with specified amount was not found in original transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FuelServerNotAvailable">
            <summary>
            Could not reach the Fuel Server
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConsumableTenderParamtersValidationFailed">
            <summary>
            Consumable tender parameters are not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IllegalQuantityKeyed">
            <summary>
            Invalid quantity keyed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidCheckDigitPositionInDataPattern">
            <summary>
            Invalid check digit position in data pattern
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidCheckDigitOffsetInDataPattern">
            <summary>
            Invalid check digit offset in data pattern
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidCheckDigitLengthInDataPattern">
            <summary>
            Invalid check digit length in data pattern
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidValidatorParameterInDataPattern">
            <summary>
            Invalid check digit length in data pattern
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SuggestedAmountLinesNotSpecified">
            <summary>
            Suggested amount lines not specified
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoLinesFoundForGiftReceipt">
            <summary>
            No lines found for gift receipt.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnRulesNotAllowInBottleDepositReturn">
            <summary>
             Return rules not allow in bottle deposit return
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AuthorizedChangePasswordUnknownActivity">
            <summary>
            Authorized change password unknown activity.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ForceSignInUnknownActivityException">
            <summary>
             An unknow activity type during force sign in service.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UserNotFound">
            <summary>
            User not found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidSupervisorUserNameOrPassword">
            <summary>
            Invalid supervisor user name or password.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BottleDepositGroupNotFound">
            <summary>
            Bottle Deposit Group not found or found more than once.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BusinessRuleDefinitionNotFound">
            <summary>
            Business Rule Definition not found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnNonBottleDepositItemNotAllowException">
            <summary>
             Return non bottle deposit item is not allowed in bottle deposit transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnexpectedMenuItemType">
            <summary>
            Unexpected menu item type.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoValidBusinessUnitIds">
            <summary>
            No valid business unit ids.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoValidTouchPointGroupIds">
            <summary>
            No valid touch point group ids.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UserRoleMaintenanceException">
            <summary>
            an error occured while performing UserRoleMaintenance
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UserRoleMaintenanceRoleNotFound">
            <summary>
            role not found while trying to add to a user
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UserRoleMaintenanceLocationNotFound">
            <summary>
            locagtion was not found while trying to add it to a role
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UserRoleMaintenanceRoleNotFoundAtLocation">
            <summary>
            role not found at specific location
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmRoleAlreadyFoundAtLocation">
            <summary>
            role already found at specific location
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmRoleNotFoundAtLocation">
            <summary>
            role was not found at specific location
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmRoleNotFound">
            <summary>
            role was not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserAlreadySignedinInStore">
            <summary>
             Specific user is signed in at another\same location.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.QuantityEntryRequired">
            <summary>
            quantity entry required
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MultipleTareSell">
            <summary>
            multiple tare sell
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ManualTareZero">
            <summary>
            Tare entered cannot be 0
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PercentageTareValue">
            <summary>
            Tare entered cannot be 0
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmCannotChangePasswordToInactiveUser">
            <summary>
            Cannot change password to inactive user
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuConfigurationMaintenanceCallOnReadonlyMenu">
            <summary>
            Menu Configuration Maintenance Call On Readonly Menu
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuConfigurationMaintenanceMissingKeyBindings">
            <summary>
            Menu Configuration Maintenance missing paramteters
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuConfigurationMaintenanceUnsupportedModifier">
            <summary>
            Menu Configuration Maintenance Unsupported Modifier
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuConfigurationMaintenanceMissingCommandParameters">
            <summary>
            Menu Configuration Maintenance Missing Command Parameters
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuItemCannotBeExcluded">
            <summary>
            Menu Item Cannot Be Excluded
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NewMenuItemsNotAllowedForType">
            <summary>
            New Menu Items Not Allowed For Type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnPolicyEndDateTimeInThePast">
            <summary>
             Policy EndDateTime in the past
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidEndDateTime">
            <summary>
             Policy EndDateTime invalid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RestrictionRuleMissingInput">
            <summary>
            RestrictionRuleMissingInput
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RestrictionRuleNotSatisfied">
            <summary>
            RestrictionRuleNotSatisfied
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RestrictionRuleDefinitionNotFound">
            <summary>
            RestrictionRuleDefinitionNotFound
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RestrictionRuleMaintenanceError">
            <summary>
            RestrictionRuleMaintenanceError
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RestrictionRuleAspectFactoryNotFound">
            <summary>
            RestrictionRuleAspectFactoryNotFound
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RestrictionRuleAspectDefinitionIsNotValid">
            <summary>
            RestrictionRuleAspectDefinitionIsNotValid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RestrictionMaintenanceError">
            <summary>
            RestrictionMaintenanceError
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RestrictionUnsupportedReasonCodeError">
            <summary>
            RestrictionUnsupportedReasonCodeError
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnPolicyNotFound">
            <summary>
             Return policy not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderReferenceIdAlreadyExist">
            <summary>
             Tender reference id already exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingDeclarationForUnbalancedPeriod">
            <summary>
            Missing Declaration For Unbalanced Period
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NotSupportedValue">
            <summary>
             Not supported value.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReportIntervalNotValid">
            <summary>
             Report Time Interval not valid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReportForTDMOnly">
            <summary>
             Report only avileable for TDM.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountAlreadyExistsInStoreBalancePeriod">
            <summary>
            Account Already Exists In Store Balance Period
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TresholdConditionInvalid">
            <summary>
             Treshold condition is invalid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoidLineOrItemInReturnAllTransaction">
            <summary>
            On perform void line or item during return all transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemNotFoundInOriginalTransaction">
            <summary>
             Online Item Not Found In Original Transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemHierarchyNodeNotFound">
            <summary>
            Item hierarchy node not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemHierarchyNodeIsReferenced">
            <summary>
            Item hierarchy node contains products attached to it (and therefore can't be deleted)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DeletingMerchandiseCategoryNodeIsProhibited">
            <summary>
            Deleting Merchandise Category node Is Prohibited
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ManualCouponValueIsNotInRange">
            <summary>
             Manual reward entry is not in range
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ModifiedPriceIsHigherThanOriginalPrice">
            <summary>
             Modified Price Is Higher Than Original Price
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MoreThanOneCustomerOrderNotSupported">
            <summary>
            In current implementation of retail transaction, it can`t includes more than one customer ordera
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerAlreadySigned">
            <summary>
            Customer Already Signed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerMissingMandatoryField">
            <summary>
            Customer missing mandatory field
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerIdentityAlreadyInUse">
            <summary>
            Customer Identity Already In Use
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerAccountTypeUniqueNameViolation">
            <summary>
            Customer Account Type Unique Name Violation
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerAuthenticationFailed">
            <summary>
            Customer Authentication Failed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerInvalidPassword">
            <summary>
            Customer Invalid Password
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerInvalidUserName">
            <summary>
            Customer Invalid UserName
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerInvalidCredentials">
            <summary>
            Customer Invalid Credentials
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountNotFound">
            <summary>
             Account not found 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountBalanceNotFound">
            <summary>
             Account not found 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountProfileNotFound">
            <summary>
             Account Profile Not Found Exception
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ServerGroupInvalidParameter">
            <summary>
            Server Group Invalid Parameter Exception
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ServerInvalidParameter">
            <summary>
            Server Invalid Parameter Exception
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ServerGroupNotFound">
            <summary>
            Server Group Not Found Exception
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateServerGroup">
            <summary>
            Duplicate ServerGroup Exception
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ServerGroupNotEmpty">
            <summary>
            Server Group Not Empty Exception
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ServerNotFound">
            <summary>
            Server Not Found Exception
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FuelConfigurationDaoExceptionOnSaveOrUpdate">
            <summary>
            Exception occurred in the DAO while trying to save or update fuel configuration
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FuelConfigurationDaoExceptionOnDelete">
            <summary>
            Exception occurred in the DAO while trying to delete fuel configuration
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DataComponentNotFound">
            <summary>
            Could not find data component in DAO
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountProfileDoesNotMatchAccountType">
            <summary>
            Account Profile Does Not Match Account Type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DataComponentAlreadyExist">
            <summary>
            Data component already exist in DAO
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerLoyaltyCardNumberAlreadyExists">
            <summary>
            Customer Loyalty card already exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionLogNotFound">
            <summary>
            Could not find the Transaction Log
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AlertTemplateNotFound">
            <summary>
            AlertTemplate doesn't exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReasonCodeInUseException">
            <summary>
            Indicates that the reason code is referenced by another entity and therefore cannot be deleted.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MessageInUseException">
            <summary>
            Message In Use Exception
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerGroupSingleRelation">
            <summary>
             Customer can be related to single group
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerDoesNotBelongToGroup">
            <summary>
             Customer does not belong to group
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountProfileConfigurationException">
            <summary>
            Account Profile Configuration Exception
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AlertGroupNotFound">
            <summary>
            AlertGroup doesn't exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AlertGroupAlreadyExists">
            <summary>
            AlertSeverity exists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoucherStartDateExceededBusinessDate">
            <summary>
            Voucher start date exceeded business date
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoucherExpirationDateExceededBusinessDate">
            <summary>
            Voucher expiration date exceeded business date
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoucherExpirationDateExceededVoucherStartDate">
            <summary>
            Voucher expiration date exceeded Voucher start date
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoucherAmountNotToExceedZeroValue">
            <summary>
            Voucher amount cannot be zero
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CalculatedValueExceededVoucherAmountNotToExceed">
            <summary>
            Calculated Value Exceeded Voucher AmountNotToExceed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LocalizedDescriptionIsEmpty">
            <summary>
            Localized description is empty
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AlertSeverityNotFound">
            <summary>
            AlertSeverity doesn't exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AlertSeverityAlreadyExists">
            <summary>
            AlertSeverity exists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerIsNotAssociatedWithAnyGroup">
            <summary>
             Customer not assigned to any group
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerAccountTypeDoesNotExist">
            <summary>
             Account type does not exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountActivityRestricitionProhibitMinViolation">
            <summary>
             Account activity amount is below the allowed. activity is prohibited
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountActivityRestricitionProhibitMaxViolation">
            <summary>
             Account activity amount is over the allowed. activity is prohibited
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountActivityRestricitionManagerApprovalViolation">
            <summary>
             Account activity amount is not in the allowed range. activity requires manager approval
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AlertNotFound">
            <summary>
            Alert could not be found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MultipleLinesWithOnlineAccountConsumableGroups">
            <summary>
            Transaction has multiple lines with OnlineAccountConsumableGroup (which is forbidden)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TouchPointCommandNotFound">
            <summary>
            Touch Point Command Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTareValue">
            <summary>
            Tare value can not be greater than item weight.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoucherLimitRestriction">
            <summary>
            Voucher limit restriction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingIndicatorGroupDefinition">
            <summary>
            Group Indicator Group definition not found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IndicatorGroupNotExist">
            <summary>
            Group Indicator Group not found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MinssingIndicatorDefinition">
            <summary>
            Group Indicator definition not found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateIndicatorAlreadyExist">
            <summary>
            Duplicate Indicator.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IndicatorDeleted">
            <summary>
            Indicator deleted.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerGroupNotFound">
            <summary>
            CustomerGroup doesn't exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PaymentTermBiggerThanBalanceDue">
            <summary>
            PaymentTermBiggerThanBalanceDue
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PaymentTermNotSatisfied">
            <summary>
            PaymentTermNotSatisfied
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ProductAlreadyInStoreRange">
            <summary>
             Appear when a product which already exist in store range is added to store range
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ProductNotInStoreRange">
            <summary>
             Appear when a product which not exist in store range is deleted from store range
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AssociatedProductNotFound">
            <summary>
             Appear when returning a product but it's linked product is not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.StoreRangeExistForBusinessUnit">
            <summary>
             Appear when trying to define a store range for business unit, for which another store range is already defined.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateIndicatorPriority">
            <summary>
            Duplicate Indicator priority.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DisposalMethodNotFound">
            <summary>
             Disposal Method Not Found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuItemInvalidVersion">
            <summary>
             Appear when trying to update menu item version or associate menu items of different versions
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateHierarchyData">
            <summary>
            Duplicate data for same entity stored on hierarchy node
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerSegmentDoesNotExist">
            <summary>
            Segment does not exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceDefinedInPriceListForBusinessUnitAndProduct">
            <summary>
             Appear when trying to add price by business unit and product to price list, but a price for the same product and price zine is already defined in price list
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlyDefaultPriceListShouldExist">
            <summary>
             Appear for default implementation of price list strategy , if more than one price list exist. in that case an exception is thrown
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoPriceDefinedForCalculation">
            <summary>
             Appear when a price calculation is performed but no price for price calculation is defined
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoPriceExistPerUnitOfMeasure">
            <summary>
             Appear when trying to update a price but no price defined for unit of measure in the price list
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InstrumentationAdapterInternalException">
            <summary>
            Instrumentation Adapter Error
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateRateId">
            <summary>
            Thrown on duplicate rate id on tax add/update
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoBusinessUnitsOrHierarchiesRecievedAsSearchCriteriaException">
            <summary>
             Throw if calling business unit dao to get specific price zone by business unit and hierarchy, with no business units or hierarchies specified as searh criteria
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.QuantityWithBarcodeForbbiden">
            <summary>
            Thrown when trying to add data pattern with more than one quantity, for example 5 X 500012344324 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidRuleConfigurationData">
            <summary>
            The parameters defined for the configuration of the requested rule are not valid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionScopeNotSupported">
            <summary>
            The defined rule type does not support transaction scope.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidConditionConfigurationData">
            <summary>
            The parameters defined for the configuration of the requested condition are not valid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidActionConfigurationData">
            <summary>
            The parameters defined for the configuration of the requested action are not valid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RuleResultNotSatisfied">
            <summary>
            Indicates that a business rule was triggered whose result is not satisfied.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotAddCategoryAsSubCategory">
            <summary>
             Thrown when trying To define a category as sub category of another category, but the other category is already a sub category of current category
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotAddCategoryAsSubCategoryWhenNotFromSameType">
            <summary>
             Thrown when trying to define category of sub category of another category, but both categories are not from the same type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UknownVolumeUnitOfMeasure">
            <summary>
             Thrown when trying to add invalid volume unit of measure that is not supported by the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CategoryNotOfRequestedTypeException">
            <summary>
             Thrown when trying to set a category to department with a wrong type. For example: trying to set a category as merchandise category in department but category classification type is not merchandise.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RuleFactoryNotFound">
            <summary>
            No rule-factory could be found for the specified rule type.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConditionFactoryNotFound">
            <summary>
            No condition-factory could be found for the specified condition type.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IllegalActionException">
            <summary>
             Thrown when trying to manage advertisement promotion with action that advertisementPromotionService not support
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ChannelNotExistException">
            <summary>
             Thrown when trying to manage advertisement promotion with channel that not exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AdvertisementChannelNullArgumentException">
            <summary>
             Thrown when trying to save advertisement channel with null name or ID
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CategoryNotExistException">
            <summary>
             Thrown when trying to manage advertisement promotion with category that not exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AdvertisemenImageException">
            <summary>
             Thrown when trying to manage advertisement promotion with large image
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AdvertisemenDateException">
            <summary>
             Thrown when trying to manage advertisement with end date that is less than start date in Advertisement
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PaymentNotAllowedForNegativeBalanceDueException">
            <summary>
            Thrown on attempt to add payment in case balance due is negative
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LinkedEntityNotExistException">
            <summary>
             Thrown when trying to manage advertisement promotion with entity that not exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponManualEntryRequired">
            <summary>
             Thrown when trying to add a coupon with manual entry from attendant required 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IllegalBehaviorType">
            <summary>
             Thrown when trying to create a behavior with illegal type. the only types allowed are online consumable and online account consumable
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmRoleWithSameIdAlreadyExist">
            <summary>
             Thrown when trying to create an IdmRole with a given role already exists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InputLimitTypeDoesNotExist">
            <summary>
             Thrown when trying to create an InputQuantityLimit rule with a type that does not exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LogDocumentCriteriaIsNotSupported">
            <summary>
             The log document search criteria is not supported.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingFuellingPointId">
            <summary>
            Thrown when trying to add a fuel sale to customer order and the Fuelling Point id is missing.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingControllerSequenceNumber">
            <summary>
            Thrown when trying to add a fuel sale to customer order and the Controller sequence number is missing.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidEligibilityEnvironmentException">
            <summary>
            Thrown when trying to add eligibility policy with no enviroment.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConflictingRestrictedCardParentCategoryException">
            <summary>
            Thrown when trying to pass RestrictedCardParentCategory parameter to a persisited RestrictedCardRestriction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RemoveActiveChildServer">
            <summary>
            Thrown when trying to remove active DMS child server from hierarchy.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidRelayWorkerMappingMaintenanceRequest">
            <summary>
            Thrown when RelayWorkerMappingMaintenanceRequest is invalid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoApprovalRecordForPrice">
            <summary>
            Thrown when trying to remove active DMS child server from hierarchy.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InsufficentPrivileges">
            <summary>
            Thrown when approver was rejected because the user matching the supplied credentials does not have the required privileges
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConversionRateRequired">
            <summary>
            Thrown when trying to add a customer agreement with no conversion rates.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConversionRateMustBeUniquePerCurrency">
            <summary>
            Thrown when trying to add two customer agreement conversion rates for the same currency.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NumberOfWeeksInPatternIsZero">
            <summary>
            Thrown when trying to set delivery schedule pattern with no weeks.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NumberOfWeeksIsHigherThenMaxThreshold">
            <summary>
            Thrown when trying to add too many weeks to deliverySchedule pattern.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SupplierProductAlreadyBelongsToProductGroup">
            <summary>
            Thrown when tryed to add to supplier product group a product that alredy belongs to some product group
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ClientCertificateForTokenServerNotFound">
            <summary>
            Thrown when the searched certificate is not found on local machine. 
            the client certificate is mandatory for using the token server.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnableToAuthenticate">
            <summary>
            Thrown when the system is unable to authenticate a claim.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CardExpiredDate">
            <summary>
            Thrown when the given credit card date is older than the current Business date.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TokenServerConnectionException">
            <summary>
            Thrown when the Token server is not reachable within the given timeout.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ProductIdentifierNotUniqueException">
            <summary>
            Thrown when trying to insert identifier for a product which already attached to a different product.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DeleteProductIdentifierThatNotExistsException">
            <summary>
            Thrown when trying to delete product identifier which not exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CanNotRepeatReturnItemException">
            
             element is missing inside the Request
             
             <summary>
             Thrown when trying to perform Repeat on a returned item.
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingElementInRequestException">
            <summary>
            Thrown when trying to perform Repeat on a returned item.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GiftReceiptCannnotBeIssuedException">
            <summary>
            Thrown when failing to create a gift receipt because of a restriction policy.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSShortTermTokenExpiredException">
            <summary>
            Thrown when trying to pay via EPS with a short term mobile token that has already expired.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSMissingPanNumberInTokenServer">
            <summary>
            Thrown when token server replies with an empty / null PAN.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RetailTransactionInactiveException">
            <summary>
            Thrown when a transaction had been successfully retrieved for mobile payment, but it is either closed or suspended.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PaymentCardFormat">
            <summary>
            Thrown when the given credit card number is in invalid format
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingDriveOffParametersException">
            <summary>
            Thrown from drive off suspend transaction when missing parameters.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingUnpaidParametersException">
            <summary>
            Thrown from unpaid suspend transaction when missing parameters.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TouchPointNotRegistred">
            <summary>
            Thrown when the touchpoint not registered in the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ServiceAgentNotRegistered">
            <summary>
            Thrown when the serviceAgent not registered in the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TouchPointAlreadyRegistered">
            <summary>
            Thrown when attempting to register a touchpoint that is already registered in the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmInvalidFullNameException">
            <summary>
            Thrown when the full name of the user is invalid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserAlreadyExistException">
            <summary>
            Thrown when user name already exists in the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmInvalidPasswordException">
            <summary>
            Thrown when user password is invalid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmStrongPasswordException">
            <summary>
            Thrown when user password is not strong enough
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmInvalidRoleException">
            <summary>
            Thrown when the role is invalid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmInvalidUserNameException">
            <summary>
            Thrown when the user name is invalid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmInvalidNameException">
            <summary>
            Thrown when the first or last name are invalid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmPasswordLengthException">
            <summary>
            Thrown when the password length is invalid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmTouchPointNotFoundException">
            <summary>
            Thrown when the touchpoint is not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserNotExistException">
            <summary>
            Thrown when the user doesn't exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmLoginInTrainingModeException">
            <summary>
            Thrown when there is attempt to login in training mode
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmExitTrainingModeException">
            <summary>
            Thrown when there is an invalid attempt to exit training mode
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IdmUserAssignmentException">
            <summary>
            Throws exception in case a not protected user doesn’t have role or the user is not assigned to BusinessUnit
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotRemoveLoyaltyWhenPointsTenderExists">
            <summary>
              Thrown when loyalty Card Removed When Transaction Was Partially Tendered with Points
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SubscriptionPendingActivation">
            <summary>
              Thrown when subscription status is pending Activation
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateDenomination">
            <summary>
            Tried to insert a denomination that already exists (per currency)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingEventMapping">
            <summary>
            No mapping was found that can map between the specified event and the requested destination.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingContractToModelMapper">
            <summary>
            No mapping was found that can map between the specified contract and model condition/action.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IsNotSameHouseholdRedemption">
            <summary>
            Thrown when same household coupon is not permitted for redeem by customer
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CouponAlreadyRedeemed">
            <summary>
            Thrown when coupon was already redeemed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CustomerAssociatedWithSameHouseholdCoupon">
            <summary>
            Thrown when replacing\removing customer and he is related to same household coupon in transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AlertTemplateAlreadyExist">
            <summary>
            Thrown when user try to add an existing alert template
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RootCategoryAlreadyExistsException">
            <summary>
            Thrown when trying to add a root category for a category tree that already has a root.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LoyaltyProgramVisualCannotSuggestItself">
            <summary>
            Thrown when trying to add or modify a loyalty program visual so that it contains itself in the suggested loyalty programs field.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LoyaltyProgramCannotHaveSubLoyaltyProgramWithSameExternalId">
            <summary>
            Thrown when trying to add or modify a loyalty program so that it has a sub loyalty program with the same external ID.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EPSSecurityConfigurationMissing">
            <summary>
            Thrown when there is no app.config (relative to EPS DLL) containing AES key and IV.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ThereIsNoSuchList">
            <summary>
            Thrown when there is no List with specified Localized List Name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RescanPolicyConfigurationProblem">
            <summary>
            Thrown when rescan is used but not configured
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TransactionConcurrencyException">
            <summary>
            Thrown when received StaleObjectStateException from NHibernate
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TrustLevelNotFound">
            <summary>
            Thrown when customer selfscan subscription trust level not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RescanProcessNotCompleted">
            <summary>
            Thrown upon transaction finalyze request if active rescan process not completed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TdmDatabaseNotFound">
            <summary>
            Thrown when trying to get a tdm session and no related tdm database is found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TdmConfigurationParameterIsInvalid">
            <summary>
            Thrown when trying to save Tdm retention policy configuration parameter with incorrect value
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TdmConfigurationParameterInIncorrectRange">
            <summary>
            Thrown when trying to save Tdm retention policy configuration parameter with incorrect range
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ShoppingListLineTypeNotFound">
            <summary>
            Thrown when no shopping list line type is found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ShoppingListNotFound">
            <summary>
            Thrown when no shopping list line type is found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ShoppingListLineNotFound">
            <summary>
            Thrown when no shopping list line Line is found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ShoppingListUnauthorizedAction">
            <summary>
            Thrown when no shopping list line Line is found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ThresholdAppliesToNotValid">
            Promotion Maintenance////
            <summary>
            Thrown when 'Threshold Applies To' is assigned to 'Different Items' not in Units condition
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ThresholdValueIsNotValid">
            <summary>
            Thrown when Condition Threshold Value is not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FundingIsNotValid">
            <summary>
            Thrown when Funding values are not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ParticipationValueIsNotValid">
            <summary>
            Thrown when participation value is not greater than 0
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FundingParticipationTypeCombinationIsNotValid">
            <summary>
            Thrown when all funding participants are not configured with the same participation type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FundingParticipationValuesSumIsNot100">
            <summary>
            Thrown when the funding type is defined as Percentage and the values are not summed up to 100%
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PromotionActionIsNotValid">
            <summary>
            Thrown when Reward value is not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.IllegalCombinationOfRewardAndCondition">
            <summary>
            Thrown when Reward value is not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PromotionIdIsNotLegal">
            <summary>
            Thrown when Promotion Id is not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicatedConditionIdIsNotValid">
            <summary>
            Thrown when Condition Id is duplicated
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConditionDataIsNotValid">
            <summary>
            Thrown when mandatory condition data doesn't exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RewardDataIsNotValid">
            <summary>
            Thrown when mandatory reward data doesn't exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PromotionNegativeReward">
            <summary>
            Thrown when Reward value is negative
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CriterionDataIsNotValid">
            <summary>
            Thrown when mandatory criterion data doesn't exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RewardLimitationDataIsNotValid">
            <summary>
            Thrown when mandatory limit data doesn't exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AuthorizationIsNotLegal">
            <summary>
            Thrown when Authorization is not legal
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PromotionMultipleTicketsLimitIsNotLegal">
            <summary>
            Thrown when promotion multiple tickets limit is not legal
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PromotionTicketLimitIsNotLegal">
            <summary>
            Thrown when promotion ticket limit is not legal
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTaxAuthorityDescription">
            <summary>
            Thrown when tax authority description cannot be set, like when it is too long.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTaxDateCondition">
            <summary>
            Thrown when tax rate date condition cannot be set, like when end date is earlier then start date.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTaxConditionCombination">
            <summary>
            Thrown when tax contains invalid combination of conditions like when product group and category.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTaxCalculationMethod">
            <summary>
            Thrown when Tax Rate Calculation Method was not set properly, or not set at all.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTaxExemptionMethod">
            <summary>
            Thrown when Tax Discount (partial exemption) Method was not set properly, or not set at all.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTaxExemptionCondition">
            <summary>
            Thrown when tax exemption has no exemption condition or the condition is not valid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UndefinedProductAssociationToGroup">
            <summary>
            Undefined Product Association To Group
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.GroupIdentifierIsNotUnique">
            <summary>
            Duplicate consumable/product association group Id
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingExemptionCustomerDetails">
            <summary>
            Customer details not supplied for tax exemption action.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidAccountExpirationPeriodType">
            <summary>
            Invalid account expiration period type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidAppliedConditionId">
            <summary>
            Invalid Applied Condition Id
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidAccountResetPolicyType">
            <summary>
            Invalid account reset policy type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SegmentationCriteriaExecutionDataNotAvailable">
            <summary>
            No response from BI following a segmentation criteria execution
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidAccountResetHourConfigurationValue">
            <summary>
            Configured account reset time value is malformed and cannot be translated to a valid time.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotUpdateLineWithLinkedItem">
            <summary>
            cannot update a line because it has a linked item
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingCouponLimitsRuleArguments">
            <summary>
            cannot create coupon limits business rule without arguments.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidReturnPolicyPaidTenderConfiguration">
            <summary>
            Paid tender configuration is invalid in transaction base return policy.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineProductNotDefined">
            <summary>
            Cannot sell the wanted online product due to invalid environmental definition (BusinesUnit + RetailSegment).
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidReturnPolicyRefundTenderConfiguration">
            <summary>
            Refund tender configuration is invalid in return policy.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemNotFoundInTransaction">
            <summary>
            Item not found in the current transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BarcodeNotFoundInTransaction">
            <summary>
            Used by the amount embedded strategy
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemRelatedToCodeNotFound">
            <summary>
            Item related to code is not part of this transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemAlreadyCancelled">
            <summary>
            Item has already been cancelled.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemRelatedToCodeAlreadyCancelled">
            <summary>
            Item related to code has already been cancelled.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemRelatedToCodeAlreadyReturned">
            <summary>
            Item related to code has already been returned in previous transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemRelatedToCodeLargerQuantityThanPurchased">
            <summary>
            Item related to code has already been returned in current transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OnlineItemSwitchRequired">
            <summary>
            Online item wasn't found by related code. Other online item has a match.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SessionWithNoTouchPoint">
            <summary>
            No Touch Point In Client Session 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ProductPaymentRestrictionWithSameEnvironmentAlreadyExists">
            <summary>
            No Touch Point In Client Session 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RequiredAttributeUnspecified">
            <summary>
            XML Request validation failure: There is ann attribute that defined as "required" in schema but not specified in request 
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidEmbeddedQuantityInBarcode">
            <summary>
            Raised when quantity value extracted from barcode was invalid. Usually 0.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnsupportedThresholdInOfflineMode">
            <summary>
            Unsupported Threshold in offline mode.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnsupportedRestrictionOrThresholdAction">
            <summary>
            Unsupported Restriction or Threshold action.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnsupportedReturnRestriction">
            <summary>
            Unsupported Restriction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTimeZoneId">
            <summary>
            TimeZone Id string doesn't exist in the system
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NodeNotAvailable">
            <summary>
            The node not available
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RoleActionNotFound">
            <summary>
            Occurs when trying to create a return rule action with a non-existing role.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotDeleteUser">
            <summary>
            Occurs when user cannot be deleted
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderAlreadyAssignEndorsement">
            <summary>
            Occurs when try to assign tender to Endorsement that already assigned
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DeleteReferencedLayoutLineTemplate">
            <summary>
            
            Occurs when try to delete a line template that is being used in a receiptLayout
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DateTimeFieldFormatInvalid">
            <summary>
            TimeZone Offset string format is invalid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailedPublishMessageToTransportationLayer">
            <summary>
            Error code notifying failure to publish transportation message to any available transportation layer.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AlreadyExistActiveReceiptLayoutException">
            <summary>
                 add active receipt layout that already exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DeleteActiveReceiptLayoutException">
            <summary>
                 delete receipt layout with an active status.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateLayoutTemplateNameException">
            <summary>
                 Layout template with supplied name already exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateReceiptLayoutNameException">
            <summary>
                 Receipt Layout with supplied name already exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LayoutTemplateDoesNotExistException">
            <summary>
                 Layout template with supplied name does not exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReceiptLayoutDoesNotExistException">
            <summary>
                 Receipt layout with supplied name does not exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailedPublishMessageToRabbitOutboundQueue">
            <summary>
            Error code notifying failure to publish transportation message to rabbit queue.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailedPublishMessageFromRabbitOutboundQueue">
            <summary>
            Error code notifying failure to publish transportation message from rabbit queue.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NegativeTaxAmount">
            <summary>
            The tax amount on the transaction is negative.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TaxAmountGreaterThanTransactionTotalAmount">
            <summary>
            The tax amount on the transaction is greater than the transaction's total amount.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingMandatoryTaxAmount">
            <summary>
            The tax amount is mandatory but is missing from the transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountNotValidForTaxEntry">
            <summary>
            The account is not valid for tax entry.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ParentNotExistsExecption">
            <summary>
            Error code notifying parent id doesnt exists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BusinessUnitUpdateNotAllowed">
            <summary>
            Error code notifying business unit update is not allowed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SingleBusinessUnitAllowedOnly">
            <summary>
            Error code notifying only single business unit is allowed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AspectOnThresholdRuleNotDefined">
            <summary>
            Threshold rule must have at least one aspect definition
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ParametersMinMaxOnThresholdRuleNotDefined">
            <summary>
            Threshold rule must have "parameters" property defined, containing the min and max values.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ThresholdRuleValuesFormat">
            <summary>
            Threshold rule must have exactly 2 positive amount values
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ThresholdRuleAmountParameterType">
            <summary>
            Min/Max amount parameter for threshold rule must be decimal
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EligibleTenderSettingsMaxAmountValue">
            <summary>
            Max amount must be larger than 0
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EligibleTenderSettingsMinAmountValue">
            <summary>
            Min amount must be larger than 0
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EligibleTenderSettingsMaxAmountLessThanMin">
            <summary>
            Min amount can't be larger than Max amount
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RestrictionRuleAspectMaxAmountLessThanMin">
            <summary>
            Min amount can't be larger than Max amount
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BusinessUnitIsNotStore">
            <summary>
            Error code notifying that the business unit that is supplied is not a Store
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.EncryptionKeyIsMissing">
            <summary>
            Error code notifying that the encryption key is missing.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FieldLengthExceeded">
            <summary>
            Field length exceeded, used for input validations
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateSuggestedAmount">
            <summary>
            Duplicate suggested amount
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotResumeOrderFromDifferentStore">
            <summary>
            Order can't be processed as belongs to different store
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailedToSaveTransportationMessageToSql">
            <summary>
            The failed to publish to outbox message
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailedToPushMessageToUploadOutboxQueue">
            <summary>
            The failed to upload message to rabbit
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailedToGetMessagesForUploadInboxQueue">
            <summary>
            The failed to get messages for upload
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailedToProcessMessageFromDownloadOutboxQueueToDownloadInboxQueue">
            <summary>
            The failed to send to download outbox queue
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailedToPushMessageToDownloadOutboxQueue">
            <summary>
            The failed to set to download outbox queue
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FailedToConnectToRabbit">
            <summary>
            The failed to connect to rabbit
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BusinessUnitAlreadyExists">
            <summary>
            BusinessUnitAlreadyExists
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnableToSetUserStatusToLocked">
            <summary>
            Unable to set user status to locked manual
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountProfileDontMatchCarryOver">
            <summary>
            Account Profile description must be unique 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DefaultAccountProfileAlreadyExists">
            <summary>
            Account Profile isDefault mut be unique
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AccountProfileSaveFieldsNotEmpty">
            <summary>
            Account Profile cannot be updated - Provided fields not empty
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidTaxRoundingMethod">
            <summary>
            Rounding method doesn't match tax type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TaxRateOverflowError">
            <summary>
            Tax rate values are bigger than respective fields in database
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TaxRateToValueBiggerThanFromValue">
            <summary>
            Tax rate values are bigger than respective fields in database
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NonUniqueAccountProfileDescription">
            <summary>
            Account Profile description must be unique 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NonUniqueAccountProfileMode">
            <summary>
            Account Profile Mode must be unique 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ProfileModeNotAllowedAutoDeclaration">
            <summary>
            Account Profile Mode not allowed auto Declaration 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BarcodeFailedUnlock">
            <summary>
            Error code notifying that Barcode Fail to Unlock.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FuelItemCannotBeReturned">
            <summary>
            Fuel item cannot be returned.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidDateEntered">
            <summary>
            Account Profile description must be unique 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TdmDatabaseUpdateNotSupported">
            <summary>
            Error code notifying that TDM database don't support update.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LinkGroupOfTheSameIdAlreadyExistsForDifferentType">
            <summary>
            LinkGroup Of The Same Id Already Exists For Different Tag
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LinkGroupAssociatedByProductCantBeDeleted">
            <summary>
            LinkGroup Of The Same Id Already Exists For Different Tag
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AddDeleteLinkGroupOnSameRequest">
            <summary>
            LinkGroup Of The Same Id Already Exists For Different Tag
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VenueDayShiftsAlreadyExists">
            <summary>
            The venue day shifts with the same Id already exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VenueDayShiftsNotExists">
            <summary>
            The venue day shifts not found.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VenueShiftsOverlapping">
            <summary>
            The venue shifts is overlap.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VenueDayShiftsOverlapping">
            <summary>
            The venue day shifts is overlap.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VenueShiftsAlreadyExists">
            <summary>
            The venue shift with the same Id already exists in another venue day shifts.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateVenueShiftsId">
            <summary>
            The venue shift with the same Id already exists in the current venue day shift.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VenueDayShiftsHasNoItems">
            <summary>
            The venue day shifts has no shifts
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotSettleOngoingBusinessPeriod">
            <summary>
            Cannot settle an ongoing business period
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OpenCloseDayAlreadyExists">
            <summary>
            The definition of Open Close hours for Business Unit with such parameters already exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OpenCloseDayNotExists">
            <summary>
            The definition of Open Close hours for Business Unit with such parameters don't exist, therefore it can't be updated.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OpenCloseDayWrongConfigurationHours">
            <summary>
            Incorrectly configured hours. The StartTime must be less than EndTime
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.OpenCloseDayShiftsOverlapping">
            <summary>
            Overlapping configuration in Open Close Day
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotVoidTransactionWithEftTips">
            <summary>
            Collective tip transaction contains eft tip
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AvailableTimeOverlapping">
            <summary>
            Overlapping configuration in available time
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingSearchCriteriaException">
            <summary>
            Missing search criteria
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderRoundingRuleAlreadyExists">
            <summary>
            The definition of Tender rounding rule with such parameters already exists.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderRoundingRuleNotExists">
            <summary>
            The definition of Tender Rounding Rule with such parameters doesn't exist.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderRoundingRuleCanNotBeDeleted">
            <summary>
            The definition of Tender Rounding Rule associated with tender can't be deleted.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TenderRoundingRuleNameIsRequired">
            <summary>
            The Name of Tender Rounding Rule is not provided.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RoundingTenderInvalid">
            <summary>
            The Rounding Tender value is not valid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ThresholdValueGreaterThanDenominator">
            <summary>
            The Threshold value cannot be greater than the denominator value for the Tender Rounding Rule.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RoundingRuleAndTenderCurrencyMismatch">
            <summary>
            Currency of the rounding rule does not match the currency of the tender.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RefundValuesAreDifferent">
            <summary>
            The refund values for rounding rule are different.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CurrencyDenomiatorValueInvalid">
            <summary>
            The currency Denominator value for Rounding Rule is Invalid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RoundingThresholdValueInvalid">
            <summary>
            The Rounding Threshold value is Invalid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RoundingRuleHasDuplicateLocationConditions">
            <summary>
            The Rounding rule value is Invalid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AmountNotRounded">
            <summary>
            The entered amount is not rounded.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SecurityScaleConfigurationNotAllowedOnRoot">
            <summary>
            The Security Scale Configuration Not Allowed On Root.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidSubDisplay">
            <summary>
            The Sub Display given for the Branding Image is not valid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FileIsMandatory">
            <summary>
            The File field is mandatory for a branding Image.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FileNameIsMandatory">
            <summary>
            The File Type is mandatory.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidFileName">
            <summary>
            The File Name is invalid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnsupportedFileType">
            <summary>
            The File Type is not supported.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PositionIsNotApplicable">
            <summary>
            The Position is not applicable.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PositionIsRequired">
            <summary>
            The Position is must be provided.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PositionIsInvalid">
            <summary>
            The Position is invalid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BrandingItemAlreadyExists">
            <summary>
            The Branding Image already exists for the given configuration.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BrandingItemDoesNotExist">
            <summary>
            The Branding Image does not exists for the given configuration.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BrandingIdIsMandatory">
            <summary>
            The Branding Image Id is mandatory field.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.BrandingItemFileSizeValueExceeded">
            <summary>
            The Branding Image file size is more than configured max file size value
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FileSizeExceedsMaxAllowedSize">
            <summary>
            The Branding Image file size is more than configured max file size value
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UnvalidTareOnEachItem">
            <summary>
            Trying to add tare on an item with type EA
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CdmAccessTimedOut">
            <summary>
            The Access to CDM database timed out
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidDataOfCertificateConfiguration">
            <summary>
            Invalid data of CertificateConfiguration manipulation
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidCoupon">
            <summary>
            Invalid Coupon
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidCulture">
            <summary>
            Invalid Culture
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingCulture">
            <summary>
            Missing Culture
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingKeyboardName">
            <summary>
            Missing Keyboard Name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingKeyboard">
            <summary>
            Missing Keyboard
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidKeyboardConfigurationXML">
            <summary>
            Invalid Keyboard Configuration XML
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ProhibitedInitiateCashbackRequest">
            <summary>
            Initiate Cash-back Request is Prohibited
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SuspendedTransactionIsUnreachable">
            <summary>
            Retrieval of Self Scanned transaction is failed, due to the offline POS 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidRequiredOLAMessageParameter">
            <summary>
            Online Authorization Message parameter is incorrect
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingRequiredOLAMessageParameter">
            <summary>
            Online Authorization Message parameter is missing
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateOLAMessageConfiguration">
            <summary>
            Duplicate Online Authorization Message detected
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.AlphanumericRequiredOLAMessageParameter">
            <summary>
            Non Alphanumeric Online Authorization Message parameter
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ActionNotSupported">
            <summary>
            Action Not Supported  for the configuration of Online Authorization Message detected
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoConfiguredOLAMessageFound">
            <summary>
            No configured message for Online Authorization was found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingDynamicFormName">
            <summary>
            Missing Dynamic Form Name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingDynamicForm">
            <summary>
            Missing Dynamic Form
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MissingDynamicFormFields">
            <summary>
            Missing Dynamic Form Fields
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ConfirmationRequiredForEntity">
            <summary>
            Confirmation Required For Entity
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuValidityPeriodIsBadlyDefined">
            <summary>
            Menu validity period is badly defined
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateKeyFoundInDynamicFormFields">
            <summary>
            Duplicate Key found in Dynamic Form Fields
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidDynamicFormXML">
            <summary>
            Invalid Dynamic Form XML
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LockedCoupon">
            <summary>
            Locked Coupon
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidDateTimeParameters">
            <summary>
            Invalid SQL Date time range
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReasonCodeIsTooLongException">
            <summary>
            Reason code for the Till/Cashier pending periods is too long. Must not exceed 256 characters.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.UserNewPasswordIsMissing">
            <summary>
            Reset user password can't be completed, due to the missing User New Password fields
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.NoReceiptVersionProvided">
            <summary>
            No receipt version provided
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuValidityPeriodExpired">
            <summary>
            Menu validity period is expired, and cannot be inserted
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReceiptVersionBlockedForMaintenance">
            <summary>
            Receipt version blocked for maintenance
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.InvalidBusinessUnitIdForReceipt">
            <summary>
            Invalid business unit ID for receipt
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ExternalServiceVoidRequired">
            <summary>
            External service void is required
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MixDifferentItemTypes">
            <summary>
            Mix Different Item Types in Fiscal
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CannotReturnTransactionType">
            <summary>
            Cannot return transaction types in Fiscal
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.MenuValidityPeriodStartDateNotSpecified">
            <summary>
            Menu validity period start date should be specified, if the end date is specified
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.CashierCollidingBarcode">
            <summary>
            Another user has similar barcode - the Cashier barcode should be recreated
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RedisLostConnection">
            <summary> 
            Lost connection to Redis 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RedisTransactionCreationFailed">
            <summary> 
            Failed creating a Redis transaction 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RedisConnectionCreationFailed">
            <summary> 
            Failed creating a Redis connection 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RedisStreamDeletionFailed">
            <summary> 
            Failed deleting from Redis stream 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RedisSavingToStreamFailed">
            <summary>
             Failed saving to Redis stream 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RedisGettingFromStreamFailed">
            <summary> 
            Failed getting from Redis stream 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RedisSavingKeyFailed">
            <summary> 
            Failed saving to Redis with the given key 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RedisGettingKeyFailed">
            <summary> 
            Failed getting data with given key from Redis 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RedisRemovingKeyFailed">
            <summary> 
            Failed removing data with key from Redis 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LinkedItemWithoutPrice">
            <summary>
            Detected Linked Item without price, such product cannot be sold
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RefundVoucherUsed">
            <summary> 
            Failed Changing RefundVoucher status 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RefundVoucherExpired">
            <summary> 
            Failed Changing RefundVoucher status 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RefundVoucherLocked">
            <summary> 
            Failed Changing RefundVoucher status 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RefundVoucherAlreadyInTransaction">
            <summary> 
            RefundVoucher already In current transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.RefundVoucherNotAllowedInReturnTransaction">
            <summary> 
            Return Item Vouchers cannot be added in Return Transactions
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ReturnOnlyProductNotAllowedInReturnTransaction">
            <summary> 
            Return Items cannot be added in Return Transactions
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FiscalRetrySeverity">
            <summary>
            Fiscal throw ErrorSeverity - Retry
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FiscalBlockingSeverity">
            <summary>
            Fiscal throw ErrorSeverity - Blocking
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.FiscalTimeout">
            <summary>
            Fiscal throw timeout
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemRewardIdNotExist">
            <summary>
            Item Reward Id Not Exist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.TouchpointGroupNotFound">
            <summary>
            Not existing TouchPoint group.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemRewardFailureConditionNotExist">
            <summary>
            Item Reward Failure Condition NotExist
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ItemDuplicationError">
            <summary>
            Could not duplicate the selected item.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ExternalServiceConfirmationFailed">
            <summary>
            External Service Confirmation Failed - stop transaction finish. Only void transaction is possible.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PromotionClassificationLengthExceeded">
            <summary>
            Promotion classification tag contains string longer than 30 characters
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ApplicationLinkNotFound">
            <summary>
            The requested url not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ApplicationLinkNotValid">
            <summary>
            The url is not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.DuplicateApplicationLink">
            <summary>
            The url is not valid
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceReasonCodeAlreadyExist">
            <summary>
            Same Price reason code can be added to DB only once.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceReasonCodeNotExist">
            <summary>
            Price reason code not exist in DB.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.PriceReasonCodePositive">
            <summary>
            Price reason code must be positive.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.LoyaltySystemUnavailable">
            <summary>
            Error in External Loyalty process.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.ExternalLoyaltyCustomerNotFound">
            <summary>
            Customer Not found in External Loyalty
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoidByCodeOfLinkedItemProhibited">
            <summary>
            Void by code of a linked item is prohibited
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.SequenceNotFound">
            <summary>
            RTI Sequence event not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes.VoidByCodeOfQuantityAndAmountEmbeddedBarcodeProhibited">
            <summary>
            Void by code of a Quantity and Amount Embedded barcode is prohibited
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.ICheckDigitDataPatternValidator">
            <summary>
            Validates Check Digit algorithm, accordingly to the implementation
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternExtractor">
            <summary>
            Represents an interface for a data pattern extractor.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternExtractor.DecodedKey">
            <summary>
            Gets the decoded key.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternExtractor.GetValueFrom(System.String)">
            <summary>
            Extracts the value from the given raw data.
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternExtractor.EncodeInto(System.String,System.String)">
            <summary>
            Encodes the given value by the given template.
            </summary>
            <param name="rawDataTemplate"></param>
            <param name="valueToEncode"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternRecognizer">
            <summary>
            Interface for the data pattern recognizers.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternRecognizer.Accepts(System.String)">
            <summary>
            Checks if the given expression accept by the data pattern recognizer.
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternRecognizer.CreateRecognizableTemplate(System.String)">
            <summary>
            Creates a template that can be recognized by the data pattern recognizer.
            </summary>
            <param name="requestedPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternRecognizer.ValidForSearchCriteria(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternSearchCriteria)">
            <summary>
            Returns true if provided search criteria is matching the recognizer configuration
            </summary>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternRecognizer.ValidateForLength(System.Int32)">
            <summary>
            Returns true if the provided length is matching the recognizer length
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternRecognizer.ValidateForPrefixRange(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.DataPattern.DataPatternPrefixRange})">
            <summary>
            Returns true if the provided PrefixRange is matching the recognizer PrefixRange
            </summary>
            <param name="prefixRanges"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternRecognizer.PrefixRangeIsConflicting(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.DataPattern.DataPatternPrefixRange})">
            <summary>
            Returns true if the provided PrefixRange is an exact match of the recognizer PrefixRange
            </summary>
            <param name="prefixRanges"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternValidator">
            <summary>
            Represents an interface for a data pattern validator.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternValidator.Accepts(System.String)">
            <summary>
            Checks if the given raw data is valid to data pattern.
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternValidator.EncodeValidatationInto(System.String)">
            <summary>
            Encodes the validation into raw data.
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.ExternalConsumptionBarcodeDecodedData.PosId">
            <summary>
            Gets the Terminal Id according to the PosIDKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.ExternalConsumptionBarcodeDecodedData.StoreCode">
            <summary>
            Gets the StoreNumber according to the StoreCodeKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.ExternalConsumptionBarcodeDecodedData.TransactionDate">
            <summary>
            Gets the Originating Date according to the OriginatingDateKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.ExternalConsumptionBarcodeDecodedData.TransactionAmount">
            <summary>
            Gets the Transaction Amount according to the TransactionAmountKey.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.SelfScanTransactionDecodedData">
            <summary>
            Represents a transaction decoded data, derived from DecodedData base class.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.SelfScanTransactionDecodedData.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructs a new TransactionDecodedData instance, override the base constructor. 
            </summary>
            <param name="parsedData">Parsed data's dictionary</param>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.SelfScanTransactionDecodedData.TransactionSequenceNumberKey">
            <summary>
            Represents the transaction id. 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.SelfScanTransactionDecodedData.PosIdKey">
            <summary>
            Represents the pos id.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.SelfScanTransactionDecodedData.StoreCodeKey">
            <summary>
            Represents the store code key.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.SelfScanTransactionDecodedData.TransactionId">
            <summary>
            Gets the Transaction Id according to the TransactionIDKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.SelfScanTransactionDecodedData.PosId">
            <summary>
            Gets the Terminal Id according to the PosIDKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.SelfScanTransactionDecodedData.StoreCode">
            <summary>
            Gets the StoreNumber according to the StoreCodeKey.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DecodedData">
            <summary>
            Represents data decoded by Data Pattern.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DecodedData.DecodedDataType">
            <summary>
            Gets the type of the decoded data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DecodedData.DataPatternExternalId">
            <summary>
            Gets or sets the external id of the data pattern.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DecodedData.Item(System.String)">
            <summary>
            Gets the value from the decoded data associated with the specified data key. 
            </summary>
            <param name="dataKey">The data key of the value to get.</param>
            <returns>If the key was found, the value from the decoded data associated with the specified data key; otherwise, the default value of <see langword="string" /></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataKey"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DecodedData.TryGet(System.String,System.String@)">
            <summary>
            Gets the value from the decoded data associated with the specified data key.
            </summary>
            <param name="dataKey">The data key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value of  <see langword="string"/>. This parameter is passed uninitialized.</param>
            <returns>If the key was found, the value from the decoded data associated with the specified key; otherwise, the default value of <see langword="string" /></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataKey"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DecodedData.ContainsKey(System.String)">
            <summary>
            Determines whether the decoded data contains the specified key.
            </summary>
            <param name="key">The key to locate in the decoded data.</param>
            <returns>true if the decoded data contains a value with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DecodedData.ContainsAll(System.String[])">
            <summary>
            Determines whether the decoded data contains all the specified fields.
            </summary>
            <param name="requiredFields">The fields to locate in the decoded data.</param>
            <returns>True if the decoded data contains all the specified fields; otherwise, false.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TransactionDecodedData">
            <summary>
            Represents a transaction decoded data, derived from DecodedData base class.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TransactionDecodedData.TransactionIdKey">
            <summary>
            Represents the transaction id.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TransactionDecodedData.PosIdKey">
            <summary>
            Represents the pos id.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TransactionDecodedData.StoreCodeKey">
            <summary>
            Represents the store code key.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TransactionDecodedData.OriginatingDateKey">
            <summary>
            Represents the user originating date key.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TransactionDecodedData.CloseTransactionDate">
            <summary>
            Represents the user originating date key.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TransactionDecodedData.TransactionAmountKey">
            <summary>
            Represents the transaction amount key.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TransactionDecodedData.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructs a new TransactionDecodedData instance, override the base constructor. 
            </summary>
            <param name="parsedData">Parsed data's dictionary</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TransactionDecodedData.TransactionId">
            <summary>
            Gets the Transaction Id according to the TransactionIDKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TransactionDecodedData.PosId">
            <summary>
            Gets the Terminal Id according to the PosIDKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TransactionDecodedData.StoreCode">
            <summary>
            Gets the StoreNumber according to the StoreCodeKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TransactionDecodedData.TransactionDate">
            <summary>
            Gets the Originating Date according to the OriginatingDateKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TransactionDecodedData.TransactionAmount">
            <summary>
            Gets the Transaction Amount according to the TransactionAmountKey.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.AIElement">
            <summary>
            Represents a Application Identifier Element
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.ApplicationIdentifier">
            <summary>
            Represents a GS1 - Application Identifier
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.IApplicationIdentifiersLoader">
            <summary>
            Represents deep loader of application identifiers from xml into cache.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.IApplicationIdentifiersLoader.Load">
            <summary>
            Load the application identifiers.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.IGs1ApplicationIdentifiersDao">
            <summary>
             Represents the data access for GS1 Application Identifiers.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.IGs1ApplicationIdentifiersDao.AddOrUpdate(System.Collections.Generic.IList{Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.ApplicationIdentifier})">
            <summary>
            Adds a Application Identifiers to Database
            </summary>
            <param name="ais">list of Application Identifiers</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.IGs1ApplicationIdentifiersDao.Delete(System.String)">
            <summary>
            Delete existing Application Identifier
            </summary>
            <param name="id">Application Identifier id</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.IGs1ApplicationIdentifiersDao.GetAllApplicationIdentifier">
            <summary>
            Returns all existing Application Identifiers
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.IGS1Engine">
            <summary>
            Parse and validate input strings into GS1 DataBar barcodes
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.IGS1Engine.Invoke(System.String)">
            <summary>
            Parses the input string into a DataBar structurebarcode.
            </summary>
            <param name="inputBarcode">Scan string value (cleaned!).</param>
            <returns>parsing result</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.IGS1Engine.AddApplicationIdentifiers(System.Collections.Generic.IList{Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.ApplicationIdentifier})">
            <summary>
            Add new Application Identifier to engine
            </summary>
            <param name="ais">list of AIs</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.IGS1Engine.GetApplicationIdentifier(System.String)">
            <summary>
            Get specific Application Identifier
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.GS1.IGS1Engine.ClearAll">
            <summary>
            Delete all Application Identifier
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Exceptions.GeneralDataPatternException">
            <summary>
            Represents a general data pattern exception.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Exceptions.GeneralDataPatternException.#ctor(System.String)">
            <summary>
            Overrides the derived exception, in order to supply the relevant error message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Exceptions.GeneralDataPatternException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data. 
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDecoder">
            <summary>
            Recognize decodeable bar codes and handle decoding of barcodes into parts 
            </summary>
            <example>
            For a given barcode pattern:
            1) Recognizer - Length:10, init 999
            2) Content:
                a) Character 4 to 8 represents product code
                b) Character 9 to 10 represents quantity
            
            And for a given code: 9991234510
            Results of pattern will be:
            product code -  12345
            Quantity - 10
            </example>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDecoder.Decode(System.String)">
            <summary>
            Recognize and decode data patterns 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternConfiguration">
            <summary>
            Represents the DataPatternConfiguration class
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternConfiguration.ExternalId">
            <summary>
            External id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternConfiguration.DecodedDataType">
            <summary>
            Decoded data type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternConfiguration.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternConfiguration.GroupName">
            <summary>
            Group Name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternConfiguration.Recognizers">
            <summary>
            Collection of Data pattern recognizers.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternConfiguration.Validators">
            <summary>
            Collection of Data pattern validator.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternConfiguration.Extractors">
            <summary>
            Collection of Data pattern extractors.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternConfiguration.EncodingVariants">
            <summary>
            Collection of encoding variants.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternConfiguration.AllowedBusinessUnits">
            <summary>
            Collection of allowed business units
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternConfiguration.#ctor">
            <summary>
            Constructs a new DataPatternConfiguration instance.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternEncodingVariant">
            <summary>
            A prefix for encoding selector based on specified business action
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternEncodingVariant.BusinessAction">
            <summary>
            The specified business action
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternEncodingVariant.DefaultPrefix">
            <summary>
            The prefix to use for encoding
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternEncodingVariant.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternEncodingVariant.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternExtractorConfiguration">
            <summary>
            Represetns the DataPatternExtractorConfiguration class.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternExtractorConfiguration.#ctor">
            <summary>
            Constructs a new DataPatternExtractorConfiguration instance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternExtractorConfiguration.Type">
            <summary>
            Extractor type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternExtractorConfiguration.DecodedKey">
            <summary>
            Decoded key.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternExtractorConfiguration.DecoderName">
            <summary>
            Decoded name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternExtractorConfiguration.Parameters">
            <summary>
            Collection of extractor's parameters
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternRecognizerConfiguration">
            <summary>
            Represents a DataPatternRecognizerConfiguration class.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternRecognizerConfiguration.#ctor">
            <summary>
            Constructs a new DataPatternRecognizerConfiguration instance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternRecognizerConfiguration.Type">
            <summary>
            Recognizer type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternRecognizerConfiguration.DecoderName">
            <summary>
            Decoder name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternRecognizerConfiguration.Parameters">
            <summary>
            Collection of recognizer's parameters.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternValidatorConfiguration">
            <summary>
            Represents the DataPatternValidatorConfiguration class.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternValidatorConfiguration.#ctor">
            <summary>
            Constructs a new DataPatternValidatorConfiguration instance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternValidatorConfiguration.Type">
            <summary>
            Validation service type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternValidatorConfiguration.DecoderName">
            <summary>
            Decoder name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternValidatorConfiguration.Parameters">
            <summary>
            Collection of validation's parameters.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter">
            <summary>
            Represents a generic parameter class.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter.Key">
            <summary>
            Generic parameter's key.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter.Value">
            <summary>
            Generic parameter's value.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance for the GenericParameter class.
            </summary>
            <param name="key">Generic parameter key</param>
            <param name="value">Generic parameter value</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter.Equals(System.Object)">
            <summary>
            Checks if the given object equals to "this" generic parameter.
            </summary>
            <param name="obj">Given object to compare</param>
            <returns>True - objects are equal, False- object aren't equal</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter.Equals(Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter)">
            <summary>
            Checks if the given generic parameter equals to "this" generic parameter.
            </summary>
            <param name="other">Given generic parameter to compare</param>
            <returns>True - Generic parameters are equal, False- Generic parameters aren't equal</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter.GetHashCode">
            <summary>
            Returns the given parameter unique hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter.op_Inequality(Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter,Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter)">
            <summary>
            Overrides the != operator for the GenericParameter class.
            Checks if the generic paramters aren't equal according to their keys and values.
            </summary>
            <param name="p1">1st given generic parameter</param>
            <param name="p2">2nd given generic parameter</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter.op_Equality(Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter,Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter)">
            <summary>
            Overrides the == operator for the GenericParameter class.
            Checks if the generic paramters are equal according to their keys and values.
            </summary>
            <param name="p1">1st given generic parameter</param>
            <param name="p2">2nd given generic parameter</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DataPatternPrefixRange">
            <summary>
            A data pattern prefix range for recognition.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DataPatternPrefixRange.FromPrefix">
            <summary>
            Prefix string minimum value to match
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DataPatternPrefixRange.ToPrefix">
            <summary>
            Prefix string maximum value to match
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DataPatternPrefixRange.ExcludedPrefixes">
            <summary>
            Prefixes that should not be matched.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodingResult">
            <summary>
            Result of decode action executed on raw-data using a data-pattern
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodingResult.State">
            <summary>
            The result main state
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodingResult.DecodedData">
            <summary>
            The decoded data that was extracted from the raw data.
            reading this property will fail with <exception cref="T:System.InvalidOperationException">InvalidOperationException</exception>  
            in case the State is not DecodingState.Decoded.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodingState">
            <summary>
            Enumeration that represent the general status of a decoding action result.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodingState.NotDecoded">
            <summary>
            The raw data was recognized and validated, but could not be decoded.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodingState.Decoded">
            <summary>
            The raw data was decoded by the data-pattern. This is the success status.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodingState.NotRecognized">
            <summary>
            The raw data was not recognized.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodingState.NotValid">
            <summary>
            The raw data was recognized, but failed validation.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodingState.Failed">
            <summary>
            The data pattern failed to decode the raw data due to some other reason.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern">
            <summary>
             Data pattern interface
             Gives possibility to traverse barcodes according to data pattern settings 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.Configuration">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.ExternalId">
            <summary>
             External id of data pattern
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.DecodedDataType">
            <summary>
             Decoded data type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.GroupName">
            <summary>
             Group name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.Description">
            <summary>
             Description od data pattern
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.EncodingVariants">
            <summary>
             EncodingVariants
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.Recognizers">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.Validators">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.Extractors">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.AllowedBusinessUnits">
            <summary>
             AllowedBusinessUnits - Business Units for which data pattern should exist
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.Decode(System.String)">
            <summary>
            </summary>
            <param name="rawData">The data of the specific raw</param>
            <returns>The result of the decode operation</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.FindDefaultPrefix(System.String)">
            <summary>
            </summary>
            <param name="businessAction"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.Encode(Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DecodedData,System.String)">
            <summary>
            </summary>
            <param name="decodedData"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.ComplyTo(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            </summary>
             Checks whether the provided environment is contained in this environment, both hierarchy- and touchpoint group-wise.
            <param name="businessUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern.GetMaxLengthPrefix(System.String)">
            <summary>
            Get the maximum prefix match for the given rawData.
             for example - if we got barcode 123456, and it could be match for prefix 123 and 1234. the max match is 4 (the length of 1234).
            </summary>
            <param name="rawData">The data of the specific raw</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDao">
            <summary>
            Provides data access functionality regarding data pattern
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDao.Save(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern)">
            <summary>
            save data pattern
            </summary>
            <param name="dataPattern"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDao.Update(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern)">
            <summary>
            update data pattern
            </summary>
            <param name="dataPattern"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDao.Delete(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern)">
            <summary>
            delete data pattern
            </summary>
            <param name="dataPattern"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDao.GetDataPattern(System.String)">
            <summary>
            get data pattern by external id
            </summary>
            <param name="externalId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDao.FindDataPatterns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            find data patterns by external id's
            </summary>
            <param name="externalIdFilter">external id's to search for</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDao.FindAllDataPatterns(System.String)">
            <summary>
            find data patterns having specific decoded data type
            </summary>
            <param name="decodedDataType">decoded data type to search for</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDao.FindDataPatterns(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Find data patterns by external id's and specific decoded data type
            </summary>
            <param name="externalIdFilter">data patterns external id's to search for</param>
            <param name="decodedDataType">decoded data type to search for</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDao.FindAllDataPatterns">
            <summary>
            find all data patterns
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternSearchCriteria">
            <summary>
            Represents data pattern search criteria
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternSearchCriteria.ExternalIds">
            <summary>
            External Ids
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternSearchCriteria.DecodedDataType">
            <summary>
            DecodedDataType
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternSearchCriteria.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternSearchCriteria.PrefixRanges">
            <summary>
            PrefixRanges
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternSearchCriteria.SpecificDataPatternValue">
            <summary>
            SpecificDataPatternValue
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternSearchCriteria.AllowedBusinessUnits">
            <summary>
            AllowedBusinessUnits
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Cache.ISessionWrapper.TrimStreamByMinId(System.String,System.Int64)">
            <summary>
            Trims entities with a lower ID than the given minId
            </summary>
            <param name="streamName">The name of the stream to trim</param>
            <param name="mindId">Lower than which ID to trim</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Cache.ISessionWrapper.TrimStreamByOlderThan(System.String,System.DateTime)">
            <summary>
            Trim entities with a UNIX timestamp ID lower than that of the given dates UNIX timestamp
            </summary>
            <param name="streamName">The name if the stream to trim</param>
            <param name="olderThan">Lower than which dates UNIX timestamp to trim</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Cache.ISessionWrapper.TrimStreamByMaxLen(System.String,System.Int32)">
            <summary>
            Trim oldest entries from the stream to have no more than maxLen enries in the stream
            </summary>
            <param name="streamName">The name if the stream to trim</param>
            <param name="maxLen">Max number of entries in the stream</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.IPublishingServerState">
            <summary>
            Don't do a direct concrete of this interface, use child interfaces.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IPublishingServerState.IsActive">
            <summary>
            Is valid on this machine (meaning either no exclusive lock, or the local publisher has the lock)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IPublishingServerState.PublishingState">
            <summary>
            When publishing state differs from "Online" there's no direct publish
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.DateRangeCriterion">
            <summary>
            use for filter results by range of dates
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.IdCriterion">
            <summary>
            use for filter results by message id(guid)
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage">
            <summary>
            Wrapping object for the QueueMessage with its exception.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage.OriginalQueueMessage">
            <summary>
            Original message
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage.UniqueId">
            <summary>
            PK for the errors table
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage.Exception">
            <summary>
            Exception thrown by the last attempt
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage.CreationTime">
            <summary>
            Creation time of the original object (used in searching by date)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage.Retries">
            <summary>
            Number of retries performed (can be larger than max allowed!)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage.MsgId">
            <summary>
            Message Identifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage.CreationTime">
            <summary>
            Message creation date and time
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage.Payload">
            <summary>
            Entity serialized as XML.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage.BinaryPayload">
            <summary>
            Entity serialized as Binary payload.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage.Entity">
            <summary>
            Entity name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage.Attempts">
            <summary>
            Number of retry attempts to perform before turning the message to "poisoned"
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage.Header">
            <summary>
            Holds message relevant data.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessageEnreacher`1">
            <summary>
            Used to place message relevant data before publishing message to queue mechanism
            </summary>
            <typeparam name="TKey">Type of message to be enriched</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessageEnreacher`1.Enreach(System.Collections.Generic.IEnumerable{System.Tuple{`0,Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage}})">
            <summary>
            Newly created messages with relevant original objects.
            </summary>
            <param name="originalContentWithMessages">Tuple of original object and newly created message</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessageModificator`1">
            <summary>
            Used to modify the message before being passed to handlers.
            </summary>
            <typeparam name="TKey">Type of the content placed inside the message this modifier is interested to change.</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessageModificator`1.Modify(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Messages that will be passed to handlers to be modified.
            </summary>
            <param name="messages"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.QueueErrorMessagesPagingSpecification">
            <summary>
            Use for paging criteria that applies skip and take (page) on the error message lookup results
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.QueueErrorMessagesPagingSpecification.Skip">
            <summary>
            skip to row number 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.QueueErrorMessagesPagingSpecification.Take">
            <summary>
            result size
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Redis.IRedisCacheTrimJobConfiguration.IntervalHours">
            <summary>
            Scheduled interval for job, to trim old entities from the Redis entity stream.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Redis.IRedisCacheTrimJobConfiguration.EntryLifespanHours">
            <summary>
            How long should entries last in the Redis entity stream cache.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Redis.IRedisCacheTrimJobConfiguration.MaxEntries">
            <summary>
            Down to how many entries should the stream be trimmed to
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IBulkExecutionContext">
            <summary>
            Context for pessimistic execution
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IBulkExecutionContext.ServiceName">
            <summary>
            Name of executed service
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IBulkExecutionContext.RequestDescriptor">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IContractTypeDescriptor">IContractTypeDescriptor</see> instance that describes stracture of original request including information about 
            contract type, header and body of request.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IBulkExecutionContext.Results">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IContractTypeDescriptor">ServiceExecutionResults</see> object that contains information about current service execution result and
            also results history of previous executions from current bulk
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IBulkExecutionContext.ExecuteWithSubContext(System.Collections.Generic.IEnumerable{System.Object},Retalix.StoreServices.Model.Infrastructure.Service.IMapper)">
            <summary>
            Returns sequence of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.OperationExecutionResults">OperationExecutionResults</see> objects as a result of service execution for <param name="chunk"/>
            with new context that is derived from original context
            </summary>
            <param name="chunk"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IBulkPessimisticExecutionStrategy">
            <summary>
            Stratagy that determines what should be done after optimistic bulk execution was failed.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IBulkPessimisticExecutionStrategy.Execute(System.Collections.Generic.IEnumerable{System.Object},Retalix.StoreServices.Model.Infrastructure.Service.IBulkExecutionContext,Retalix.StoreServices.Model.Infrastructure.Service.IMapper)">
            <summary>
            Returns sequence of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.OperationExecutionResults">OperationExecutionResults</see> objects as a result of pessimistic service execution 
            for <param name="chunk"/>
            </summary>
            <param name="chunk"></param>
            <param name="context"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IMappingFactory`2">
            <summary>
            A special case of mapper that also create the target instance.
            Only one instance of this factory is used, based on best match,
            and registration priority.
            This mapper should be implemented only for target types that 
            need to be created based on the source or context state,
            like: XmlElement or implementation of of ExtensibleEnumBase.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IMappingFactory`2.GetMappedInstance(`0,Retalix.StoreServices.Model.Infrastructure.Service.IMappingContext)">
            <summary>
            Get or create instance of target, based on the provided source and context instance.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkBeginObserver">
            <summary>
            Implementers of this interface may intervene during the life-cycle of the unit-of-work that encompasses service-execution.
            </summary>
            <remarks>
            There is no guarantee that a specific implementer of this interface will be called for any of the handled events,
            nor is there any guarantee of the order in which implementers are called.
            If an implementer of an event throws an exception, invocation of remaining observers does not continue.    
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkBeginObserver.OnBegin(Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork)">
            <summary>
            Occurs after the unit-of-work has started.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkCommittedObserver">
            <summary>
            Implementers of this interface may intervene during the life-cycle of the unit-of-work that encompasses service-execution.
            </summary>
            <remarks>
            Since this observer is run after the UOW has been committed and therefore failures will not cause a rollback, 
            each observer will run in isolation with a new UOW and any exception thrown by an observer will be caught and logged and the processing will continue.
            The UOW that the observer is run in will not notify observers to prevent endless recursion.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkCommittedObserver.OnCommitted(Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork)">
            <summary>
            Occurs after the unit-of-work has been committed.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkCompleteObserver">
            <summary>
            Implementers of this interface may intervene during the life-cycle of the unit-of-work that encompasses service-execution.
            </summary>
            <remarks>
            There is no guarantee that a specific implementer of this interface will be called for any of the handled events,
            nor is there any guarantee of the order in which implementers are called.
            If an implementer of an event throws an exception, invocation of remaining observers does not continue.    
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkCompleteObserver.OnComplete(Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork)">
            <summary>
            Occurs before the unit-of-work has completed successfully.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkFailedObserver">
            <summary>
            Implementers of this interface may intervene during the life-cycle of the unit-of-work that encompasses service-execution.
            </summary>
            <remarks>
            There is no guarantee that a specific implementer of this interface will be called for any of the handled events,
            nor is there any guarantee of the order in which implementers are called.
            If an implementer of an event throws an exception, invocation of remaining observers does not continue.    
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkFailedObserver.OnFailure(Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork)">
            <summary>
            Occurs after the unit-of-work has been rolled back.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkFailingObserver">
            <summary>
            Implementers of this interface may intervene during the life-cycle of the unit-of-work that encompasses service-execution.
            </summary>
            <remarks>
            There is no guarantee that a specific implementer of this interface will be called for any of the handled events,
            nor is there any guarantee of the order in which implementers are called.
            If an implementer of an event throws an exception, invocation of remaining observers does not continue.    
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkFailingObserver.OnBeforeRollback(Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork)">
            <summary>
            Occurs in case of failure before the unit-of-work has been rolled back.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IMappingDiscriminator`2">
            <summary>
            Used to discriminate a mapping of source type for target type
            using the source instance and mapping context.
            </summary>
            <typeparam name="TSource">The source type</typeparam>
            <typeparam name="TTarget">The known type</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IMappingDiscriminator`2.HasOpinion(`0,Retalix.StoreServices.Model.Infrastructure.Service.IMappingContext)">
            <summary>
            When implemented, will be true when the source and context 
            instance state should be mapped.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IMappingDiscriminator`2.SubType">
            <summary>
            Return the target type used to identified the correct mapper.
            This can be the same as typeof(TTarget), or a sub-class/extended-interface 
            to allow a more specific mapper.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IFactory">
            <summary>
            A factory facility to be used to get an instance of abstract object, or an object its' implementation is not unknown in some way.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IFactory`1">
            <summary>
            Allow definition of basic factory of an abstract implementation.
            This will be used by the <exception cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IFactory">IFactory</exception> to create and instance, if exists.
            This should be only implemented, and code that needs factory for T should call: IFactory.GetInstance'T()
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IErrorFormattingService`2">
            <summary>
            Represents and <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IService" /> That formats its own error responses
            </summary>
            <typeparam name="TRequest">The type of request this service knows how to process</typeparam>
            <typeparam name="TResponse">The type of the response this service will return</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IErrorFormattingService`2.FormatErrorResponse(`0,System.Exception)">
            <summary>
            Format a custom error response
            </summary>
            <param name="request">The original request received</param>
            <param name="exception">The exception that was caught</param>
            <returns>A valid TResponse with an error message</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IMapper`2">
            <summary>
            Used by service infrastructure to map incoming contract type to service request type and from the service response type back to the contract type
            </summary>
            <typeparam name="TSource">Contract or model depending on the direction</typeparam>
            <typeparam name="TTarget">Contract or model depending on the direction</typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IConditionalMapper`2">
            <summary>
            A mapper that will only be run if the CanMap returns true
            </summary>
            <typeparam name="TSource">Contract or model depending on the direction</typeparam>
            <typeparam name="TTarget">Contract or model depending on the direction</typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IMapper">
            <summary>
            Maps A to B using registered mappers and factories
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IService`2">
            <summary>
            A sinlge responsibility command in the service layer
            </summary>
            <typeparam name="TRequest">The type of request this service knows how to process</typeparam>
            <typeparam name="TResponse">The type of the response this service will return</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IService`2.Execute(`0)">
            <summary>
            The main service operation
            </summary>
            <param name="request">The request recieved from the client</param>
            <returns>The service response</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IService">
            <summary>
            A marker interface all service should implement
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IBusinessService">
            <summary>
            Command in the business-service layer to implement a single Business-Service execution.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest">
            <summary>
            Represents the data of a request to a business service.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest.Content">
            <summary>
            A <see cref="T:System.Xml.XmlDocument"/>, xml object or string, representing the content of the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest"/>.
            </summary>
            <remarks>
            It is recommended to use the AsXmlString method to look into the request content.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest.AsXmlString">
            <summary>
            Returns an xml string representation of the <see cref="P:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest.Content"/> of the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest.GetRequestStream">
            <summary>
            Returns the original incoming request stream
            </summary>
            <returns>Request stream</returns>
            <remarks>Note: the stream may be an HttpRequest Stream which can not seek</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest.GetRequestObject``1">
            <summary>
            Returns a deserialized version of the xml.
            </summary>
            <remarks>TRequest must be Serializable and must represent the incoming xml correctly</remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentResponse">
            <summary>
            Represents the data of a response returned by a business service.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentResponse.Response">
            <summary>
            The response object containing the data of the response.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentResponse.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Writes the <see cref="P:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentResponse.Response"/> data to <paramref name="writer"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentResponse.WriteToString">
            <summary>
            Returns the <see cref="P:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentResponse.Response"/> data as a string in xml format.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IExtendable">
            <summary>
             Represents extendable object.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IExtendable.AdditionalInfo">
            <summary>
             Gets the additional info container.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IWarmUpService">
            <summary>
            do any pre loading work for service
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IWarmUpService.WarmUp(Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest)">
            <summary>
            do warm up for service
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BPM.IStateMachineLogic">
            <summary>
            The following represents basic state machine functionality used in <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.BusinessProcess">BusinessProcess</see> to serve business needs.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BPM.IStateMachineLogic.RunActivities(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.BPM.IActivity},Retalix.StoreServices.Model.Infrastructure.BPM.IActivityExecutionContext,Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcess)">
            <summary>
            Executes provided <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.IActivity"> activity</see> list, with given <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.IActivityExecutionContext">ActivityExecutionContext</see>.
            </summary>
            <param name="activities"><see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.IActivity">Activity</see> list that should be executed.</param>
            <param name="activityInputData"><see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.IActivity">Activity</see> execution context</param>
            <param name="owningBusinessProcess">Represents owning <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcess">business process</see>.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BPM.IStateMachineLogic.UpdateTranitionHistory(System.Collections.Generic.ICollection{Retalix.StoreServices.Model.Infrastructure.BPM.TransitionHistory},Retalix.StoreServices.Model.Infrastructure.BPM.Transition,Retalix.StoreServices.Model.Infrastructure.BPM.TransitionContext)">
            <summary>
            Updates <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.TransitionHistory">transaction</see> history by new <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.Transition"> transition</see> and it's 
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.TransitionContext">transition context</see>
            </summary>
            <param name="transitionHistories">Existing <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.TransitionHistory">transitions</see> history.</param>
            <param name="transition">New <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.Transition">transition</see> that should be added.</param>
            <param name="context">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.TransitionContext">context</see> in which transition happened.</param>
            <returns>Updated <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.TransitionHistory">transitions</see> history</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BPM.IStateMachineLogic.GetTransition(Retalix.StoreServices.Model.Infrastructure.BPM.State,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.BPM.Transition},System.String)">
            <summary>
            Provides available <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.Transition">transition</see> which matches signal at current <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.State">state</see> of
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.BusinessProcess">BusinessProcess</see>
            </summary>
            <param name="currentState">Current <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.State">state</see>.</param>
            <param name="transitions">Available <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.Transition">transition</see> collection of current 
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.BusinessProcess">business process</see></param>
            <param name="signal">Signal that was passed to machine</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.Transition">Transition</see> which matches current state and signal.</returns>
            <remarks>Possible null result in case of no transition found.</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BPM.IStateMachineLogic.AvailbleNextStates(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.BPM.Transition},Retalix.StoreServices.Model.Infrastructure.BPM.State)">
            <summary>
            Returns <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.State">state</see> enumeration that can be reached from current <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.State">state</see>
            </summary>
            <param name="transitions">Available <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.Transition">transition</see> collection of current 
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.BusinessProcess">Business process</see></param>
            <param name="currentState">Current <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.State">state</see>.</param>
            <returns>Possible to reach <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.State">state</see> enumeration</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BPM.IStateMachineLogic.GetSignalForState(Retalix.StoreServices.Model.Infrastructure.BPM.State,System.Collections.Generic.IList{Retalix.StoreServices.Model.Infrastructure.BPM.Transition},System.String)">
            <summary>
            Determines which signal should be passed to <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.BusinessProcess">business process</see> to reach
            some state.
            </summary>
            <param name="currentState">Current <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.State">state</see>.</param>
            <param name="transitions">Available <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.Transition">transition</see> collection of current 
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.BusinessProcess">Business process</see></param>
            <param name="targetStateName">Represents name of state that should be reached.</param>
            <returns>Signal that should be passed if exists.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BPM.ISearchEvaluatorStrategy`1">
            <summary>
            Interface ISearchEvaluatorStrategy
            </summary>
            <typeparam name="TKey">The type of the T key.</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BPM.ISearchEvaluatorStrategy`1.EvaluateCriteria">
            <summary>
            Evaluates the criteria.
            </summary>
            <param name="currentSession">The current session.</param>
            <returns>IEnumerable{IBusinessProcess}.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BPM.State">
            <summary>
            Represents business process state
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BPM.State.Name">
            <summary>
            Gets or sets state's name
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BPM.IActivity">
            <summary>
            This interface represents a business process activity with generic support
            </summary>
            <typeparam name="T">Paylaod type</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BPM.IActivity.Execute(Retalix.StoreServices.Model.Infrastructure.BPM.IActivityExecutionContext,Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcess)">
            <summary>
            Execute the activity with the given process payload
            </summary>
            <param name="activityExecutionContext"></param>
            <param name="owningBusinessProcess"></param>
            <param name="payload">The process payload</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcess.ProcessId">
            <summary>
            Unique entity identifier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcess.CurrentState">
            <summary>
            Process current state
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcess.InitialState">
            <summary>
            Gets or sets the process initial state
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcess.ReferencedObject">
            <summary>
            the reference data needed to identify the object that is connected to the process 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcess.CurrentContext">
            <summary>
            THe last transition context that effected the process
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcess.CreationContext">
            <summary>
            the context at the time of the creation of the process
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcess.Transitions">
            <summary>
            Gets or sets the process transitions
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcess.Signal(System.String,Retalix.StoreServices.Model.Infrastructure.BPM.IActivityExecutionContext)">
            <summary>
            Signal process, the process will move to another state
            and run activities according to its definitions
            </summary>
            <param name="signalType"></param>
            <param name="activityInputData"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcess.AdditionalData">
            <summary>
            Gets or sets the dictionary that holds all additional data for the business process.
            the data that is in the dictionary needs to be serializable by json.net
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcessDao.GetById(System.Guid)">
            <summary>
            Gets business process by its Id
            </summary>
            <param name="businessProcessId">Process Id</param>
            <returns>Business process</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcessDao.FindBySearchCriteria``1(Retalix.StoreServices.Model.Infrastructure.BPM.ISearchEvaluatorStrategy{``0})">
            <summary>
            Finds the by search criteria.
            </summary>
            <typeparam name="TSearchCriteria">The type of the T search criteria.</typeparam>
            <param name="strategyEvaluator">The strategy evaluator.</param>
            <returns>IEnumerable{IBusinessProcess}.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcessDao.Delete(Retalix.StoreServices.Model.Infrastructure.BPM.IBusinessProcess)">
            <summary>
            Deletes a business process
            </summary>
            <param name="process">the business process to delete</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BPM.Transition">
            <summary>
             Represents transition of process.
            When the process gets a signal coresponds to its current state
            it runs the corresponding activities and moe to the corresponding
            target state
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BPM.Transition.SourceState">
            <summary>
            Gets pr sets the source state
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BPM.Transition.TargetState">
            <summary>
             Gets or sets the target state
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BPM.Transition.SignalType">
            <summary>
            Gets or sets the signal type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BPM.Transition.Activities">
            <summary>
               Types of activities to run
               </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageMovableDao">
            <summary>
            Represents a data access object for <see cref="T:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage">IOLAMessage</see>.
            </summary>
            <remarks>
            The IOLAMessageMovableDao provides the following services:
            <list type="bullet">
            <item>
            <description>Saves a OLAMessage entity</description>
            </item>
            <item>
            <description>Deletes an <b>existing</b> OLAMessage entity</description>
            </item>
            <item>
            <description>Gets an <b>existing</b> OLAMessage entity by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageSearchCriteria">Criteria</see></description>
            </item>
            <item>
            <description>Loads all the <b>existing</b>OLAMessage</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageMovableDao.Save(Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage)">
            <summary>
            Saves an entity OLAMessageReturnCodeMapping.
            </summary>
            <param name="olaMessage">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage">IOLAMessage</see> to save</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageMovableDao.Delete(Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage)">
            <summary>
            Deletes an Online Authorization Message
            </summary>
            <param name="olaMessage">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage">IOLAMessage</see> to delete</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageMovableDao.Get(Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageSearchCriteria)">
            <summary>
            Gets an OLAMessage according to the criteria.
            </summary>
            <param name="criteria">The message configured for the specific Target Provider and Return Code with a combination of Retail Segments</param>
            <remarks>The combination between the TargetProvider, ReturnCode and the TouchPointGroup is unique.</remarks>
            <returns>
            A <see cref="T:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage">OLAMessage</see> that matches a mapping between
            the external provider's result code and the R10 configured message.
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageMovableDao.LoadAll">
            <summary>
            Loads all OLAMessageResultCodeMapping
            </summary>
            <returns>A collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage">OLAMessages</see></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage.Ik">
            <summary>
            The object unique identifier. Must be supplied for Delete/Update actions
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage.TargetProviderKey">
            <summary>
            Represents the external provider's identifier.
            </summary>
            <remarks>The ProviderKey and the ProviderResultCode combination represents the entity's unique key</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage.ReturnCode">
            <summary>
            The external provider return code.
            </summary>
            <remarks>The TargetProviderKey, the ReturnCode and Retail Segment combination represent the entity's unique key</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage.TouchPointGroups">
            <summary>
            The OLA message is available for and can be configured for.    
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage.BusinessUnits">
            <summary>
            The OLA message is available for and can be configured for.    
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage.MessageFk">
            <summary>
            The message associated with the occurrence of the combination between the TargetProviderKey and the ReturnCode.
            </summary>
            <remarks>
            This message may be displayed when the result code is received. <br></br>
            For example, assuming the external provider key is 'CCV' and its result after making a payment is '02',
            which may mapped to R10 EPS result code as 'Success'.
            This combination may be mapped to a message : "Payment succeeded, please take your receipt".
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageSearchCriteria">
            <summary>
            Specifies possible search criteria keys for retrieving OLA 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageSearchCriteria.Ik">
            <summary>
            Online Authorization Message unique identifier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageSearchCriteria.TargetProviderKey">
            <summary>
            Target Provider is an external provider identification
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageSearchCriteria.ReturnCode">
            <summary>
            Response specific code, supplied by an external provider
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageSearchCriteria.TouchPointGroupId">
            <summary>
            Collection of Retail Segments, for which the specific Online Authorization message can be configured
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageSearchCriteria.BusinessUnitId">
            <summary>
            Collection of Business units, for which the specific Online Authorization message can be configured
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageSearchCriteria.Message">
            <summary>
            Message Id existing in the system, and configured for the code specific response, returned from an external provider
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageValidator">
            <summary>
            Validates the incoming request for the OLAMessage Maintenance Service, according to the business requirements
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessageValidator.Validate(System.Collections.Generic.IList{Retalix.StoreServices.Model.Infrastructure.OLAMessage.IOLAMessage},System.String)">
            <summary>
            Validates incoming request OLA messages before saving, and the supporting action
            </summary>
            <param name="olaMessages">Online Authorization Messages</param>
            <param name="action">Supported Action</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Masking.IMaskingConfiguration.ContractType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Masking.IMaskingConfiguration.MaskSubject">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Masking.IMaskingConfiguration.PatternToSearch">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Masking.IMaskingConfiguration.MaskRule">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Masking.IMaskingConfiguration.MaskPriority">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Masking.IMaskingConfigurationMovableDao.LoadAll">
            <summary>
            Loads all masking configurations
            </summary>
            <returns>A collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Masking.IMaskingConfiguration">masking configurations</see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.Criterion.AuthenticationMethodCriterion">
            <summary>
            Used to get an <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit">Login Audit</see> by authentication method.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.Criterion.AuthenticationMethodCriterion.AuthenticationMethod">
            <summary>
            Holds the login authentication method of the login attempt
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.Criterion.IdentityIdSpecification">
            <summary>
            Used to get an <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit">Login Audit</see> by Identity Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.Criterion.IdentityIdSpecification.IdentityId">
            <summary>
            Identity Id of the identity to get.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.Criterion.LoginTimeStampLessCriterion">
            <summary>
            Used to get an <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit">Login Audit</see> when login time stamp less then request.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.Criterion.LoginTimeStampLessCriterion.LoginTimeStamp">
            <summary>
            Represents login attempt point in time
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.Criterion.TakeLoginAuditSpecification">
            <summary>
            Use for max result size criteria that applies take on the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit">login audit</see> lookup results
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.Criterion.TakeLoginAuditSpecification.Take">
            <summary>
            result size
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.FailedLoginAttemptsId">
            <summary>
            Failed Login Attempts composit id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.FailedLoginAttemptsId.IdentityId">
            <summary>
            the id of the related <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IdentityState">identity state</see>
            </summary>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.FailedLoginAttemptsId.AuthenticationMethod">
            <summary>
            aouthentication method of the failed login attempts for example Pin, Password or any other aouthentication method that extension may implement
            </summary>       
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IFailedLoginAttempts">
            <summary>
            represent the failed login attempts for an identity in a authentication method
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IFailedLoginAttempts.Id">
            <summary>
            Failed Login Attempts composit id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IFailedLoginAttempts.AuthenticationMethod">
            <summary>
            aouthentication method of the failed login attempts for example Pin, Password or any other aouthentication method that extension may implement
            </summary>       
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IFailedLoginAttempts.FailedAttempts">
            <summary>
            number of failed login attempts for this authentication method
            </summary>        
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IdentityState">
            <summary>
            persist entity that represents the state of the identity (i.e Active , Lock or Disable )
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IdentityState.Identity">
            <summary>
            the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity">identity</see> that corresponds to the current state
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IdentityState.State">
            <summary>
            the state of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity">identity</see>
            represent the current state which the core support
            Active - the user is active 
            Lock - the user is locked and cannot login
            Disable - the user is disabled
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IdentityState.LoginTimeStamp">
            <summary>
            the last success login date time of the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity">identity</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IdentityState.UpdateTimeStamp">
            <summary>
            the last update time of the identity state
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IdentityState.LoginTokenId">
            <summary>
            represent unique token for login request to keep identity state synchronized between all R10 server level
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IdentityState.FailedLoginAttempts">
            <summary>
            failed login 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IdentityState.Get``1">
            <summary>
            get instance of IFailedLoginAttempts by type
            if not exists create new instance and add it to FailedLoginAttempts
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IIdentityStateDao.GetByIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets all the identity states according to a given list of identity ids's using one call to the db
            </summary>
            <param name="identityIdsList">List of identity ids</param>
            <returns>List of IdentityStae</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IIdentityStateDao.GetWithLock(System.String)">
            <summary>
            provides the identity state for login with new token.
            Once called, a new token id will be generated on the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IdentityState">identity state</see> 
            </summary>
            <param name="identityId"></param>
            <returns>the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.IdentityState">identity state</see> for the given identity id with new login lock token id </returns>
            <remarks>that methode supported by access service call</remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit">
            <summary>
            Represents information about single login request on R10
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit.IdentityId">
            <summary>
            the identity id of the login request
            </summary>		
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit.AuthenticationMethod">
            <summary>
            Holds the login authentication method of the login attempt
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit.State">
            <summary>
            the state of the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity">identity</see>, when the audit is created
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit.SuccessLogin">
            <summary>
            Holds the login state of the login attempt
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit.LoginTimeStamp">
            <summary>
            Represents login attempt point in time
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAuditDao">
            <summary>
            Represents the ability to manage persistence of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit"/> DTO
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAuditDao.Insert(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit)">
            <summary>
            Ability to insert new <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit"/> DTO
            </summary>
            <param name="loginAudit">Persist <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit"/> DTO</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAuditDao.FindLast(System.String,System.String,System.Int32)">
            <summary>
            Ability to find last AuditLogin<see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit"/> DTO's
            </summary>
            <param name="identityId">The entity that requested the login</param>
            <param name="authenticationMethod">The authentication method type of the entity that requested the login</param>
            <param name="allowedLoginAttempts">The allowed login attempts for the entity that requested the login</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAuditDao.Delete(System.String)">
            <summary>
            Delete all LoginAudits for given identity
            </summary>
            <param name="identityId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAuditDao.Find``1(Retalix.StoreServices.Infrastructure.DataAccess.IQuery{Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit,Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit,``0})">
            <summary>
            Find <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit">login audits</see> according to the query.
            </summary>
            <typeparam name="TRole">role query</typeparam>
            <param name="query">A query which returns <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IdentityState.ILoginAudit">Login Audits</see> according to its fetching strategy.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IPasswordStrengthValidator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IPasswordStrengthValidator.Validate(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <param name="userName"></param>
            <param name="strongPasswordNeeded"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IAuthenticationMethodPolicy">
            <summary>
             Authentication Method definition
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IAuthenticationMethodPolicy.RetailSegment">
            <summary>
             AuthenticationMethod refer to RetailSegment
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IAuthenticationMethodPolicy.AuthenticationMethods">
            <summary>
            Default Authentication Method for TouchPointGroup
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IAuthenticationMethodPolicy.SessionTimeout">
            <summary>
            Timeout defined for the TouchPointGroup
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IAuthenticationMethodPolicyDao">
            <summary>
             AuthenticationMethodDao
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IAuthenticationMethodPolicyDao.Get(Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
             retrieve IAuthenticationMethod by retail segment
            </summary>
            <param name="retailSegment"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IAuthenticationMethodPolicyDao.Save(Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IAuthenticationMethodPolicy)">
            <summary>
            </summary>
            <param name="authenticationMethodPolicy"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IAuthenticationMethodPolicyDao.Delete(Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IAuthenticationMethodPolicy)">
            <summary>
            </summary>
            <param name="authenticationMethodPolicy"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IAuthenticationMethodPolicyDao.GetAllAuthenticationMethod">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.ICredentialsAuthenticationPolicy">
            <summary>
             Credentials Authentication Policy
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.ICredentialsAuthenticationPolicy.PolicyId">
            <summary>
             Policy Id 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.ICredentialsAuthenticationPolicy.PasswordExpirationDays">
            <summary>
             Number of expiration days to a new Password
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.ICredentialsAuthenticationPolicy.AuthenticationPolicyDisplayName">
            <summary>
             Authentication Policy Display Name
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IIdmAuthenticationConfiguration">
            <summary>
            Represents configuration for authentication
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IIdmAuthenticationConfiguration.Id">
            <summary>
            Id of the authentication configuration
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IIdmAuthenticationConfiguration.Office">
            <summary>
            office authentication defined
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IIdmAuthenticationConfiguration.DefaultAuthenticationMethodR10">
            <summary>
            the default Retalix authentication method defined
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IIdmAuthenticationConfiguration.DefaultSessionTimeout">
            <summary>
            the default session timeout defined
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IPasswordAuthenticationPolicy">
            <summary>
             Password Authentication Policy
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IPasswordAuthenticationPolicy.StrongPassword">
            <summary>
             Indicates if password needs to be Strong password
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IPinAuthenticationPolicy">
            <summary>
             Pin Authentication Policy
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Configuration.IPinAuthenticationPolicy.AlphanumericCharacters">
            <summary>
             Indicates if pin can contain Alphanumeric Characters
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ICredentialFactory">
            <summary>
            Responsible for creating <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials">ICredentials</see> according
            to the context in which the current user originally logged in.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ICredentialFactory.Create(System.String,System.String)">
            <summary>
            Returns an <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials">ICredentials</see> object for the user identified
            by <paramref name="username"/> and the data represented by <paramref name="secret"/>.
            </summary>
            <param name="username">The username of the requested credentials.</param>
            <param name="secret">
            An object representing the identification data for the requested user,
            matching the authentication  method that was used to log in to the server.
            </param>
            <returns>
            An <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials">ICredentials</see> object for the user identified
            by <paramref name="username"/> and the data represented by <paramref name="secret"/>.
            </returns>
            <remarks>
            In practice, the actual <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials">ICredentials</see> type returned
            will be determined by how the current user logged in to this server.
            Therefore <paramref name="secret"/> must match this authentication method. E.g.,
            If the user logged in with a PIN, secret should contain his PIN.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentityProvider">
            <summary>
            A provider per identity type to retieve identites by id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentityProvider.Name">
            <summary>
            The type of identity this provider can get
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentityProvider.GetIdentity(System.String)">
            <summary>
            Get the specified identity by id
            </summary>
            <param name="identityId">The IdentityId</param>
            <returns>The specific sub type of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity"/> this provider supplies</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissions">
            <summary>Specifies the permissions of a specific role to apply various types of user configuration for other roles.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissions.Id">
            <summary>The identity of this configuration
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissions.BusinessActivity">
            <summary>Specifies the business activity that these permissions allow the user to configure.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissions.AuthorizedRole">
            <summary>The Role that has been authorized to apply the permitted configurations.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissions.ConfigurableRoles">
            <summary>A list of the roles for whom Users with the Authorized Role are able to configure.
            An empty list indicates that users with that role have permissions for all roles.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissionsDao.Save(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissions)">
            <summary>
            Saves a new <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissions"/> or updates an existing one.
            </summary>
            <param name="permissions">The object to be saved or updated.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissionsDao.Find(Retalix.StoreServices.Model.Infrastructure.Security.Identity.UserConfigurationPermissionsSearchCriteria)">
            <summary>
            Gets a collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissions"/> by a specific criteria
            </summary>
            <param name="searchCriteria"></param>
            <returns>If found, collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissions"/> is returned.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissionsDao.GetAll">
            <summary>
            Gets all device types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissionsDao.Delete(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissions)">
            <summary>
            Deletes a <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IUserConfigurationPermissions"/> assignment permissions if exist
            </summary>
            <param name="permissions">The object to delete</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.RoleSearchCriteria">
            <summary>Represents criteria used by <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDao">IRoleDao</see> to query the repository for matching <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole">roles</see>.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Security.Identity.RoleSearchCriteria.BusinessActivity">
            <summary>Indicates that the role must contain permissions for the specified <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivity">business activity</see></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Extenders.ILoginObserver">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Extenders.ILoginObserver.OnSaveUser(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="touchPoint"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Extenders.ILoginObserver.OnLoggedOff(System.String,System.String)">
            <summary>
            </summary>
            <param name="loginName"></param>
            <param name="touchpointId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Extenders.ILoginObserver.OnTrainingModeOff">
            <summary>
            Method called when there was a switch from Training mode to Regular mode 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Extenders.ISingleSignOnIndicator">
            <summary>
             Indicates whether the system needs to enforce Single Sign On Policy (a user may only sign on from a single TouchPoint at a time)
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Extenders.ISingleSignOnIndicator.IsLoginValidationNeeded(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>Return Boolean indicating whether single sign on should be enforced.</summary>
            <param name="touchPoint"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IClientSessionDao">
            <summary>
            This contracts provides all available operations relating to session id management
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IClientSessionDao.Get(System.Guid)">
            <summary>
            Retrieves the client session indexed by the provided GUID session id
            </summary>
            <param name="sessionId">A GUID session id (auto generated by the persistence layer)</param>
            <returns cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession">IIdmClientSession contract</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IClientSessionDao.GetAll">
            <summary>
             Retrieves all <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession">client sessions</see>. 
            </summary>
            <returns>All the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession">client sessions</see> exists in the system.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IClientSessionDao.Find(Retalix.StoreServices.Model.Organization.User.IUser)">
            <summary>
            Retrieves the all client sessions indexed by the provided user
            </summary>
            <param name="user">The user to which the requested session id belongs as <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IApplicationUser</see></param>
            <returns cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession">IIdmClientSession contract</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IClientSessionDao.Save(Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession)">
            <summary>
            Adds a new client session object to the persistence layer
            </summary>
            <param name="idmClientSession">A client session object, created upon a successful login</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IClientSessionDao.Delete(Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession,System.Boolean)">
            <summary>
            Deletes an existing client session object from the persistence layer
            </summary>
            <param name="idmClientSession">An existing client session object</param>
            <param name="deletePermanently">Determines whether the Client Session should be deleted from the Session alone,
            or committed as a deletion to the DB as well </param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IHandshakeProvider">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IHandshakeProvider.Execute(System.Uri,System.String)">
            <summary>
            </summary>
            <param name="targetUrl"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdmRtiLogModifier">
            <summary>
            Responsible to handle modifying the request/response before it is logged
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdmRtiLogModifier.GetModifiedRequestString(System.String)">
            <summary>
            Modify the request before it is logged
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ILoginRecordDao.GetLoginRecordByUserNameAndFromDate(System.String,System.DateTime)">
            <summary>Note: This Interface is obsolete since version 10.5.0. Use method GetAllLoginRecordsByUserNameAndFromDate instead </summary>
             This method return first or default of the relvant login records
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ILoginRecordDao.GetAllLoginRecordsByUserNameAndFromDate(System.String,System.DateTime)">
            <summary>
               Return all login records by the given username and date.
            </summary>
            <param name="username">the user name</param>
            <param name="fromDate">the method return records with later date then this parameter's value</param>
            <returns> IEnumerable of ILoginRecord </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ILoginRecordDao.DeleteUserRecord(System.String)">
            <summary>Note: This Interface is obsolete since version 10.5.0. Use method DeleteUserRecordByTouchPoint instead </summary>
             This method delete all login records of the user
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ILoginRecordDao.DeleteUserRecordByTouchPoint(System.String,Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            Delete the login record of user in touch point
            </summary>
            <param name="userName">the user name</param>
            <param name="touchpointId">the touch point</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IPasswordHistoryDao.GetPasswordHistoryForUserId(System.Guid,Retalix.StoreServices.Model.Infrastructure.Security.Identity.R10AuthenticationMethodTypes)">
            <summary>
            </summary>
            <param name="userId"></param>
            <param name="authenticationMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IPasswordHistoryDao.DeleteOldestPasswordHistoryForUserName(System.Guid,Retalix.StoreServices.Model.Infrastructure.Security.Identity.R10AuthenticationMethodTypes)">
            <summary>
            </summary>
            <param name="userId"></param>
            <param name="authenticationMethod"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IPasswordHistoryDao.AddNewPasswordHistory(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IPasswordHistory)">
            <summary>
            </summary>
            <param name="passwordHistory"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IPasswordHistoryDao.DeletePasswordHistory(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IPasswordHistory)">
            <summary>
            </summary>
            <param name="passwordHistory"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IPasswordHistoryDao.FindAllPassworsdHistory">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IPasswordHistoryDao.DeleteAllPasswordHistory">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDao">
            <summary>
            Used to access and manipulate <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole"/> entities
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDao.Add(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole)">
            <summary>Persist a new role</summary>
            <param name="role">The role to persist</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDao.Update(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole)">
            <summary>Persist changes to an existing role.</summary>
            <param name="role">The changed role to persist</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDao.DeleteRole(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole)">
            <summary>Remove a role from persistent storage</summary>
            <param name="role">The role to remove.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDao.Find">
            <summary>Retrieves a collection of all roles previously persisted.</summary>
            <returns>List of existing roles</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDao.FindByName(System.String)">
            <summary>Retrieves a role from persistent storage.</summary>
            <param name="name">The name of the role to retrieve.</param>
            <returns>The matching role or null if no role matches.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDao.Get(System.Int32)">
            <summary>Retrieve a Role from persistent storage.  An error is thrown if it does not exist.</summary>
            <param name="roleId">The Id of the role to retrieve</param>
            <returns>The role with that Id.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDao.Find(System.Int32)">
            <summary>Retrieve a Role from persistent storage</summary>
            <param name="roleId">The Id of the role to retrieve</param>
            <returns>The role with that Id or null if it does not exist.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDao.Find(Retalix.StoreServices.Model.Infrastructure.Security.Identity.RoleSearchCriteria)">
            <summary>Retrieves a collection of roles previously persisted matching the search criteria</summary>
            <param name="criteria">The criteria to be used to limit the search</param>
            <returns>A collection of the matching roles</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDao.DeleteAll">
            <summary>Delete all roles previously persisted.</summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession">
             <summary>
             This interface encapsulates all information relevant to managing a session in R10. 
             </summary>
             <para>
             /// ICredentialUserNamePassword provides the following service:
             <list type="bullet">
             <item><description>Validate that the session is still active.</description> </item>
             <item><description>Enter training mode - in which the session activities are not treated as actual activities</description> </item>
             <item><description>Exit training mode</description> </item>
             </list>
             </para>
             <code lang="cs" description ="This example shows how to cause the current session to enter training mode.">
             <![CDATA[
             public class EnterTrainingModeService
             {
                 public void Execute()
                 {
                     var session = GlobalEnvironment.StoreApplication.ActiveRequestState.ClientSession;
             
                     session.EnterTrainingMode();
                 }
             }
            ]]>    
            </code>
             <code lang="cs" description ="This example shows how to cause the current session to exit training mode.">
             <![CDATA[
             public class EnterTrainingModeService
             {
                 public void Execute()
                 {
                     var session = GlobalEnvironment.StoreApplication.ActiveRequestState.ClientSession;
             
                     session.ExitTrainingMode();
                 }
             }
            ]]>    
            </code>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.SessionId">
            <summary>
            A GUID session id, generated upon successful login 
            The session id is then passed to the R10 server on each request to add security and authentication level
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.Identity">
            <summary>
            The user itself to which the session id belongs
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.LastActivationTime">
            <summary>
            The last time in which the session was used - created or passed to the server for verification
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.LastAccessTime">
            <summary>
            The last time in which the session was used- in any way
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.Validate">
            <summary>
            Indicates whether this session is valid.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.StoreCode">
            <summary>
            The store on which the session user is logged in
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.IsTrainingMode">
            <summary>
            Is session user in training mode 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.TrainingCurrentDateTime">
            <summary>
            The "now" value when in training mode
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.EnterTrainingMode">
            <summary>Cause session to enter training mode</summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.ExitTrainingMode">
            <summary>Cause session to enter training mode</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.R10AuthenticationMethod">
            <summary>
            A contract for authentication method that user log in to system
            Throws an exception if user doesn't have permissions
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.Store">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.TouchPoint">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession.BusinessDayAsDate">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.R10AuthenticationMethodTypes">
            <summary>
             Authentication methods supported by IDM
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Security.Identity.R10AuthenticationMethodTypes.Password">
            <summary>
             Authentication performed on a given alphanumeric password
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Security.Identity.R10AuthenticationMethodTypes.Pin">
            <summary>
             Authentication performed on a given digit based password
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Security.Identity.R10AuthenticationMethodTypes.Barcode">
            <summary>
             Authentication performed on a give cashier barcode
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Roles.IRoleBc.Add(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole)">
            <summary>
            Add new role
            </summary>
            <param name="role" cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole">Role model</param>
            <returns cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole">IApplicationRole</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Roles.IRoleBc.Update(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole)">
            <summary>
            Update role
            </summary>
            <param name="role" cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole">Role model</param>
            <returns cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole">IApplicationRole</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Roles.IRoleBc.DeleteRole(System.Int32)">
            <summary>
            Delete role
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Identity.Roles.IRoleBc.GetMovableRole(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole)">
            <summary>
            Get movable role for replication
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.UserStatus">
            <summary>Represents an enumeration of the options for status of a user.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Security.Identity.UserStatus.Inactive">
            <summary>The user has been marked as inactive by user configuration.</summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Security.Identity.UserStatus.Active">
            <summary>The user is fully active and can be used to access R10.</summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Security.Identity.UserStatus.Blocked">
            <summary>The user has been marked as blocked due to repeated attempts at hacking.</summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDefinition">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDefinition.Role">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDefinition.IsOnlyForTrainingMode">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRoleDefinition.Location">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity">
            <summary>Represents an identity with a set of permissions for accessing the system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity.Id">
            <summary>
            The ID of the user 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity.Type">
            <summary>
            The Identity Type. 
            </summary>
            <seealso cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentityProvider" />
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity.UserRoles">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole">
            <summary>
             Role interface,which determines how to approve the request.
            </summary>  
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole.RoleId">
            <summary>The Identifier for this role.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole.Name">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole.Actions">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole.RetailSegments">
            <summary>
            TouchPointGroups Associated to this role
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.IResponseDataSecurityFilter">
            <summary>
            Represents sensitive security data filter for responses.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.IResponseDataSecurityFilter.Filter(System.String)">
            <summary>
            Filter any sensitive security data of the given text (response xml).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.IDataSecurityFilter">
            <summary>
            Represents sensitive secuirty data filter.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.IDataSecurityFilter.Filter(System.String)">
            <summary>
            Filter any sensitive secuirty data of the given text.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentialsPolicy">
             <summary>
             enforce the policy on identity according to corresponding credentials
             <code lang="cs" description ="This example shows how to enforce credentials policy from corresponding credentials .">
             <![CDATA[
             public class UsernamePasswordCredentials:ICredentials
            {
                private IResolver _resolver;
                
                public string Username { get; set; }
                public string Password { get; set; }
            
                public AuthenticateCredentialsService(IResolver resolver)
                {
                    _resolver = resolver;
                }
            
                public IAuthenticatedClaim Authenticate()
                {
                     IIdentity identity = GetAuthenticateItentity();
             
                     ICredentialsPolicy policy = _resolver.Resolve<ICredentialsPolicy>("UsernamePasswordCredentialsPolicy");
                     policy.Enforce(identity);
             
                     return CreateAuthenticatedClaim(identity); 
                 }
            }
            ]]>    
            </code>
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentialsPolicy.Enforce(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity)">
            <summary>
            enforce the policy on authenticated identity 
            </summary>
            <param name="identity">the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity">identity</see> to be enforced </param>
            <remarks>case the identity doesn't comply with policy exception will be thrown</remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IServiceAgentCredentials">
             <summary>
             Represents a service agent presented by a third party as credentials for use in authentication.
             These credentials are passed from a third party to the server, often to initiate a login or authentication request.
             Implements <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials">which provides the service of authenticating the service agent.</see>
             </summary>
             <code lang="cs" description ="This example shows how to authenticate a service agent.">
             <![CDATA[
             public class AuthenticateServiceAgentService
            {
                private readonly IComponentFactory _componentFactory;
            
                public AuthenticateServiceAgentService(IComponentFactory componentFactory)
                {
                    _componentFactory = componentFactory;
                }to
            
                public bool Authenticate(string ServiceAgentIdentifier)
                {
                     ICredential credential = _componentFactory.Create<IServiceAgentCredentials>();
                     credential.ServiceAgentIdentifier = ServiceAgentIdentifier;
             
                     IAuthenticatedClaim claim = credential.Authenticate();
                    
                     return claim != null;
                 }
            }
            ]]>    
            </code>
             <para>
             IServiceAgentCredentials provides the following service:
             <list type="bullet">
             <item>
             <description>Authenticate service agent according to ServiceAgentIdentifier </description>
             </item>
             </list>
             </para>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IServiceAgentCredentials.Identifier">
            <summary>
            gets or sets unique identifier of service agent
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IUsernameCertificateCredentials">
             <summary>
             Represents a username and certificate presented by a client as credentials for use in authentication.
             These credentials are passed from the client to the server, often to initiate a login or authentication request.
             Implements <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials">which provides the service of authenticating the username certificate.</see>
             </summary>
             <code lang="cs" description ="This example shows how to authenticate a username and certificate received from a client.">
             <![CDATA[
             public class AuthenticateUserNameCertificateService
            {
                private readonly IComponentFactory _componentFactory;
            
                public AuthenticateCredentialsService(IComponentFactory componentFactory)
                {
                    _componentFactory = componentFactory;
                }
            
                public bool Authenticate(string username, string certificate)
                {
                     ICredential credential = _componentFactory.Create<IUserNameCertificateCredentials>();
                     credential.UserName = username;
                     credential.Certificate = certificate;       
             
                     IAuthenticatedClaim claim = credential.Authenticate();
                    
                     return claim != null;
                 }
            }
            ]]>    
            </code>
             <para>
             ICredentialUserNameCertificate provides the following service:
             <list type="bullet">
             <item>
             <description>Authenticate username and certificate provided by a client.</description>
             </item>
             </list>
             </para>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IUsernameCertificateCredentials.Username">
            <summary>
            Gets or sets the username of the submitter for use in username certificate authentication.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IUsernameCertificateCredentials.Certificate">
            <summary>
            Gets or sets the certificate of the submitter for use in username certificate authentication.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IActiveDirectoryCredentials">
             <summary>
             Represents a request by a client to authenticate using Active Directory credentials.
             In this particular case, the client need not provide additional details as the authentication is handled entirely by Windows.
             Implements <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials">which provides the service of authenticating the Active Directory user.</see>
             </summary>
             <code lang="cs" description ="This example shows how to authenticate the current user using Active Directory.">
             <![CDATA[
             public class AuthenticateActiveDirectoryService
            {
                private readonly IComponentFactory _componentFactory;
            
                public AuthenticateActiveDirectoryService(IComponentFactory componentFactory)
                {
                    _componentFactory = componentFactory;
                }
            
                public bool Authenticate()
                {
                     ICredential credential = _componentFactory.Create<IActiveDirectoryCredentials>();
             
                     IAuthenticatedClaim claim = credential.Authenticate();
                    
                     return claim != null;
                 }
            }
            ]]>    
            </code>
             <para>
             IActiveDirectoryCredentials provides the following service:
             <list type="bullet">
             <item>
             <description>Authenticate current Windows user via Active Directory.</description>
             </item>
             </list>
             </para>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IActiveDirectoryCredentials.Username">
            <summary>
            Gets or sets the active directory username of the submitter for use in authentication.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IActiveDirectoryCredentials.Password">
            <summary>
            Gets or sets the active directory password of the submitter for use in authentication.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IBarcodeCredentials">
             <summary>
             Represents a barcode presented by a client as credentials for use in authentication.
             These credentials are passed from the client to the server, often to initiate a login or authentication request.
             Implements <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials">which provides the service of authenticating the barcode.</see>
             </summary>
             <code lang="cs" description ="This example shows how to authenticate a barcode received from a client.">
             <![CDATA[
             public class AuthenticateBarcodeService
            {
                private readonly IComponentFactory _componentFactory;
            
                public AuthenticateBarcodeService(IComponentFactory componentFactory)
                {
                    _componentFactory = componentFactory;
                }
            
                public bool Authenticate(string barcode)
                {
                     ICredential credential = _componentFactory.Create<IBarcodeCredentials>();
                     credential.Barcode = barcode;
             
                     IAuthenticatedClaim claim = credential.Authenticate();
                    
                     return claim != null;
                 }
            }
            ]]>    
            </code>
             <para>
             IBarcodeCredentials provides the following service:
             <list type="bullet">
             <item>
             <description>Authenticate barcode provided by a client.</description>
             </item>
             </list>
             </para>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IBarcodeCredentials.Barcode">
            <summary>
            Gets or sets the barcode of the submitter for use in barcode authentication.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials">
             <summary>
             Represents a set of unverified credentials presented by a client for use in authentication.
             These credentials are passed from the client to the server, often to initiate a login or authentication request.
             </summary>
             <code lang="cs" description ="This example shows how to authenticate credentials received from a client.">
             <![CDATA[
             public class AuthenticateCredentialsService
            {
                private readonly IComponentFactory _componentFactory;
            
                public AuthenticateCredentialsService(IComponentFactory componentFactory)
                {
                    _componentFactory = componentFactory;
                }
            
                public bool Authenticate()
                {
                     ICredential credential = _componentFactory.Create<ICredential>();
                    
                     IAuthenticatedClaim claim = credential.Authenticate();
                    
                     return claim != null;
                 }
            }
            ]]>    
            </code>
             <para>
             ICredentials provides the following service:
             <list type="bullet">
             <item>
             <description>Authenticate credentials provided by a client.</description>
             </item>
             </list>
             </para>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials.SetNewCredentials(Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials)">
            <summary>
            Set new credentials to the current credentials. Indicating the authentication process to adjust itself with the need of changing credentials
            </summary>
            <param name="credentials"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials.Authenticate">
            <summary>Authenticate the contained credentials and return a <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim">claim</see> containing an identifier for the submitter of the credentials.</summary>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim">authenticated claim</see> containing the authenticated identifier for the submitter of the credentials.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials.UpdateFor(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity)">
            <summary>
            Updating the credentials for the given Identity
            </summary>
            <param name="identity">The identity to update</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ITouchPointCredentials">
             <summary>
             Represents a touchpoint presented by a client as credentials for use in authentication.
             These credentials are passed from the client to the server, often to initiate a login or authentication request.
             Implements <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials">which provides the service of authenticating the touchpoint.</see>
             </summary>
             <code lang="cs" description ="This example shows how to authenticate a touchpoint.">
             <![CDATA[
             public class AuthenticateTouchPointService
            {
                private readonly IComponentFactory _componentFactory;
            
                public AuthenticateTouchPointService(IComponentFactory componentFactory)
                {
                    _componentFactory = componentFactory;
                }
            
                public bool Authenticate(string TouchPointIdentifier)
                {
                     ICredential credential = _componentFactory.Create<ITouchPointCredentials>();
                     credential.TouchPointIdentifier = TouchPointIdentifier;
             
                     IAuthenticatedClaim claim = credential.Authenticate();
                    
                     return claim != null;
                 }
            }
            ]]>    
            </code>
             <para>
             ITouchPointCredentials provides the following service:
             <list type="bullet">
             <item>
             <description>Authenticate touchpoint according to TouchPointIdentifier </description>
             </item>
             </list>
             </para>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ITouchPointCredentials.Identifier">
            <summary>
            gets or sets unique identifier of touch point
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IUsernamePasswordCredentials">
             <summary>
             Represents a username and password presented by a client as credentials for use in authentication.
             These credentials are passed from the client to the server, often to initiate a login or authentication request.
             Implements <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials">which provides the service of authenticating the username password.</see>
             </summary>
             <code lang="cs" description ="This example shows how to authenticate a username and password received from a client.">
             <![CDATA[
             public class AuthenticateUserNamePasswordService
            {
                private readonly IComponentFactory _componentFactory;
            
                public AuthenticateCredentialsService(IComponentFactory componentFactory)
                {
                    _componentFactory = componentFactory;
                }
            
                public bool Authenticate(string username, string password)
                {
                     ICredential credential = _componentFactory.Create<IUserNamePasswordCredentials>();
                     credential.UserName = username;
                     credential.Password = password;       
             
                     IAuthenticatedClaim claim = credential.Authenticate();
                    
                     return claim != null;
                 }
            }
            ]]>    
            </code>
             <para>
             ICredentialUserNamePassword provides the following service:
             <list type="bullet">
             <item>
             <description>Authenticate username and password provided by a client.</description>
             </item>
             </list>
             </para>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IUsernamePasswordCredentials.Username">
            <summary>
            Gets or sets the username of the submitter for use in username password authentication.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IUsernamePasswordCredentials.Password">
            <summary>
            Gets or sets the password of the submitter for use in username password authentication.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IUsernamePinCredentials">
             <summary>
             Represents a username and password presented by a client as credentials for use in authentication.
             These credentials are passed from the client to the server, often to initiate a login or authentication request.
             Implements <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.ICredentials">which provides the service of authenticating the username password.</see>
             </summary>
             <code lang="cs" description ="This example shows how to authenticate a username and password received from a client.">
             <![CDATA[
             public class AuthenticateUserNamePinService
            {
                private readonly IComponentFactory _componentFactory;
            
                public AuthenticateUserNamePinService(IComponentFactory componentFactory)
                {
                    _componentFactory = componentFactory;
                }
            
                public bool Authenticate(string username, string password)
                {
                     ICredential credential = _componentFactory.Create<IUserNamePasswordCredentials>();
                     credential.UserName = username;
                     credential.Password = password;       
             
                     IAuthenticatedClaim claim = credential.Authenticate();
                    
                     return claim != null;
                 }
            }
            ]]>    
            </code>
             <para>
             IBarcodeCredentials provides the following service:
             <list type="bullet">
             <item>
             <description>Authenticate barcode provided by a client.</description>
             </item>
             </list>
             </para>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IUsernamePinCredentials.Username">
            <summary>
            Gets or sets the username of the submitter for use in username pin authentication.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.Credentials.IUsernamePinCredentials.Pin">
            <summary>
            Gets or sets the pin of the submitter for use in username pin authentication.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.ITrustedAuthority">
            <summary>
            An authority that is trusted to verify an authenticated claim
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.ITrustedAuthority.Id">
            <summary>
            The id of the authority as will be specified in the claim
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.ITrustedAuthority.PublicKey">
            <summary>
            The PublicKey of the certificate used for signing on the trusted authority
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim.Identify">
            <summary>Retrieve an <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity">identity</see> within the system that matches the authenticated identity information - no validation on the identity status is performed (validation should be external). </summary>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity">identity</see> that matches the authenticated identity information.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim.Validate">
            <summary>
            Validate the signed data of the claim using the publickey retrived from the trusted authority
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim.IdentityId">
            <summary>
            The id of the identity that will be returned by <see cref="M:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim.Identify"/> if the claim is validated
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim.IdentityType">
            <summary>
            The type of the identity provider that will retrive the identity once the claim is validated
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim.TrustedAuthorityId">
            <summary>
            The name of the trusted authority that should supply the public key with which to <see cref="M:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim.Validate"/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim.Timestamp">
            <summary>
            When the claim was signed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim.Signature">
            <summary>
            The actual signed claim
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.ISecurityTokenGenerator">
            <summary>A Strategy for generating security tokens for clients</summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Authentication.ISecurityTokenGenerator.GenerateSecurityToken(System.String)">
            <summary>Creates a new token for a the supplied ClientId</summary>
            <param name="clientId">The Id of the client for whom to generate a token</param>
            <returns>The generated token</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IUserNameBarcodeStoredCredentials">
            <summary>
             Interface used to represent a barcode, which is one type of stored credentials.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IUserNamePinStoredCredentials">
            <summary>
             Interface used to represent a pin, which is one type of stored credentials.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IUserNamePasswordStoredCredentials">
            <summary>
             Interface used to represent a password, which is one type of stored credentials.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IPolicy">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IPolicy.IsExpired">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IPolicy.UpdateExpirationDate(System.DateTime)">
            <summary>
            </summary>
            <param name="expirationDate"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IPolicy.NeedToChangeAtNextLogin">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials">
            <summary>
            Responsible of managing the user's stored credentials.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials.ChangeDate">
            <summary>
            Gets or sets the date of the last change to this principle.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials.Policy">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IPolicy">policy</see> that shall be enforced by this principle. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials.Change(System.String)">
            <summary>
            Changes the stored credentials with new given credentials (possibly encrypted).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials.Principle">
            <summary>
            Gets the secret, which is the actual string representation of the stored credentials (i.e. pin, barcode etc.).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials.Match(System.String)">
            <summary>
            Checks the given credential against the stored one. If identical, returns true, otherwise - false.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials.Set(System.String)">
            <summary>
            Sets the user's credentials directly.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials.Id">
            <summary>
            Gets or sets the principle's Id. Set should only be used by hbm (otherwise, use InitId method).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials.UserName">
            <summary>
            The user name part of the credentials.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials.User">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> associated with this principle.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials.InitId(System.String)">
            <summary>
            Initializes the principle's Id (is used by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentialsFactory">principle factory</see>).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials.LastUpdated">
            <summary>
            Gets Last Modified Date of the principle record. Each time the principle is updated, the LastUpdated gets new value.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentialsFactory">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentialsFactory.Create(System.String,System.String,Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity)">
            <summary>
            </summary>
            <param name="authenticationMethod"></param>
            <param name="ownedFactor"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.IServerAuthority">
            <summary>
            Represents the current servers trusted authority
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.ISecurityContext">
            <summary>
             Information to manage Security Context in R10
            </summary>
             <para>
             The ISecurityContext provides the following services:
             <list type="bullet">
             <item>
             <description>Updates Context</description>
             </item>
             </list>
             </para>
             <code lang="cs" description="This example shows how to update TouchPoint on SecurityContext">
             <![CDATA[
            public class SecurityContextMethods
            {
                public ISecurityContext UpdateTouchPointOnSecurityContext(ISecurityContext securityContext, string touchPointId, string businessUnitId)
                {
                    securityContext.UpdateContext(touchPointId, businessUnitId);        
                }    
            }
            ]]>    
            </code>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.ISecurityContext.ClientSession">
            <summary>
            Gets all information relevant to managing a session in R10
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.ISecurityContext.TouchPoint">
            <summary>
            Gets the Touch Point that interacts with R10
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Security.ISecurityContext.Identity">
            <summary>
            Gets or sets the current identity
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.ISecurityContext.UpdateContext(System.String,System.String)">
            <summary>
            Updates Context 
            </summary>
            <param name="touchPointId"></param>
            <param name="businessUnitId"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.ISecurityContextFactory">
            <summary>
             Creates Security Context
            </summary>
             <para>
             The ISecurityContextFactory provides the following services:
             <list type="bullet">
             <item>
             <description>Gets SecurityContext with the specified Session</description>
             </item>
             </list>
             </para>
             <code lang="cs" description="This example shows how to create Security Context with the specified Session">
             <![CDATA[
            public class SecurityContextFactoryMethods
            {
             private readonly IFactory _factory;
            
                public LocalizedListMethods(IFactory factory)
                {
                    _factory = factory;
                }
             
                public ISecurityContext CreateSecurityContext(ISession session)
                {
                    var securityContextFactory = _factory.GetInstance<ISecurityContextFactory>();
                    securityContextFactory.CreateSecurityContext(session);    
                }    
            }
            ]]>    
            </code>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.ISecurityContextFactory.CreateSecurityContext(Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession)">
            <summary>
            Gets SecurityContext with the specified Session
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Encryption.IEncryptor">
            <summary>
            Interface which is responsible for providing the correct Hashing\Encrypting services.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Encryption.IEncryptor.EncryptPassword(System.String)">
            <summary>
            Method responsible for encrypting\hashing a given string usually - password, pin or barcode. For purposes like repository saving, validation etc.
            </summary>
            <param name="passwordToEncrypt">Credentials to be encrypted\hashed, represented in a string format.</param>
            <returns>Hashed\Encrypted representation of the given credentials, in a string format.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Encryption.IEncryptor.StringAlreadyEncrypted(System.String)">
            <summary>
            Method responsible to validate if a given credentials already hashed\encrypted, or not. 
            </summary>
            <param name="stringToEvaluate">Information to validate, represented as string.</param>
            <returns>True/False in case the given string information is already hashed\encrypted or not.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.Encryption.IHashAlgorithm">
            <summary>
             Representation of a possible hash algorithm. Hash algorithm is used to obfuscate  user credentials before saving them into the repository, or vice versa
             hashing an exposed given credentials in order to compare them against relevant saved in the repository.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Encryption.IHashAlgorithm.ComputeHash(System.String)">
            <summary>
             Method which will be used to HASH a given exposed credentials.
            </summary>
            <param name="credentialToHash">String representation of users credentials, e.g. Password, PIN, Barcode etc.</param>
            <returns>String representation of given credentials in their HASHed form.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.Encryption.IHashAlgorithm.IsHashed(System.String)">
            <summary>
            Method which will be used to decide whether the given representation is a HASHed credential or not.
            </summary>
            <param name="credentialToEvaluate">String representation of a credentials to check.</param>
            <returns>Boolean response, when the given credentials are already HASHed TRUE will be returned, otherwise FALSE.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Security.IClientSessionManager">
            <summary>
            Manager the IdmClientSession. All the approaches to IdmClientSession should be through
            this manger.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.IClientSessionManager.InitializeIdmClientSession(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity,System.DateTime,Retalix.StoreServices.Model.Infrastructure.Security.Identity.R10AuthenticationMethodTypes,Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint,System.String,System.Boolean)">
            <summary>
            Responsible to build a new IdmClientSession, for example on login
            </summary>
            <returns>ISession</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.IClientSessionManager.CreateSession(Retalix.StoreServices.Model.Infrastructure.Security.Authentication.IAuthenticatedClaim,System.Boolean)">
            <summary>
            Create a session from an authenticated claim
            </summary>
            <param name="claim">Authenticated claim</param>
            <param name="persist">save the session in the db or not</param>
            <returns>Session</returns>
            <remarks>The claim has a hard-coded 10 minute expiration</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.IClientSessionManager.Logoff(System.String,System.String)">
            <summary>
            </summary>
            <param name="loginName"></param>
            <param name="touchPointId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Security.IClientSessionManager.CancelIdmClientSession(Retalix.StoreServices.Model.Infrastructure.Security.Identity.ISession,System.String)">
            <summary>
            Enables to cancel IdmClientSession in a case the session is not needed
            </summary>
            <param name="session">Session</param>
            <param name="userName">User to delete session for</param>
            <remarks>The cancellation deletes a record in DB for current IdmClientSession</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IDataExtensionMappingConfigurationBuilder`2.MapFrom``1">
            <summary>
            Map the extension directly from the service contract type
            </summary>
            <typeparam name="TContract">The Service Contract Type</typeparam>
            <returns>Itself for fluent interface</returns>
            <remarks>You must also register a <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IMapper`2">mapper from TContract to TExtension</see> </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IDataExtensionMappingConfigurationBuilder`2.MapFrom``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Map the extension from the Extension contract
            </summary>
            <typeparam name="TContract">The service contract type</typeparam>
            <typeparam name="TExtensionContract">The Extension generated code</typeparam>
            <param name="expression">The expression to access the any element on the service contract</param>
            <returns>Itself for fluent interface</returns>
            <remarks>You must also register a <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IMapper`2">mapper from TExtensionContract to TExtension</see> </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IContractExtensionRegististrationFacility.RegisterExtension(System.Reflection.MemberInfo)">
            <summary>
            Register an extension contract type and tell us where (in which AnyElement) in the contract it will be used.
            </summary>
            <param name="anyElement">The PropertyInfo or FieldInfo of the any in the generated type</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IContractExtensionRegistration"/> in which the extension types can be registered</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IEventHandlerRegistrationFacility">
            <summary>
            Facility to allow registration of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IEventHandler`1"/> implementation.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IEventHandlerRegistrationFacility.RegisterHandler(System.Type)">
            <summary>
            Register event domain handler, for all the handlers it implement.
            All are registered as singletons.
            </summary>
            <param name="eventHandlerImplementationType">Type that implement one of more <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IEventHandler`1"/></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IReplaceByNameRegistrationFacility">
            <summary>
            Allow replacement of component registration by the component name.
            This is mostly for backward compatibility, for some versions of IOC will not allow
            replacing a component by its' internal key once registered.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IReplaceByNameRegistrationFacility.ReplaceComponentRegistration(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="registeredComponentName"></param>
            <param name="implementationType"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IReplaceByNameRegistrationFacility.ReplaceComponentRegistrationInstance(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="registeredComponentName"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IContractExtensionRegistration.AddType(System.Type,System.String,System.String)">
            <summary>
            Add an extension type to the pre-specified any element
            </summary>
            <param name="extensionType">The type of the extension generated code</param>
            <param name="elementName">The name of the element that will appear in the xml</param>
            <param name="xmlNamespace">The xmlnamespace of the element in the xml</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IFactoryRegistrationFacility">
            <summary>
            Facility to register implementation of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IFactory`1">IFactory{T}</see> 
            for specific service.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IFactoryRegistrationFacility.RegisterWithFactory(System.Type,System.Func{Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver,System.Object})">
            <summary>
            Register singleton instance of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IFactory`1">IFactory{T}</see>
            implementation, where T is the service type,
            that return the result of the supplied function.
            </summary>
            <param name="serviceType">The service type</param>
            <param name="factoryMethod">The function that returns an instance the service implementation</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IDomainEventHandlerRegistrationFacility.Register(System.Type)">
            <summary>
            Register all IEventHandlers that this component implements
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IMapperRegistration.WithAlias(System.Type,System.Type)">
            <summary>
            Register an alias for this mapper. An alias means that when the mapping system looks for a mapper from TSource, to the Alias TTarget it will find the specific mapper that was registered
            </summary>
            <param name="sourceType">The source type that the alias will map from</param>
            <param name="aliasType">The alias target type</param>
            <returns>Itself so you can continue adding aliases</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.MapperRegistrationExtensionMethods.WithAlias``2(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IMapperRegistration)">
            <summary>
            Register an alias for this mapper. An alias means that when the mapping system looks for a mapper from TSource, to the Alias TTarget it will find the specific mapper that was registered
            </summary>
            <typeparam name="TSource">The source type that the alias will map from</typeparam>
            <typeparam name="TTarget">The alias target type</typeparam>
            <param name="registration">this is an extension method</param>
            <returns>Itself so you can continue adding aliases</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IMapperRegistrationFacility">
            <summary>
            Facility fro registration of mapper.
            This allow implementation of all mapping details in a single component 
            to simplify mapping implementation.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IMapperRegistrationFacility.RegisterMapper(System.Type)">
            <summary>
            Register type as mapper, for all the mapping interfaces it implements.
            The same type may implement both mapping directions.
            Including: 
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IMapper`2">IMapper{TSource, TTarget}</see>,
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IMappingDiscriminator`2">IMappingDiscriminator{TSource, TTarget}</see> and 
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IMappingFactory`2">IMappingFactory{TSource, TTarget}</see>.
            </summary>
            <param name="mapperType">The mapping implementation.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.Register``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)">
            <summary>
            Register a component in the IOC container
            </summary>
            <typeparam name="TComponent">The type of the component to register</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterSingleton``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)">
            <summary>
            Register a component, specifying a singleton scope, in the IOC container
            </summary>
            <typeparam name="TComponent">The type of the component to register</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.Register``2(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)">
            <summary>
            Register a service in the IOC container
            </summary>
            <typeparam name="TService">The type of the service to register</typeparam>
            <typeparam name="TImplementation">The implementation of the service</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.Register``2(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,System.String)">
            <summary>
            Register a service, with a specific name, in the IOC container
            </summary>
            <typeparam name="TService">The type of the service to register</typeparam>
            <typeparam name="TImplementation">The implementation of the service</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
            <param name="name">The name to register the service with</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.Register``3(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,System.String)">
            <summary>
            Register a component for multiple services in the IOC.
            </summary>
            <typeparam name="TService1">The first type of the service to register</typeparam>
            <typeparam name="TService2">The second type of the service to register</typeparam>
            <typeparam name="TImplementation">The implementation of the service</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
            <param name="name">The name to register the service with, is any</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.Register``4(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,System.String)">
            <summary>
            Register a component for multiple services in the IOC.
            </summary>
            <typeparam name="TService1">The first type of the service to register</typeparam>
            <typeparam name="TService2">The second type of the service to register</typeparam>
            <typeparam name="TService3">The third type of the service to register</typeparam>
            <typeparam name="TImplementation">The implementation of the service</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
            <param name="name">The name to register the service with, is any</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterSingleton``2(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)">
            <summary>
            Register a service, in the IOC container specifying a singleton scope
            </summary>
            <typeparam name="TService">The type of the service to register</typeparam>
            <typeparam name="TImplementation">The implementation of the service</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterSingleton``3(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,System.String)">
            <summary>
            Register a component for multiple services in the IOC specifying a singleton scope
            </summary>
            <typeparam name="TService1">The type of the first service to register</typeparam>
            <typeparam name="TService2">The type of the second service to register</typeparam>
            <typeparam name="TImplementation">The implementation of the service</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
            <param name="name">The name to register the service with, if any.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterSingleton``4(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,System.String)">
            <summary>
            Register a component for multiple services in the IOC specifying a singleton scope
            </summary>
            <typeparam name="TService1">The type of the first service to register</typeparam>
            <typeparam name="TService2">The type of the second service to register</typeparam>
            <typeparam name="TService3">The type of the third service to register</typeparam>
            <typeparam name="TImplementation">The implementation of the service</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
            <param name="name">The name to register the service with, if any.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterSingleton``2(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,System.String)">
            <summary>
            Register a service, with a specific name, in the IOC container specifying a singleton scope
            </summary>
            <typeparam name="TService">The type of the service to register</typeparam>
            <typeparam name="TImplementation">The implementation of the service</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
            <param name="name">The name to register the service with</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterService``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)">
            <summary>
            Register a Business Service
            </summary>
            <typeparam name="TService">The service type to register</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterServiceOverride``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)">
            <summary>
            Register a service override
            </summary>
            <typeparam name="TService">The service type to register</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterMapper``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)">
            <summary>
            Register type as mapper, for all the mapping interfaces it implements.
            See: <see cref="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IMapperRegistrationFacility">Retalix.StoreServices.Model.Infrastructure.StoreApplication.IMapperRegistrationFacility</see>.
            </summary>
            <typeparam name="TMapper">The mapper type.</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterInstance``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,``0,System.String)">
            <summary>
            Register a service instance, with a specific name, in the IOC container
            </summary>
            <typeparam name="TService">The type of the service to register</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
            <param name="instance">The specific service instance</param>
            <param name="name">The name to register the service with</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterInstance``3(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,``2,System.String)">
            <summary>
            Register a component instance for multiple services in the IOC.
            </summary>
            <typeparam name="TService1">The type of the first service to register</typeparam>
            <typeparam name="TService2">The type of the second service to register</typeparam>
            <typeparam name="TInstance">The type of the component instance</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
            <param name="instance">The specific service instance</param>
            <param name="name">The name to register the service with, if any</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterInstance``4(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,``3,System.String)">
            <summary>
            Register a component instance for multiple services in the IOC.
            </summary>
            <typeparam name="TService1">The type of the first service to register</typeparam>
            <typeparam name="TService2">The type of the second service to register</typeparam>
            <typeparam name="TService3">The type of the third service to register</typeparam>
            <typeparam name="TInstance">The type of the component instance</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
            <param name="instance">The specific service instance</param>
            <param name="name">The name to register the service with, if any</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.ReplaceRegistration``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,System.String)">
            <summary>
            Replace the implementation of a known registered service by name.
            This is mostly for backward compatibility, and depends on the R10 specific installer implementation.
            </summary>
            <typeparam name="TImplementation">The alternate component type. 
            Note that it must implement the same services the original component was registered with, 
            and conform to the same lifestyle.</typeparam>
            <param name="installer">The components installer (this is an extension method).</param>
            <param name="registeredName">The known registration name</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.ReplaceRegistrationWithInstance(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,System.String,System.Object)">
            <summary>
            Replace the implementation of a known registered service by name with an instance.
            This is mostly for backward compatibility, and depends on the R10 specific installer implementation.
            </summary>
            <param name="installer">The components installer (this is an extension method).</param>
            <param name="registeredName">The known registration name</param>
            <param name="instance">The alternate component instance</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterDefault``2(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,System.String)">
            <summary>
            Register a service as Default in the IOC container. 
            Default service will be returned first when resolving a component by service type.
            </summary>
            <typeparam name="TService">The type of the service to register</typeparam>
            <typeparam name="TImplementation">The implementation of the service</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
            <param name="name">The name to register the service with, is any.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterDefaultSingleton``2(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,System.String)">
            <summary>
            Register a service as Default in the IOC container specifying a singleton scope.
            Default service will be returned first when resolving a component by service type.
            </summary>
            <typeparam name="TService">The type of the service to register</typeparam>
            <typeparam name="TImplementation">The implementation of the service</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
            <param name="name">The name to register the service with, if any.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterDefaultInstance``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,``0,System.String)">
            <summary>
            Register a service instance as Default in the IOC container.
            Default service will be returned first when resolving a component by service type.
            </summary>
            <typeparam name="TService">The type of the service to register</typeparam>
            <param name="installer">The installer to register into (this is an extension method)</param>
            <param name="instance">The specific service instance</param>
            <param name="name">The name to register the service with, is any.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterContractExtension``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Register an extension contract type and tell us where (in which AnyElement) in the contract it will be used.
            </summary>
            <typeparam name="TContract">The core contract to extend</typeparam>
            <param name="installer">source of the extension method</param>
            <param name="expression">The path to the AnyElement</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterFactoryForDefaultConstructor``2(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)">
            <summary>
            Register <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IFactory`1"/> where TService is implemented by 
            TImplementation and  TImplementation have default constructor.
            </summary>
            <typeparam name="TService"></typeparam>
            <typeparam name="TImplementation"></typeparam>
            <param name="installer"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterFactory``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller,System.Func{Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver,``0})">
            <summary>
            Register <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IFactory`1"/> where TService is implemented by 
            TImplementation and  TImplementation have default constructor.
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="installer"></param>
            <param name="createFunc">The create method</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterEventHandler``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)">
            <summary>
            Register TEventHandler for all the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IEventHandler`1"/> it implements.
            </summary>
            <typeparam name="TEventHandler"></typeparam>
            <param name="installer"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterQuery``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)">
            <summary>
            Register the TQuery for all the <see cref="T:Retalix.StoreServices.Infrastructure.DataAccess.IQuery`3"/> it implements
            </summary>
            <typeparam name="TQuery">The query implementation</typeparam>
            <param name="installer"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterQueryCriterionApplier``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)">
            <summary>
            Register an IQueryCriterionApplier
            </summary>
            <typeparam name="TQueryCriterionApplier">The implementation type</typeparam>
            <param name="installer"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.ComponentInstallerExtensions.RegisterQuerySpecificationApplier``1(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)">
            <summary>
            Register an IQuerySpecificationProvider
            </summary>
            <typeparam name="TQuerySpecificationApplier">The implemenation type</typeparam>
            <param name="installer"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationInitializer">
            <summary>
            Any class that implements this interface will be called upon startup
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationInitializer.RegisterComponents(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)">
            <summary>
            Enables a module to register components before startup
            </summary>
            <param name="componentInstaller">the <see cref="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller"/> that should be used to register</param>
            <remarks>This method will be invoked on all modules. Only after that will the system start invoking <see cref="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationInitializer.Initialize(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication)"/></remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationInitializer.Initialize(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication)">
            <summary>
            This method will be called as part of the application initialization
            </summary>
            <param name="application">The current <see cref="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication"/></param>
            <remarks>This will be called after all modules have completed <see cref="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationInitializer.RegisterComponents(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller)"/></remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller">
            <summary>
            Use this to register with the IOC container
            </summary>
            <remarks>This is passed into <see cref="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationInitializer"/> to allow modules to register using a strongly typed interface</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller.Register(System.Type[],System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Register a service with a specific name in the IOC container
            </summary>
            <param name="serviceTypes">The services (interfaces) to register. 
            This array may also include the implementation, especially for cases where the component is registered without a service.</param>
            <param name="implementationType">The implementation of the service. 
            This should be used only if at least one abstract service was supplied in the serviceTypes parameter.</param>
            <param name="name">The name to register the service with</param>
            <param name="isSingleton">Specifies if the service should be registered with a singleton scope in the container</param>
            <param name="isDefault">Specify if this is a default service. It means that when resolved by service type, this implementation will be the first to return.</param>
            <remarks>The implantation type must implement the service type</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller.RegisterInstance(System.Type[],System.Object,System.String,System.Boolean)">
            <summary>
            Register a component in the IOC container with a given singleton instance
            </summary>
            <param name="serviceTypes"></param>
            <param name="instance">The single instance that implements this component type</param>
            <param name="name">provided name of the component</param>
            <param name="isDefault"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller.GetRegistrationFacility``1">
            <summary>
            Get a specialized registration facility. (e.g. a mapping registration facility, or a business service registration facility)
            </summary>
            <remarks>Many of these facilities may come with extension methods on the <see cref="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationInitializer"/> to access their methods directly</remarks>
            <typeparam name="TFacility">The type of facility to return</typeparam>
            <returns>the requested facility</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller.RegisterFacility(System.Type,System.Object)">
            <summary>
            Register a specialized registration facility. (e.g. a mapping registration facility, or a business service registration facility)
            </summary>
            <param name="facilityType">the type of the facility that will be used in <see cref="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IComponentInstaller.GetRegistrationFacility``1"/></param>
            <param name="facilityInstance">the actual facility instance</param>
            <remarks>
            IMPORTANT: this method can only be called during the preregistration process.
            In order to register a facility use the <see cref="T:Retalix.StoreServices.Infrastructure.Modules.ModulePreInitializeAttribute"/> to invoke an installer during the preregistration process.
            </remarks>
            <exception cref="T:System.InvalidOperationException">If this is invoked after the preregistration process</exception>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.GlobalEnvironment">
            <summary>
            Singleton utility to access the application facilities out of context 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.GlobalEnvironment.Initialize(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreNetApplicationProvider)">
            <summary>
            This is an initialization method, that should be called only once at the system setup.
            </summary>
            <param name="storeNetApplicationProvider">The service that provides access to the IStoreNetApplication instance</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.GlobalEnvironment.Initialize(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication)">
            <summary>
            Initialize the GlobalEnvironment with an <see cref="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication"/>
            </summary>
            <param name="storeApplication">The StoreApplication</param>
            <remarks>
            This is an initialization method, that should be called only once at the system setup.    
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.StoreApplication.GlobalEnvironment.StoreApplication">
            <summary>
            Return the IStoreApplication instance
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.StoreApplication.GlobalEnvironment.EventsDispatcher">
            <summary>
            Returns the default dispatcher for dispatching of domain events.
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEventsDispatcher"/>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationState">
            <summary>
            Represents data saved on the application. Used as a global cache.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationState.Get(System.String)">
            <summary>
            Get object from state by key. Will return null if key exists with value null or if key dosnt exists
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationState.GetByDomain(System.String,System.String)">
            <summary>
            Get object from state by domain and key. Domain is used to group entities from the same type.
            Will return null if key exists with value null or if key doesn't exists
            </summary>
            <param name="domain"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationState.Contains(System.String)">
            <summary>
            Is key exists in state. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationState.ContainsInDomain(System.String,System.String)">
            <summary>
            Is key exists in domain. 
            </summary>
            <param name="domain"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationState.Set(System.String,System.Object,System.Boolean)">
            <summary>
            Set object on state
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dependOnRequest">set the value only in the end of the request in case request success</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationState.Remove(System.String,System.Boolean)">
            <summary>
            Remove entry from state
            </summary>
            <param name="key"></param>
            <param name="dependOnRequest"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationState.RemoveFromDomain(System.String,System.String,System.Boolean)">
            <summary>
            Remove entry from domain
            </summary>
            <param name="domain"></param>
            <param name="key"></param>
            <param name="dependOnRequest"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationState.SetByDomain(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Set object on state grouped under domain
            </summary>
            <param name="domain"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dependOnRequest">set the value only in the end of the request in case request success</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationState.RemoveDomain(System.String,System.Boolean)">
            <summary>
            Clear all objects that was grouped under this domain
            </summary>
            <param name="domain"></param>
            <param name="dependOnRequest">set the value only in the end of the request in case request success</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationState.ClearAll">
            <summary>
            clear all objects in cache.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication">
            <summary>
            interface represents a store level application which resides within
            a host that provides its hosting environment
            see IStoreHost for more details about what is required from a host 
            the interface encapsulates two levels of scopes, application (across process)
            and request (across threads)
            this allows development to remove the burden of figuring out where to store
            state information
            </summary>
            <summary></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication.ActiveRequestState">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreNetRequest"/> instance that maintains data for the lifespan of the current request.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication.AppState">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IApplicationState"/> instance that maintains data for the lifespan of the application.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication.Resolver">
            <summary>
            Gets the current <see cref="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication.DataAccessManager">
            <summary>
            Gets the current <see cref="T:Retalix.StoreServices.Model.Infrastructure.DataAccess.IDataAccessManager"/> instance that provides access to the current <see cref="T:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication.Host">
            <summary>
             Get the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Legacy.IStoreNetHost"/> that provides host-reliant capabilities to the <see cref="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication.Configuration">
            <summary>
            Gets the relevant system configuration object according the application hosting environmentfrom.
            This can be based on app.config, web.confug, machine.config etc.
            The returned object is opened for read and write. The ability to actually change the configuration
            depends on the code hosting environment and the current thread permissions.
            <example>var connectionStrings = storeApplication.Configuration.GetSection("connectionStrings"); </example>  
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication.GetConfigurationParam(System.String)">
            <summary>
            Gets the configuration param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication.CurrentServer">
             <summary>
             Gets <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServer"/> for the current servers
            
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreApplication.CurrentVersion">
            <summary>
            Gets <see cref="T:System.String"/> for the current servers version
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreNetApplicationProvider">
            <summary>
            Represent a service that have access to a valid instance of the IStoreNetApplication.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreNetApplicationProvider.StoreApplication">
            <summary>
            Return a valid instance of IStoreNetApplication
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreNetRequest">
            <summary>
            Represents a container for data whose lifetime begins and ends with execution of each request.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreNetRequest.ClientSession">
            <summary>
            The client session that is associated with the current request.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreNetRequest.BusinessUnit">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/> of the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint"/> that initiated the current request.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver">
            <summary>
            Represents the current IoC container functions for resolving components and services.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.ResolveAll``1">
            <summary>
            Resolves and returns all registered implementations of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The service type to resolve.</typeparam>
            <returns>Instances of components registered as the required service implementation.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.ResolveAll(System.Type)">
            <summary>
            Resolves and returns all registered implementations of the given type>.
            </summary>
            <returns>Instances of components registered as the required service implementation.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.Resolve``1">
            <summary>
            Resolves and returns the first registered implementation of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The service type to resolve.</typeparam>
            <returns>Instance of the component registered as the required service implementation.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.Resolve``1(System.String)">
            <summary>
            Resolves and returns the implementation of <typeparamref name="T"/> registered with <paramref name="key"/>.
            </summary>
            <typeparam name="T">The service type to resolve</typeparam>
            <param name="key">The component key</param>
            <returns>Instance of the component registered as the required service implementation with the given key</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.Resolve(System.String,System.Type)">
            <summary>
            Resolves the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.Release(System.Object)">
            <summary>
            Release the component instance, to that the underlined container does not cache or maintain references to it.
            </summary>
            <param name="instance">The component to release.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.ReleaseAll">
            <summary>
            Release all components that have been created since last time ReleaseAll was called
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.Resolve``1(System.Collections.IDictionary)">
            <summary>Resolves and returns the first registered implementation of <typeparamref name="T"/> while allowing a set of parameters to be passed to the constructor.</summary>
            <param name="arguments">The parameters to be passed to the constructor (dictionary of parameter name and value)</param>
             <typeparam name="T">The service type to resolve.</typeparam>
             /// <example> 
             <code lang="cs" description="This example shows how to resolve an interface while specify paramters for use in the class constructor.">
             
             public class TouchPointApplication : ITouchPointApplication
             {
                 public TouchPointApplication(string id)
                 {
                     Id = id;
                 }
             
                 public virtual string Id { get; private set; }
             }
             
             
                 ITouchPointApplication newTouchPointApplication = _resolver.Resolve&lt;ITouchPointApplication&gt;(new Dictionary&lt;string,object&gt; {{"id" ,id}});
             </code>
             </example>
             <returns>Instance of the component registered as the required service implementation.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.Resolve(System.Type)">
            <summary>
            resolve by type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.CanResolve``1">
            <summary>
            Check if the resolver can resolve the specified type
            </summary>
            <typeparam name="T">The type to test</typeparam>
            <returns>true if the resolver can resolve this type</returns>
            <remarks>Use this if the registration of a service is optional instead of try/catch on Resolve</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.CanResolve``1(System.String)">
            <summary>
            Check if the resolver can resolve the specified type with the specific key
            </summary>
            <typeparam name="T">The type to test</typeparam>
            <param name="key">The key of the specific instance you are looking for</param>
            <returns>true if the resolver can resolve this type</returns>
            <remarks>Use this if the registration of a service is optional instead of try/catch on Resolve</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.CanResolve(System.Type)">
            <summary>
            Check if the resolver can resolve the specified type
            </summary>
            <param name="type">The type to test</param>
            <returns>true if the resolver can resolve this type</returns>
            <remarks>Use this if the registration of a service is optional instead of try/catch on Resolve</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.CanResolve(System.Type,System.String)">
            <summary>
            Check if the resolver can resolve the specified type with the specific key
            </summary>
            <param name="type">The type to test</param>
            <param name="key">The key of the specific instance you are looking for</param>
            <returns>true if the resolver can resolve this type</returns>
            <remarks>Use this if the registration of a service is optional instead of try/catch on Resolve</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver.GetKeys``1">
            <summary>Retrieves the registered keys for all implementations of <typeparamref name="T"/>.</summary>
            <typeparam name="T">The service type to resolve.</typeparam>
            <example> 
            <code lang="cs" description="This example shows how to retrieve a list of all names registered for a component.">
             <![CDATA[
             public class RetentionPolicyMaintenanceService
             {
                 private IResolver _resolver;
             
                 public RetentionPolicyMaintenanceService(IResolver resolver)
                 {
                     _resolver = resolver;
                 }
             
                 public bool ValidateEntityType (string entityName)
                 {
                     var registeredEntities = _resolver.GetKeys<IEntityDao>();
                     return registeredEntities.Any(e => e == entityName);
                 }
             }
            ]]>    
             </code>
             </example>
             <returns>List of the keys for registered components for type T.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataChangeType">
            <summary>
            Data change types
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataChangeType.Add">
            <summary>
            Object added to the underline data storage
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataChangeType.Update">
            <summary>
            Object updated in the underline data storage
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataChangeType.Delete">
            <summary>
            Object deleted from the storage.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataChangeType.Undefined">
            <summary>
            There is no exact information regarding operation that was done
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataEntityChange">
            <summary>
            A single data change
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataEntityChange.#ctor(System.Object,Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataChangeType)">
            <summary>
             Create new instance of DataEntityChange
            </summary>
            <param name="data">The data object that changed</param>
            <param name="dataChangeType">The type of change</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataEntityChange.Data">
            <summary>
             The data object that changed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataEntityChange.DataChangeType">
            <summary>
            The change type. Add, update or delete.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork">
            <summary>
            Keeps track of activities during a business transaction that can affect the database.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.Session">
            <summary>
            The data-management session implementation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.ReportingWhSession">
            <summary>
            Get session for reporting warehouse data source.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.GetTdmSessions``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get TDM database sessions according to list of business units.
            If business unit list is empty, a default single TDM session will be returned.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.GetAllTdmSessions``1">
            <summary>
            Get all TDM database sessions
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.CdmSession">
            <summary>
            Get session for CDM data source.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.GetPISession">
            <summary>
            Get session for PI data source.
            </summary>
            <returns>Instance of PI database session</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.Start">
            <summary>
            Begin a new unit-of-work transaction.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.Completed">
            <summary>
            Commit any changes during unit-of-work transaction, and close it. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.Failed">
            <summary>
            Rollback any changes during unit-of-work transaction, and close it.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.RegisterUpdate(System.Object)">
            <summary>
            Register update action of specific business component was made during this instance of unit of work.
            </summary>
            <param name="businessComponent"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.ReqisterAdd(System.Object)">
            <summary>
            Register add action of specific business component was made during this instance of unit of work.
            </summary>
            <param name="businessComponent"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.RegisterDelete(System.Object)">
            <summary>
            Register delete action of specific business component was made during this instance of unit of work.
            </summary>
            <param name="businessComponent"></param>
        </member>
        <member name="E:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.OnSuccessfullyCompleted">
            <summary>
             Raised after successfully completed transaction commit.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.SetSilentMode">
            <summary>
             Sets UOW to silent mode for data synchronization persistence.
             In silent mode, entity changes do not trigger secondary data synchronization.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.IsInSilentMode">
            <summary>
            Gets if UOW is in silent mode for data synchronization persistence.
            In silent mode, entity changes do not trigger secondary data synchronization.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.CleanAllCache">
            <summary>
            Clean all cache.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.OpenConnectionFor(System.String)">
            <summary>
            Get an open DB connection for a specific Database Module
            </summary>
            <param name="moduleName">The data base module you want to get a connection for</param>
            <returns>An Open IDBConnection Connection</returns>
            <remarks>
            This will give you a new connection each time it is called. The caller is in charge of closing the connection.
            If the connection is not closed when the UOW is Completed an Exception will be thrown.
            It is highly recommended that this method be called with a using statement.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.BeginSnapshotMode">
            <summary>
            Start working in Snapshot mode
            </summary>
            <returns>An IDisposable scope object that will end Snapshot mode on Dispose</returns>
            <remarks>In Snapshot mode UnitOfWork will return a connection or Session to the Snapshot DB for all databases with Snapshots</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.EndSnapshotMode">
            <summary>
            End Snapshot mode. 
            </summary>
            <remarks>See <seealso cref="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.BeginSnapshotMode"/> for more info regarding Snapshot Mode.</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.IsSnapshotMode">
            <summary>
            The Unit Of Work is considered in Snapshot only after <cref>BeginSnapshotMode</cref> is invoked and before <cref>EndSnapshotMode</cref> is invoked. 
            </summary>
            <remarks>See <seealso cref="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.BeginSnapshotMode"/> and <seealso cref="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.EndSnapshotMode"/> for more info regarding Snapshot Mode.</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.IsActive">
            <summary>
            The Unit Of Work is considered active after it is opened and before it is failed or completed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.ChangedEntities">
            <summary>
            Entities that were changed in this Unit of Work.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.Parent">
            <summary>
            The parent UnitofWork
            </summary>
            <remarks>Units of work can be nested within each other</remarks>
            <returns>The parent UnitOfWork. Will return null if this UnitOfWork has no parent</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork.DataContainer">
            <summary>
            DataContainer that is associated with this UnitOfWork
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWorkContext">
            <summary>
            Represents Distributed Transaction management module, so business transaction spread between different data sources
            behaves according to transaction ACID definition.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWorkContext.Start(Retalix.StoreServices.Model.Infrastructure.DataAccess.UnitOfWorkOptions)">
            <summary>
            Starts distributed transaction. This will be called by <see cref="T:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork">unit of work</see> on starting.
            <param name="options">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.DataAccess.UnitOfWorkOptions"/> to pass to the started unit of work.</param>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWorkContext.Complete">
            <summary>
            Completes distribute transaction. 
            This will be called by <see cref="T:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork">unit of work</see> indicating successful commit of all open transactions.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWorkContext.Failed">
            <summary>
            Rolls back distributed transaction, which is rolling back all changes done on different data sources. 
            This will be called in case <see cref="T:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork">unit of work</see> failed to commit one of open transactions.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWorkContext.Add(System.IDisposable)">
            <summary>
            Adds the specified disposable.
            </summary>
            <param name="disposable">The disposable.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RtiTracking.IEntityChangeTracker`1.AddedEntities">
            <summary>
            Gets the list of entities which were added to customer order during processing current client request.
            </summary>
            <value>The added entities.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RtiTracking.IEntityChangeTracker`1.UpdatedEntities">
            <summary>
            Gets the list of entities which were updated to customer order during processing current client request.
            </summary>
            <value>The updated entities.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RtiTracking.IEntityChangeTracker`1.DeletedEntities">
            <summary>
            Gets the list of entities which were deleted to customer order during processing current client request.
            </summary>
            <value>The deleted entities.</value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RtiTracking.IEntityChangeTracker`1.ClearAll">
            <summary>
            clear Added, Updated, Deleted entities on end of current request.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.RtiTracking.IRetailTransactionChangeTrackerLocator">
            <summary>
            Interface responsible for retrieving TRI tracking information for Retail Transaction.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RtiTracking.IRetailTransactionChangeTrackerLocator.GetRetailTransactionChangeTracker(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            Gets the specified retail transaction RTI Tracker.
            </summary>
            <param name="retailTransaction">The retail transaction to track.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RtiTracking.IRetailTransactionChangeTrackerLocator.GetCustomerOrderChangeTracker(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.RtiTracking.ICustomerOrderChangeTracker"/> by the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/> Id.
            </summary>
            <param name="customerOrder"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RtiTracking.IRetailTransactionChangeTrackerLocator.GetRescanChangeTracker(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.RtiTracking.ICustomerOrderChangeTracker"/> by the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/> Id
            </summary>
            <param name="customerOrder"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.RtiTracking.ICustomerOrderChangeTracker">
            <summary>
            Interface responsible for providing access to RTI tracking information for given customer order.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RtiTracking.ICustomerOrderChangeTracker.TakeOrderLinesSnapshot(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            If the method <see cref="M:Retalix.StoreServices.Model.Infrastructure.RtiTracking.ICustomerOrderChangeTracker.TakeOrderLinesSnapshot(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)"/> was called first,this method determines which lines are added,changed or deleted
            since last taken snapshot.
            </summary>
            <param name="customerOrder"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RtiTracking.ICustomerOrderChangeTracker.CalculateDiffFromOrderLinesSnapshot(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Creates a snapshot of the customer order's order lines so later when the method <see cref="M:Retalix.StoreServices.Model.Infrastructure.RtiTracking.ICustomerOrderChangeTracker.CalculateDiffFromOrderLinesSnapshot(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)"/>
            is called it will be possible to determine which lines are added,changed or deleted.
            </summary>
            <param name="customerOrder"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RtiTracking.ICustomerOrderChangeTracker.TakePaymentTermsSnapshot(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            If the method <see cref="M:Retalix.StoreServices.Model.Infrastructure.RtiTracking.ICustomerOrderChangeTracker.TakeOrderLinesSnapshot(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)"/> was called first,this method determines which payment terms are added,changed or deleted
            since last taken snapshot.
            </summary>
            <param name="customerOrder"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RtiTracking.ICustomerOrderChangeTracker.CalculateDiffFromPaymentTermsSnapshot(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Creates a snapshot of the customer order's payment terms so later when the method <see cref="M:Retalix.StoreServices.Model.Infrastructure.RtiTracking.ICustomerOrderChangeTracker.CalculateDiffFromOrderLinesSnapshot(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)"/>
            is called it will be possible to determine which payment terms are added,changed or deleted.
            </summary>
            <param name="customerOrder"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterType">
            <summary> Represents counter definition with properties that define it's behavior</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterType.Name">
            <summary>Gets or sets name that identify counter type (example: TransactionCounter or TenderTotalizer)</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterType.MaxValue">
            <summary>Gets or sets maximum value prohibit for this counter, exceeding this number will cause reseting of this counter </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Counter.IRunningNumberService">
            <summary>
            Service to supply sequential unique identifiers, that fit specific business requirements.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Counter.ICounter">
            <summary>Represents entity which stores the number of times a particular event or process has occurred</summary>
             <remarks>
             Following counter model also supports totalizer capabilities (in future versions counter and totalizer will be separated into different concepts)
             </remarks> 
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Counter.ICounter.CounterType">
            <summary>Gets or sets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterType">counter type</see></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Counter.ICounter.EntityId">
            <summary>Gets or sets the Id of the entity that is being counted.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Counter.ICounter.Value">
            <summary>Gets or sets the number of times counts were made.</summary>
             <remarks>
             As counter can be used in this version also as totalizer, value can also represents aggregation of the incremented amounts
             </remarks> 
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Counter.ICounter.ValidFrom">
            <summary>The date from which the counter had been created or reseted </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Counter.ICounter.Increment(System.Decimal)">
            <summary>Increment the counter by the amount specified.</summary>
            <param name="incrementAmount">The amount to add to the counter value</param>
            <returns>The new Value</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Counter.ICounter.Reset">
            <summary>Reset the counter to the default value.</summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterDao">
            <summary>Represents an entity which is responsible for creation and persistence of Counters</summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterDao.Get(System.String,System.String)">
            <summary>Gets existing counter with the specified name and EntityId. A new counter is created if no existing counter is found.</summary>
            <param name="name">The Name of the counter to retrieve.</param>
            <param name="entityId">The entityId identifying the desired counter.</param>
            <returns>The existing (or newly created) counter.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterDao.GetIfExist(System.String,System.String)">
            <summary>Gets existing counter with the specified name and EntityId. Not create a new counter if no existing counter is found.</summary>
            <param name="name">The Name of the counter to retrieve.</param>
            <param name="entityId">The entityId identifying the desired counter.</param>
            <returns>The existing (or null if now exist) counter.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterDao.Get(System.String,System.String,System.Boolean)">
            <summary>Gets existing counter with the specified name and EntityId. A new counter is created if no existing counter is found.</summary>
            <param name="name">The Name of the counter to retrieve.</param>
            <param name="entityId">The entityId identifying the desired counter.</param>
            <param name="lockForUpdate">Flag if to lock the counters until the end of the request</param>
            <returns>The existing (or newly created) counter.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterDao.Get(System.String)">
            <summary>
            
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterDao.Save(Retalix.StoreServices.Model.Infrastructure.Counter.ICounter)">
            <summary>Save a counter.</summary>
            <param name="counter">The counter to save.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterDao.Create(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="touchPointId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterDao.SaveAndFlush(Retalix.StoreServices.Model.Infrastructure.Counter.ICounter)">
            <summary>
            
            </summary>
            <param name="counter"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterDao.UpdateCounters(System.Collections.Generic.IList{Retalix.StoreServices.Model.Infrastructure.Counter.CounterChangeData})">
            <summary>
            Update the counter values through a stored procedure
            All the logic is done within the DB
            </summary>
            <param name="countersList">List of the counter changes</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Counter.ICounterDao.ImmediateIncrease(System.String,System.String)">
            <summary>
            Get and Increment The counter Immediately
            </summary>
            <param name="name">
             The name of the counter (for example:'TrasactionId')
            </param>
            <param name="entityId">
             entityId = storeId + "-" + touchPointId
            </param>
            <returns>
            Counter after the incrementation and save
            </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataIntegrity.IDataIntegrityConfigurationDao">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataIntegrity.IDataIntegrityConfigurationDao.Get(System.String)">
            <summary>
            
            </summary>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataIntegrity.IDataIntegrityConfigurationDao.Delete(System.String)">
            <summary>
            
            </summary>
            <param name="entityName"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataIntegrity.IDataIntegrityConfigurationDao.AddOrUpdate(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="entityName"></param>
            <param name="calculationMethod"></param>
            <param name="databaseName"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataIntegrity.IDataIntegrityConfigurationDao.GetAll">
            <summary>
            Retrieves all Data Integrity configurations
            </summary>
            <returns>Collection of DataIntegrityConfigurations</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IEntityToDtoConverter">
            <summary>
            Do not implement this interface directly.
            Use the generic interface instead.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IEntityToDtoConverter.Target">
            <summary>
            The version that is compatible with the specific DTO (INamedObject) type handled by this converter.
            This converter will not be used for versions prior to this target version.
            When multiple converters are registered for the same IMovable, each one having a different target version,
            the best matching converter is the one with the highest target version that still meets the above rule.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IEntityToDtoConverter.Convert(Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable,Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataChangeType)">
            <summary>
            Converts an IMovable from the current version to a DTO object that is compatible with the target version.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IEntityToDtoConverter.ConvertBack(Retalix.StoreServices.Model.Infrastructure.DataMovement.INamedObject,Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataChangeType)">
            <summary>
            Converts a DTO from the target version to an IMovable of the current version.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IEntityToDtoConverter.DtoType">
            <summary>
            The DTO type compatible with the target version. (must be a sub-type of INamedObject)
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IEntityToDtoConverter.GetTargetEntityNames(System.String,Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataChangeType)">
            <summary>
            Override this method if the entity name has changed since the target version.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IEntityToDtoConverter`1">
            <summary>
            Provides methods to convert an IMovable type to a serializable DTO type, where these DTO's are compatible with a specific
            target version.
            </summary>
            <typeparam name="TMovable">The specific movable type that this converter can convert.</typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IMultiVersionMovableServiceResolver">
            <summary>
            Contains services required for DMS to handle a movable type, including services to support backward compatibility
            with older versions.
            Registering this resolver would make DMS to resolve all the EntityToDtoConverter, as generics of the specific IMovable type,
            for multi-version conversing.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IMultiVersionMovableServiceResolver.ComponentName">
            <summary>
            The name of the R10 component which its version is relevant for this movable type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IMultiVersionMovableServiceResolver.MovableType">
            <summary>
            The specific type of the IMovable.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.DtosForVersions">
            <summary>
            Contains a mapping between a set of Dto and all the versions that the Dtos are relevant for.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IEntityToDtoMapper">
            <summary>
            Map set of entities into Dtos according to versions info.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IEntityToDtoMapper.Map(Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable[],Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.MappingMetadata,Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataChangeType)">
            <summary>
            Map entities into a set of Dtos.
            For every DtosForVersions in the result - all Dtos in DtosForVersions.Dtos are relevant for all the versions in the DtosForVersions.Versions
            </summary>
            <param name="movables"></param>
            <param name="mappingMetadata"></param>
            <param name="changeType"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IEntityToDtoMapper.MapBack(Retalix.StoreServices.Model.Infrastructure.DataMovement.INamedObject[],Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.MappingMetadata,Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataChangeType)">
            <summary>
             Map back a set of Dtos into entities according to the version.
            </summary>
            <param name="dtos"></param>
            <param name="mappingMetadata"></param>
            <param name="changeType"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IEntityToDtoMapper.GetEntityNamesForVersion(System.String,Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.MappingMetadata,Retalix.StoreServices.Model.Infrastructure.UnitOfWork.DataChangeType)">
            <summary>
            Get the entity (old) name according to the version
            </summary>
            <param name="entityName"></param>
            <param name="mappingMetadata"></param>
            <param name="changeType"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.IEntityToDtoMapper.GetNamedObjectType(System.String,Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.MappingMetadata)">
            <summary>
            Get the named object type according to the version for de-serialization
            </summary>
            <param name="entityName"></param>
            <param name="mappingMetadata"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.ICompatibilityMovableServicesResolver">
            <summary>
             Allow to entity to provide the services in order to support backward compatibility
            </summary>    
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.MappingMetadata">
            <summary>
             MappingMetadata, contains transport metadata for movable changing.
            </summary>    
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.MappingMetadata.SourceNodeVersion">
            <summary>
            Gets the source node version from which the data was sent.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.Versioning.MappingMetadata.TargetNodesVersion">
            <summary>
            Gets the target node version to which the data is sent.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions">
            <summary>
            Class TransportationDefinitions
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.UploadOutboxExchangeName">
            <summary>
            Gets the name of the upload outbox exchange.
            </summary>
            <value>The name of the upload outbox exchange.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.UploadOutboxQueueName">
            <summary>
            Gets the name of the upload outbox queue.
            </summary>
            <value>The name of the upload outbox queue.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.UploadInboxExchangeName">
            <summary>
            Gets the name of the upload inbox exchange.
            </summary>
            <value>The name of the upload inbox exchange.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.UploadInboxQueueName">
            <summary>
            Gets the name of the upload inbox queue.
            </summary>
            <value>The name of the upload inbox queue.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.DownloadOutboxExchangeName">
            <summary>
            Gets the name of the download outbox exchange.
            </summary>
            <value>The name of the download outbox exchange.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.DownloadOutboxQueueName">
            <summary>
            Gets the name of the download outbox queue.
            </summary>
            <value>The name of the download outbox queue.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.DownloadOutboxTransportMessageQueueName">
            <summary>
            Gets the name of the download outbox transport message queue.
            </summary>
            <value>The name of the download outbox transport message queue.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.DownloadDispatcherExchangeName">
            <summary>
            Gets the name of the download children exchange at the parent server.
            </summary>
            <value>The name of the download children exchange at the parent server.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.UploadDeadletterExchangeName">
            <summary>
            Gets the name of the upload deadletter exchange.
            </summary>
            <value>The name of the upload deadletter exchange.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.DownloadDeadletterExchangeName">
            <summary>
            Gets the name of the download deadletter exchange.
            </summary>
            <value>The name of the download deadletter exchange.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.DownloadDeadletterQueueName">
            <summary>
            Gets the name of the download deadletter queue.
            </summary>
            <value>The name of the download deadletter queue.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.UploadDeadletterQueueName">
            <summary>
            Gets the name of the upload deadletter queue.
            </summary>
            <value>The name of the upload deadletter queue.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.DownloadQueuePrefix">
            <summary>
            Gets the prefix of the queue name for each direct child node at the parent server.
            </summary>
            <value>The prefix of the queue name for each direct child node at the parent server.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.WarehouseIntegrationExchangeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.WarehouseIntegrationQueueName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.WarehouseIntegrationDeadletterExchangeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.WarehouseConfigurationExchangeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.WarehouseConfigurationQueueName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.ColdStartInstrumentationExchangeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.ColdStartInstrumentationQueueName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.ColdStartDeltaExchangeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.ColdStartDeltaQueueName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.ColdStartDeltaParentToFreshChild">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.PriorityUploadInboxQueueName">
            <summary>
            Gets the name of the priority upload inbox queue.
            </summary>
            <value>The name of the priority upload inbox queue.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.TransportationDefinitions.PriorityUploadInboxExchangeName">
            <summary>
            Gets the name of the priority upload inbox exchange.
            </summary>
            <value>The name of the priority upload inbox exchange.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.EntityDefaultDto">
            <summary>
            This is a default implementation of a Dto class for an entity
            Entity should create a specific Dto for it's needs
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.INamedObject">
            <summary>
            An interface used by each movable entity to map into a simple class to be serialized and transfer.
            </summary>    
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.Filter.IDmsFilter">
            <summary>
            Represent the filter in use by the dms to filter both inbox and outbox.
            </summary>      
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.Filter.IDmsFilter.GetRelevantBusinessUnits(Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable)">
            <summary>
            Gets the relevant business units a specific entity is relevant for. 
            </summary>
            <param name="entity">The entity to get the relevant business for.</param>
            <returns>An IEnumerable of the relevant business units.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.Filter.IDmsFilter.IsRelevant(Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable)">
            <summary>
            Return the indication whether this filter is relevant for this entity.
            </summary>
            <param name="entity">The entity to check filter.</param>
            <returns>True if this filter is relevant to the entity;otherwise false.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.Filter.IMovableFilter.Filter(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable},System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit})">
            <summary>
             filters the entities by compare HierarchyPath in the entity to the HierarchyPath in the Node. 
             returns only the entities that pass the filter
            </summary>
            <param name="entities"></param>
            <param name="businessUnits"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.IColdStartDao">
            <summary>
            Used in the cold start process to efficiently save bulk of data.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.IFilteredMovableDao">
            <summary>
            Provides API for DAO operations on entities transferred via the DMS data streaming channel. 
            Each business component, which is distributed by the DMS, is required to provide 
            implementation of this interface.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.IFilteredMovableDao.GetAll(System.String[])">
            <summary>
            Used when performing cold start process. Returns all entities of specific type in repository.
            </summary>
            <param name="businessUnits">Business units to filter by.</param>
            <returns>All entities of specific type in repository</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.IFilteredMovableDao.GetAll(Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable,System.String[])">
            <summary>
            Used when resuming cold start process (paging).
            </summary>
            <param name="startingPosition">Last entity, which successfully reached recipient</param>
            <param name="businessUnits">Business units to filter by.</param>
            <returns>All entities of specific type in repository starting from specific position</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovableFormatter">
            <summary>
            Provides API for data transfer via the DMS data streaming channel. Each business component, 
            which is distributed by the DMS, is required to provide implementation of this interface.
            Implementation must return the enumeration in the order it was accepted, i.e. given input 
            movables = (movable2, movable1, movable3) the expected return is (x2, x1, x3) 
            </summary>   
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovableFormatter.Serialize(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable})">
            <summary>
            Used when sending entity through DMS to recipient. Performs serialization of entities in exactly 
            same order as received in argument collection.
            </summary>
            <param name="movables">Entity collection to be sent</param>
            <returns>Enumeration of serialized input entities</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovableFormatter.Deserialize(System.Collections.Generic.IEnumerable{System.Xml.XmlDocument})">
            <summary>
            Used when accepting entities sent through DMS on recipient side. Performs de-serialization
            of entities in exactly same order as received in argument collection.
            </summary>
            <param name="contracts">Enumeration of serialized input entities</param>
            <returns>Entity collection to be processed on client side</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovableServicesResolver">
            <summary>
            The Resolver of the Movable (DMS) services.    
            </summary>    
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovableServicesResolver.Formatter">
            <summary>
            Gets the entity IMovableFormatter. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovableServicesResolver.MovableDao">
            <summary>
            Gets the entity IMovableDao. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.DeleteAllProviders.ITruncateHelperDao">
            <summary>
             ITruncateHelperDao provide method to truncate table
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.DeleteAllProviders.ITruncateHelperDao.TruncateTable(System.String,System.String)">
            <summary>
            delete specific provider's data from database
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable">
            <summary>
             API that represents an entity in the system that needs to be transferred and moved by the DMS. 
             The IMovable interface has two functionality purposes: 
             1 - Mark the business component which should be moved by DMS. 
             2 - Supply the name of this movable entity. The DMS framework uses the name to locate the entity formatter and data access implementers. 
            </summary>  
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable.EntityName">
            <summary>
             Gets the entity name.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovableDao">
            <summary>
            Provides API for DAO operations on entities transferred via the DMS data streaming channel. 
            Each business component, which is distributed by the DMS, is required to provide 
            implementation of this interface.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovableDao.Add(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable})">
            <summary>
            Used on addition of a new entities is propagated through DMS.
            </summary>
            <param name="movables">Entities enumeration, which should be processed as new</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovableDao.Update(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable})">
            <summary>
            Used on update of existing entities, which propagated through DMS.
            </summary>
            <param name="movables">Entities enumeration to update</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovableDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable})">
            <summary>
            Used on deletion of existing entities, which propagated through DMS.
            </summary>
            <param name="movables">Entities enumeration to delete</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEvent">
            <summary>
            <para>
            Represents a business event that occurred in the system and may be dispatched to handlers.
            Concrete domain events must derive from this class to be used with the domain events system.
            Domain events can be dispatched to handlers in the same process using the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEventsDispatcher">IDomainEventsDispatcher</see>
            </para>
            <para>
            Handlers register to interesting events by implementing the IEventHandler&lt;T&gt; interface and registering with the IOC container for this interface.
            Handlers that implement IEventHandler&lt;T&gt; will be notified when this event type or any derived event type are raised.
            Specifically handlers that implement IEventHandler&lt;DomainEvent&gt; will be notified for any event type raised.
            </para>
            </summary>
            <example>
            <code lang="cs">
            {
                var productSellingEvent = new ProductSellingEvent(order, saleInformation, inputParametrs);
                GlobalEnvironment.EventsDispatcher.Dispatch(productSellingEvent);
            }
            </code>"/>
            </example>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEventsDispatcher">
            <summary>
            <para>
            Dispatches a domain event <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEvent"/> that occurred in the system to handlers registered handlers in the same process.
            The default handler can be obtained through the global environment. You do not normally need to create another dispatcher.
            </para>
            <para>
            Handlers register to interesting events by implementing the IEventHandler&lt;T&gt; interface and registering with the IOC container for this interface.
            Handlers that implement IEventHandler&lt;T&gt; will be notified when this event type or any derived event type are raised.
            Specifically handlers that implement IEventHandler&lt;DomainEvent&gt; will be notified for any event type raised.
            </para>
            </summary>
            <example>
            <code lang="cs">
            {
                var productSellingEvent = new ProductSellingEvent(order, saleInformation, inputParametrs);
                GlobalEnvironment.EventsDispatcher.Dispatch(productSellingEvent);
            }
            </code>"/>
            </example>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEventsDispatcher.Dispatch``1(``0)">
            <summary>
            Raises the event, dispatching it all interested handlers that can be reached through the default dispatcher.
            </summary>
            <param name="domainEvent">The event to be raised, containing the relevant data about the business situation.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEventsDispatcher.ClearCallbacks">
            <summary>
            Clears callbacks passed to Register on the current thread
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEventsDispatcher.Register``1(System.Action{``0})">
            <summary>
            Registers a callback for the given domain event
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEventsDispatcher.Unregister``1(System.Action{``0})">
            <summary>
            Unregisters a callback for the given domain event
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Events.IEventHandler`1">
            <summary>
            Implement this interface in order to be notified on DomainEvents being raised.
            See <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEvent"/> for more details.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Globalization.IDateRange.FromDate">
            <summary>
            Represents a start date of the data range
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Globalization.IDateRange.ToDate">
            <summary>
            Represents an end date of the data range
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Globalization.IDateRange.Overlaps(Retalix.StoreServices.Model.Infrastructure.Globalization.IDateRange)">
            <summary>
            Whether the current date range overlaps with other one
            </summary>
            <param name="otherRange"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Globalization.IDateRange.IsSubRangeOf(Retalix.StoreServices.Model.Infrastructure.Globalization.IDateRange)">
            <summary>
            Whether the current date range is contained within another wider period
            </summary>
            <param name="otherRange"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Globalization.IDateRange.IsDateIncluded(Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Whether a given <see cref="T:System.DateTime"/> value is contained within the current date range
            </summary>
            <param name="givenDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Globalization.IDateRange.IsValid">
            <summary>
            Whether the current date range is well configured, i.e. start date is ealier than the end date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Globalization.IDateRange.Expired">
            <summary>
            Whether the current, well-configured date range is expired.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Globalization.IDateTimeService">
            <summary>
            Represent date-time services that are usually provided by "System.DateTime"
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Globalization.IDateTimeService.Now">
            <summary>
            Return the date-time value that represent Now.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Globalization.IDateTimeService.GetBusinessUnitCurrentTime(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Get date time according to business unit localization info.
            </summary>
            <param name="businessUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Globalization.IDateTimeService.GetBusinessUnitCurrentTime">
            <summary>
            Get date time according to business unit localization info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Globalization.IDateTimeService.ConvertTimeToBusinessUnitTime(System.DateTime,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            convert time to business unit time.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Globalization.ILocalizedDescription">
            <Summary>
             This interface holds the Localized Description definition.
             Localized description is a description assigned to some culture.
             For example, Product could have two descriptions for English and French culture.
            </Summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Globalization.ILocalizedDescription.Value">
            <summary>
            The localized description data
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Globalization.ILocalizedDescription.Culture">
            <summary>
            The culture name in the format "lnguagecode2-country/regioncode2", ex: en-US, fr-CA
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription">
            <Summary>
             This interface holds the Localized Description definition.
             Localized description is a description assigned to some culture.
             For example, Product could have two descriptions for English and French culture.
            </Summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription.Value">
            <summary>
            The description
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription.Culture">
            <summary>
            Culture for this description
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription.GetLocalizedDescription(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Globalization.ILocalizedDescription},System.String)">
            <summary>
            receive description by culture. if description not found - return the first one.
            </summary>
            <param name="descriptions"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.ICtmSegmentUtility.GetRetailSegment(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            Gets the first relevant segment
            </summary>
            <param name="touchPoint">touch point to use</param>
            <returns>relevant segment or null</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.ICtmSegmentUtility.IsCtmSegment(System.String)">
            <summary>
            Checks whether the segment is ctm
            </summary>
            <param name="segmentId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.ICtmSegmentUtility.IsCtmDisableMode">
            <summary>
            Return the CTM state mode, whether it is enabled or not
            </summary>
            <returns>State of the CTM mode</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Search.SearchResult`1">
            <summary>
            Define the collection of search results
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.AccessServices.AdaptorDescriptor">
            <summary>
            This class describe the adaptor of the AccessServices api to be used in a multi version enviroment 
            It include information about the adaptor (new to old adaptor or vice versa) interface name etc.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.AccessServices.Attributes.AccessServicesOldInterfaceNameAttribute">
            <summary>
            Marker interface to indicate a interface in old version.
            AssemblyQualifiedName is the old interface name and location in the form of "[FullName], [AssemblyName]".
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.AccessServices.Attributes.AccessServicesRemotableAttribute">
            <summary>
            Attribute that mark interface is as allowed to access service remote invocation.
            The interface or class that was marked with this attribute, must implement 
            the <see cref="T:Retalix.StoreServices.Model.Infrastructure.AccessServices.IAccessServiceRemotable">IAccessServiceRemotable</see> marker interface,
            to be registered correctly in the system.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.AccessServices.Attributes.AccessServicesRemotableAttribute.#ctor(System.String)">
            <summary>
             Constructor will allow assignment of name to the specific interface so it will be possible to tie it to a specific Access Services Policy.
            </summary>
            <param name="entityName"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.AccessServices.Attributes.AccessServicesRemotableAttribute.DefaultPolicy">
            <summary>
             the default policy Access Services in case there is no / not use configuration 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.AccessServices.Attributes.AccessServicesRemotableAttribute.EntityName">
            <summary>
            Return policy type defined by policy attribute
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.AccessServices.Attributes.AccessServicesRemotableMethodAttribute">
            <summary>
            Attribute that mark method as allowed to access service remote invocation
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.AccessServices.IAccessServiceRemotable">
            <summary>
            Marker interface to indicate a services is allowed to access services using remote invocation.
            This must be used with the <see cref="T:Retalix.StoreServices.Model.Infrastructure.AccessServices.Attributes.AccessServicesRemotableAttribute">AccessServicesRemotableAttribute</see> 
            set to with the relevant properties on the same interface.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder">
            <summary>
             Provides methods in order to populate and build the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.SetData(System.String,System.String)">
            <summary>
             Set additional data in the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.SetUser(System.String)">
            <summary>
             Set user in the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.SetTouchPoint(System.String)">
            <summary>
             Set touchpoint in the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.SetTimestamp(System.String)">
            <summary>
             Set timestamp in the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.SetURL(System.String)">
            <summary>
             Set URL in the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.SetHttpRequestHeader(System.String)">
            <summary>
             Set http request header in the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.SetHttpResponseHeader(System.String)">
            <summary>
             Set http response header in the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.SetSource(System.String)">
            <summary>
             Set source in the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.AddRtiRequestHeader(System.String)">
            <summary>
             Add RTI request header in the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.SetRtiServiceName(System.String)">
            <summary>
             Add RTI Service name in the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.AddRtiResponseHeader(System.String)">
            <summary>
             Add RTI response header in the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.SetRtiStatus(System.String)">
            <summary>
             Set RTI status for single request in the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.SetRtiStatusForAll(System.String)">
            <summary>
             Set RTI status for each wrapped request in the RTI Audit Log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.BuildLog">
            <summary>
             Build and return the RTI Audit Log object
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogBuilder.ShouldRun">
            <summary>
             Indication whether RTI Audit Logging is required 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogWriter">
            <summary>
            Provides method for RTI Audit Log writing
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IRTIAuditLogWriter.Log(Retalix.StoreServices.Model.Infrastructure.Audit.RTIAuditLogInfo)">
            <summary>
            Writing the RTI Audit Log
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Audit.RTIAuditLogInfo">
            <summary>
            This class represents an RTI Audit Log that used for recording
            some information of operation in the system.
            </summary> 
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.RTIAuditLogInfo._extendedLogData">
            <summary>
            Additional data of the current operation
            </summary> 
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.RTIAuditLogInfo.User">
            <summary>
            User of the current operation
            </summary> 
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.RTIAuditLogInfo.TouchPoint">
            <summary>
            Touchpoint through which a request is sent to perform the current operation
            </summary> 
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.RTIAuditLogInfo.Timestamp">
            <summary>
            Timestamp of the current operation
            </summary> 
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.RTIAuditLogInfo.URL">
            <summary>
            URL of the current operation
            </summary> 
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.RTIAuditLogInfo.HttpRequestHeader">
            <summary>
            Http request header of the current operation
            </summary> 
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.RTIAuditLogInfo.HttpResponseHeader">
            <summary>
            Http response header of the current operation
            </summary> 
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.RTIAuditLogInfo.Source">
            <summary>
            IP from which the request for the current operation is sent
            </summary> 
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.RTIAuditLogInfo.RTIInfo">
            <summary>
            List of RTIInfo of the current operation
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.RTIAuditLogInfo.#ctor">
            <summary>
            List of RTIInfo of the current operation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.RTIAuditLogInfo.ExtendedLogData">
            <summary>
             Extension base audit log data.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Audit.RTIInfo">
            <summary>
             Represents execution information of a single request
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.RTIInfo.RequestHeader">
            <summary>
             The header of the current request
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.RTIInfo.ResponseHeader">
            <summary>
             The header of the current response
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.RTIInfo.Status">
            <summary>
             The execution status of the current request
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.RTIInfo.ServiceName">
            <summary>
             The execution service name of the current request
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog">
            <summary>
            This class represents an Audit Log that used for recording
            some events that has been made (not necessarily during a retail transaction).
            It includes information about the event's timestamp, data, user etc.
            </summary>    
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories">
            <summary>
            This class represents the Audit log's category.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.EPSDeclinedAuthorizations">
            <summary>
             Eps authorizations declinations category
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.EPSCancelAuthorizations">
            <summary>
             Eps authorizations cancel category
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.BusinessRuleActivity">
            <summary>
             Business Rule Activity category
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.RestrictionActivity">
            <summary>
             Conditional Restriction Activity category
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.RelatedActivity">
            <summary>
            Activity that represent a link to another activity
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.CouponRejctedActivity">
            <summary>
            Activity that represent a Coupon rejection
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.OperatorBypassApproval">
            <summary>
            Audit of bypass made by an operator.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.RestrictedSell">
            <summary>
            Audit of sell action that was stopped due to a selling-restriction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.ItemNotFound">
            <summary>
            Audit of item lookup when item was not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.DeclinedOnlineItemAuthorization">
            <summary>
            Audit of declined online item authorization
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.CustomerNotFound">
            <summary>
            Audit of customer lookup when customer was not found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.CustomerFound">
            <summary>
            Audit of customer lookup when customer was found
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.TipInNotAllowed">
            <summary>
            Audit of failure when adding a tip
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.TipApproved">
            <summary>
            Audit of tip approved
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Categories.ProviderOffline">
            <summary>
            Audit of customer provider is offline
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Id">
            <summary>
            The Audit Log's Unique Identification.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.RelatedEntity">
            <summary>
            The Audit's log related entity (type and key).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Category">
            <summary>
            The Audit's log category.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.AuditTime">
            <summary>
            The Audit log's recorded date and time.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.IdmUser">
            <summary>
            The User the invoked the audit's event.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Data">
            <summary>
            The Audit's log data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog.Action">
            <summary>
            The Action created the audit log.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Audit.IAuditLogData">
            <summary>
             This class represent the AuditLogData that will be written to the DB.
             This is a base class that must be serializable.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLogRelatedEntity">
            <summary>
            This class represents the audit log's related entity.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLogRelatedEntity.Type">
            <summary>
            Related entity's type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.AuditLogRelatedEntity.Key">
            <summary>
            Related entity's key.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Audit.IAuditLogDao">
            <summary>
            This interface responsible to save the audit log entity,
            retrieve audit log according to the category.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IAuditLogDao.Add(Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog)">
            <summary>
            Add a new audit log data. This audit is persisted regardless of any future failures.
            </summary>
            <param name="auditLog">Audit Log</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IAuditLogDao.AddOnSuccessfulUnitOfWork(Retalix.StoreServices.Model.Infrastructure.Audit.AuditLog)">
            <summary>
            Add a new audit log data. Audit is committed only if the current unit of work succeeded.
            </summary>
            <param name="auditLog">Audit Log</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IAuditLogDao.GetAuditLogByRelatedEntity(System.Type,System.String)">
            <summary>
            Gets the audit logs by the given related entity type and key.
            </summary>
            <param name="relatedEntityType">AuditLog's related entity's Type</param>
            <param name="relatedEntityKey">AuditLog's related entity's key</param>
            <returns>Audit Log</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IAuditLogDao.GetAuditLogByRelatedEntityAndCategory(System.Type,System.String,System.String)">
            <summary>
             Gets the audit logs by the given related entity type, key and category
            </summary>
            <param name="relatedEntityType">AuditLog's related entity's type</param>
            <param name="relatedEntityKey">AuditLog's related entity's key</param>
            <param name="category">AuditLog's category</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IAuditLogDao.GetAuditLogByCategory(System.String)">
            <summary>
            Gets an audit logs by the given category.
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IAuditLogDao.GetAll">
            <summary>
            Gets All the audit logs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IAuditLogDao.GetAuditLogById(System.Int32)">
            <summary>
            Gets an audit log by the given id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Audit.IAuditLogDao.DeleteAuditLogByRelatedEntity(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Audit.AuditLogRelatedEntity})">
            <summary>
            Delete an audit logs by the given related entity.
            </summary>
            <param name="relatedEntity">AuditLog's related entitys</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BoolValidationOption">
            <summary>
            Generic type for boolean validation
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessServiceRequestContext">
            <summary>
            Represents contextual data relating to the currently executing <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IBusinessService">IBusinessService</see> instance.
            </summary>
            <remarks>
            Currently used by the business rules engine for the purpose of documenting triggered <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule">IBusinessRule</see> entities
            in the context of client/server conversations.
            <seealso cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IConversationRepository"/>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessServiceRequestContext.RequestId">
            <summary>
            Gets or sets a unique id generated for each incoming service call.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessServiceRequestContext.ServiceName">
            <summary>
            Gets or sets the name of the currently executing <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IBusinessService">IBusinessService</see> instance.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataExtractor.ILinkAssociationExtractor.Extract(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Boolean)">
            <summary>
            Get a collection of link associations per product and business unit
            </summary>
            <param name="product">A product to get his related LinkGroups</param>
            <param name="businessUnit">The related Business Unit</param>
            <param name="useAccessServices">Use access services to extract a collection of links.
            Should be true when the link groups will not be found locally - mostly on return from another store.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataExtractor.ILinkAssociationExtractor.ExtractRange(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct},Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Boolean)">
            <summary>
            Get a collection of link associations per multiple products and business unit
            </summary>
            <param name="products"></param>
            <param name="businessUnit"></param>
            <param name="useAccessServices">Use access services to extract a collection of links.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataExtractor.ILinkGroupDataExtractor">
            <summary>
            Extracts LinkGroups from database
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataExtractor.ILinkGroupDataExtractor.Extract(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct},Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Boolean)">
            <summary>
            Extracts from database a collection of products and their LinkGroups
            </summary>
            <param name="products">A collection of products to get their LinkGroups</param>
            <param name="businessUnit">The related Business Unit to get the associated LinkGroups.
            If null then it will retrieve all LinkGroups related to that product</param>
            <param name="useAccessServices">Use access services to extract a collection of links.
            Should be true when the link groups will not be found locally - mostly on return from another store.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ExtensibleEnumAliasAttribute">
            <summary>For legacy field names and values support</summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.IConfigurationValidator`1">
            <summary>
            Infra interface for configuration validation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.NullableValidationOption">
            <summary>
            Generic type for nullable validation
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.SortOrder">
            <summary>
            Sort order eumeration.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.TextCriterionMatchMode">
            <summary>
            Represents an enumeration for a string search type.
            </summary>
            <remarks>
            When a search is invoked, the string to look up for can be determined whether to look it:
            <para>
            <list type="bullet">
            <item>
            <description>Not exact match</description>
            </item>
            <item>
            <description>Exact match</description>
            </item>
            <item>
            <description>In the beginning</description>
            </item>
            <item>
            <description>In the end</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.TextCriterionMatchMode.BestMatch">
            <summary>
            Results should contain in some way the given string, based on search provider.
            </summary>
            <remarks>
            Actual behavior will be determined by the search engine used. (SQL Like expression, freetext engine, document index engine).
            For instance, while searching for 'abc', default SQL Server search will result in: ...LIKE '%abc%' expression.
            </remarks>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.TextCriterionMatchMode.Exact">
            <summary>
            Results should exactly match the given string.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.TextCriterionMatchMode.StartsWith">
            <summary>
            Results should begin with the given string.
            </summary>
            <remarks>
            Note that search provider might give more results than expected due to word indexing and thesarus usage.
            For instance, while searching for 'apple', SQL Server CONTAINS search will return both 'Apple pie' and 'red apple'
            </remarks>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.TextCriterionMatchMode.EndsWith">
            <summary>
            Results should end with the given string.
            </summary>
            <remarks>
            Note that not all search providers supports this mode.
            For instance, SQL Server CONTAINS does not provide such functionality
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataAccess.IDataAccessManager">
            <summary>
             Represents an object that provides access tot he current <see cref="T:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataAccess.IDataAccessManager.DisposeActiveUnitOfWork">
            <summary>
            Removes Unit Of Work from container. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataAccess.IDataAccessManager.GetOrCreateActiveUnitOfWork">
            <summary>
            Return the current active unit of work, if not exist returns new Unit Of Work. 
            </summary>
            <returns>An active unit of work</returns>
            <remarks>This method is very dangerous since it implicitly opens a UOW, please use CreateUnitOfWork and GetCurrentUnitOfWork instead</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataAccess.IDataAccessManager.CompleteActiveUnitOfWork">
            <summary>
            Will complete the UnitOfWork associated with the current request
            </summary>
            <remarks>If no unit of work has been created during this request this method will do nothing</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataAccess.IDataAccessManager.FailActiveUnitOfWork">
            <summary>
            Will rollback the UnitOfWork associated with the current request
            </summary>
            <remarks>If no unit of work has been created during this request this method will do nothing</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataAccess.IDataAccessManager.GetActiveUnitOfWork">
            <summary>
            Get the active UnitOfWork
            </summary>
            <returns>UnitOfWork or null if there is not active UnitOfWork</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataAccess.IDataAccessManager.GetNewUnitOfWork">
            <summary>
            Get a new UnitOfWork that is not associated with the current request
            </summary>
            <returns>A new UnitOfWork that has not been started yet</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataAccess.IDataAccessManager.CreateUnitOfWork(Retalix.StoreServices.Model.Infrastructure.DataAccess.UnitOfWorkOptions)">
            <summary>
            Create a new UnitOfWork that will become a child scope of the current UnitOfWork
            </summary>
            <returns>An active unit of work, that is now the Current UnitOfWork</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataAccess.UnitOfWorkOptions">
            <summary>
            The transactional option used to start <see cref="T:Retalix.StoreServices.Model.Infrastructure.UnitOfWork.IUnitOfWork"/>
            These options are as defined in .NET System.Transactions namespace.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataAccess.UnitOfWorkOptions.TransactionScopeOption">
            <summary>
            Options for creating a transaction scope.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataAccess.UnitOfWorkOptions.IsolationLevel">
            <summary>
            The isolation level of the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataAccess.UnitOfWorkOptions.Timeout">
            <summary>
            The transaction timeout.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.EntityRegistration">
            <summary>
            Defines the structure for registrung an Entity type with IEntityRegistrationFacility.
            The initialization is done fluently starting with the static "For" method to create and configure a new instance.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.EntityRegistration.#ctor(System.Type,System.Type)">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
            <param name="interfaceType"></param>
            <param name="idType"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.EntityRegistration.DaoInterfaceRegistration`2">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.EntityRegistration.DaoImplementationRegistration">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.EntityRegistration.DaoResourceImplementationRegistration">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.EntityImplementationRegistration">
            <summary>
            Defines the structure for registrung an Entity type with IEntityRegistrationFacility.
            The initialization is done fluently starting with the static "For" method to create and configure a new instance.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.EntityImplementationRegistration.#ctor(System.Type)">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
            <param name="abstractInterfaceType"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.EntityImplementationRegistration.InterfaceTypeRegistration`2">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.EntityImplementationRegistration.ConcreteImplementationNameRegistration">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.EntityImplementationRegistration.ConcreteImplementationClassRegistration">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.EntityImplementationRegistration.ImplementationDaoResourceImplementationRegistration">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.EntityExtenderRegistration">
            <summary>
            Defines the structure for registrung an Entity extender type with IEntityRegistrationFacility.
            The initialization is done fluently starting with the static "For" method to create and configure a new instance.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.EntityExtenderRegistration.#ctor(System.Type)">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
            <param name="abstractInterfaceType"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.EntityExtenderRegistration.ExtenderImplementationTypeRegistration`2">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.ComponentRegistration">
            <summary>
            Defines the structure for registrung a Component type with IEntityRegistrationFacility.
            The initialization is done fluently starting with the static "For" method to create and configure a new instance.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.ComponentRegistration.#ctor(System.Type,System.Type)">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
            <param name="componentType"></param>
            <param name="idType"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.ComponentImplementationRegistration">
            <summary>
            Defines the structure for registrung a Component type with IEntityRegistrationFacility.
            The initialization is done fluently starting with the static "For" method to create and configure a new instance.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.ComponentImplementationRegistration.#ctor(System.Type,System.Type)">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
            <param name="componentType"></param>
            <param name="idType"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.ComponentImplementationRegistration.ComponentImplementationRegistrationInterfaceType`4">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TId"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TEntityId"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.ComponentImplementationRegistration.ComponentImplementationRegistrationName`4">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TId"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TEntityId"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.ComponentImplementationRegistration.ComponentImplementationRegistrationImplementedBy`4">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TId"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TEntityId"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.ComponentImplementationRegistration.ComponentImplementationRegistrationDaoResource`4">
            <summary>
            Private. Use the static For method of the main class to configure the registration.
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TId"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TEntityId"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.IComponent`3">
            <summary>
            Represents an identifiable business Component that is containd as part of an Entity.
            A Component encapsulates data, operations and events, just like an Entity, but is not accessible
            and manipulated on its own.
            Unlike plain complex types within an Entity, a Component is replaceble and extensible.
            </summary>
            <typeparam name="TId">The type of the Id of the Component.</typeparam>
            <typeparam name="TEntity">The Entity type this component belongs to.</typeparam>
            /// <typeparam name="TEntityId">The type of the Id of the Entity this component belongs to.</typeparam>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Entity.IComponent`3.Entity">
            <summary>
            A reference to the Entity that contains this Component.
            When the component is added to an Entity as a property or in a collection,
            this property must be set to reference the containing Entity.
            When the component is detached from the Entity, this property must be set to null.
            See <see cref="T:Retalix.StoreServices.Model.Infrastructure.Entity.ComponentHelper">ComponentHelper</see> for reference.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.IComponent">
            <summary>
            A none generic interface to a component, used to attach and detach it from the containing entity.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.ComponentHelper">
            <summary>
            Helps attach and detach a component to / from an Entity.
            Use a Property with a Backing field as in the following example.
            <example>
            private ISomeComponent _component;
            public virtual IComeComponent Component
            {
                get { return _component; }
                set
                {
                    ComponentHelper.DetachEntity(_component);
                    _component = value;
                    ComponentHelper.AttachEntity(_component, this);
                }
            }
            </example>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.IdBase`1">
            <summary>
            Represents abstract class for types that represents Id of some type.
            Contains all implementations relevant for equality.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityRegistrationFacility">
            <summary>
            Interface for registring Entities and Components implementation on system initialization.
            Registered types are accessible at runtime through the IEntityServices interface.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.IEntity`1">
            <summary>
            Represents an identifiable business entity that encapsulates data, operations and events.
            An entity is the minimal piece of system data that is manipulated and persisted by itself.
            Entity data is composed of Primitives, Complex Data Objects and Identifiable Components.
            An Entity may reference other entities, which are not considered part of the entity data.
            </summary>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.IIdentifiable`1">
            <summary>
            Represents an object in the system that is identifiable.
            Identifiable is the base for persistable and maintainable objects in the system.
            </summary>
            <typeparam name="TId">
            Unique identifier of the object.
            This should be system wide unique for objects of the same type and consistant across databases.
            </typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.IPersistable">
            <summary>
            Defines the basic properties of a persistable object in the system.
            <param name="LastModified">
            The last time the object was explicitly updated by the application.
            Data synchronization (UOW "silent mode") is not considered an explicate update, so it should not modify this property.
            </param>
            <param name="OptimisticLockVersion">
            The object version that is used for optimistic transaction synchronization.
            This version is updated each time the object is persisted including on Data synchronization (UOW "silent mode")
            </param>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityDao">
            Represents a base Dao method
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityDao.Delete(Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IEntityDeleteCriteria)">
            <summary>
            Delete according to <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IEntityDeleteCriteria">criteria</see>
            </summary>
            <returns>Amount of entities deleted</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityDao`2">
            <summary>
            A generic interface for Entity Data Access Object
            </summary>
            <typeparam name="TEntity">The type of the Entity handled by this Dao</typeparam>
            <typeparam name="TId">Tye type of this Entity main ID</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityDao`2.Get(`1)">
            <summary>
            Get the Entity from persistant store by its main ID. 
            </summary>
            <param name="id">The Entity ID</param>
            <returns>The Entity with the given ID or null.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityDao`2.GetByKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Get the Entity from persistant store by a secondary Key.
            The Key is assumed to be unique for the given entity type.
            </summary>
            <param name="keyProperty">
            Identifies the Key property name.
            Use Lambda Expression to identify the Entity property containing the Key.
            <example>var message = messageDao.GetByKey(m => m.Name, messageName);</example>
            </param>
            <param name="keyValue">The Key value to look for.</param>
            <returns>The Entity with the given Key or null.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityDao`2.Save(`0)">
            <summary>
            Saves the Entity to persistant store.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityDao`2.Delete(`1)">
            <summary>
            Deletes the Entity identified by the given ID from persistant store.
            Use this overload to delete an entity when you only know its ID.
            </summary>
            <param name="id">The Entity ID</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityDao`2.Delete(`0)">
            <summary>
            Deletes the given Entity from persistant store.
            Use this overload only when you already have the entity loaded.
            If you only know the ID of an entity, use Delete(TId id) instead. 
            </summary>
            <param name="entity">The entity to delete.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.EntityExtenderBase`1">
            <summary>
            A convenience base-class for implementing IEntityExtender.
            </summary>
            <typeparam name="TEntity">The type of the extended entity.</typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityExtender`1">
            <summary>
            Defines an interface for the intervention points in the lifecycle of an entity.
            </summary>
            <remarks>Called by the core code during the different lifecycle phases of the entity (e.g. creation, persistence)</remarks>
            <typeparam name="TEntity">The type of the entity</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityExtender`1.OnCreate(`0)">
            <summary>
            Provides an intervention point when the <paramref name="entity"/> is created.
            </summary>
            <param name="entity">An instance of TEntity passed upon creation</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityExtender`1.OnDelete(`0)">
            <summary>
            Provides an intervention point when the <paramref name="entity"/> is deleted.
            </summary>
            <param name="entity">An instance of TEntity passed upon delete</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityExtender`1.OnLoad(`0)">
            <summary>
            Provides an intervention point when the <paramref name="entity"/> is uploaded from the database.
            </summary>
            <param name="entity">An instance of TEntity passed upon load</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityExtender`1.OnDispose(`0)">
            <summary>
            Provides an intervention point when the <paramref name="entity"/> is dispose.
            </summary>
            <param name="entity">An instance of TEntity passed before dispose</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityExtender`1.OnSave(`0)">
            <summary>
            Provides an intervention point when the <paramref name="entity"/> is saved to the database.
            </summary>
            <param name="entity">An instance of TEntity passed upon saved</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityExtender`1.OnSerialize(`0)">
            <summary>
            Provides an intervention point when the <paramref name="entity"/> is serialized.
            </summary>
            <param name="entity">An instance of TEntity passed upon serialization</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Entity.IEntityExtender`1.OnDeserialize(`0,System.String)">
            <summary>
            Provides an intervention point when the deserialization of the <paramref name="entity"/> is deserialized.
            </summary>
            <param name="entity">An instance of TEntity passed upon deserialization</param>
            <param name="extensionData">Extension data assigned to the entity</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible`1">
            <summary>
            Provides the ability to assign additional data to the core entities for classes extending core functionality.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible">
            <summary>
            Provides the ability to assign additional data to the core entities for classes extending core functionality.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible.Key">
            <summary>
            Gets the unique entity key which identifies the entity for extensions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Entity.IExtensible.Extensions">
            <summary>
            A container of all the extensions implemented for an entity.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.JobManagement.IJobStrategyRegistrationFacility.RegisterJobStrategy(System.Type,System.Type)">
            <summary>
            Register an <see cref="T:Retalix.StoreServices.Model.Infrastructure.JobManagement.IJobExecutionStrategy"/> or an <see cref="T:Retalix.StoreServices.Model.Infrastructure.JobManagement.IJobMisfireStrategy"/> for a specific job type
            </summary>
            <param name="jobType">The type of job to register the strategy for, this must be a type that implements <see cref="T:Retalix.StoreServices.Model.Infrastructure.JobManagement.IJob"/></param>
            <param name="strategyType">The stategy type, this must be a type that implements <see cref="T:Retalix.StoreServices.Model.Infrastructure.JobManagement.IJobExecutionStrategy"/> and or <see cref="T:Retalix.StoreServices.Model.Infrastructure.JobManagement.IJobMisfireStrategy"/></param>
            <remarks>
            The strategy type should be a type that can be instatiated via <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IFactory"/>.
            The strategy will be instantiated only once, before the first usage 
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.JobManagement.JobLockConfiguration.Timeout">
            <summary>
            Lock timeout in seconds
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.Exceptions.ReasonCodeInUseException">
            <summary>
            This exception will be thrown when trying to delete an <see cref="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCode">IReasonCode</see> entity 
            that is referenced by one or more <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see> entities.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.ReasonCodeDeletingEvent">
            <summary>
            An <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEvent">IDomainEvent</see> instance that is raised when trying to 
            delete an <see cref="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCode">IReasonCode</see> entity.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.ReasonCode.ReasonCodeDeletingEvent.Reason">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCode">IReasonCode</see> entity that is being deleted.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.CulturedDescription">
            <Summary>
             This holds the description definition.
            </Summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.ReasonCode.CulturedDescription.Culture">
            <summary>
             Culture
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCode">
            <Summary>
             This interface holds the reason code definitions.
            </Summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCodeGroup">
            <Summary>
             This interface holds the reason code group definitions.
            </Summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCodeGroup.ReasonCodes">
            <summary>
            The reason codes within the group
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.ISupportCulturedDescriptions">
            <summary>
             This holds the multi culture description definitions.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Message.IExpressionContext">
            <summary>
            Context for dynamic message
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IExpressionContext.Culture">
            <summary>
            Culture associated with this message context
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">
            <Summary>
             Message is a multi-lingual formatting expression, 
             that may include dynamic fields to be resolved for presentation at runtime.
             A message is maintained independently of any business entity, and may be referred to 
             from different places by its' name.
            </Summary> 
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IMessage.Name">
            <summary>
            The unique message name. 
            This name is used to point to configure this message for different services.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IMessage.Type">
            <summary>
            The context this message is valid for.
            Used to point to a business area this message was defined for.
            </summary>
            <example>Type may be: BRM, Voucher, Returns, EPS, SelfScan, etc...</example>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IMessage.Description">
            <summary>
            Descriptive text of the message, to better explain its' purpose.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IMessage.Parts">
            <summary>
            The list of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessagePart">IMessagePart</see> in the message.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IMessage.AddPart(System.String,System.String,System.String)">
            <summary>
            Add new message part.
            </summary>
            <param name="type"></param>
            <param name="text"></param>
            <param name="culture"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IMessage.ClearParts">
            <summary>
            Clear all message parts.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IMessage.Resolve(Retalix.StoreServices.Model.Infrastructure.Message.IExpressionContext)">
             <summary>
             Resolves dynamic-attribute placeholders with corresponding values according to Request Context  
             </summary>
            <returns><see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IResolvedMessage">resolved message</see> with all localized parts in various cultures</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessagePart">
            <Summary>
             This interface holds the Message part definitions.
            </Summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IMessagePart.Type">
            <summary>
            Message type part. 
            Example: Header, Body or Footer.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IMessagePart.Text">
            <summary>
            The message text
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IMessagePart.Culture">
            <summary>
            The culture this part conform to
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Message.IResolvedMessage">
            <Summary>
             Structured Message that was resolved by a message instance using specific context.
            </Summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IResolvedMessage.MessageText">
            <summary>
            Provides localized message parts, which composed only from message text elements content
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IResolvedMessage.Message">
            <summary>
            Provides localized message parts, which composed from original unparsed xml
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IResolvedMessage.MessageName">
            <summary>
            The name of the message that generated this resolved instance.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Message.NackStatus">
            <summary>
             Presents the current status of the problem 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Message.NackStatus.Open">
            <summary>
             Presents the just created problem notification
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Message.NackStatus.Skipped">
            <summary>
             Presents the skipped stuck token status
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Message.NackStatus.ManualSkip">
            <summary>
             Presents the manually skipped stuck token status
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Message.NackStatus.Recovered">
            <summary>
             Presents the recovered stuck token status
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Message.NackStatus.AutoSkip">
            <summary>
             Presents the auto skipped stuck token status
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Query.ICriterion.Apply(System.Object,System.Object)">
            <summary>
            Apply specific criterion to the criteria
            </summary>
            <param name="session">Wraps ISession </param>
            <param name="criteria">Wraps ICriteria</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Query.IPagingSection.Apply(System.Object)">
            <summary>
            Apply paging parameters to the Criteria 
            </summary>
            <param name="criteria">Wraps ICriteria</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Query.IQueryBuilder.Execute(System.Object,System.Object,Retalix.StoreServices.Model.Infrastructure.Query.IQuery)">
            <summary>
            Creates Criteria according to Query parameters 
            </summary>
            <param name="session">Wraps ISession</param>
            <param name="criteria">Wraps ICriteria</param>
            <param name="query">Lookup criteria with sorting and paging parameters</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Query.ISortSection.Apply(System.Object,System.Object)">
            <summary>
            Apply sort section to the criteria
            </summary>
            <param name="session">Wraps ISession</param>
            <param name="criteria">Wraps ICriteria</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IEntityDeleteCriteria">
            <summary>
            Represents criteria that define how an entity can be deleted
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IEntityDeleteCriteria.PageSize">
            <summary>
            Amount of entities can be proceed in single operation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IEntityDeleteCriteria.DaysToKeep">
            <summary>
            Number of days to keep. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy">
            <summary>
            Represents data used to delete business entities
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy.Id">
            <summary>
            Unique identifier 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy.EntityType">
            <summary>
            Type of business entity
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy.IgnoreDuringColdstart">
            <summary>
            To Ignore retentionpolicy during coldstart
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy.ServerGroup">
            <summary>
            Name of server group
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy.Criteria">
            <summary>
            Criteria used as base to delete business entities
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy.Execute">
             <summary>
             Execute the current retention policy for the entity type and serverGroup, with the criteria.
             </summary>
             <example>
            <code> 
              <![CDATA[  
              var entityDao = GlobalEnvironment.StoreApplication.Resolver.Resolve<IEntityDao>(EntityType);
              var criteria = new DeleteCreteria {DaysToKeep = Criteria.DaysToKeep, PageSize = Criteria.PageSize};
              entityDao.Delete(criteria);
             ]]>
             </code>
             </example>        
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyConfigurationDao">
            <summary>
            Provides API for DAO operations on retention policy 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyConfigurationDao.Save(Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyConfiguration)">
            <summary>
            Save a <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyConfiguration"/> to underline datastore
            </summary>
            <param name="retentionPolicyConfiguration">Retention policy to save</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyConfigurationDao.Delete(Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyConfiguration)">
            <summary>
            Delete a <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyConfiguration"/> from underline datastore
            </summary>
            <param name="retentionPolicyConfiguration">Retention policy to delete</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyConfigurationDao.GetAll">
            <summary>
            Get all retention policies
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyConfigurationDao.Get(System.Guid)">
            <summary>
            Get configuration according to id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyConfigurationDao.Find(Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.RetentionPolicyConfigurationCriteria)">
            <summary>
            Get retention policy by criteria
            </summary>
            <returns>Return retention policies relevant to the criteria. if there is nothing match, return empty list. </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyDao">
            <summary>
            Provides API for DAO operations on retention policy 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyDao.Save(Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy)">
            <summary>
            Save a <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy"/> to underline datastore
            </summary>
            <param name="retentionPolicy">Retention policy to save</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyDao.Delete(Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy)">
            <summary>
            Delete a <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy"/> from underline datastore
            </summary>
            <param name="retentionPolicy">Retention policy to delete</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyDao.GetAll">
            <summary>
            Get all retention policies
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyDao.Get(System.Guid)">
            <summary>
            Get retention policy according to id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyDao.Find(Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.RetentionPolicyCriteria)">
            <summary>
            Get retention policy by criteria
            </summary>
            <returns>Return retention policies relevant to the criteria. if there is nothing match, return empty list. </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyExecutor">
            <summary>
            Represents a component which is responsible for executing all <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy"/> existing in the system. The executer 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicyExecutor.Execute(System.Int32)">
            <summary>
            Executes one or more <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy"/>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.RetentionPolicyExecutionResult">
            <summary>
            Represents a status of a single execution of a <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy">RetentionPolicy</see>. object. 
            When a <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy">RetentionPolicy</see> is executed, the execution result can represent several different statuses. 
            Execution of a <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy">RetentionPolicy</see> is done by calling  <see cref="M:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy.Execute"/>.
            <para>
            The status provides the following information provides the following services:
            <list type="bullet">
            <item>
            <description>What is the entity type that was processed</description>
            </item>
            <item>
            <description>In case of failure - what is the exception received from the execution</description>
            </item>
             <item>
            <description>How many entities were deleted during single run</description>
            </item>
             <item>
            <description>The status of the policy:
            the single execution of <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy">RetentionPolicy</see> finished to run successfully.
            the single execution of <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy">RetentionPolicy</see> failed with and exception
            the single execution of <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.IRetentionPolicy">RetentionPolicy</see> deleted part of the entities that should be deleted but did not finish to delete all.
            </description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.RetentionPolicyExecutionResult.EntityType">
            <summary>
            gets or sets the type of the entity that was processed during the single execution
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.RetentionPolicyExecutionResult.Exception">
            <summary>
            gets or sets the exception  - in case of Failed State.
            If the status if Completed or NotCompleted , the value will be null.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.RetentionPolicyExecutionResult.Count">
            <summary>
            gets or sets the count of entity deleted -  in case of Completed or NotCompleted State  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.RetentionPolicyExecutionResult.State">
            <summary>
            gets or sets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.RetentionPolicy.RetentionPolicyState">RetentionPolicyState</see>  of the execution
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Scheduler.ITaskExecuter">
            <summary>
            Runs tasks within a context (UnitOfWork, ActiveRequestContext, ClientSession)
            </summary>
            <remarks>
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.Scheduler.ITaskExecuter"/> creates the environemnt that the task runs in. 
            Much like the service runner that creates a unit of work and sets the ActiveRequestContext
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Scheduler.RepeatIntervalSchedule.RepeatInterval">
            <summary>
            Repeat interval in seconds
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Scheduler.RepeatIntervalSchedule.EndTime">
            <summary>
            End Time
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Scheduler.Schedule.StartTime">
            <summary>
            When this schedule should run for the first time
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Scheduler.Schedule.GetNextExecutionTime(System.DateTime)">
            <summary>
            Used to calcualte misfires
            </summary>
            <param name="calucationDateTime">The current date time</param>
            <returns>The next execution time after the calculationDateTime</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.TransactionCache.BypassTransactionCache">
            <summary>
            Bypass to transaction cache which actually doesn't store any objects in memory.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.TransactionCache.ITransactionCache">
            <summary>
            Represents a thread safe Transaction scope cache engine with Unit of work integration.
            Evaluation functions \ Entities that returns NHibernate object will not be able to lazy load nested collection across Nhibernate sessions(!).
            The Engine integrates directly with the current Unit Of Work and able to hold information that will \ wont be affected by the unit of work 
            Failed \ Completed status.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.TransactionCache.ITransactionCache.SetOrReplace(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the specified entity key or replace previous cache item.
            </summary>
            <param name="transactionId">Transaction identifier.</param>
            <param name="entityKey">Entity key identifier</param>
            <param name="entity">Actual object that will be stored in the cache.</param>
            <param name="isTransactional">Determines if data should will be removed from the cache in case of a failed unit of work</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.TransactionCache.ITransactionCache.GetOrEvaluate``1(System.String,System.String,System.Func{``0},System.Boolean)">
            <summary>
            Gets an existing object from cache or inserts a new object in case of an new object.  
            </summary>
            <typeparam name="T">The type of the T key.</typeparam>
            <param name="transactionId">Transaction identifier.</param>
            <param name="entityKey">Entity key identifier</param>
            <param name="evaluationFunction">Evaluation function that will be executed in case that the cache doesn't hold the specific data.</param>
            <param name="isTransactional">Determines if data should will be removed from the cache in case of a failed unit of work</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.TransactionCache.ITransactionCache.OnUnitOfWorkComplete">
            <summary>
            Performs cache maintenance operations after unit of work is completed.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.TransactionCache.ITransactionCache.OnUnitOfWorkFailure">
            <summary>
            Performs cache maintenance operations after a unit of work failed.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.TransactionCache.TransactionCacheService">
            <summary>
            Facade to the application transaction cache engine.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.TransactionCache.TransactionCacheService._instance">
            <summary>
            Default cache instance uses bypass behavior that doesn't store any data in memory.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.TransactionCache.TransactionCacheService.RegisterTransactionCacheEngine(Retalix.StoreServices.Model.Infrastructure.TransactionCache.ITransactionCache)">
            <summary>
            Registers a transaction cache engine.
            </summary>
            <param name="transactionCache">The transaction cache.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedListDao">
             <summary>
             Responsible for saving\updating\deleting and retrieving Localized List type objects
             </summary>
             <para>
             The ILocalizedListDao provides the following services:
             <list type="bullet">
             <item>
             <description>Saves the Localized List to the database.</description>
             </item>
             <item>
             <description>Find a collection of ILocalizeList  by a specific criteria</description>
             </item>
              <item>
             <description>Gets all Localized Lists</description>
             </item>
              <item>
             <description>Deletes the Localized List from the database</description>
             </item>
             </list>
             </para>
             <code lang="cs" description="This example shows how to retrieve localized Lists">
             <![CDATA[
             public class LocalizedListLookupService
             {
                private readonly ILocalizedListDao _localizedListDao;
                private readonly IFactory _factory;
            
                public LocalizedListLookupService (ILocalizedListDao localizedListDao, IFactory factory)
                {
                    _localizedListDao = localizedListDao;
                    _factory = factory;
                }
            
                public ICollection<ILocalizedText> GetTexts (string name, string culture)
                {
                    var criteria = _factory.GetInstance<ILocalizedListSearchCriteria>();
                    criteria.LocalizedListName = name;
                    criteria.Culture = culture;
            
                    var localizedList = _localizedListDao.Find(criteria).First();
                    return localizedList.Texts;
                }
             
                public IEnumerable<ILocalizedList> GetLists(string name, string culture)
                {
                    var localizedLists = _localizedListDao.GetAll();
                    return localizedLists;
                }
              }
             }]]>
            </code>
             <code lang="cs" description="This example shows how to Save\Update\delete localized Lists">
             <![CDATA[
             public class LocalizedListMaintenanceService
            {
                private readonly ILocalizedListDao _localizedListDao;
            
                public LocalizedListMaintenanceService(ILocalizedListDao localizedListDao)
                {
                    _localizedListDao = localizedListDao;
                }
            
                public void SaveOrUpdateLists(IEnumerable<ILocalizedList> localizedLists)
                {
                    foreach (var localizedList in localizedLists)
                    {
                        _localizedListDao.Save(localizedList);
                    }
                }
            
                public void DeleteLocalizedLists(IEnumerable<ILocalizedList> localizedLists)
                {
                    foreach (var localizedList in localizedLists)
                    {
                        _localizedListDao.Delete(localizedList);
                    }
                }
            }
             }
             ]]>
            </code>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedListDao.Save(Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList)">
            <summary>
            Saves a new <see cref="T:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList"/> or updates an existing one.
            </summary>
            <param name="localizedList">The object to be saved or updated.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedListDao.Find(Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedListSearchCriteria)">
            <summary>
            Gets a collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList"/> by a specific criteria
            </summary>
            <param name="localizedListSearchCriteria"></param>
            <returns>If found, collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList"/> is returned.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedListDao.GetAll">
            <summary>
            Gets all objects ordered by Id
            </summary>
            <returns>If found, collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList"/> is returned.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedListDao.Delete(Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList)">
            <summary>
            Deletes a <see cref="T:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList"/> if exist.
            </summary>
            <param name="localizedList">The object to Delete.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedListSearchCriteria">
            <summary>
             The criteria uses to retrieve collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList"/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedListSearchCriteria.LocalizedListName">
            <summary>
             Adds the Localized List Name to the search criteria 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedListSearchCriteria.Culture">
            <summary>
             Adds the Localized List Culture to the search criteria 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedText">
            <summary>
             he value for each Name of Text
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedText.Name">
            <summary>
             Gets Name of the Localized Text (In each List there is only one Text with this spesific Name)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedText.Value">
            <summary>
             Gets the Value of the Localized Text
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList">
            <summary>
             The values for each List Name, Culture
            </summary>
             <para>
             The ILocalizedList provides the following services:
             <list type="bullet">
             <item>
             <description>Adds Localized Text with the specified name and value to the Localized List</description>
             </item>
             <item>
             <description>Resets the Localized Text list of the Localized List</description>
             </item>
             </list>
             </para>
             <code lang="cs" description="This example shows how to AddTexts to localized List and how to reset the texts of Localized List">
             <![CDATA[
            public class LocalizedListMethods
            {
                private readonly IFactory _factory;
            
                public LocalizedListMethods(IFactory factory)
                {
                    _factory = factory;
                }
            
                public ILocalizedList AddAllTexts(IEnumerable<ILocalizedText> localizedTexts)
                {
                    var localizedList = _factory.GetInstance<ILocalizedList>();
                    foreach (var localizedText in localizedTexts)
                    {
                        localizedList.AddText(localizedText.Name, localizedText.Value);
                    }
            
                    return localizedList;
                }
            
                public void ResetAllTextsOfLocalizedList(ILocalizedList localizedList)
                {
                    localizedList.ResetTexts();
                }
            }
            ]]>    
            </code>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList.Id">
            <summary>
             Gets the unique identification of the Localized List
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList.Name">
            <summary>
             Gets the Name of the Localized List
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList.Culture">
            <summary>
             Gets the Culture of the localized List
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList.AddText(System.String,System.String)">
            <summary>
             Adds <see cref="T:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedText">Localized Text</see> with the specified name and value to the Localized List
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList.ResetTexts">
            <summary>
             Resets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedText">Localized Text</see> list of the Localized List
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedList.Texts">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.LocalizedTexts.ILocalizedText">Localized Text</see> List of the Localized List
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.IVenueSegmentUtility.GetRetailSegment(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            Gets the first relevant segment
            </summary>
            <param name="touchPoint">touch point to use</param>
            <returns>relevant segment or null</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.IVenueSegmentUtility.IsVenueSegment(System.String)">
            <summary>
            Checks whether the segment is venue
            </summary>
            <param name="segmentId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.IStoreNetHost">
            <summary>
            Represent the executable that host the application
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.IStoreNetHost.ActiveApplicationContext">
            <summary>
            A container managed at the application context
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.IStoreNetHost.ActiveRequestContext">
            <summary>
            A container managed at a single request context
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IStoreNetHost.GetConfigurationParam(System.String)">
            <summary>
            
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IStoreNetHost.GetConfiguration">
            <summary>
            Gets the relevant system configuration object according the application hosting environment from.
            This can be based on app.config, web.confug, machine.config etc..
            The returned object is opened for read and write. The ability to actually change the configuration
            depends on the code hosting environment and the current thread permissions.
            </summary>
            <returns>System.Configuration.Configuration that is open for read and write.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IStoreNetHost.DisposeActiveRequestContext">
            <summary>
            Dispose the current <see cref="P:Retalix.StoreServices.Model.Infrastructure.Legacy.IStoreNetHost.ActiveRequestContext"/>
            </summary>
            <remarks>This should be called at the end of an execution</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.IStoreNetHost.ApplicationInstanceId">
            <summary>
            A unique identifier for the given Server Application instance
            </summary>
            <remarks>This is used to differntiate between application nodes behind a load balancer</remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.IComponentConfigurationResource">
            <summary>
            Represent one configuration resource.
            </summary>
            <summary><para><b>No longer supported. Any component definitions should be done by implementing RegisterComponents in IApplicationInitializer.</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.IComponentConfigurationResource.AsXml">
            <summary>
            An xml representation of the configuration contained in this resource.
            It is in the format known to the consuming configuration installer.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.IComponentConfigurationResource.IsComponentReplacement">
            <summary>
            If true, the components configuration in this resource should override any
            component that was configured previously.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.IComponentsDefinition">
            <summary>
            Allow component configuration after the application was created.
            </summary>
            <summary><para><b>No longer supported. Any component definitions should be done by implementing RegisterComponents in IApplicationInitializer.</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IComponentsDefinition.AddComponentsConfiguration(Retalix.StoreServices.Model.Infrastructure.Legacy.IComponentConfigurationResource)">
            <summary>
            Configure components defined in the provided configuration resource.
            </summary>
            <param name="servicesComponentConfiguration">The configuration resource</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivity">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivity.ResourceName">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivity.ActionName">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataCompression.DataCompressor">
            <summary>
            Data compression utilities.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataCompression.DataCompressor.Compress(System.String)">
            <summary>
            Compresses the specified string using UTF8 encoding.
            </summary>
            <param name="str">The string to compress.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataCompression.DataCompressor.Decompress(System.Byte[])">
            <summary>
            Decompresses the specified byte array to string using UTF8 encoding.
            </summary>
            <param name="byteArray">The byte array to decompress.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataContainer">
            <summary>
            Default implementation of IDataContainer
            </summary>
            <summary>
            Support in group data by domain , so you can add manage data for a domain
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.#ctor">
            <summary>
            OnCreate new instance of DataContainer
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.Set``1(``0)">
            <summary>
            Set a value using the supplied type as it's key.
            </summary>
            <typeparam name="T">The type-key.</typeparam>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.Set``1(System.String,``0)">
            <summary>
            Set a value using the supplied type combined with a string key as it's key.
            </summary>
            <typeparam name="T">The type part of the key.</typeparam>
            <param name="key">The string part of the key.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.Get``1">
            <summary>
            Get a value using the supplied type as it's key.
            </summary>
            <typeparam name="T">The type-key</typeparam>
            <returns>The value</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.Get``1(System.String)">
            <summary>
            Get a value using the supplied type combined with a string key as it's key.
            </summary>
            <typeparam name="T">The type part of the key</typeparam>
            <param name="key">The string part of the key.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.Contains``1">
            <summary>
            Test for the existence of a value using the supplied type as it's key.
            </summary>
            <typeparam name="T">The type-key</typeparam>
            <returns>True is any value was set using this key.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.Contains``1(System.String)">
            <summary>
            Test for the existence of a value using the supplied type combined with a string key as it's key.
            </summary>
            <typeparam name="T">The type part of the key</typeparam>
            <param name="key">The string part of the key.</param>
            <returns>True is any value was set using this key</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.Remove``1">
            <summary>
            Remove a value using the supplied type as it's key.
            </summary>
            <typeparam name="T">The type-key</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.Remove``1(System.String)">
            <summary>
            Remove a value using the supplied type combined with a string key as it's key
            </summary>
            <typeparam name="T">The type part of the key</typeparam>
            <param name="key">The string part of the key.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.Get(Retalix.StoreServices.Model.Infrastructure.DataContainerKey)">
            <summary>
            Get value using DataContainerKey
            </summary>
            <param name="dataContainerKey">The key to use for lookup</param>
            <returns>The value if exists, or null if not</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.Set(Retalix.StoreServices.Model.Infrastructure.DataContainerKey,System.Object)">
            <summary>
            Set value using DataContainerKey
            </summary>
            <param name="dataContainerKey">The key to use for set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.Enumerator">
            <summary>
            Return Enumerator implementation of the internal dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.Remove(Retalix.StoreServices.Model.Infrastructure.DataContainerKey)">
            <summary>
            Remove value using DataContainerKey
            </summary>
            <param name="dataContainerKey">The key to find value to remove</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.CreateDataContainerKey``1(System.String)">
            <summary>
            OnCreate DataContainerKey based on type and string key 
            </summary>
            <typeparam name="T">The type to use in the key</typeparam>
            <param name="key">The string key to use in the key</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.CreateDataContainerKey(System.Type,System.String)">
            <summary>
            OnCreate DataContainerKey based on type and string key 
            </summary>
            <param name="t">The type to use in the key</param>
            <param name="key">The string key to use in the key</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.GetByDomain``1(System.String,System.String)">
            <summary>
             Get a by key from domain
            </summary>
            <param name="domain"></param>
            <param name="key"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.SetByDomain``1(System.String,System.String,``0)">
            <summary>
             Set value in domain
            </summary>
            <param name="domain"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.ContainsInDomain``1(System.String,System.String)">
            <summary>
             Check if this key exists in the domain
            </summary>
            <param name="domain"></param>
            <param name="key"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.RemoveFromDomain``1(System.String,System.String)">
            <summary>
             Remove from domain
            </summary>
            <param name="domain"></param>
            <param name="key"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainer.ClearDomain(System.String)">
            <summary>
             Remove the domain from the data 
            </summary>
            <param name="domain"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataContainerKey">
            <summary>
            Data Container Key for use by DataContainer as key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataContainerKey.Key">
            <summary>
            The string key part of the key
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainerKey.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current DataContainerKey.
            </summary>
            <param name="obj">The object to compare with the current DataContainerKey. </param>
            <returns>true if the specified Object is equal to the current DataContainerKey; otherwise, false</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainerKey.Equals(Retalix.StoreServices.Model.Infrastructure.DataContainerKey)">
            <summary>
            Determines whether the specified DataContainerKey is equal to the current DataContainerKey.
            </summary>
            <param name="other">The DataContainerKey to compare with the current DataContainerKey. </param>
            <returns>true if the specified DataContainerKey is equal to the current DataContainerKey; otherwise, false</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainerKey.GetHashCode">
            <summary>
            Serves as a hash function for a particular type
            </summary>
            <returns>A hash code for the current DataContainerKey</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainerKey.#ctor(System.Type,System.String)">
            <summary>
            OnCreate new instance of DataContainerKey
            </summary>
            <param name="type">The type to use as a key</param>
            <param name="name">The name to use as a key</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataContainerKey.#ctor(System.String)">
            <summary>
            OnCreate new instance of DataContainerKey
            </summary>
            <param name="key">The key as a string</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.IDataContainer">
            <summary>
            Container for arbitrary data with typed key
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.IDataContainer.Set``1(``0)">
            <summary>
            Set a value using the supplied type as it's key.
            </summary>
            <typeparam name="T">The type-key.</typeparam>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.IDataContainer.Set``1(System.String,``0)">
            <summary>
            Set a value using the supplied type combined with a string key as it's key.
            </summary>
            <typeparam name="T">The type part of the key.</typeparam>
            <param name="key">The string part of the key.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.IDataContainer.Get``1">
            <summary>
            Get a value using the supplied type as it's key.
            </summary>
            <typeparam name="T">The type-key</typeparam>
            <returns>The value</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.IDataContainer.Get``1(System.String)">
            <summary>
            Get a value using the supplied type combined with a string key as it's key.
            </summary>
            <typeparam name="T">The type part of the key</typeparam>
            <param name="key">The string part of the key.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.IDataContainer.TryGet``1(``0@)">
            <summary>
            Get a value using the supplied type as it's key if the value exists.
            </summary>
            <typeparam name="T">The type-key</typeparam>
            <param name="value">the result value</param>
            <returns>true if the value exists</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.IDataContainer.TryGet``1(System.String,``0@)">
            <summary>
            Get a value using the supplied type combined with a string key as it's key if the value exists.
            </summary>
            <typeparam name="T">The type part of the key</typeparam>
            <param name="key">The string part of the key.</param>
            <param name="value">the result value</param>
            <returns>true if the value exists</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.IDataContainer.Contains``1">
            <summary>
            Test for the existence of a value using the supplied type as it's key.
            </summary>
            <typeparam name="T">The type-key</typeparam>
            <returns>True is any value was set using this key.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.IDataContainer.Contains``1(System.String)">
            <summary>
            Test for the existence of a value using the supplied type combined with a string key as it's key.
            </summary>
            <typeparam name="T">The type part of the key</typeparam>
            <param name="key">The string part of the key.</param>
            <returns>True is any value was set using this key</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.IDataContainer.Remove``1">
            <summary>
            Remove a value using the supplied type as it's key.
            </summary>
            <typeparam name="T">The type-key</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.IDataContainer.Remove``1(System.String)">
            <summary>
            Remove a value using the supplied type combined with a string key as it's key
            </summary>
            <typeparam name="T">The type part of the key</typeparam>
            <param name="key">The string part of the key.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ExtensibleEnumBase`1">
            <summary>
            Abstract class used to supply the capabilities of an Enum
            with an option to extended through inheritance.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.ExtensibleEnumBase`1.EnumValue">
            <summary>
            The actual backing T value.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.ExtensibleEnumBase`1.#ctor">
            <summary>
            Creates an instance with a default value of T.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.ExtensibleEnumBase`1.#ctor(`0)">
            <summary>
            Creates an instance with the given value.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.ExtensibleEnumBase`1.op_Implicit(Retalix.StoreServices.Model.Infrastructure.ExtensibleEnumBase{`0})~`0">
            <summary>
            Provides implicit conversion capabilities from the an instance of ExtensibleEnumBase 
            to the original Type used.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.ExtensibleEnumBase`1.Parse(System.String,System.Type)">
            <summary>
            Tries to convert the string to it's object representation, returns null if unsuccessful,
            attempts to match according to field name or value.
            </summary>
            <param name="stringToParse"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.ExtensibleEnumBase`1.TryParse``1(System.String,``0@)">
            <summary>
            Try to parse the string to its' provided ExtensibleEnumBase type
            </summary>
            <param name="stringToParse"></param>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.ExtensibleEnumBase`1.ParseInternal(System.String,System.Type,System.Boolean)">
            <summary>
            Tries to convert the string to it's object representation, returns null if unsuccessful,
            attempts to match according to field name or value.
            </summary>
            <param name="stringToParse"></param>
            <param name="type"></param>
            <param name="extensionParser"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.ExtensibleEnumBase`1.GetHashCode">
            <summary>
            Get a hash code from the enum value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.ExtensibleEnumBase`1.ToString">
            <summary>
            Returns the ToString result of EnumValue. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Coldstart.Events.ColdstartOpenEvent">
            <summary>
            This event raises in case of open Coldstart activity.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Coldstart.IColdstartActivity">
            <summary>
            Performs operations related to open Coldstart activity.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Coldstart.IColdstartActivity.Perform">
            <summary>
            Performs Coldstart open.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.StoredCredentials.IHashManager">
            <summary>
            Manage Hashing by configuration and fallbacks
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.StoredCredentials.IHashManager.Configuration">
            <summary>
            Configuration for manager
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.StoredCredentials.IHashManager.Hash(System.String)">
            <summary>
            Hash the given a password
            </summary>
            <param name="password">The password to hash</param>
            <returns>Hashed password</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.StoredCredentials.IHashManager.IsValid(System.String,System.String)">
            <summary>
            Validating a given password
            </summary>
            <param name="password">The password to validate</param>
            <param name="storedPassword">The stored hashed password</param>
            <returns>Hashed password</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.StoredCredentials.IHashManagerConfiguration">
            <summary>
            Hash Manager Configuration
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.StoredCredentials.IHashManagerConfiguration.UseSalting">
            <summary>
            Is to use salting
            </summary>
            <returns>decision result</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.StoredCredentials.IHashManagerConfiguration.SetUseSalting(System.Boolean)">
            <summary>
            Ability to set UseSalting from outside
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Criterion.UserNamesSpecification">
            <summary>
            Used to get an <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> by User Name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserNamesSpecification.UserNames">
            <summary>
            User Name of the user to get.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Criterion.ActiveDirectoryUserNameCriterion">
            <summary>
            Used to get an <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> by Active Directory User Name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.ActiveDirectoryUserNameCriterion.ActiveDirectoryUserName">
            <summary>
            Active Directory User Name of the user to get.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Criterion.UserBarcodeSpecification">
            <summary>
            Used to get an <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> by User Barcode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserBarcodeSpecification.Barcode">
            <summary>
            Barcode of the user to get.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Criterion.UserBusinessUnitSpecification">
            <summary>
            Used to get an <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> by Business Unit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserBusinessUnitSpecification.BusinessUnitIds">
            <summary>
            Limits the search to users who have one of the specified Business Units 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Criterion.UserFirstNameCriterion">
            <summary>
            Used to get an <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> by User First name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserFirstNameCriterion.FirstName">
            <summary>
            Limits the search to users with the specified First Name
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Criterion.UserIdCriterion">
            <summary>
            Used to get an <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> by User Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserIdCriterion.UserId">
            <summary>
            UserId of the user to get.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Criterion.UserIdGreaterThenCriterion">
            <summary>
            Used to get an <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> greater then User Id .
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserIdGreaterThenCriterion.UserId">
            <summary>
            UserId of the user to get.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Criterion.UserLastNameCriterion">
            <summary>
            Used to get an <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> by User Last name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserLastNameCriterion.LastName">
            <summary>
            Limits the search to users with the specified Last Name
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Criterion.UserNameSpecification">
            <summary>
            Used to get an <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> by User Name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserNameSpecification.UserName">
            <summary>
            User Name of the user to get.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserNameSpecification.ExactMatch">
            <summary>
            Exact User Name Match Require (will return single result - Injective Function)
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Criterion.UserPagingSpecification">
            <summary>
            Use for paging criteria that applies skip and take (page) on the <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> lookup results
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserPagingSpecification.Skip">
            <summary>
            skip to row number 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserPagingSpecification.Take">
            <summary>
            result size
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserRoleDefinitionSpecification.Roles">
            <summary>
            Limits the search to users who have one of the specified roles
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserRoleDefinitionSpecification.BusinessUnitId">
            <summary>
            Limits the search to users who have one of the specified Business Units 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Criterion.UserRoleSpecification">
            <summary>
            Used to get an <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> by roles.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Criterion.UserRoleSpecification.Roles">
            <summary>
            Limits the search to users who have one of the specified roles
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Criterions.UserIdsCriterion">
            <summary>
            Used for filtering users by user ids.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Events.UserDeletedEvent">
            <summary>
            domain event raise after persisted <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> deleted 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Events.UserDeletedEvent.DeletedUser">
            <summary>
            deleted <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Events.UserSavedEvent.SavedUser">
            <summary>
            deleted <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.Events.UserDeletingEvent">
            <summary>
            domain event raise before delete persisted <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.Events.UserDeletingEvent.UserToDelete">
            <summary>
            <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> to delete
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.IUserDao">
            <summary>
            Represents a Data Access Object for <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUserDao.Get(System.Guid)">
             <summary>
             get a <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see> by User Id
             </summary>
             <param name="userId"></param>
            <returns>The corresponding <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUserDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.User.IUser})">
            <summary>
             Saves the bulk of Users to the repository. 
            </summary>
            <param name="users">list of <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">users</see> that need to be saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUserDao.Delete(Retalix.StoreServices.Model.Organization.User.IUser)">
            <summary>
             Deletes the given <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see>. 
            </summary>
            <param name="user">the <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see> that need to be deleted.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUserDao.Find``1(Retalix.StoreServices.Infrastructure.DataAccess.IQuery{Retalix.StoreServices.Model.Organization.User.IUser,Retalix.StoreServices.Model.Organization.User.IUser,``0})">
            <summary>
            Find <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> according to the query.
            </summary>
            <typeparam name="TRole"></typeparam>
            <param name="query">A query which returns <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> according to its fetching strategy.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.IUserLoginStatusModifier">
            <summary>
            Represents a change state that can be executed on a remote system, used by IdmChangePasswordService with policy localAndHqPolicy
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUserLoginStatusModifier.UpdateLoginStatus(Retalix.StoreServices.Model.Organization.User.LoginStatusContainer)">
            <summary>
            change the state (login / status) of the user according to data in the container
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria">
            <summary>
            Collection of criteria for use in locating Users.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria.#ctor">
            <summary>
            Note:By default the exact match for user name is required!
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria.UserId">
            <summary>
            Limits the search to user with user id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria.UserName">
            <summary>
            Limits the search to those users with UserNames
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria.IsUserNameExactMatchRequired">
            <summary>
            Exact User Name Match Require (will return single result - Injective Function)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria.FirstName">
            <summary>
            Limits the search to users with the specified First Name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria.LastName">
            <summary>
            Limits the search to users with the specified Last Name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria.Roles">
            <summary>
            Limits the search to users who have one of the specified roles
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria.BusinessUnit">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">upon witch the user should be searched</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria.PagingCriteria">
            <summary>
            Represents the paging criteria that applies skip and take (page) on the lookup results
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria.FromUpdateDate">
            <summary>
            Represents the Start Update Date on the lookup results
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria.ToUpdateDate">
            <summary>
            Represents the End Update Date on the lookup results
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao">
            <summary>
             Represents a Data Access Object for <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see>
            </summary>    
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.GetByUserName(System.String)">
            <summary>
             Gets a user upon a unique user name search criteria
            </summary>
            <param name="userName"></param>
            <returns>The corresponding <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.GetByBarcode(System.String)">
            <summary>
             return a user upon a barcode search criteria
            </summary>
            <param name="barcode"></param>
            <returns>The corresponding <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.GetByActiveDirectoryName(System.String)">
            <summary>
             return a user upon an active directory name search criteria
            </summary>
            <param name="activeDirectoryName"></param>
            <returns>The corresponding <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.Get(System.String)">
            <summary>
            </summary>
            <param name="userId"></param>
            <returns>The corresponding <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.GetByActiveDirectoryUserName(System.String)">
            <summary>
            </summary>
            <param name="userNameInActiveDirectory"></param>
            <returns>a collection corresponding <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see>s</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.GetDataFromStartKey(System.String)">
            <summary>
            </summary>
            <param name="username"></param>
            <returns>a collection corresponding <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see>s</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.GetAll">
            <summary>
             Gets all the <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see>s from the repository. 
            </summary>
            <returns>the collection of all the <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see>s in the repository</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.Save(Retalix.StoreServices.Model.Organization.User.IUser)">
            <summary>
             Saves the given User to the repository. 
            </summary>
            <param name="user">the <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see> that need to be saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.User.IUser})">
            <summary>
             Saves the bulk of Users to the repository. 
            </summary>
            <param name="users">list of <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">users</see> that need to be saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.Delete(Retalix.StoreServices.Model.Organization.User.IUser)">
            <summary>
             Deletes the given User from the repository. 
            </summary>
            <param name="user">the <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see> that need to be deleted.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.DeleteAll">
            <summary>
             Deletes all the <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see>s from the repository. 
            </summary>    
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.SetAllUsersNeedPwdChange">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.FindUsers(Retalix.StoreServices.Model.Organization.User.UserSearchCriteria)">
            <summary>
             Finds all the users that  match the given criteria.
            </summary>
            <param name="searchCrieteria">the <see cref="T:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria">UserSearchCriteria</see> for the find process</param>
            <returns>the collection of <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see>s that match the criteria</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.FindUsersGetCount(Retalix.StoreServices.Model.Organization.User.UserSearchCriteria)">
             <summary>
             return the total user count for given  criteria
             </summary>
            <param name="searchCrieteria">the <see cref="T:Retalix.StoreServices.Model.Organization.User.UserSearchCriteria">UserSearchCriteria</see> for the find process</param>
             <returns>the row count that match the criteria</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.V10_5.IUserDao.UpdateLoginAttempts(Retalix.StoreServices.Model.Organization.User.IUser,System.Int32)">
            <summary>
             Used to update Login attempts property without updating the entire user record.
            </summary>
            <param name="user">The user to update login attempts for</param>
            <param name="loginAttempts">THe new value for login attempts</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.IPasswordModifier">
             <summary>
             Represents a change password that can be executed on a remote system, used by IdmChangePasswordService with policy localAndHqPolicy
             </summary>
             <code lang="cs" description ="This example shows how to change a password with possible remote execution.">
             <![CDATA[
            public class ChangePasswordService
            {
                private readonly IPasswordModifier _passwordModifier;
            
                public ChangePasswordService(IPasswordModifier passwordModifier)
                {
                    _passwordModifier = passwordModifier;
                }
            
                public void ChangePassword(ChangePasswordContainer container, R10AuthenticationMethodTypes r10AuthenticationMethodTypes)
                {
                    _passwordModifier.ChangePassword(container, r10AuthenticationMethodTypes);
                }
            }
            ]]>    
            </code>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IPasswordModifier.ChangePassword(Retalix.StoreServices.Model.Organization.User.ChangePasswordContainer,Retalix.StoreServices.Model.Infrastructure.Security.Identity.R10AuthenticationMethodTypes)">
            <summary>
            change the password of the user according to data in the container
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IPasswordModifier.AuthorizedChangePassword(Retalix.StoreServices.Model.Organization.User.ChangePasswordContainer,Retalix.StoreServices.Model.Infrastructure.Security.Identity.R10AuthenticationMethodTypes)">
            <summary>
            Change the password of the user via an authorized Identity. In some circumstances should avoid authentication on old credentials
            </summary>
            <param name="container">Username and new password</param>
            <param name="r10AuthenticationMethodTypes">The current authentication type</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.IUserFactory">
            <summary>
             Creates a <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see>. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUserFactory.CreateUser">
            <summary>
             Creates a <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see>. 
            </summary>
            <returns>the newly created <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUserFactory.CreateUser(System.Guid)">
            <summary>
             Creates a <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see>. 
            </summary>
             <param name="userId"></param>
            <returns>the newly created <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.User.IUser">
            <summary>
            Represents a User of R10 system.<br/>
            </summary>
            <remarks>
            A user in R10 is an identified person who can access the system. Such User can be for example, 
            a Cashier or Administrator who can login to the system and operating a POS.
            </remarks>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.UserId">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.IsProtected">
            <summary>
            Defines whether the user is protected from deletion
            </summary>
            TODO: check if setter is correct solution
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.DisplayName">
            <summary>
            Gets or sets the Display Name of the user.
            </summary>
            <remarks>
            </remarks>    
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.FirstName">
            <summary>
            Gets or sets the first name of the user.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.LastName">
            <summary>
            Gets or sets the last name of the user.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.Phone">
            <summary>
            Gets or sets the phone number of the user (1)
            </summary>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.CreationDate">
            <summary>
            Gets or sets the date on which the user was defined in the system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.Email">
            <summary>
            Gets or sets the user's email address.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.SocialSecurityNumber">
            <summary>
            Gets or sets the user's social security number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.BirthDate">
            <summary>
            Gets or sets the User's birth date.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUser.GetUserName">
            <summary>
            Returns one of the user's user name
            </summary>
            <returns></returns> 
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.AllowedForBarcodeAuthentication">
            <summary>
            Field that indicates that this user can login/authenticate using barcode
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.UserStatus">
            <summary>
            The status of the user (Active / Inactive)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.LoginAttempts">
            <summary>
            The number of consecutive faulty logon attempts performed by the user.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.LoginDateTime">
            <summary>
            The time on which the user performed their last logon.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.DomainUserName">
            <summary>
            The domain user name of the user.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.UserProfileId">
            <summary>
            The profile Id of the user.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.UserNameInActiveDirectory">
            <summary>
            The username in active directory.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.User.IUser.StoredCredentials">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUser.AddStoredCredentials(Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials)">
            <summary>
            </summary>
            <param name="storedCredentials"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUser.RemoveStoredCredentials(Retalix.StoreServices.Model.Infrastructure.Security.DirectAuthentication.IStoredCredentials)">
            <summary>
            </summary>
            <param name="storedCredentials"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUser.FindBy(System.String)">
            <summary>
            </summary>
            <param name="authenticationMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUser.SaveRole(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Boolean)">
            <summary>
             add a new role to user
            </summary>
            <param name="role"></param>
            <param name="businessUnit"></param>
            <param name="isForTrainingMode"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUser.DeleteRole(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            remove specific role
            </summary>
            <param name="role"></param>
            <param name="businessUnit"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.User.IUser.DeleteAllRoles">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.IDM.Exceptions.IdmBlockedUserException">
            <summary>
            Occurs when the entered username and password cannot be authenticated.
            I.e., the username and password do not match any known user in the system.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.IDM.Exceptions.IdmInvalidUserNamePasswordException">
            <summary>
            Occurs when the entered username and password cannot be authenticated.
            I.e., the username and password do not match any known user in the system.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.IDM.Exceptions.IdmUserIsMissingCredentialsException">
            <summary>
            Occurs when the entered username and password cannot be authenticated.
            I.e., this user has no stored credentials according to the security policy
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentDao">
            <summary>
            Represents the data access object responsible for saving and retrieving <see cref="T:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentIdentity">Idm Service Agent identity</see> from the database.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentDao.GetByEncryptedToken(System.String)">
            <summary>
            Gets the service agent identity by token
            </summary>
            <param name="token"></param>
            <returns>service agent identity</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentDao.GetByName(System.String)">
            <summary>
            Gets the service agent identity by name
            </summary>
            <param name="name"></param>
            <returns>service agent identity</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentDao.Save(Retalix.StoreServices.Model.Organization.IDM.IServiceAgentIdentity)">
            <summary>
            Saves <see cref="T:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentIdentity">IServiceAgentIdentity</see> to the database.
            </summary>
            <param name="serviceAgentIdentity"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentDao.Delete(Retalix.StoreServices.Model.Organization.IDM.IServiceAgentIdentity)">
            <summary>
            Deletes <see cref="T:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentIdentity">IServiceAgentIdentity</see>.
            </summary>
            <param name="serviceAgentIdentity"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentIdentity">
            <summary>
             Represents the interface for service agent to be used for service agent registration and to get the ability to login using a token
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentIdentity.Name">
            <summary>
            The name of the service agent
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentIdentity.BusinessUnit">
            <summary>
            The business unit the service agent is registered to
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentIdentity.Role">
            <summary>
            The role used service agent is using for registration
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentIdentity.RegistrationToken">
            <summary>
            The non- encrypted registration token
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentIdentity.EncryptedToken">
            <summary>
            The encrypted registration token 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentIdentity.UpdatedDate">
            <summary>
            The updated registration  date 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.IDM.IServiceAgentIdentity.GenerateToken">
            <summary>
            Generate the registration token for service agent
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.DynamicFormConfiguration.IDynamicFormsConfiguration.BusinessUnitId">
            <summary>
            Business Unit Id 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.DynamicFormConfiguration.IDynamicFormsConfiguration.RetailSegmentId">
            <summary>
            Retail Segment Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.DynamicFormConfiguration.IDynamicFormsConfiguration.Culture">
            <summary>
            Culture Code. Eg., en-US
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.DynamicFormConfiguration.IDynamicFormsConfiguration.FormName">
            <summary>
            Form Name. Eg., Customer Data form
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.DynamicFormConfiguration.IDynamicFormsConfiguration.FormXML">
            <summary>
            Form XML string that defines the dynamic fields 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.DynamicFormConfiguration.IDynamicFormsConfigurationDao.AddOrUpdate(Retalix.StoreServices.Model.Organization.TouchPoint.DynamicFormConfiguration.IDynamicFormsConfiguration)">
            <summary>
            Add or Update the Dynamic Forms Configuration 
            </summary>
            <param name="dynamicFormsConfiguration"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.DynamicFormConfiguration.IDynamicFormsConfigurationDao.Delete(Retalix.StoreServices.Model.Organization.TouchPoint.DynamicFormConfiguration.IDynamicFormsConfiguration)">
            <summary>
            Delete the Dynamic Forms Configuration 
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.DynamicFormConfiguration.IDynamicFormsConfigurationDao.Get(Retalix.StoreServices.Model.Organization.TouchPoint.DynamicFormConfiguration.DynamicFormsConfigurationSearchCriteria)">
            <summary>
            Lookup the Dynamic Forms Configuration based on Criteria 
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.PosParameterConfiguration.IPosParametersConfiguration.GetServerStatusInterval">
            <summary>
            Timeout Value in MilliSeconds
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.PosParameterConfiguration.IPosParametersConfiguration.IsGetServerStatusAsync">
            <summary>
            Asynchronous Status parameter
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.PosParameterConfiguration.IPosParametersConfiguration.IsAlphaNumericSignInKeyboard">
            <summary>
            Alphanumeric Keyboard parameter
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.PosParameterConfiguration.IPosParametersConfiguration.OpenApprovableSignOffScreen">
            <summary>
            Approvable sign off/on parameter
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.PosParameterConfiguration.IPosParametersConfiguration.ApplyAutoManualPromotion">
            <summary>
            Automatic Manual Promotion Flag
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.PosParameterConfiguration.IPosParametersConfiguration.UpdatePluInterval">
            <summary>
            Plu interval parameter in Milliseconds
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.VirtualKeyboardConfigurations.IVirtualKeyboardConfigurationsDao.AddOrUpdate(Retalix.StoreServices.Model.Organization.TouchPoint.VirtualKeyboardConfigurations.IVirtualKeyboardConfiguration)">
            <summary>
            Add or Update the Virtual Keyboard Configuration 
            </summary>
            <param name="virtualKeyboardConfiguration"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.VirtualKeyboardConfigurations.IVirtualKeyboardConfigurationsDao.Get(Retalix.StoreServices.Model.Organization.TouchPoint.VirtualKeyboardConfigurations.VirtualKeyboardConfigurationsSearchCriteria)">
            <summary>
            Lookup the Virtual Keyboard Configurations based on Criteria 
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.VirtualKeyboardConfigurations.IVirtualKeyboardConfiguration.BusinessUnitId">
            <summary>
            Business Unit Id 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.VirtualKeyboardConfigurations.IVirtualKeyboardConfiguration.RetailSegmentId">
            <summary>
            Retail Segment Id. Only Primary is supported.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.VirtualKeyboardConfigurations.IVirtualKeyboardConfiguration.Culture">
            <summary>
            Culture Code. Eg., en-US
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.VirtualKeyboardConfigurations.IVirtualKeyboardConfiguration.KeyboardName">
            <summary>
            Keyboard Name. Eg., KeyboardPOSDefinition
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.VirtualKeyboardConfigurations.IVirtualKeyboardConfiguration.KeyboardXML">
            <summary>
            Keyboard XML string that defines the keys incVirtual keyboard with Sections and Rows
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImageDao.AddOrUpdate(Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImage)">
            <summary>
            Add or Update the Branding Image 
            </summary>
            <param name="brandingImage"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImageDao.Delete(System.Int32)">
            <summary>
            Deletes the branding image with the specific Id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImageDao.Find(Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.POSBrandingImageSearchCriteria)">
            <summary>
            Find the branding Image that exactly matches the criteria
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImageDao.Get(Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.POSBrandingImageSearchCriteria)">
            <summary>
            Find the branding Image that matches the criteria mentioned
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImageDao.GetForPOS(Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.POSBrandingImageSearchCriteria)">
            <summary>
            Find the branding Image that matches the criteria mentioned for POS
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImageDao.Get(System.Int32)">
            <summary>
            Get the branding image with the specific Id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImage.Id">
            <summary>
            Uniquely identifies each Branding Image.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImage.MainDisplay">
            <summary>
            Indicates which Main display we are referring to. Eg., Cashier Display, Customer Display
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImage.SubDisplay">
            <summary>
            Indicates which Sub Display we are referring to. Eg., Login Screen, Lane Closed Scree etc.,
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImage.FileData">
            <summary>
            Branding File (Image or Video) in binary format
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImage.FileName">
            <summary>
            The name of the branding file. Eg., Cart.png
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImage.Positions">
            <summary>
            The positions in the screen that we are uploading to. 
             Eg., For SaleModeAds, there are three positions : Upper, Middle, Bottom
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImage.LastUpdatedDate">
            <summary>
            The date time when the record is last added/ updated
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImage.BusinessUnitIds">
            <summary>
            The business units in which the image/video is applicable
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImage.TouchPointTypes">
            <summary>
            The touchpoint types to which the image/video is applicable
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImage.RetailSegmentIds">
            <summary>
            The retail segments (primary and secondary) to which the image/video is applicable.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.Images.IPOSBrandingImage.DisplayCondition">
            <summary>
            Indicates our Display Condition. Eg., “Default”, “Loyalty”.,
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.FileSizeConfiguration.IBrandingFileSizeConfiguration.Logo">
            <summary>
            The file size for logo the following screens: Logo, Logo (Training Window)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.FileSizeConfiguration.IBrandingFileSizeConfiguration.Login">
            <summary>
            The file size for Login Screen
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.FileSizeConfiguration.IBrandingFileSizeConfiguration.SaleAndTender">
            <summary>
            The file size for the following screens: Sale Mode Ads (No action Window), 
            Sale Mode Ads (With Action Window), Tender Mode Ads (No Action Window), Tender Mode Ads (With Action Window)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.FileSizeConfiguration.IBrandingFileSizeConfiguration.LaneClosedAndNoSale">
            <summary>
            The file size for the following screens: Lane Closed, No Sale (Next Customer)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.Branding.FileSizeConfiguration.IBrandingFileSizeConfiguration.OfficeLogo">
            <summary>
            The file size for office client logo
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.TouchPoint.IActivityIndicationTimeoutConfiguration">
            <summary>
            Activities Indication Timeouts
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.IActivityIndicationTimeoutConfiguration.MenuUnavailabilityIndicationTimeout">
            <summary>
            Number of seconds before a stating the PLU group becomes unavailable
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.IActivityIndicationTimeoutConfiguration.RetailSegmentUnavailabilityIndicationTimeout">
            <summary>
            Number of seconds before a stating the store closes
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.IActivityIndicationTimeoutConfiguration.ConfigurationUpdateInterval">
            <summary>
            Configuration update cycle in mili-seconds
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.IActivityIndicationTimeoutConfiguration.FirstInactivityIndicationTimeout">
            <summary>
            First inactivity indication in seconds
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.IActivityIndicationTimeoutConfiguration.LastInactivityIndicationTimeout">
            <summary>
            Last inactivity indication in seconds
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointStartupDoneEvent">
            <summary>
            Raised when a Touch-Point startup process is done on the server side.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointStartupDoneEvent.TouchPoint">
            <summary>
            The touch-point that the startup was called for.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">
            <summary>
            Represents a managed application that interacts with R10.<br/>
            </summary>
            <remarks>
            TouchPoint is used in order connect a <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication">Touch Point Applications</see> and <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile">Device</see>s to the R10 system.<br/>
            A TouchPoint is identified uniquely within a <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see>.<br/>
            TouchPoint is an <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity">identified endpoint</see> that is authorized in R10 system.
            <br/>
            <para><see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile">Peripheral device</see>s:</para>
            Peripheral devices in R10 are managed by the TouchPoints.<br/> 
            Such devices can be: printers, scale or barcode-scanner or <see href="http://en.wikipedia.org/wiki/Magnetic_Stripe_Reader">Magnetic Stripe Reader(MSR)</see>.
            <br/> 
            <para><see cref="T:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication">TouchPointApplication</see>s:</para>
            Any R10 Client is connected to a specific TouchPoint.<br/>
            Such clients can be: POS, Self Scan or Shopper Gateway etc.  
            <br/> 
            <para><see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity">Identity</see>:</para>
            Any TouchPoint in R10 has an identity which is authorized to connect to R10 and specify the sets of its <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivity">Activities</see>.
            <br/> 
            <para><see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointStatus">Status</see>:</para> 
            Any TouchPoint in R10 has a Status which represent the state of its connection.
            <br/> 
            <para><see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see>:</para>  
            Any TouchPoint in R10 has a RetailSegment which can be used for segmentation.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.TouchPointId">
            <summary>
            Gets the unique identifier of the touch point within the context of BusinessUnit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.OwnerBusinessUnit">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see> is associated to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.RetailSegment">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see> the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see> belongs to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.AdditionalRetailSegments">
            <summary>
            Gets the list of the addtionals<see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment </see> the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see> belongs to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.TouchPointApplication">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication">ITouchPointApplication</see> that defines the touch points functionality and permissions, for example,self scan, pos, self checkout, etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.TouchPointIdentifier">
            <summary>
             Gets or sets the touch point's unique identifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.IsClustered">
            <summary>
            determines if touchpoint is clustered.  
            if clusted then it will contain one or more identifiers in ClusteredToucthPointIdentifiers
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.TaxRegistrationNumber">
            <summary>
            Tax Registration Number  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.ClusteredTouchPointIdentifiers">
            <summary>
            retrieves the Clustered ToucthpointIdentifiers list
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.CreatedDate">
            <summary>
            Gets the date and time when the touch point was created.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.ActiveDevices">
            <summary>
            Gets all the active <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile">IDeviceProfile</see>s that are attached to the TouchPoint.
            </summary>
            <returns>IEnumerable of all the active <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile">IDeviceProfile</see></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.InActiveDevices">
            <summary>
            Gets all the not active b<see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile">IDeviceProfile</see>s that are attached to the TouchPoint.
            </summary>
            <returns>IEnumerable of all the not active <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile">IDeviceProfile</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.AddDevice(Retalix.StoreServices.Model.Organization.Device.IDeviceProfile,System.Boolean)">
            <summary>
            Assigns the device configuration to the touch point.   
            </summary>
            <remarks>
            <param name="deviceProfile">The <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile">IDeviceProfile</see> assigned.</param>
            <param name="isActive">True, sets the device as active for the touchpoint; otherwise false.</param>      
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.RemoveAllDevices">
            <summary>
            Removes all <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile">device configurations</see> assigned to the touch point.     
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.UpdateDevices(System.Collections.Generic.IDictionary{Retalix.StoreServices.Model.Organization.Device.IDeviceProfile,System.Boolean})">
            <summary>
            Update the devices list
            </summary>
            <param name="deviceConfigurations"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.Register">
            <summary>
             Registers a Client to the touch point
             </summary>.
            <returns>The TouchPointIdentifier used for future identification.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.Register(System.String)">
            <summary>
             Registers a Client to the touch point with client type
             </summary>.
            <returns>The TouchPointIdentifier used for future identification.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.UnRegister">
            <summary>Removes the connection to the registered client</summary>.
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.IsRegistered">
            <summary>Indicates whether this touchpoint is currently registered to a specific client.</summary>.
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.Status">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointStatus">ITouchPointStatus</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.RemoveAllAdditionalRetailSegments">
            <summary>
            Removes all addtionals<see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment </see> the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see> belongs to.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.AddAdditionalRetailSegment(Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
            Add the additional retail segment to the touch point.   
            </summary>
            <remarks>
            <param name="retailSegment"> of type IRetailSegment</param>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.RegisteredClientTypes">
            <summary>
            Retrieves the registered clustered client types list
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint.AddTouchpointIdentifier(System.String,System.String)">
            <summary>
            Adding TouchpointIdentifier to Identifiers
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao">
            <summary>
            Represents the interface used to access the touch point repository that gets/creates/updates/deletes touchPoints from the repository.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao.GetTouchPointByIdInStore(System.String,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Gets the touch point from the repository by the touch point ID and <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see>.
            </summary>
            <param name="touchPointId">The touch point identifier.</param>
            <param name="businessUnit"><see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit.</see></param>
            <returns> The <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see> that matches the search criteria.</returns>
            <remarks>
            The ITouchPointDao does not represent the business entity but is responsible for the persistence of the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see>.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao.GetTouchpointWithoutAdditionalData(System.String,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Gets the touch point from the repository by the touch point ID and <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see>.
            Without additional data.
            </summary>
            <param name="touchPointId">The touch point identifier.</param>
            <param name="businessUnit"><see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit.</see></param>
            <returns> The <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see> that matches the search criteria.</returns>
            <remarks>
            The ITouchPointDao does not represent the business entity but is responsible for the persistence of the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see>.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao.GetTouchPointByTouchPointIdentifier(System.String)">
            <summary>
             Gets the touch point from the repository by the touch point's unique identifier.
            </summary>
            <param name="touchPointIdentifier">Is the unique identifier used as lookup criteria.</param>
            <returns>Relevant <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao.IsTouchpointValid(System.String)">
            <summary>
             Validates touchpoint with the supplied identifier exists.
            </summary>
            <param name="touchPointIdentifier">Is the unique identifier used as lookup criteria.</param>
            <returns>True if exists</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao.FindTouchPointByTouchPointIdentifier(System.String)">
            <summary>
            Finds a touch point by the identifier and filter name.     
            </summary>
            <param name="touchPointIdentifier">touch point identifier you </param>
            <returns>Relevant <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see> that matches lookup parameters</returns>    
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao.SaveTouchPoint(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            Persists an instance of the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao.SaveTouchPointHeartbeatDateTime(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            Persists an instance of the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao.CreateNewTouchPoint(System.String,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.String,Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication,System.Boolean,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment},System.String)">
            <summary>
            Creates a new touch point instance with given parameters, without saving the results.
            </summary>
            <param name="id">Touch point ID</param>
            <param name="retailSegment"><see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see> that should be attached to a new instance.</param>
            <param name="businessUnit"><see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> to which this touch point is related.</param>
            <param name="touchPointIdentifier">Touch point identifier.</param>
            <param name="touchPointApplication">The application type of the created touchpoint.</param>
            <param name="isClustered">if true, then the toucpoint is a cluster and share the same Id with other clusters. default is false</param>
            <param name="additionalSegments">additional tags when needed</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao.FindTouchPointByCriteria(Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria)">
            <summary>
             Finds the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see>s that match the assigned <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria">criteria</see>.
            </summary>
            <param name="touchPointSearchCriteria">The <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria">TouchPointSearchCriteria</see> for the search.</param>
            <returns>IEnumerable of <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see>s that match the criteria.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao.FindGetTouchpointByCriteriaWithoutAdditionalData(Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria)">
            <summary>
             Finds the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see>s that match the assigned <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria">criteria</see>.
            </summary>
            <param name="touchPointSearchCriteria">The <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria">TouchPointSearchCriteria</see> for the search.</param>
            <returns>IEnumerable of BASIC <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see>s that match the criteria. Basic means there's no additional data for the touchpoint</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao.Delete(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            </summary>
            <param name="touchpoint"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao.GetAll">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointOnSaveObserver">
            <summary>
            Represents an observer that is called when a touch point is persisted.
            <para><b>Note: This Interface is obsolete since version 10.4.1</b></para>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointOnSaveObserver.SaveComplete(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Called after a <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint"/> is saved in the repository.
            </summary>
            <param name="touchPoint">The saved <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint"/>.</param>
            <param name="businessUnit">The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/> of the saved <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint"/>.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointOnSaveObserver.UpdateComplete(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Called after a saved <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint"/> is updated in the repository.
            </summary>
            <param name="touchPoint">The saved <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint"/>.</param>
            <param name="businessUnit">The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/> of the saved <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint"/>.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria">
            <summary>
            Represents a criteria used by the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointDao">ITouchPointDao</see> interface to query the repository for matching <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see>s.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria.BusinessUnit">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> of the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria.IsRegistered">
            <summary>
            Gets or sets of boolean if touchpoint is registerd or not.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria.IsRegisteredSpecified">
            <summary>
            prsesent if IsRegistered was specified in criteria
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria.RetailSegments">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see>s of the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see>.
            <remarks>
            The touch point that matches the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria">TouchPointSearchCriteria</see> if it is associated with one or more of the defined <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see>s.
            </remarks>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria.TerimanlIds">
            <summary>
            Gets or sets the terminal IDs of the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see>.
            </summary>
            <remarks>
            The touch point that matches the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria">TouchPointSearchCriteria</see> if it is associated with one or more of the defined terminal IDs.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria.TouchPointApplications">
            <summary>
             Gets or sets the touch point applications.
            </summary>
             <remarks>
             The touch point that matches the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria">TouchPointSearchCriteria</see> if it is associated with one or more of the defined touch point applications.
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria.AccountIds">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.TouchPointSearchCriteria.PagingCriteria">
            <summary>
            Specifies paging criteria for search result set
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointStatus">
            <summary>
            Represents the upload entity for the touch point status.
            </summary>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointStatus.LastHeartBeatDate">
            <summary>
            Gets or sets the date on which the status indicated a heart beat.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointStatus.LastStatusChangeDate">
            <summary>
            Gets or sets the last date on which the status has changed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointStatus.Status">
             <summary>
            Gets a string value indicating the touchpoint status. The values are:
            1.	Offline - indicates that no heartbeat information is provided for the touchpoint.
            2.	Online - indicate that hearbeat information is provided for the touchpoint.
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointStatus.IsUnkown(System.DateTime,System.TimeSpan)">
            <summary>
            Gets a boolean value indicating that no heartbeat information has been provided since the last interval.
            </summary>
            <param name="now"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPointStatus.CalcualteStatus(System.DateTime,System.TimeSpan)">
             <summary>
            Calculates the status of the Device.
             </summary>
             <param name="heartBitDate"></param>
             <param name="unKnownInterval">If the status was not changed since the last interval, the status is not updated.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.R10Version.IVersionProvider">
            <summary>
             Represents a provider for version of components
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.R10Version.IVersionProvider.GetServerComponentVersion(System.String)">
            <summary>
            provides the version of the component that was sent as parameter
            </summary>
            <returns>Version of the component name</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.DeviceProfileSearchCriteria">
            <summary>Specifies filters for the records returned from <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceProfileDao">IDeviceProfileDao</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.DeviceProfileSearchCriteria.DeviceTypeName">
            <summary>Limit results to those containing a deviceType with the specified name.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ICradleRack">
            <summary>
             Interface representing a CradleRack business component . 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ICradleRack.ReleaseNextAvailableScanner">
            <summary>
            Used to select the available scanner for release from current cradle rack and mark cradle as waiting for release a device
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ICradleRack.IsWaitingForDeviceToBeReleased">
            <summary>
            Indicates whether there is a device waiting to be released form the cradle on current rack
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ICradleRack.GetScannersForSelection">
            <summary>
            get available scanner for selections
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ICradleRackCollection">
            <summary>
            Represents a cradle rack collectio. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ICradleRackCollection.IsAvilableScannerExist">
            <summary>
            Gets the avilable scanner indicating a  boolean value  exists in all cradles.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ICradleRackFactory">
            <summary>
            single entry point for cradle rack creation
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ICradleRackFactory.Create(System.String)">
            <summary>
            create cradle rack by rack id
            </summary>
            <param name="rackId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ICradleRackFactory.CreateForAllAvialbleRacks">
            <summary>
            create cradle rack for all existing racks
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerCommand">
            <summary>
            represent a command to be executed on a self scanner device
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerCommand.InternalId">
            <summary>
            internal id of the command
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerCommand.DeviceId">
            <summary>
            equivalent to the touch point id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerCommand.StoreId">
            <summary>
            the store id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerCommand.Name">
            <summary>
            the name of the command
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerCommand.Value">
            <summary>
            optimal value filed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerCommand.Date">
            <summary>
            the date of the execution of the command
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerCommand.CurrentDeviceStatus">
            <summary>
            current device status
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerCommand.Execute">
            <summary>
            execute the command 
            for example , update the availability of the scanner (broken,stolen..)
            if the requested store id is different from the command store id , the command will
            not be executed
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerCommandFactory">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerCommandFactory.Create(Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerDao">
            <summary>
            repository for self scan action
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerDao.SaveOrUpdate(Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanControllerCommand)">
            <summary>
            save the entity
            </summary>
            <param name="controllerCommand"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ICradleLocation">
            <summary>
            Represents Self Scanner Cradle Location.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ICradleLocation.RowId">
            <summary>
            the Cradle row Id where the device is currently located on
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ICradleLocation.ColumnId">
            <summary>
            the Cradle column Id where the device is currently located on
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ICradleLocation.WallId">
            <summary>
            the Cradle wall Id where the device is currently located on
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner">
            <summary>
            Represents Self Scanner device.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.Id">
            <summary>
            Generic device id - internal Key automatically assigned by R10.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.DeviceId">
            <summary>
            The device unique id (touch point id)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.CradleRackId">
            <summary>
            rack id - currently allocated on
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.CradleId">
            <summary>
            cradle id - currently allocated on
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.CradleLocation">
            <summary>
            crade location - currently allocated on
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.Usage">
            <summary>
            The number of times the device was used TODAY (released from the cradle)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.BatteryLevel">
            <summary>
            The battery level (in percentage) of the device.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.IsCharging">
            <summary>
            Device is charging the battery
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.IsReleased">
            <summary>
            Device was released from cradle
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.IsActive">
            <summary>
            Device is on-line and working
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.PendingAction">
            <summary>
            Device is pending for release from cradle
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.IsWaitingForReset">
            <summary>
            Device is not active and waiting for reset
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.IsAvailable">
            <summary>
            device is available for use ( not available can be because of stolen/broken )
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.IsOnTechSupport">
            <summary>
            device is handled by techical support
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.LastUpdateDate">
            <summary>
            Last update date (returned date)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.LastHeartBeatDate">
            <summary>
            Last heart beat report date ( update battery level date)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.LastUseDate">
            <summary>
            Last date of use (released date)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.PendingMessage">
            <summary>
            Pending message for device
            Device is pending for warm or cold restart
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.CanPerformeEndOfDay">
            <summary>
            is device allow to performe end of day
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.EndOfDayPerformed">
            <summary>
            indicate that end of day was performed for the device
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.WaitForEndOfDay">
            <summary>
            update action to waite for end of day
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.UpdateBatteryLevel(System.Int32)">
            <summary>
            Updates battery level and updates last heart beat time.
            For devices that do not support battery status update the battery level can be calculated using:
            <see cref="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.LastUpdateDate"/> - date of the last know battery level
            <see cref="P:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.LastHeartBeatDate"/> - date of the last heart beat (last time device reported being in cradle)
            </summary>
            <param name="batteryLevel">current battery level</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.WaitForRelease">
            <summary>
            Set device in pending for release mode
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.WaitForSupportRelease">
            <summary>
            Set device in pending for release on techical support mode
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.Release">
            <summary>
            Release device mode
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.WaitForReset(System.String)">
            <summary>
            Reset device mode
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.Restarted">
            <summary>
            Done Reset device mode
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.Return">
            <summary>
            Return device
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.Activate">
            <summary>
            Activate scanner
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.Deactivate">
            <summary>
            Deactivate scanner
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.SendMessage(System.String)">
            <summary>
            Send message
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.MessageWasDelivered">
            <summary>
            remove pending message
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.UpdateStatus(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            Update self scanner status
            </summary>
            <param name="touchPoint"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner.UpdateCradleLocation(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Update self scanner cradle location
            </summary>
            <param name="rowId"></param>
            <param name="columnId"></param>
            <param name="wallId"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScannerFactory">
            <summary>
            create of self scanner device
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScannerFactory.CreateNewScanner(System.String)">
            <summary>
            create new scanner
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.IDeviceErrorConfiguration">
            <summary>Represents a configuration for the handling of an error for a <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceType">device type</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.IDeviceErrorConfiguration.ErrorCode">
            <summary>The error code that is handled by this configuration.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.IDeviceErrorConfiguration.AlertTemplate">
            <summary>The </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.IDeviceErrorConfiguration.AllowDuplication">
            <summary>Indicate if you allow duplicate alert for that device</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.IDeviceErrorConfiguration.ClosingMethod">
            <summary>
            Indicate <see cref="T:Retalix.StoreServices.Model.Organization.Alert.AlertClosingMethod"/> for the device error
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.IDeviceType">
             <summary>
             Represents the type of the device (e.g Printer, Scanner)
             </summary>
             <para>
             IDeviceType provides the following services:
             <list type="bullet">
             <item>
             <description>Adds Device Error to the list of configured Device Errors of Device Type</description>
             </item>
             <item>
             <description>Resets the list of configured Device Errors of Device Type</description>
             </item>
             </list>
             </para>
             <code lang="cs" description="This example shows how to add Device Error to the list of configured Device Errros of Device Type">
             <![CDATA[
             public class DeviceTypeMethods
             {
                private static IFactory _factory;
                private const string Description = "Device has no power";
            
                public DeviceTypeMethods(IFactory factory)
                {
                    _factory = factory;
                }
            
                public void AddDeviceErrorToDeviceType(string errorCode, IAlertTemplate alertTemplate)
                {
                    var deviceType = _factory.GetInstance<IDeviceType>();
                    deviceType.ConfigureDeviceError(errorCode, alertTemplate);
                }
            
                public void ResetAllDeviceTypeErrors(IDeviceType deviceType)
                {
                    deviceType.ResetDeviceErrors();
                }
             }
            ]]>    
            </code>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.IDeviceType.Id">
            <summary>
            Gets the unique identification of the device type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.IDeviceType.Name">
            <summary>
            Gets the Name of the device type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.IDeviceType.DeviceErrorsConfiguration">
            <summary>
            Gets the Configuration of error handling for this device type.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceType.ConfigureDeviceError(System.String,Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate,System.Boolean,Retalix.StoreServices.Model.Organization.Alert.AlertClosingMethod)">
            <summary>
            Adds an error configuration to define handling of a specific error for this device type.
            </summary>
            <param name="errorCode">Defines what error code to configure.</param>
            <param name="alertTemplate">
            Defines what is the alert template the alert will appear in when this error will be reported 
            </param>
            <param name="allowDuplication">Defines </param>
            <param name="closingMethod">Defines </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceType.ResetDeviceErrors">
            <summary>
            Resets the Device Errors of the Device Type
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.IDeviceTypeDao">
             <summary>
             Responsible for saving\updating\deleting and retrieving Device Type objects
             </summary>
             <para>
             The IDeviceTypeDao provides the following services:
             <list type="bullet">
             <item>
             <description>Saves the device Type to the database.</description>
             </item>
             <item>
             <description>Find a collection of IDeviceType  by a specific criteria</description>
             </item>
              <item>
             <description>Gets all device types</description>
             </item>
              <item>
             <description>Deletes the device Type from the database</description>
             </item>
             </list>
             </para>
             <code lang="cs" description="This example shows how to retrieve DeviceTypes">
             <![CDATA[
            public class DeviceTypeLookupService
            {
                private readonly IDeviceTypeDao _deviceTypeDao;
                private readonly IFactory _factory;
            
                public DeviceTypeLookupService(IDeviceTypeDao deviceTypeDao, IFactory factory)
                {
                    _deviceTypeDao = deviceTypeDao;
                    _factory = factory;
                }
            
                public ICollection<IDeviceType> GetTexts(string id, string name)
                {
                    var criteria = _factory.GetInstance<IDeviceTypeSearchCriteria>();
                    criteria.Id = id;
                    criteria.Name = name;
            
                    var deviceTypes = _deviceTypeDao.Find(criteria).ToList();
                    return deviceTypes;
                }
            
                public IEnumerable<IDeviceType> GetAllDeviceTypes()
                {
                    var deviceTypes = _deviceTypeDao.GetAll();
                    return deviceTypes;
                }
            }
             }]]>
            </code>
             <code lang="cs" description="This example shows how to Save\Update\delete Device Type">
             <![CDATA[
            public class DeviceTypeMaintenanceService
            {
                private readonly IDeviceTypeDao _deviceTypeDao;
            
                public DeviceTypeMaintenanceService(IDeviceTypeDao deviceTypeDao)
                {
                    _deviceTypeDao = deviceTypeDao;
                }
            
                public void SaveOrUpdateDeviceType(IDeviceType deviceType)
                {
                    _deviceTypeDao.Save(deviceType);
                }
            
                public void DeleteDeviceType(IDeviceType deviceType)
                {
                    _deviceTypeDao.Delete(deviceType);
                }
            }
             }]]>
            </code>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceTypeDao.Save(Retalix.StoreServices.Model.Organization.Device.IDeviceType)">
            <summary>
            Saves a new <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceType"/> or updates an existing one.
            </summary>
            <param name="deviceType">The object to be saved or updated.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceTypeDao.Find(Retalix.StoreServices.Model.Organization.Device.IDeviceTypeSearchCriteria)">
            <summary>
            Gets a collection of <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceType"/> by a specific criteria
            </summary>
            <param name="localizedListSearchCriteria"></param>
            <returns>If found, collectio of <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceType"/> is returned.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceTypeDao.GetAll">
            <summary>
            Gets all device types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceTypeDao.Delete(Retalix.StoreServices.Model.Organization.Device.IDeviceType)">
            <summary>
            Deletes a <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceType"/> device type if exist
            </summary>
            <param name="deviceType">The object to delete</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.IDeviceTypeSearchCriteria">
            <summary>
             The criteria uses to retrieve collection of <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceType"/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.IDeviceTypeSearchCriteria.Id">
            <summary>
             Adds the Device Type Id to the search criteria 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.IDeviceTypeSearchCriteria.Name">
            <summary>
             Adds the Device Type Name to the search criteria 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile">
             <summary>
             Represents the device configuration definitions.
             </summary>
             IDeviceProfile provides the following services:
             <para>
             <list type="bullet">
             <item>
             <description>Report Device Error that raises a device Alert</description>
             </item>
             </list>
             </para>
             <code lang="cs" description="This example shows how to add Device Error to the list of configured Device Errros of Device Type">
             <![CDATA[
             public class DeviceProfileMethods
             {    
                private const string Description = "Device has no power";
             
                public void RaiseDeviceError(IDeviceProfile deviceProfile, string errorCode)
                {
                    deviceProfile.ReportDeviceError(errorCode, Description);
                }
             }
            ]]>    
            </code>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile.Name">
            <Summary>
             Gets a string value indicating the Device ID identified by the system when used. Note: The Device ID is assigned automatically by the store server.
            </Summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile.Description">
            <Summary>
             Gets or sets the description of the device. For example, IBM Printer.
            </Summary> 
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile.DeviceType">
            <Summary>
             Gets or sets the type of the device. For example, OposPrinter.
            </Summary> 
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile.IsControlledByEPS">
            <Summary>
            Gets or sets a boolean value indicating if the Device is used for EPS or for the client.
            </Summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile.ReportDeviceError(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.String,System.String)">
            <summary>
            Raise device alert with the appropriate description
            </summary>
            <param name="touchPoint">Defines what TouchPoint the error reporting device connected to</param>
            <param name="businessUnit">Defines what BusinessUnit the error reporting device belongs to</param>
            <param name="errorCode">Defines what error code occured</param>
            <param name="description">Describes what error occurred to the device</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile.ReportDeviceErrorSolved(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.String)">
             <summary>
             Mark device alert(s) with specific error as solved
             </summary>
             <param name="touchPoint">Defines what TouchPoint the error reporting device connected to</param>
             <param name="businessUnit">Defines what BusinessUnit the error reporting device belongs to</param>
             <param name="errorCode">Defines what error code occured</param>
             <code lang="cs" description="This example shows how to mark a device error as solved for specific Device Type">
             <![CDATA[
             public class DeviceProfileMethods
             {    
                public void RaiseDeviceError(IDeviceProfile deviceProfile, string errorCode)
                {
                    deviceProfile.ReportDeviceErrorSolved(errorCode);
                }
             }
            ]]>    
            </code>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.IDeviceProfileDao">
            <summary>
            Represents the Device Configuration repository, which gets/creates/updates/deletes Device Configuration in the data source.
            </summary> 
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceProfileDao.Save(Retalix.StoreServices.Model.Organization.Device.IDeviceProfile)">
            <summary>
            Adds a new Device Configuration to the data source.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceProfileDao.Delete(Retalix.StoreServices.Model.Organization.Device.IDeviceProfile)">
            <summary>
             Deletes an existing Device.
            </summary>
            <param name="deviceProfile"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceProfileDao.Get(System.String)">
            <summary>
            Gets a string value indicating Device Configuration from data source.
            </summary>     
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceProfileDao.Find(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Finds the Device Configurations from the data source by Device Configuration names.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceProfileDao.Find(Retalix.StoreServices.Model.Organization.Device.DeviceProfileSearchCriteria)">
            <summary>
            Finds the Device Configurations from the data source based on <see cref="T:Retalix.StoreServices.Model.Organization.Device.DeviceProfileSearchCriteria">Search Criteria</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceProfileDao.GetAll">
            <summary>
            Returns all the entities of specific type in the repository, and is used when performing cold start process. 
            </summary>
            <returns>All entities of specific type in repository</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceProfileDao.GetAll(System.String)">
            <summary>
            Returns all entities of specific type in repository, and is used when performing cold start process. .
            </summary>
            <returns>All entities of specific type in repository</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Device.IDeviceProfileFactory">
            <summary>
            Use this  interface to create a <see cref="T:Retalix.StoreServices.Model.Organization.Device.IDeviceProfile">IDeviceProfile</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Device.IDeviceProfileFactory.Create(System.String,System.String)">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.BusinessAlertTemplate">
            <summary>
            Alert templates of BusinessAlert type
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.BusinessAlertTemplate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.BusinessAlertTemplate.#ctor(System.String)">
            <summary>
            Creates an instance with given name
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.BusinessAlertTemplate.Value">
            <summary>
            Value for a new enumeration element
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Alert.BusinessAlertTemplate.SpecificPromotionFailure">
            <summary>
            Instance of a BusinessAlert enumeration template for a single specific promotion failure
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Alert.BusinessAlertTemplate.AllPromotionsFailure">
            <summary>
            Instance of a BusinessAlert template for all promotions failed to load
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.AlertClosingMethod">
            <summary>
            Represents how alert can be closed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Alert.AlertClosingMethod.Automatic">
            <summary>
            Closed automatically
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Alert.AlertClosingMethod.Manual">
            <summary>
            Closed manually
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Alert.AlertClosingMethod.Unspecified">
            <summary>
            Represents an unspecified closing method
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.AlertStatusType">
            <summary>
            Holds the statuses of each alert
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Alert.AlertStatusType.New">
            <summary>
            Represent the first status when an alert is created
            </summary>
            
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Alert.AlertStatusType.InProgress">
            <summary>
            Represent that the alert is in progress of management
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Alert.AlertStatusType.Close">
            <summary>
            Represent the last step of an alert
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Alert.AlertStatusType.Cancel">
            <summary>
            Represent the operation of canceling alert
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateDao">
             <example>
             <code lang="cs" description ="This example shows how to create an instance of the price Dao.">
             <![CDATA[    
            public class AlertTemplateDao : IAlertTemplateDao
            {
                private readonly ISessionProvider<ISession> _sessionProvider;
                private ISession Session { get { return _sessionProvider.Session; } }
                public AlertTemplateDao(ISessionProvider<ISession> sessionProvider)
                {
                    _sessionProvider = sessionProvider;
                }
             }
            ]]>
             </code>
             </example>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateDao.Save(Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate)">
            <summary>
             Saves the given <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate">IAlertTemplate</see>.
             If the alertTemplate already exists, then an update is performed.
            </summary>
            <param name="alertTemplate">The alertTemplate that is saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateDao.Get(System.String)">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate">IAlertTemplate</see> corresponding to the given  ID.
            </summary>
            <param name="alertTemplateId">The ID of the alertTemplate.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateDao.GetAll">
            <summary>
            Gets All the  <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate">IAlertTemplate</see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateDao.Delete(Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate)">
            <summary>
            Deletes the given <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate">IAlertTemplate</see>. 
            </summary>
            <param name="alertTemplate"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.IAlert">
            <summary>
            Represents an alert object.
            An alert object holds data which describes an alert entity, such as its template, date and time, and the touch point from which the alert was raised, etc..
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlert.Id">
            <summary>
            Gets the alert's unique internal ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlert.Template">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate">alert</see> template.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlert.Description">
            <summary>
            Gets Device's alert description
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlert.TimeCreated">
            <summary>
            Gets the date and the time at which the alert was raised.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlert.TouchPoint">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see> from which the alert was raised.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlert.BusinessUnit">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> in which the alert was raised.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlert.IsDeleted">
            <summary>
            specifies whether this alert was logically deleted
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlert.StateId">
            <summary>
            hold the state of the alert
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlert.AlertContext">
            <summary>
            Gets the context of the Alert
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlert.ClosingMethod">
            <summary>
            Alert closing method <see cref="T:Retalix.StoreServices.Model.Organization.Alert.AlertClosingMethod">AlertClosingMethod</see>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.IAlertDeviceType">
            <summary>
            return the device types for peripheral devices
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertDeviceType.Id">
            <summary>
            Gets a string that represents the alert groupAlert Group ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertDeviceType.Name">
            <summary>
            Gets a string that represents the Alert Group Name.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.IAlertFactory">
            <summary>
            Represents a class factory responsible for creating alert related objects.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertFactory.CreateAlert(Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate,System.String,Retalix.StoreServices.Model.Organization.Device.IDeviceProfile,System.String,System.String)">
            <summary>
            Creates a new alert object.
            </summary>
            <returns>Returns the new <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlert">IAlert</see> type object.</returns>
            <summary><para><b>Note: This Interface is obsolete since version 10.5</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertFactory.CreateAlert(Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate,System.String,Retalix.StoreServices.Model.Organization.Device.IDeviceProfile,System.String,System.String,Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Creates a new alert object for the given TouchPoint ID and BU ID.
            </summary>
            <returns>Returns the new <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlert">IAlert</see> type object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertFactory.CreateAlert(Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate,System.String,System.String,Retalix.StoreServices.Model.Promotion.IPromotion)">
            <summary>
            Creates a new business alert object.
            </summary>
            <param name="alertTemplate">Type of the alert template</param>
            <param name="stateId">Whether the alert is new or closed</param>
            <param name="retailTransactionId">Transaction Id</param>
            /// <param name="promotion">The promotion for which the alert is created</param>
            <returns>New Alert</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertFactory.CreateAlertTemplate(System.String,Retalix.StoreServices.Model.Infrastructure.Message.IMessage,Retalix.StoreServices.Model.Organization.Alert.IAlertGroup,Retalix.StoreServices.Model.Organization.Alert.IAlertSeverity,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription},Retalix.StoreServices.Model.Organization.Alert.TemplateStatusType)">
            <summary>
            Creates a new alert template object.
            </summary>
            <param name="id">The alert template ID.</param>
            <param name="message">A <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">IMessage</see> describing the Alert.</param>
            <param name="group">The alert <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertGroup">IAlertGroup</see>.</param>
            <param name="severity">The alert <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertSeverity">IAlertSeverity</see> level.</param>
            <param name="localizedDescriptions">The localized <see cref="T:Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription">LocalizedDescription</see> of the alert name.</param>
            <param name="status">The template <see cref="T:Retalix.StoreServices.Model.Organization.Alert.TemplateStatusType">TemplateStatusType</see>. e.g. "Active", "Inactive"</param>
            <returns>Returns the new IAlertTemplate type object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertFactory.CreateAlertGroup(System.String,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription})">
            <summary>
            Creates a new alert group object.
            </summary>
            <param name="id">The identifier of the alert group.</param>
            <param name="localizedDescriptions">the localized <see cref="T:Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription">LocalizedDescription</see> of the alert group name.</param>
            <returns>Returns the new <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertGroup">IAlertGroup</see> type object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertFactory.CreateAlertSeverity(System.String,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription})">
            <summary>
            Creates a new alert severity object.
            </summary>
            <param name="id">The identifier of the alert severity.</param>
            <param name="localizedDescriptions">The localized <see cref="T:Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription">LocalizedDescription</see> of the alert severity level.</param>
            <returns>Returns the IAlertSeverity type object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertFactory.CreateAlert(Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate,System.String,System.String,System.String)">
            <summary>
            Creates a new business alert object.
            </summary>
            <param name="alertTemplate">Type of the alert template</param>
            <param name="stateId">Whether the alert is new or closed</param>
            <param name="retailTransactionId">Transaction Id</param>
            /// <param name="promotionId">The Id of promotion for which the alert is created</param>
            <returns>New Alert</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.IAlertGroup">
            <summary>
            Represents an alert group entity. An alert group is used to categorize alert objects.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertGroup.Id">
            <summary>
            Gets a string that represents the Alert Group ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertGroup.Descriptions">
            <summary>
            Gets a list of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription">LocalizedDescription</see> for the alert group.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertPeripheralsError.OposError">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertPeripheralsError.DeviceType">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertPeripheralsError.ErrorMessage">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertPeripheralsError.Id">
            <summary>
            Alert Error Id
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria">
            <summary>
            The criteria used to search for alert type objects. The criteria include searching by specific groups, severity levels, date and timeframe, and business unit ID.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereGroupIs(Retalix.StoreServices.Model.Organization.Alert.IAlertGroup)">
            <summary>
            Adds an alert group to the search criteria.
            </summary>
            <param name="group">The <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertGroup"/>IAlertGroup</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereTimeCreatedIsFrom(System.DateTime)">
            <summary>
            Adds the start date and timeframe to the search criteria.
            </summary>
            <param name="from">A date and time object.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereTimeCreatedIsTill(System.DateTime)">
            <summary>
            Adds the end date and timeframe to the search criteria.
            </summary>
            <param name="to">A date and time object.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereSeverityIs(Retalix.StoreServices.Model.Organization.Alert.IAlertSeverity)">
            <summary>
            Adds an alert severity level to the search criteria.
            </summary>
            <param name="severity">The <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertSeverity"/>IAlertSeverity</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereBusinessUnitIs(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Adds a BusinessUnit to the search criteria.
            </summary>
            <param name="businessUnit">The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>IBusinessUnit</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.Search">
            <summary>
            
            </summary>
            <returns>IEnumerable of the <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlert">IAlert</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereTouchPointIdIs(System.String)">
            <summary>
            Adds a TouchPointId to the search criteria.
            </summary>
            <param name="touchPointId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.AddFreeText(System.String)">
            <summary>
            Adds a FreeText to the search criteria.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereUsernameIs(System.String)">
            <summary>
            Adds a userName to the search criteria.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereAlertStatusIs(Retalix.StoreServices.Model.Organization.Alert.AlertStatusType)">
            <summary>
            Adds an alert status to the search criteria.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereAlertStatusIsNot(Retalix.StoreServices.Model.Organization.Alert.AlertStatusType)">
            <summary>
            Adds a negative predicate of alert status to the search criteria.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereTemplateIs(Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate)">
            <summary>
            Adds a template criteria to the search criteria.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereErrorCodeIs(System.String)">
            <summary>
            Adds a error code criteria to the search criteria.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereClosingMethodIs(Retalix.StoreServices.Model.Organization.Alert.AlertClosingMethod)">
            <summary>
            Adds a closing method to the search criteria
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereAlertStatusIsNewOrInProgress">
            <summary>
            Adds alert(s) with <see cref="F:Retalix.StoreServices.Model.Organization.Alert.AlertStatusType.New"/> or <see cref="F:Retalix.StoreServices.Model.Organization.Alert.AlertStatusType.InProgress"/> 
            to the search criteria
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.WhereDeviceNameIs(System.String)">
            <summary>
            Adds device name to the search criteria
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertSearchCriteria.Reset">
            <summary>
            Resets search creteria to the initial state
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.IAlertSeverity">
            <summary>
            Represents the alert severity entity. The alert severity is used to prioritize alert objects.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertSeverity.Id">
            <summary>
            Gets a string, which represents the Alert severity ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertSeverity.Descriptions">
            <summary>
            Gets a list of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription">LocalizedDescription</see> for the alert severity levels.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate">
            <summary>
            Represents an alert template, which contains the attributes that define alert properties, such as the alert group, the alert message, severity level, and descriptions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate.Id">
            <summary>
            Gets a string that represents the alert template ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate.Message">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">message</see> of the alert.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate.Group">
            <summary>
            Gets the alert <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertGroup">group</see> linked to the alert.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate.Severity">
            <summary>
            Gets the alert <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertSeverity">severity</see> level.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate.Descriptions">
            <summary>
            Gets a list of the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription">alert template descriptions</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate.Status">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Organization.Alert.TemplateStatusType">status</see> of the alert template. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateSearchCriteria">
            <summary>
            Represents an alert template search criteria object, used for searching alert templates by specific parameters, such as group or severity.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateSearchCriteria.WhereGroupIs(Retalix.StoreServices.Model.Organization.Alert.IAlertGroup)">
            <summary>
            Adds an alert group object to the search criteria.
            </summary>
            <param name="group">The <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertGroup"/>IAlertGroup</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateSearchCriteria.WhereSeverityIs(Retalix.StoreServices.Model.Organization.Alert.IAlertSeverity)">
            <summary>
            Adds an alert severity level object to the search criteria.
            </summary>
            <param name="severity">The <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertSeverity"/>IAlertSeverity</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateSearchCriteria.WhereStatusIs(Retalix.StoreServices.Model.Organization.Alert.TemplateStatusType)">
            <summary>
             Adds an alert template status object to the search criteria.
            </summary>
            <param name="status"><see cref="T:Retalix.StoreServices.Model.Organization.Alert.TemplateStatusType">TemplateStatusType</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateSearchCriteria.WhereDeviceIs(Retalix.StoreServices.Model.Organization.Alert.IAlertDeviceType)">
            <summary>
             Adds an alert device status object to the search criteria.
            </summary>
            <param name="deviceType"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateSearchCriteria.WhereErrorIs(Retalix.StoreServices.Model.Organization.Alert.IAlertPeripheralsError)">
            <summary>
             Adds an alert device status object to the search criteria.
            </summary>
            <param name="peripheralsError"><see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertPeripheralsError">IAlertPeripheralsError</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateSearchCriteria.WhereIdIs(System.String)">
            <summary>
             Adds an alert template id to the search criteria.
            </summary>
            <param name="templateId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateSearchCriteria.WhereMessageIs(Retalix.StoreServices.Model.Infrastructure.Message.IMessage)">
            <summary>
             Adds an alert message to the search criteria.
            </summary>
            <param name="IMessage"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplateSearchCriteria.Search">
            <summary>
            
            </summary>
            <returns>an IEnumerable of the <see cref="T:Retalix.StoreServices.Model.Organization.Alert.IAlertTemplate">IAlertTemplate</see> of the search results</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.IAlertDao">
            <summary>
            Represents a generic Data Access Object for alerts, responsible for saving ,deleting, and retrieving alert type objects, such as IAlert, IAlertSeverity and IAlertTemplate types.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertDao.SaveOrUpdate``1(``0)">
            <summary>
            Saves a new object or updates an existing object.
            </summary>
            <typeparam name="TModel">The specified alert type.</typeparam>
            <param name="obj">The object to be saved or updated.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertDao.Get``1">
            <summary>
            Gets a list of objects from a specified alert type.
            </summary>
            <typeparam name="TModel">The specified alert type.</typeparam>
            <returns>If found, a list of all objects for the specified alert type is returned.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertDao.Delete``1(``0)">
            <summary>
            Deletes an object from a specified alert type.
            </summary>
            <typeparam name="TModel">The alert type of the object to be deleted.</typeparam>
            <param name="obj">The object to be deleted.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertDao.Get``1(System.Object)">
            <summary>
            Gets an object by a specific GUID.
            </summary>
            <typeparam name="TModel">The alert type of the object.</typeparam>
            <param name="id">The GUID identifier that represents the object.</param>
            <returns>If found, the object is returned.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Alert.IAlertDao.IsExist``1(System.String)">
            <summary>
            Checks if an object exists, according to a specific identifier.
            </summary>
            <typeparam name="T">The alert type of the object to check.</typeparam>
            <param name="id">A string identifier, which represents the object.</param>
            <returns>A Boolean value indicating if the object was found or not.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Alert.TemplateStatusType">
            <summary>
             Represents the status of Alert templates, which is a set of fields that define the severity level, message displayed when the alert is triggered, and alert group.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Alert.TemplateStatusType.Active">
            <summary>
             Alert template is active
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Alert.TemplateStatusType.Inactive">
            <summary>
             Alert template is inactive
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitRelation">
            <summary>
            Represents the relation between two business units A and B where B is an ancestor of A in the BU tree.
            The Id member represents A and the RelatedId member represents B.
            All the relations for a specific Business Unit, A, represent the path from the root of the BU tree to A
            where each node in the path is represented by the RelatedId property of the relation and all relations have
            the same Id property, which is A.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitRelation.Id">
            <summary>
            Any given Business Unit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitRelation.RelatedId">
            <summary>
            A Business Unit which is an ancestor of the Business Unit represented by <see cref="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitRelation.Id"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitRelation.Level">
            <summary>
            The depth of the ancestor (sepecified by <see cref="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitRelation.RelatedId"/>) on the BU tree, where the root of the tree
            has a depth of 1.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.BusinessUnit.ILocationConditionContext">
            <summary>
            Location condition context for Location condition in rule engine
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitDao">
            <summary>
             Represents the Store repository interface which provides the ability to retrieve and save store data.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitDao.GetAllRelations">
            <summary>
            Returns all BU relations, which are all child-ancestors relations that could form the entire Business Unit tree.
            </summary>
            <remarks>
            The result is lightweight since it contains only ID's.
            For each BU in the tree, all the relations with the same Id as the given BU are the ancestors of the BU.
            The ancestor's ID is given by the <see cref="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitRelation.RelatedId"/> property.
            The depth of the ancestor in the BU tree is given by the <see cref="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitRelation.Level"/> property. (the root level is 1)
            The given BU itself is also included in the result.
            As a result, this method returls all paths from the root for all BU's in the system.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitDao.GetByName(System.String)">
            <summary>
            </summary>
            <param name="businessUnit">The name of the business unit that should be retrieved</param>.
            <returns>The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> that corresponds to the assigned name</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitDao.GetRoot">
            <summary>
            Gets the root of the business unit hierarchy.
            </summary>
            <returns>The root <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitDao.Get(System.String)">
            <summary>
            Gets the Business Unit by the ID.
            </summary>
            <param name="id">The ID of the unit that is retrieved</param>.
            <returns>The corresponding <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitDao.Get(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets multiple Business Units by the IDs given.
            </summary>
            <param name="ids">The IDs of the units to be retrieved</param>.
            <returns>The corresponding <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see>s matching the given IDs</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitDao.GetByVicinity(System.String,System.Decimal)">
            <summary>
             Get all BUs that are close to a specific BU by distance in km
            </summary>
            <param name="businessUnitId"></param>
            <param name="distance">in km</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitDao.Save(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Saves the Business Unit.
            </summary>
            <param name="businessUnit">the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> that should be saved</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitDao.GetSubUnitsByParent(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            </summary>
            <param name="parent">The parent <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> that should be considered</param>.
            <returns>The IEnumerable of the Sub<see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see>s of the assigned parent</returns>.
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitDao.GetSubUnits(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit},System.Boolean)">
            <summary>
             Retrieves BUs which parent listed among the given entities.
            </summary>
            <param name="parentBusinessUnits">The list of parent <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> that should be considered</param>
            <param name="isOnlyDirectDescendants">Represents whether the direct descendants should return or all of the parents' hierarchy
             </param>
            <returns>The IEnumerable of the Sub<see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see>s of the assigned parent</returns>.
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitDao.FindByName(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
             Retrieves BUs with Names matching the given search criteria.
            </summary>
            <param name="searchValues">the string to be found in the BU name</param>
            <param name="matchModes">defines where the keyword will be searched inside the name</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitDao.GetAll">
            <summary>
            Get All Business Units
            </summary>
            <returns>All the BusinessUnits</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitFactory">
            <summary>
             Represents a factory for creating <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see>s.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitFactory.CreateBusinessUnit(System.String)">
            <summary>
             Creates a new IBusinessUnit with the assigned ID.
            </summary>
            <param name="id">The ID for the new IBusinessUnit</param>.
            <returns>The created<see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.BusinessUnit.ContactDetails">
            <summary>
            The Business Unit is the store hierarchy, which may comprise of one or many stores. 
            </summary>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.ContactDetails.Phone">
            <summary>
            The business unit's phone number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.ContactDetails.Fax">
            <summary>
            The business unit's fax nnumber.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.ContactDetails.ContactName">
            <summary>
            The name of the business unit's contact person.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress">
            <summary>
            Represents the customer's address.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress.AddressType">
            <summary>
            Gets or sets an arbitrary string value describing the address type (i.e. business, home, etc.)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress.Country">
            <summary>
            Gets or sets the value indicating the country the customer resides in. (Not validated)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress.State">
            <summary>
            Gets or sets the state the customer resides in. (Not validated)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress.City">
            <summary>
            Gets or sets the city the customer resides in. (Not validated)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress.ZipCode">
            <summary>
            Gets or sets the zip code in the customer's address. (Not validated)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress.Neighborhood">
            <summary>
            Gets or sets the suburb in the customer's address. (Not validated)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress.StreetAddress">
            <summary>
            Gets or sets the street name in the customer's address.(Not validated)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress.Floor">
            <summary>
            Gets or sets the floor number in the customer's address.  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress.Door">
            <summary>
            Gets or sets the house or appartment number in the customer's address.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IAddress.HouseNumber">
            <summary>
            Gets or sets the house number in the customer's address.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">
             <summary>
             Represents a retail organization or a sub unit in a retail organization.<br/>
             </summary>
             <remarks>
             A BusinessUnit Represents a place on the organizational hierarchy. This place can be associated with a physical store or of a logical brand or region.<br/>
             A BusinessUnit is a node in composite structure which forms an hierarchical tree (BusinessUnit hierarchy) of sub Business Units.<br/>
             Every BusinessUnit (or sub BusinessUnit) can be referenced by other entities so it become correlated with configurations, rules and policies (as culture, prices, selling restrictions).<br/>
             For example, Retailer which is located over few countries in Europe may define “En-UK” culture code referencing to UK division and “fr-FR” culture code referencing to france division. The same retailer can define different selling rules corresponding to the business unit.
             </remarks>
             <example>
             <code lang="cs" description = "This example shows how to use the IBusinessUnit interfaces." >
             <![CDATA[
             //A sample class that illustrate a business hierarchy creation and use in a rule.
             //-------------------------------------------------------------------------------  
             class BusinessUnitSample
             {            
                 IBusinessUnit HQ, southDivision, northDivision, southTownA, store1, store2;
             
                 void BusinessUnitSample(IBusinessUnitFactory businessUnitFactory)
                 {
                     //A sample that illustrate a business hierarchy creation
                     HQ = businessUnitFactory.CreateBusinessUnit("HQ");
                     southDivision = businessUnitFactory.CreateBusinessUnit("South division");
                     northDivision = businessUnitFactory.CreateBusinessUnit("North division");
                     southTownA = businessUnitFactory.CreateBusinessUnit("South Town A");
                     store1 = businessUnitFactory.CreateBusinessUnit("Store 1");
                     store2 = businessUnitFactory.CreateBusinessUnit("Store 2");
             
                     southDivision.ParentUnit = HQ;
                     northDivision.ParentUnit = HQ;
                     southTownA.ParentUnit = southDivision;
                     store1.ParentUnit = southDivision;
                     store2.ParentUnit = northDivision;
                 }
             }
             
             //A sample that illustrate a check if 'rule example' is valid for given business unit considering implementation 
             //---------------------------------------------------------------------------------------------------------------- 
             public class RuleExample
             {
                 IBusinessUnit _businessUnit;
                 
                 public RuleExample()
                 {
                     _businessUnit = store1;
                 }
             
                 void IsRuleValid(IBusinessUnit businessUnit)
                 {
                     string formatLine = (businessUnit.IsInSubUnitOf(_businessUnit))
                                     ? "Store '{0}' is a sub-store of '{1}' so is effected by rule example";
                                     : "Store '{0}' is not a sub-store of '{1} so is not effected by rule example'";
            
                     Console.WriteLine(string.Format(formatLine, _businessUnit.Id, businessUnit.Id));
                 }
             
                 void CheckBatch()
                 {
                     IsRuleValid(southDivision);   // result: Store 'Store 1' is a sub-store of 'South division'
                     IsRuleValid(northDivision);   // result: Store 'Store 1' is not a sub-store of 'North division'
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.Id">
            <summary>
            Gets the unique ID of the BusinessUnit.<br/>
            This ID is intended to be used as lifetime key of the BusinessUnit for logging or referencing purposes. 
            </summary>
            <remarks>
            This ID is defined when a new Business Unit is added to the system (usually during the maintenance procedure), It should be populated using the Business Unit Factory<br/>
            This ID must not be <langword>null</langword> and can not be changed ever (since it might be referenced).<br/> 
            The purpose of this Id is to enable logging and referencing to a Business Unit basing on a textual key.
            This is specifically required in order to reference it from external systems.<rb/>
            For example: when logging information into the Transaction Log or when implementing an RTI contract.<br/>
            An example use for Id can be – “025”
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.Name">
            <summary>
            Gets or sets the unique Name of the BusinessUnit.<br/>
            This name is intended for lookup and human identification and not for referencing. In order to reference it, please use the Id.
            </summary>
            <remarks>
            BusinessUnit is a unique name that must be given the a business unit.<br/>
            Unlike Id, Name can be changed as long as its uniqueness is kept. This is why it should not be used as a reference.<br/>
            An example use for Name can be – “Dallas downtown East”
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.IsActive">
            <summary>
            Gets or sets the IsActive of the BusinessUnit.<br/>
            </summary>
            <remarks>
            It is assume that IsActive is not a must value in BusinessUnitMaintenanceRequest 
            and if the request is ran without adding this tag then the default value will be '1'/True as it is currently 
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.Notes">
            <summary>
             General Information on the business unit that is available for presentation, printing or online view of the store.
            </summary>
             <example>Some possible Notes:
             <para>"Opening hours: 9:00 to 20:00 except weekends."</para>
             <para>"Parking is free on the movie-theater lot."</para>
             </example>
             <returns>
             <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">IMessage</see> or <langword>null</langword> if the Business Unit has no notes.
             </returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.NotesMessageID">
            <summary>
            Id for the message distinction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.CurrencyInfo">
            <summary>
             Gets the <see cref="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.CurrencyInfo">CurrencyInfo</see> of this BusinessUnit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.ParentUnit">
            <summary>
            Gets or sets the Parent of the IBusinessUnit.
            </summary>
            <remarks>
            It is required that there is always a root (only one root) in an organization. 
            </remarks>
            <returns><see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> or <langword>null</langword> if this is the root node of the organization</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.IsInSubUnitOf(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Determines if the BusinessUnit is a sub unit of <paramref name="businessUnit"/>.    
            </summary>
            <param name="businessUnit"><see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"></see> BusinessUnit from the organization hierarchy</param>
            <returns>True, if the <paramref name="businessUnit"/> is one of the ancestors of this BusinessUnit</returns>       
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.GetAncestors">
            <summary>
            Gets a list of <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnits</see> in the hierarchy path related to current <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see>.   
            </summary>
            <remarks>
            The hierarchal position is a list of <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnits</see> that includes the full
            hierarchal path, which starts from the root of the organization.
            For example, getting the GetAncestors of the root BusinessUnit returns a list with one item which is the root.
            </remarks>       
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.StoreRange">
            <summary>     
             Gets or sets the<see cref="T:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange">IStoreRange</see> defined for business unit.    
            </summary>
             <returns>
             <see cref="T:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange">IStoreRange</see> or <langword>null</langword> if the Business Unit has no <see cref="T:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange">IStoreRange</see>.
             </returns>      
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.Location">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitLocation">Location</see> of the current business unit.
            </summary>
            <returns>
            <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitLocation">location</see> or <langword>null</langword> if the Business Unit has no location.
            </returns>      
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.RetailSegments">
             <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see>s that are related to this Business Unit.
             </summary>
            <returns>A collection of <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see>s that are included in this set.</returns>
             <remarks>
             Retail segments on business unit are used to associate specific segments in the retail organization to specific business unit. 
             Example for an usage - retrieve all business units that include Pharmacy department.
             </remarks>       
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.ContactDetails">
            <summary>
             Gets the <see cref="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.ContactDetails">ContactDetails</see> of the Business Unit.  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.XZReportsGenerationOption">
            <summary>
            Returns the place which does the XZReports aggregation relevant for this unit
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitLocation">
            <summary>
             Encapsulates all location information related to a specific IBusinessUnit in addition to standard information
             such as address, state, etc., and includes the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IGeographicLocation">IGpsLocation</see> of the IBusinessUnit to which it is attached.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitLocation.Address">
            <summary>
            Gets ot sets the address of the business unit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitLocation.GeographicLocation">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IGeographicLocation">IGpsLocation</see> of the related IBusinessUnit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitLocation.TimeZone">
            <summary>
            Gets or sets the local <see cref="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitLocation.TimeZone">TimeZone</see> of the related IBusinessUnit.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IGeographicLocation">
            <summary>
            Defines the latitude and longtitude coordinates of the geographical location of the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitLocation">IBusinessUnitLocation.</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IGeographicLocation.Longitude">
            <summary>
            Get or sets the longitude coordinates of the related <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitLocation">IBusinessUnitLocation.</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IGeographicLocation.Latitude">
            <summary>
            Get or sets the latitude coordinates of the related  <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnitLocation">IBusinessUnitLocation.</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Notification.Recurrence.#ctor(System.String)">
            <summary>
            OnCreate a new <see cref="T:Retalix.StoreServices.Model.Organization.Notification.Recurrence"/> with an existing value;
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Notification.Recurrence.Daily">
            <summary>
            Show notification only once per day
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Notification.Recurrence.Always">
            <summary>
            Show notification every time
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Notification.ClientState.#ctor(System.String)">
            <summary>
            OnCreate a new <see cref="T:Retalix.StoreServices.Model.Organization.Notification.ClientState"/> with an existing value;
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.Notification.ClientState.SignOn">
            <summary>
            User is logging in
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Notification.IDisplayTiming.ClientState">
            <summary>
            Client state for which to show the notification
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Notification.IDisplayTiming.Recurrence">
            <summary>
            sdfg
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Notification.INotificationInstance">
            <summary>
            Represent a <see cref="T:Retalix.StoreServices.Model.Organization.Notification.INotification">Notification</see> instance
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Notification.INotificationInstance.NotificationId">
            <summary>
            Reference to <see cref="T:Retalix.StoreServices.Model.Organization.Notification.INotification">Notification</see> 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Notification.INotificationInstance.InstanceId">
            <summary>
            The instance id 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Notification.NotificationId">
            <summary>
            /// Represent The unique id of the <see cref="T:Retalix.StoreServices.Model.Organization.Notification.INotification">Notification</see> allowing other domain models to have loosely coupled association to  
            <see cref="T:Retalix.StoreServices.Model.Organization.Notification.INotification">Notification</see> without actually knowing the <see cref="T:Retalix.StoreServices.Model.Organization.Notification.INotification">Notification</see> model.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Notification.INotificationDao">
            <summary>
            Data access object for user notification
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Notification.INotificationDao.Get(System.String)">
            <summary>
            Gets a Notification by a given entity key.
            </summary>
            <param name="id">
            The wanted Notification's <see cref="P:Retalix.StoreServices.Model.Organization.Notification.INotification.Id">entity key.</see>.
            <remarks>This unique key used to retrieve a certain Notification from the database but not to invoke
            business activities (i.e. lookup).
            </remarks>
            </param>
            <returns>the <see cref="T:Retalix.StoreServices.Model.Organization.Notification.INotification">IProduct</see> corresponding to the entityKey, null if not found</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Notification.INotificationDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.Notification.INotification})">
            <summary>
             Saves the collection of <see cref="T:Retalix.StoreServices.Model.Organization.Notification.INotification">INotification</see>s.
            </summary>
            <param name="notifications">a collection of Notifications that should be saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Notification.INotificationDao.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes numerous notifications by their ids
            </summary>
            <param name="ids">Collection of ids of notifications to remove</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Notification.INotificationDao.FindByNotificationLookupCriteria(Retalix.StoreServices.Model.Infrastructure.Query.IQuery)">
             <summary>
             Finds products according to various criteria,
             </summary>
            <param name="query">query criteria sort and paging section</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Notification.INotificationDao.CountByLookupCriteria(Retalix.StoreServices.Model.Infrastructure.Query.IQuery)">
             <summary>
             get count of notifications according to various criteria
             </summary>
            <param name="query">query criteria section</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDay.Id">
            <summary>
            Represent a group of Days
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDay.BusinessUnitId">
            <summary>
            The business unit of the venue day
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDay.RetailSegmentId">
            <summary>
            The TouchpointGroup of the venue day
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDay.DaysOfWeek">
            <summary>
            Days of week
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDay.OpenCloseTime">
            <summary>
            List of open time
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDay.Classification">
            <summary>
            Days type 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDayDao">
            <summary>
            Represents repository for IOpenCloseDay
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDayDao.AddOrUpdate(Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDay)">
            <summary>
            Add or Update the venue day shift
            </summary>
            <param name="openCloseDay">The venue day</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDayDao.Delete(Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDay)">
            <summary>
            Delete the venue day shift
            </summary>
            <param name="openCloseDay">The venue day</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDayDao.Get(System.Guid)">
            <summary>
            Return venue day according to id
            </summary>
            <param name="id">The id of the venue</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDayDao.Find(System.String,System.Collections.Generic.IEnumerable{System.DayOfWeek},System.String,System.String)">
            <summary>
            Return venue day according to id
            </summary>
            <summary>
            <param name="businessUnitId">The businessUnit Id</param>
            <param name="dayOfWeek">The list of days in week</param>
            <param name="retailSegments">The retailSegment</param>
            <param name="classification">days type</param>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDayDao.Find(System.String)">
            <summary>
            Return OpenCloseDay data relayed to Store, specifed by businessUnitId
            In case of businessUnitId does not specified, all data will be retrieved
            </summary>
            <summary>
            <param name="businessUnitId">The businessUnit Id</param>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseTime.Id">
            <summary>
            Id used in NHibernate
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseTime.IsClosed">
            <summary>
            The Store open close status
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseTime.OpenCloseDayId">
            <summary>
            Days of week that define on the OpenCloseDay
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseTime.StartTime">
            <summary>
            Start time of the store
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseTime.EndTime">
            <summary>
            End time of the store
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDayFactory.Create(System.String,System.String,System.DayOfWeek,System.Collections.Generic.ICollection{Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseTime},System.String)">
            <summary>
            Create Open Closed Day time definition
            </summary>
            <param name="businessUnit">businessUnit</param>
            <param name="retailSegment">retailSegments</param>
            <param name="dayOfWeek">dayOfWeek</param>
            <param name="openCloseTime">OpenCloseTime</param>
            <param name="classification">OpenCloseTime</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDayFactory.CreateTime(Retalix.StoreServices.Model.Organization.OpenCloseDay.IOpenCloseDay,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Create Time
            </summary>
            <param name="openCloseDay">openCloseDay</param>
            <param name="startTime">startTime</param>
            <param name="endTime">endTime</param>
            <param name="isClosed">IsClosed</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegmentConditionContext">
            <summary>
            Retail segment context for Retail segment condition in rule engine
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.RetailSegment.RetailSegmentTag.#ctor(System.String)">
            <summary>
            Creates an instance with a given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.RetailSegment.RetailSegmentTag.Venue">
            <summary>
            'Venue' Retail segment tag
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Organization.RetailSegment.RetailSegmentTag.CTM">
            <summary>
            'CTM' Retail segment tag
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">
            <summary>
             Represents a specific retail classification within general segmentation method.
            </summary>
             <remarks>
             Retail segments are commonly defined in order to extend business rules to have segment based behavior. 
             RetailSegment is a general purpose tag that can be attached to some of the R10 entities in order to 
             classify them as belonging to a segment.
             This classification is very general and can be used as a criteria for segment based behavior.
             Following are examples for retail segments:
             1) Segmentation method - Checkout; Classificaitons- Main checkout 
             2) Segmentation method - Checkout; Classificaitons- Pharmacy 
             3) Segmentation method - Security zone; Classificaitons- High
             4) Segmentation method - Security zone; Classificaitons- Med
             For is example for usage -  a specific point of sell (POS) can be associated with a retail segment, and behavior can 
             be applied on all the points of sell that have/or do not have a specific RetailSegment.<br/>
             Retail segments can also be attached to other entities. For example menu configuration can be assigned to retail segment 
             in order to have different user experience when working on menu for POS touch point defined in Main checkout or pharmacy checkout.
             <list type="bullet">
             <listheader>The specific entities that can be tagged using RetailSegment are:</listheader>
             <item><see cref="T:Retalix.StoreServices.Model.Finance.Account.IActivityConfiguration">IActivityConfiguration</see></item>
             <item><see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see></item>
             <item><see cref="T:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.ICustomerDisplayLayout">ICustomerDisplayLayout</see></item>
             <item><see cref="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationEnvironment">IKeyboardConfigurationEnvironment</see></item>
             <item>ReceiptEnvironment</item>
             <item><see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole">IRole</see></item>
             <item><see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see></item>
             </list>
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment.Id">
            <summary> 
             Gets the unique ID of the segment classification.
             This ID is intended to be used as lifetime key of the RetailSegment for logging or referencing purposes. 
            </summary>
             <remarks>
             The ID is used for comparison purposes, i.e, to identify a IRetailSegment by the ID.  
             This ID is defined when a new RetaileSgment is created (usually during the maintenance procedure), It should be populated using the Retail Segment Factory.<br/>
             This ID must not be <langword>null</langword> and can not be changed ever (since it might be referenced).<br/> 
             The purpose of this Id is to enable logging and referencing to a RetaileSgment basing on a textual key.
             This is specifically needed in order to reference it from the outside.<br/>
             For example: when logging information into the Transaction Log or when implementing an RTI contract or when considering a business rule.<br/>
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment.Name">
            <summary>
             Gets the unique Name of the Retail Segment.
             </summary> 
             <remarks>
             The purpose of this name is to provide a meaningful name to a segment - its primary purpose is to enable 
             lookup and human identification of the segment rather than computerized identification.<br/>
             It should be populated using the Retail Segment Factory.<br/>
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment.SegmentationMethod">
            <summary>
            Gets the Segmentation Method.
            </summary>
            <remarks>
            A Segmentation Method is used as a key for the business rules that are associated with this segment.
            For example, a Security zone, Checkout zone or Advertisement zone.
            It should be populated using the Retail Segment Factory.<br/>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment.Category">
            <summary>
            The category of the touch point group primary or secondary.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment.Tags">
            <summary>
            The tag of the touch point group for example Venue.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment.AddTag(Retalix.StoreServices.Model.Organization.RetailSegment.RetailSegmentTag)">
            <summary>
             The tag of the touch point group for example Venue.
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment.RemoveTag(Retalix.StoreServices.Model.Organization.RetailSegment.RetailSegmentTag)">
            <summary>
             The tag of the touch point group for example Venue.
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegmentDao">
            <summary>
             Represents the DAO for the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment.</see>
            </summary>
             <remarks>
             Provides an interface to the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see> business entity, such as create/lookup/delete.
             </remarks> 
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegmentDao.Get(System.String)">
            <summary>
             Retrieves the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see> by its assigned name.
            </summary>
            <param name="id">Used to retrieve the retail segment by its ID.</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see> if the segment exists with its assigned name.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegmentDao.Save(Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
             Saves the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment to the repository.</see>
            </summary>
            <param name="retailSegment"><see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see> stored in the data source.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegmentDao.GetAll">
            <summary>
            Retrieves all Segments sorted by Segment ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegmentDao.Delete(Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
             Removes the retail segment from the repository <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see>.
            </summary>
            <param name="retailSegment"> <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see> to delete.</param>
             <remarks>
             The <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see> that corresponds to the name of the assigned retail segment deleted from the repository.
             </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegmentFactory">
            <summary>
             Creates a retail segment of a predefined type.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegmentFactory.CreateSegment(System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            </summary>
            <param name="id"></param>
             <param type="type"></param>
            <param name="name"></param>
            <param name="segmentationMethod"></param>
            <param name="tag"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegmentFactory.AddRetailSegmentTags(Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment,System.String[])">
            <summary>
            Add Tags to existing retailSegment
            </summary>
            <param name="retailSegment"></param>
            <param name="tags"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Servers.ServerGroupSearchCriteria">
            <summary>
            Search criteria for <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServerGroup"/>s.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Servers.ServerGroupSearchCriteria.Id">
            <summary>
            Id of the <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServerGroup"/> 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Servers.IServer">
            <summary>
            Represents the server
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Servers.IServer.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Servers.IServer.Groups">
            <summary>
            Gets the groups that the server belongs to
            </summary>
            <value>
            The groups.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Servers.IServer.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Servers.IServer.BusinessUnit">
            <summary>
            Gets or sets the Business unit ofthe server.
            </summary>
            <value>
            The business unit.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Servers.IServer.LastHeartbeat">
            <summary>
            Gets or sets the LastHeartbeat value for this server
            </summary>
            <value>The last time this server sent a heartbeat</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Servers.IServer.Url">
            <summary>
            The Url of this server
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Servers.IServer.ApplicationInstances">
            <summary>
            Gets the list of Application Instances this server has registered
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Servers.IServerDao">
            <summary>
            Represents the server dao
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Servers.IServerDao.Find(Retalix.StoreServices.Model.Organization.Servers.ServerSearchCriteria)">
            <summary>
            Find the servers by criteria.
            </summary>        
            <param name="serverSearchCriteria"></param>
            <returns>collection of <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServer"></see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Servers.IServerDao.Find``1(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Infrastructure.DataAccess.IQueryCriterion{Retalix.StoreServices.Model.Organization.Servers.IServer}},System.Collections.Generic.IEnumerable{Retalix.StoreServices.Infrastructure.DataAccess.IQuerySpecification{Retalix.StoreServices.Model.Organization.Servers.IServer}})">
            <summary>
            Find servers using an <see cref="T:Retalix.StoreServices.Infrastructure.DataAccess.IQuery`3">IQuery</see> with the specified role 
            </summary>
            <typeparam name="TRole">The TRole of the IQuery</typeparam>
            <param name="criteria">Criteria that will be applied to the query before it is executed</param>
            <param name="specifications">Specifications that will be applied to the query before it is executed</param>
            <returns>All the relevant servers returned by the Query</returns>
            <remarks>In order to use the default query implementation use <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServerDao"/> as the TRole</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Servers.IServerDao.Save(Retalix.StoreServices.Model.Organization.Servers.IServer)">
            <summary>
            Saves or update.
            </summary>        
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Servers.IServerDao.GetAll">
            <summary>
            Gets all the <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServer">servers</see>
            </summary>
            <returns>collection of <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServer"></see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Servers.IServerGroupDao">
            <summary>
            Represents a server group
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Servers.IServerGroupDao.Find(Retalix.StoreServices.Model.Organization.Servers.ServerGroupSearchCriteria)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServerGroup">server group</see>by id.
            </summary>        
            <param name="searchCriteria"></param>
            <returns><see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServerGroup"></see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Servers.IServerGroupDao.Save(Retalix.StoreServices.Model.Organization.Servers.IServerGroup)">
            <summary>
            Saves or update a server group.
            </summary>
            <param name="serverGroup">The server group.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.Servers.IServerGroupDao.GetAll">
            <summary>
            Gets all the <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServerGroup">server groups</see>
            </summary>
            <returns>collection of <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServerGroup"></see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Servers.IServerGroup">
            <summary>
            Represents a server group
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Servers.IServerGroup.Id">
            <summary>
            Gets or sets the unique identifier of the server group.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Servers.IServerGroup.Name">
            <summary>
            Gets or sets the name of the server group.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.Servers.ServerSearchCriteria">
            <summary>
            Search criteria for <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServer"/>s.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Servers.ServerSearchCriteria.Id">
            <summary>
            Id of the <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServer"/> 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Servers.ServerSearchCriteria.Name">
            <summary>
            Get or sets <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServer"/> name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.Servers.ServerSearchCriteria.ServerGroupId">
            <summary>
            Get or sets search criteria by <see cref="T:Retalix.StoreServices.Model.Organization.Servers.IServerGroup"/>'s Id
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.SecurityScaleMaintenance.ISecurityScaleConfiguration">
            <summary>
            The buisness touch point configuration will hold generic settings of touchpoints
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.SecurityScaleMaintenance.ISecurityScaleConfiguration.BusinessUnitId">
            <summary>
            Gets or sets the business unit identifier.
            </summary>
            <value>
            The business unit identifier.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.SecurityScaleMaintenance.ISecurityScaleConfiguration.TouchpointId">
            <summary>
            Gets or sets the entity parameter.
            </summary>
            <value>
            The entity parameter.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.SecurityScaleMaintenance.ISecurityScaleConfiguration.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.SecurityScaleMaintenance.ISecurityScaleConfigurationDao">
            <summary>
            Security Scale Configuraiton Dao Object
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.VenueShift.IVenueDayShiftFactory.Create(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Collections.Generic.List{Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment},System.String,System.Collections.Generic.List{System.DayOfWeek})">
            <summary>
            Create Venue Shift
            </summary>
            <param name="businessUnit">businessUnit</param>
            <param name="retailSegments">retailSegments</param>
            <param name="id">The id of the venue shift</param>
            <param name="dayOfWeek">Days of week that define on the venueDayShift</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.VenueShift.IVenueDayShiftFactory.CreateShift(Retalix.StoreServices.Model.Organization.VenueShift.IVenueDayShifts,System.String,System.DateTime,System.DateTime,System.Collections.Generic.List{Retalix.StoreServices.Model.Infrastructure.Globalization.ILocalizedDescription})">
            <summary>
            create shift
            </summary>
            <param name="venueDayShift">venueDayShift</param>
            <param name="id">The id of the shift</param>
            <param name="startTime">startTime</param>
            <param name="endTime">endTime</param>
            <param name="descriptions">descriptions</param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.VenueShift.IVenueDayShifts.Id">
            <summary>
            represent a group of shifts
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.VenueShift.IVenueDayShifts.BusinessUnit">
            <summary>
            The business unit of the venue day shift
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.VenueShift.IVenueDayShifts.TouchpointGroup">
            <summary>
            The TouchpointGroup of the venue day shift
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.VenueShift.IVenueDayShifts.DaysOfWeek">
            <summary>
            Days of week that define on the venueDayShift
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.VenueShift.IVenueDayShifts.VenueShifts">
            <summary>
            list of the shift that belong to the venue shift
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.VenueShift.IVenueShift.Id">
            <summary>
            The Id of the Venue Shift
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.VenueShift.IVenueShift.Descriptions">
            <summary>
            The Description of Venue Shift
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.VenueShift.IVenueShift.VenueDayShift">
            <summary>
            Days of week that define on the venueDayShift
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.VenueShift.IVenueShift.StartTime">
            <summary>
            Start time of the shift
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.VenueShift.IVenueShift.EndTime">
            <summary>
            End time of the shift
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.VenueShift.IVenueShiftDao">
            <summary>
            Represents repository for IVenueShift
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.VenueShift.IVenueShiftDao.AddOrUpdate(Retalix.StoreServices.Model.Organization.VenueShift.IVenueDayShifts)">
            <summary>
            Add or Update the venue day shift
            </summary>
            <param name="venueDayShifts">The venue day shift</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.VenueShift.IVenueShiftDao.Delete(Retalix.StoreServices.Model.Organization.VenueShift.IVenueDayShifts)">
            <summary>
            Delete the venue day shift
            </summary>
            <param name="venueDayShifts">The venue day shift</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.VenueShift.IVenueShiftDao.Find(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.List{System.DayOfWeek})">
            <summary>
            Finds venueDayShift according to criteria
            </summary>
            <param name="businessUnitId">businessUnitId</param>
            <param name="touchPointGroupIds">touchPointGroupIds</param>
            <param name="days">Days of week that define on the venueDayShift</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.VenueShift.IVenueShiftDao.Get(System.String)">
            <summary>
            Return venue day shift according to id
            </summary>
            <param name="id">The id of the venue shift</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.VenueShift.IVenueShiftDao.GetVenueShifts(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Return list of venue shift according to ids
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTermFactory.Create(System.Guid,System.String)">
            <summary>
            Create Open Closed Day time definition
            </summary>
            <param name="id">id</param>
            <param name="term">term</param>
            <returns>ITimeAvailabilityTerm</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTermDao">
            <summary>
             Represents the persistency services for TimeAvailabilityTerms, such as get/add/update/delete.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTermDao.GetAll">
            <summary>
             Returns all the <see cref="T:Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTerm">TimeAvailabilityTerm</see>s in the <see cref="T:Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTerm">TimeAvailabilityTerm</see>.
            </summary>
            <returns>The previously persisted TimeAvailabilityTerms or an empty list if no TimeAvailabilityTerms were persisted.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTermDao.Get(Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTerm)">
            <summary>Get TimeAvailabilityTerm by Term or by Id</summary>
            <param name="model">The TimeAvailabilityTerm which contains either Id or Term for search.</param>
            <returns>The previously persisted TimeAvailabilityTerm or null if no TimeAvailabilityTerms were persisted.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTermDao.AddOrUpdate(System.Boolean,Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTerm)">
            <summary>
             Updates (Previously persisted) term, or Add (new) one
             </summary>
            <param name="isUpdateOnly">Request update but not Add in case TimeAvailabilityTerm entity not exist</param>
            <param name="model">The TimeAvailabilityTerm which is persisted.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTermDao.Delete(Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTerm)">
            <summary>Permanently removes a TimeAvailabilityTerm</summary>
            <param name="model">The TimeAvailabilityTerm which is removed.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTerm">
            <summary>
            available time's terms, such as: Breakfast, Lunch, Happy Hour etc. - All per bussiness unit
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTerm.Id">
            <summary>
            database id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Organization.TimeAvailabilityTerm.ITimeAvailabilityTerm.Term">
            <summary>
            Term Name, such as: Breakfast, Lunch, Happy Hour
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPriceChangeTracker.StartEffectiveDate">
            <summary>
             Gets or sets the date from which the price is valid and can be used.
            </summary>
            <value>A <see cref="T:System.DateTime">DateTime</see> from which the price is valid and can be used.</value>     
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPriceChangeTracker.EndEffectiveDate">
            <summary>
             Gets or sets the date from which the price is no longer valid and can not be used.
            </summary>
            <value>A <see cref="T:System.DateTime">DateTime</see> from which the price is no longer valid and can not be used.</value>    
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPriceChangeTracker.LastModifiedDate">
            <summary>
             Last Time entity was modified for record .
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPriceChangeTracker.OldPrice">
            <summary>
             Gets or sets the original price before change.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPriceChangeTracker.NewPrice">
            <summary>
             Gets or sets the updated price.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPriceChangeTracker.UserName">
            <summary>
             Gets or sets the user that modify price.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPriceChangeTracker.ProductId">
            <summary>
             Gets the productId that his price was modified .
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPriceChangeTracker.BusinessUnitId">
            <summary>
             Gets the BusinessUnitId for the productId that his price was modified .
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPriceChangeTracker.PriceReasonId">
            <summary>
             Gets the PriceReason for the productId that his price was modified .
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceChangeTrackerDao.Save(Retalix.StoreServices.Model.Price.IPriceChangeTracker)">
            <summary>
             Saves the given <see cref="T:Retalix.StoreServices.Model.Price.IPriceChangeTracker">priceChangeTracker</see>.
             If the priceChangeTracker already exists, then an update is performed.
            </summary>
            <param name="price">The price that is saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceChangeTrackerDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Price.IPriceChangeTracker})">
            <summary>
             Saves the collection of <see cref="T:Retalix.StoreServices.Model.Price.IPriceChangeTracker">priceChangeTracker</see>s.
            </summary>
            <param name="priceChangeTracker">a collection of priceChangeTrackers that should be saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceChangeTrackerDao.Remove(Retalix.StoreServices.Model.Price.IPriceChangeTracker)">
            <summary>
             Removes an existing <see cref="T:Retalix.StoreServices.Model.Price.IPrice">IPrice</see>.
            </summary>
            <param name="priceChangeTracker">a record of priceChangeTrackers that should be removed.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceChangeTrackerDao.Get(Retalix.StoreServices.Model.Price.Model.IPriceChangeSearchCriteria)">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Price.IPriceChangeTracker">IPriceChangeTracker</see> corresponding to the given criteria.
            </summary>
            <param name="PriceChangeSearchCriteria">The criteria to search the price change record.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceChangeTrackerDao.GetUniqueResult(Retalix.StoreServices.Model.Price.IPriceChangeTracker)">
            <summary>
             Gets the unique <see cref="T:Retalix.StoreServices.Model.Price.IPriceChangeTracker">IPriceChangeTracker</see> corresponding to the given priceChangeTracker.
            </summary>
            <param name="priceChangeTracker">The priceChangeTracker object to search the price change record.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceChangeTrackerDao.Get(Retalix.StoreServices.Model.Price.IPriceChangeTracker)">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Price.IPriceChangeTracker">IPriceChangeTracker</see> corresponding to the given priceChangeTracker.
            </summary>
            <param name="priceChangeTracker">The priceChangeTracker object to search the price change record.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.GenericPricedQuantity">
            <summary>
            General purpose PricedQuantity for use with <see cref="T:Retalix.StoreServices.Model.Price.Domain.IPricingStrategy"/>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.BeforePriceMaintenanceEvent">
            <summary>
            Represents a price maintenance event that occurred during creating/deleting/updating a <see cref="T:Retalix.StoreServices.Model.Price.IPrice">Price</see>.
            </summary>
            <remarks>
            This event will be dispatched via the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEventsDispatcher">Dispatcher</see> when the user will invoke <br></br>
            a new price maintenance action.<br></br>
            For example - when the cashier updates a price in the fuel pos, and a business rule has been configured for this activity that a manage approval
            is required, then this rule will be invoked as part of this action.<br></br>
            This event needs to be mapped with its concurrent activity - <see cref="F:Retalix.StoreServices.Model.Infrastructure.BusinessRules.ActivityType.FuelPriceUpdate"/>. see code example:<br></br>
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.AfterPriceMaintenanceEvent">
            <summary>
            Represents a price maintenance event that occurred after creating/deleting/updating a <see cref="T:Retalix.StoreServices.Model.Price.IPrice">Price</see>.
            The event contains PriceEventDTO with information about the price and the action that performed e.g: add, delete  <see cref="T:Retalix.StoreServices.Model.Price.PriceEventDTO">PriceEventDTO</see>. 
            </summary>
            <remarks>
            This event will be dispatched via the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEventsDispatcher">Dispatcher</see> when <br></br>
            a new price maintenance action was done.<br></br>
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.Exceptions.NoPriceExistPerUnitOfMeasureException">
            <summary>
            The exception that is thrown when no <see cref="T:Retalix.StoreServices.Model.Price.IPrice">IPrice</see> object is found for a certain <see cref="T:Retalix.StoreServices.Model.Price.UnitOfMeasure">UnitOfMeasure</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.Exceptions.NoPriceExistPerUnitOfMeasureException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Price.Exceptions.NoPriceExistPerUnitOfMeasureException">NoPriceExistPerUnitOfMeasureException</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.ILinkedItemPriceStrategy">
            <summary>
            A strategy for calculating the linked item price which will be added to the parent item price.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.IPricedQuantity">
            <summary>
            Represents monetary value for quantity
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPricedQuantity.Quantity">
            <summary>
            Gets or sets quantity for monetary value
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPricedQuantity.Price">
            <summary>
            Gets or set monetary value for specified quantity
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.Domain.IPricingStrategy">
            <summary>
            Represent Price domain internal strategy for pricing quantities based on catalog priced quantity
            <example>
            Default implementation will perform the following:
            Given catalog priced quantity of 10 USD for 3 EA, and quantities of 2 EA and 1 EA provided - monetary value of those quantities will be 6.67 USD and 3.33 USD respectively.
            </example>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.Domain.IPricingStrategy.Calculate(Retalix.StoreServices.Model.Price.IPricedQuantity,Retalix.StoreServices.Model.Price.IPricedQuantity[],System.Int32)">
            <summary>
            Will set monetary value for each quantity provided, based on catalog priced quantity.
            </summary>
            <param name="catalogPricedQuantity">Catalog priced quantity to base calculation on</param>
            <param name="quantitiesToPrice">Quantities to price, based on catalog priced quantity</param>
            <param name="pricePrecision">Precision to round the original price for item</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.IPriceListFilter">
            <summary>
             Represents filter on the active prices in pricelist. in case different prices were defined to the same product with different UOM's, the filter can chose which one to return.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceListFilter.FilterRelevantPrices(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Price.IPrice},Retalix.StoreServices.Model.Product.IProduct,System.String,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>Filter prices
            </summary>
            <param name="product">The product associated with the prices.</param>
            <param name="relevantPrices">The prices for the different UOM's</param>
            <param name="businessUnitId">Store Id</param>
            <param name="date">Use null unless a specific day is required</param>
            <returns>return the prices after the filter.</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.ISellPrice.PricedQuantity">
            <summary>
            Gets or set price for specified quantity
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.ISellPrice.PricePrecision">
            <summary>
            Rounding precision of a price
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.ISellPrice.ApplyTo(Retalix.StoreServices.Model.Price.IPricedQuantity[])">
            <summary>
            Applies monetary value for each quantity received based on <see cref="P:Retalix.StoreServices.Model.Price.IPrice.CatalogPricedQuantity"/>.
            Will use <see cref="T:Retalix.StoreServices.Model.Price.Domain.IPricingStrategy">pricing strategy</see> to do so.
            </summary>
            <param name="quantities">array of quantities to set monetary value</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.ISellPrice.PriceReasonCode">
            <summary>
            Gets or set reason code for price.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.Quantity">
            <summary>
            Represents amount of units per unit of measure
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.Quantity.UnitOfMeasure">
            <summary>
            Gets or sets unit of measure for amount of units
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.Quantity.Units">
            <summary>
            Gets or sets amount of units per unit of measure
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.Quantity.#ctor">
            <summary>
            Default constructor for serialization
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.Quantity.#ctor(Retalix.StoreServices.Model.Price.UnitOfMeasure,System.Decimal)">
            <summary>
            Creates quantity with amount of units for unit of measure
            </summary>
            <param name="unitOfMeasure">unit of measure, default: "EA"</param>
            <param name="units">amount of units, default: 1</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.Quantity.op_Subtraction(Retalix.StoreServices.Model.Price.Quantity,Retalix.StoreServices.Model.Price.Quantity)">
            <summary>
            Computes the difference between <paramref name="left"/> and <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.Quantity.op_Addition(Retalix.StoreServices.Model.Price.Quantity,Retalix.StoreServices.Model.Price.Quantity)">
            <summary>
            Computes the sum of <paramref name="left"/> and <paramref name="right"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.Quantity.ValidateSameUnitsOfMeasure(Retalix.StoreServices.Model.Price.Quantity,Retalix.StoreServices.Model.Price.Quantity)">
            <summary>
             Gets two Quantity instance and check if the <see cref="P:Retalix.StoreServices.Model.Price.Quantity.UnitOfMeasure">Unit Of Measure</see>
             is equals to the specified other.
             if it's not equal throw new ArgumentException.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.UnitOfMeasureValue">
            <summary>
            A unit of measure Code, Classification and Description
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.UnitOfMeasureValue.Code">
            <summary>
            The unit of measure code, or key.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.UnitOfMeasureValue.Classification">
            <summary>
            The class or type of the unit of measure. 
            Unit of measures of the same classification may be converted from one to the other.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.UnitOfMeasureValue.Description">
            <summary>
            The English human readable description of the unit of measure.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.UnitOfMeasureValue.#ctor(System.String,System.String,System.String)">
            <summary>
            Initiate a new instance of unit of measure
            </summary>
            <param name="code">The unit of measure code, or key</param>
            <param name="classification">The class or type of the unit of measure. 
            Unit of measures of the same classification may be converted from one to the other.</param>
            <param name="description">The English human readable description of the unit of measure.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.UnitOfMeasureValue.op_Implicit(Retalix.StoreServices.Model.Price.UnitOfMeasureValue)~System.String">
            <summary>
             Cast UnitOfMeasureValue to string, using the uom.Code. If null, an empty string is returned.
            </summary>
            <param name="uom"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.UnitOfMeasureValue.Equals(Retalix.StoreServices.Model.Price.UnitOfMeasureValue)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.UnitOfMeasureValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.UnitOfMeasureValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.UnitOfMeasureValue.op_Equality(Retalix.StoreServices.Model.Price.UnitOfMeasureValue,Retalix.StoreServices.Model.Price.UnitOfMeasureValue)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.UnitOfMeasureValue.op_Inequality(Retalix.StoreServices.Model.Price.UnitOfMeasureValue,Retalix.StoreServices.Model.Price.UnitOfMeasureValue)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.IPrice">
            <summary>
             Represents the product price in the retailer's catalog.
            </summary>
            <remarks>
             IPrice is used to determine the money amount for a product in the context of a selling process.
            </remarks>
             <example>
             <code lang="cs" description ="This example shows how to retrieve the amount of money for a product.">
             <![CDATA[    
             public class PriceListCalculatorService
             {
                 public Money CalculateProductPrice(IPriceList priceList, IProduct product, IBusinessUnit businessUnit, UnitOfMeasure unitOfMeasure, decimal amount)
                 {
                     DateTime businessDate = DateTime.Now;
                     IPrice price = priceList.GetPrice(businessUnit, product, unitOfMeasure, businessDate);
             
             
                     Money money = price.CalculatePrice(amount);
                     return money;
                }
             }
            ]]>
             </code>
             </example>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPrice.Id">
            <summary>
             Gets the unique identification of the price in the system.
            </summary>
             <value>A <see cref="T:System.String">String</see> that contains the unique identifier of the price in the system.</value>     
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPrice.EffectiveDate">
            <summary>
             Gets or sets the date from which the price is valid and can be used.
            </summary>
            <value>A <see cref="T:System.DateTime">DateTime</see> from which the price is valid and can be used.</value>     
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPrice.LastModifiedDate">
            <summary>
            Gets Last Modified Date of the price record. Each time the price is updated, the LastModifiedDate gets new value.
            </summary>
            <value>The prices of same Unit of measure can be sorted based on the last modified timestamp.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPrice.ExpirationDate">
            <summary>
             Gets or sets the date from which the price is no longer valid and can not be used.
            </summary>
            <value>A <see cref="T:System.DateTime">DateTime</see> from which the price is no longer valid and can not be used.</value>   
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPrice.CalculatePrice(System.Decimal)">
            <summary>
             Calculates the price of a product according to the quantity.
            </summary>
             <remarks>
             This property is obsolete, use <see cref="M:Retalix.StoreServices.Model.Price.ISellPrice.ApplyTo(Retalix.StoreServices.Model.Price.IPricedQuantity[])"/> method.
             </remarks>
            <returns>A <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">Money</see> which represents the calculated price according to a given quantity </returns>    
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPrice.CatalogPrice">
            <summary>
             Gets or sets the value and currency used to calculate the product price. 
            </summary>
             <remarks>
             This property is obsolete, use <see cref="P:Retalix.StoreServices.Model.Price.IPrice.CatalogPricedQuantity"/> property.
             </remarks>
            <returns>A <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">Money</see> amount which represents the store product price.</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPrice.UnitOfMeasure">
            <summary>
            The defined unit of measure for which the product price is calculated. For example, kg, each, etc.
            </summary>
            <remarks>
            This property is obsolete, use <see cref="P:Retalix.StoreServices.Model.Price.IPrice.CatalogPricedQuantity"/> property.
            </remarks>
            <value>the <see cref="P:Retalix.StoreServices.Model.Price.IPrice.UnitOfMeasure">UnitOfMeasure</see> upon which the Price should be calculated.</value>       
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPrice.CatalogPricedQuantity">
            <summary>
            Gets or set catalog price for specified quantity
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.IPrice.PriceReasonId">
            <summary>
            Gets or set price reason code.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.IPriceDao">
            <summary>
             The data access object responsible for saving and retrieving prices from the database.
            </summary>
             <para>
             The PriceDao provides the following services:
             <list type="bullet">
             <item>
             <description>Saves the price to the database.</description>
             </item>
             <item>
             <description>Saves the list of prices to the database.</description>
             </item>
              <item>
             <description>Removes the price from the database.</description>
             </item>
              <item>
             <description>Gets the price from the database.</description>
             </item>
             </list>
             </para>
             <example>
             <code lang="cs" description ="This example shows how to create an instance of the price Dao.">
             <![CDATA[    
            public class InstantiatePriceDao
            {
                private readonly IStoreApplication _storeApplicaton;
            
                public InstantiatePriceDao(IStoreApplication storeApplicaton)
                {
                    _storeApplicaton = storeApplicaton;
                }
            
                public IPriceDao GetPriceDao()
                {
                    IPriceDao priceDao = _storeApplicaton.Resolver.Resolve<IPriceDao>();
                    return priceDao;
                }
            }
            ]]>
             </code>
             </example>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceDao.Save(Retalix.StoreServices.Model.Price.IPrice)">
            <summary>
             Saves the given <see cref="T:Retalix.StoreServices.Model.Price.IPrice">IPrice</see>.
             If the price already exists, then an update is performed.
            </summary>
            <param name="price">The price that is saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Price.IPrice})">
            <summary>
             Saves the collection of <see cref="T:Retalix.StoreServices.Model.Price.IPrice">IPrice</see>s.
            </summary>
            <param name="prices">a collection of prices that should be saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceDao.Remove(Retalix.StoreServices.Model.Price.IPrice)">
            <summary>
             Removes an existing <see cref="T:Retalix.StoreServices.Model.Price.IPrice">IPrice</see>.
            </summary>
            <param name="price">The price that should be removed from the storage.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceDao.Get(System.String)">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Price.IPrice">IPrice</see> corresponding to the given  ID.
            </summary>
            <param name="priceId">The ID of the price.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.IPriceFactory">
            <summary>
              Represents a factory responsible for creating a new instance of the <see cref="T:Retalix.StoreServices.Model.Price.IPrice">IPrice</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceFactory.CreatePrice">
            <summary>
             Creates a new price instance.
            </summary>      
            <returns> A new instance of <see cref="T:Retalix.StoreServices.Model.Price.IPrice">price</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceFactory.CreatePrice(Retalix.StoreServices.Model.Price.UnitOfMeasure,Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
             Creates a new price instance, which contains the unit of measure, catalog price and the supplied effective date.
            </summary>
            <param name="unitOfMeasure">The unit of measure defined for the price.</param>
            <param name="catalogPrice">The catalog price.</param>
            <param name="effectiveDate">The date on which the price is effective.</param>
            <returns>A new instance of the price.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceFactory.CreatePrice(System.String,Retalix.StoreServices.Model.Price.UnitOfMeasure,Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
             Creates a new price instance, which contains the unit of measure, catalog price and the supplied effective date. 
            </summary>
             <param name="id">The price ID. </param>
            <param name="unitOfMeasure">The unit of measure defined for the price.</param>
            <param name="catalogPrice">The catalog price.</param>
            <param name="effectiveDate">The date on which the price is effective.</param>
            <returns>A new instance of the price.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.IPriceList">
            <summary>
             Represents the Price List, which is the customer based context used to retrieve product prices.
            </summary>
             <example>
             <code lang="cs" description="This example shows how to get a price from the price list.">
             <![CDATA[
             public class PriceService
             {
                private readonly IPriceListProvider _provider;
                public PriceService(IPriceListProvider provider)
                {
                    _provider = provider;
                }
            
                public IPrice GetPrice(IBusinessUnit businessUnit, IProduct product, UnitOfMeasure unitOfMeasure, DateTime businessDate)
                {
                    IPriceList priceList = _provider.Create(productId);
                    IPrice price = priceList.GetPrice(businessUnit, product, unitOfMeasure, businessDate);
            
                    return price;
                }
             }]]>
             </code>
             </example>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceList.AddPrice(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Price.IPrice)">
            <summary>
             Adds a price to the price list. After the price is added, items are sold in the business unit with the new price.
             If the price is already defined for the business unit and it is a product, then an exception occurs.
            </summary>
            <param name="businessUnit">The business unit for which the price is defined.</param>
            <param name="product">The product for which the the price is defined.</param>
            <param name="price">The price defined for the business unit and product.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceList.RemovePrice(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Price.IPrice)">
            <summary>
             Removes a price from the price list. After a price is removed, then the items are not sold in the business unit by the price and a new price is defined.
            </summary>
            <param name="businessUnit">The business unit for which the price is defined.</param>
            <param name="product">The product for which the the price is defined.</param>
            <param name="price">The deleted price defined for the business unit and product.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceList.FindPrices(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Finds all the prices defined for the business unit and product.
            </summary>
            <param name="businessUnit">The business unit for which a price is defined.</param>
            <param name="product">The product for which the price is defined.</param>           
            <returns>A list of prices defined for the business unit and product.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceList.FindPrices(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Finds all the prices for the product from the price list.
            </summary>      
            <param name="product">The product for which the price is defined.</param>           
            <returns>A list of prices defined for the product.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceList.GetProductPrice(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Price.UnitOfMeasure,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
             Gets the active single price for the product by the business unit, unit of measure, and business date.
             if there is no active price on the current business unit it will continue look up on parent until it gets to the root.
             if the price was not found on any business unit parent including root, NoPriceExistPerUnitOfMeasureException will be thrown.
            </summary>
            <param name="businessUnit">The business unit for which a price is defined.</param>
            <param name="product">The product for which the price is defined.</param>
            <param name="unitOfMeasure">The unit of measure for which the price is defined.</param>
            <param name="businessDate">The date from which the price is effective.</param>
            <returns>A list of prices defined for business unit, product, unit of measure and business date.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceList.FindProductEffectivePrices(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
             Gets all active prices for the product by the business unit and business date, for all unit of measure defined for current product.
             if there is no active price on the current business unit it will continue look up on parent until it gets to the root.
             if the price was not found on any business unit parent including root, NoPriceExistPerUnitOfMeasureException will be thrown.
            </summary>
            <param name="businessUnit">The business unit for which a price is defined.</param>
            <param name="product">The product for which the price is defined.</param>
            <param name="businessDate">The date from which the price is effective.</param>
            <returns>A list of prices defined for business unit, product, unit of measure and business date.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceList.DeleteAllPrice(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Remove all the prices defined for the business Unit and product.
            </summary>
            <param name="businessUnit">The business Unit for which a prices is defined.</param>
            <param name="product">The product for which the prices is defined.</param>   
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceList.GetPricesForProducts(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct},Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Price.UnitOfMeasure})">
            Added in 10.5
            <summary>
            Gets allowed prices per unit of measure for list of products. 
            </summary>
            <param name="businessUnit">The business unit.</param>
            <param name="products">The products.</param>
            <param name="businessDate">The date and time.</param>
            <param name="unitofMeasures">list of unit of measures , for each unitofMeasure most recently used price to be found  </param>
            <returns>Dictionary with key of type IProduct and value of IPrice</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceList.GetPricesForProducts(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct},Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            Added in 10.5
            <summary>
            Gets allowed prices per unit of measure for all units of measures exist for list of products. 
            </summary>
            <param name="businessUnit">The business unit.</param>
            <param name="products">The products.</param>
            <param name="businessDate">The date and time.</param>
            <returns>Dictionary with key of type IProduct and value of IPrice</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceList.GetSellPrice(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Price.UnitOfMeasure,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
             Gets the active single sell price for the product by the business unit, unit of measure, and business date.
             if there is no active price on the current business unit it will continue look up on parent until it gets to the root.
             if the price was not found on any business unit parent including root, NoPriceExistPerUnitOfMeasureException will be thrown.
            </summary>
            <param name="businessUnit">The business unit for which a price is defined.</param>
            <param name="product">The product for which the price is defined.</param>
            <param name="unitOfMeasure">The unit of measure for which the price is defined.</param>
            <param name="businessDate">The date from which the price is effective.</param>
            <returns>A list of prices defined for business unit, product, unit of measure and business date.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.IPriceListDao">
            <summary>
             Represents the data access object responsible for saving and retrieving the price list from the database.
            </summary>
             <para>
             The PriceListDao provides the following services:
             <list type="bullet">
             <item>
             <description>Adds a price to a price list in the database.</description>
             </item>
             <item>
             <description>Removes a price from the price list in the database.</description>
             </item>
              <item>
             <description>Checks if the price is a member of the price list.</description>
             </item>
              <item>
             <description>Gets all the prices that are defined for the price list for the business unit and product.</description>
             </item>
              <item>
             <description>Gets all the prices that are defined for the price list for the product.</description>
             </item>
             </list>
             </para>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceListDao.AddPriceToPriceList(Retalix.StoreServices.Model.Price.IPriceList,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Price.IPrice)">
            <summary>Adds a price to a price list.
            </summary>
            <param name="priceList"> The price list to which the price is added.</param>
            <param name="businessUnit"> The business unit of the price.</param>
            <param name="product"> The product associated with the price.</param>
            <param name="price"> The price for the product and business unit.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceListDao.RemovePriceFromPriceList(Retalix.StoreServices.Model.Price.IPriceList,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Price.IPrice)">
            <summary>
             Removes a price from the price list.
            </summary>
            <param name="priceList">The price list from which the price is removed.</param>
            <param name="businessUnit"> The business unit from which the price is removed.</param>
            <param name="product"> The product from which the price is removed.</param>
            <param name="price"> The price removed from price list.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceListDao.IsPriceMemberOfPriceList(Retalix.StoreServices.Model.Price.IPriceList,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Price.IPrice)">
            <summary>
             Returns True if the price is a member of the price list, and False if the price is not a member of the price list.
            </summary>
            <param name="priceList">The price list used to check if the price is defined for the price list per business unit and product.</param>
            <param name="businessUnit"> The business unit for which the price is defined.</param>
            <param name="product"> The product for which the price is defined.</param>
            <param name="price">The price defined for the business unit and product.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceListDao.GetAllPriceForProductAndBusinessUnit(Retalix.StoreServices.Model.Price.IPriceList,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Returns all prices defined for the price list for the business unit and product.
            </summary>
            <param name="priceList">The price list.</param>
            <param name="businessUnit">The business unit for which the prices are defined.</param>
            <param name="product">The product for which the prices are defined.</param>    
            <returns>All the prices defined for the price list, per business unit and product.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceListDao.GetAllPriceForProduct(Retalix.StoreServices.Model.Price.IPriceList,Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Returns all the prices that are defined for the price list for the product.
            </summary>
            <param name="priceList">The price list in which the prices are searched.</param>
            <param name="product">The product for which the prices are defined.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceListDao.DeleteAllPriceForProductAndBusinessUnit(Retalix.StoreServices.Model.Price.IPriceList,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Delete all prices defined for the price list for the business unit and product.
            </summary>
            <param name="priceList">The price list.</param>
            <param name="businessUnit">The business unit for which the prices are defined.</param>
            <param name="product">The product for which the prices are defined.</param>    
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceListDao.GetPricesForProductsInBusinessUnit(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct})">
            Added in 10.5
            <summary>
            Gets the prices for list of products in a business unit.
            </summary>
            <param name="businessUnit">The business unit.</param>
            <param name="products">The products.</param>
            <returns>Dictionary with key of type IProduct and value of type List of type IPrice </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.IPriceListProvider">
            <summary>
             Represents the entity which selects an appropriate price list. 
            </summary>
             <para>
             The PriceListProvider provides the following services:
             <list type="bullet">
             <item>
             <description>Gets the relevant list for a specific customer order.</description>
             </item>
             </list>
             </para>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.IPriceListProvider.GetBasePriceList">
            <summary>
            Provides the appropriate price list according to the customer order. 
            For example - happy hour special price list, price list for store employees, etc.
            </summary>
            <returns>The price list relevant to the customer order.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecord">
            <summary>
            Represents a record created by a batch at the end of the price change process. The price change is performed by batch. 
            The record indicates that a price change was made.   
            After examining the record, managers at the business unit level can decide whether to approve the price change or not.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecord.Location">
            <summary>
            Gets or sets the business unit in the record - the price change should be approved for the specific business unit
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecord.StatusCode">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Price.PriceApproval.PriceChangeStatus">PriceChangeStatus</see>, e.g., approved, still pending, or rejected. 
            Price Changes are approved by managers at the business unit level.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecord.ChangedPrice">
            <summary>
            Gets or sets the price that was changed. A record is created due to the change in the price. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecord.BatchId">
            <summary>
             Gets or sets the batch ID that updated the price.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecordDao">
            <summary>
            Represents an entity that persists an <see cref="T:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecord">IPriceApprovalRecord</see>.
            </summary>
            <remarks>
            <para>
            The PriceApprovalDao supports the following actions:
            <list type="bullet">
            <item>
            <description>Adds a new priceApprovalRecord to the system.</description>
            </item>
            <item>
            <description>Adds a list of new priceApprovalRecords to the system.</description>
            </item>
            <item>
            <description>Gets an existing priceApprovalRecord by a <see cref="T:Retalix.StoreServices.Model.Price.IPrice">Price</see> and <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see></description>
            </item>
            <item>
            <description>Gets an existing priceApprovalRecord by its identification</description>
            </item>
            <item>
            <description>Deletes an existing priceApprovalRecord</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecordDao.Save(Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecord)">
            <summary>
            Saves or updates a price approval record.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecordDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecord})">
            <summary>
             Saves a collection of price approval records.
            </summary>
            <param name="records">price approval records that should be saved</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecordDao.GetRecord(Retalix.StoreServices.Model.Price.IPrice,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Returns the appropriate record for the price and business unit. The value is Null if no suitable record exists.
            </summary>
            <param name="price">The PriceApprovalRecord's related price</param>
            <param name="location">The PriceApprovalRecord's location</param>
            <returns>An instance of IPriceApprovalRecord</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecordDao.GetRecordOrDefault(Retalix.StoreServices.Model.Price.IPrice,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Returns the appropriate record for the price and business unit. Return Default PriceApprovalRecord if no suitable record exists.
            </summary>
            <param name="price">The PriceApprovalRecord's related price</param>
            <param name="location">The PriceApprovalRecord's location</param>
            <returns>An instance of IPriceApprovalRecord</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecordDao.Remove(Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecord)">
            <summary>
             Removes an existing price approval record.
            </summary>
            <param name="priceApprovalRecord">the price approval record to be removed</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecordDao.GetRecordsOrDefaults(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Price.IPrice},Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            Added in 10.5
            <summary>
            Returns approval record per each requested price for business unit.
            </summary>
            <param name="prices">Collection of prices to get approval records for</param>
            <param name="businessUnit">Business unit to search approval records</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecordFactory">
            <summary>
             Represents a factory for creating new price approval records.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecordFactory.CreatePriceApprovalRecord(Retalix.StoreServices.Model.Price.IPrice,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Price.PriceApproval.PriceChangeStatus)">
            <summary>
             Creates a new instance of a price approval record.
            </summary>
            <param name="consumablePrice">The price for which the record was created.</param>
            <param name="location">The business unit in which price update was performed, and the record created.</param>
            <param name="priceStatusCode">The status of the update, e.g., approved, pending or rejected.</param>
            <returns>A new instance of a price approval record.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.PriceApproval.PriceChangeStatus">
            <summary>
            Represents an enumeration for the available price statuses.
            </summary>
            <remarks>
            An <see cref="T:Retalix.StoreServices.Model.Price.PriceApproval.IPriceApprovalRecord">IPriceApprovalRecord</see> in the system holds its status.
            The price can be pending, approved or rejected.
            This status determines whether the price is activated or not.
            For example,
            Supposed today's date is the 20th to December, 2013.
            A chocolate has a price for 10$ with status "Approved" and effective date for 20/12/2013.
            The same chocolate has a price for 5$ with status "Pending" and effective date for 24/12/2013.
            The lower price's status is "Pending" because the retailer wishes to activate it only on Christmas.
            Therefore, on the 24th to December the retailer will activate the lower price by setting its status to "Approved".
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.PriceApproval.PriceChangeStatus.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Retalix.StoreServices.Model.Price.PriceApproval.PriceChangeStatus"/> with an existing value.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.PriceApproval.PriceChangeStatus.Pending">
            <summary>
            Indicates that the price status is "pending".
            </summary>
            <remarks>
            For example, when a new price is added to the system, its status will be set as "Pending".
            </remarks>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.PriceApproval.PriceChangeStatus.Approved">
            <summary>
            Indicate that the price is "approved".
            </summary>
            <remarks>
            For example, when a new price is added to the system, its status will be set as "Pending".
            Whenever the retailer wishes, he will activate it by setting its status to "approved".
            </remarks>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.PriceApproval.PriceChangeStatus.Rejected">
            <summary>
            Indicates that the price is rejected.
            </summary>
            <remarks>
            For example, when a new price is added to the system with a wrong value and the retailer wished to decline it,
            then he will de-activate it by setting its status to "Rejected".
            </remarks>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.PriceApproval.PriceChangeStatus.Default">
            <summary>
            Indicates the default price change status.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.UnitOfMeasure">
            <summary>
             Represents the smallest packaging available for the item.
             The item is measured and priced according to this unit of measure.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.UnitOfMeasure.Type">
            <summary>
             Defines the unit of measure type.
             <remarks>
             The unit of measure can be separated into different types.
             This type depends on the Unit of Measure's unit.
             For example: If the Unit of Measure's unit is Kg, then the type is weight.
             If the Unit of Measure's type is GL, then the type is Volume.
             The enumeration list can bee seen at <see cref="T:Retalix.StoreServices.Model.Price.UnitOfMeasureTypes">UnitOfMeasureTypes</see>.
             </remarks>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Price.UnitOfMeasure.Unit">
            <summary>
             Defines the value of the unit of measure.
             <remarks>
             This is the unit that represents the measurement. 
             For example, "Kg", "LTR".</remarks>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.UnitOfMeasure.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.UnitOfMeasure.Equals(Retalix.StoreServices.Model.Price.UnitOfMeasure)">
            <summary>
            Checks if the unit of measure equals to the given unit of measure.
            </summary>
            <param name="unitOfMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Price.UnitOfMeasure.op_Equality(Retalix.StoreServices.Model.Price.UnitOfMeasure,Retalix.StoreServices.Model.Price.UnitOfMeasure)">
            <summary>
            Overloading "==" operator to be consistent with Equals functionality.
            </summary>
            <param name="unitOfMeasureA"></param>
            <param name="unitOfMeasureB"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.UnitOfMeasureTypes">
            <summary>
             Represents the types of categories for the different units of measure.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.UnitOfMeasureTypes.Unit">
            <summary>
             This measurement unit represents a product that sold singularly.
            </summary>
             <remarks>
             A newspaper can be sold in units of a single newspaper, two newspapers, etc.
             </remarks>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.UnitOfMeasureTypes.Weight">
            <summary>
             This measurement unit represents a product that sold in weight.
            </summary>
             <remarks>
             For example, Tomatoes can be sold in units of 1Kg of tomatoes, 2.33Kg of tomatoes, etc
             </remarks>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.UnitOfMeasureTypes.Volume">
            <summary>
             This measurement unit represents a product that sold in volume.
             <remarks>
             For example, beer can be sold in units of 1 Liter of beer, 2.5 Liter of beer, etc.
             </remarks>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Price.UnitOfMeasureValues">
            <summary>
             The enumeration list values of the different units of measure.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.UnitOfMeasureValues.EA">
            <summary>
             Each
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.UnitOfMeasureValues.Kg">
            <summary>
             Kilogram
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.UnitOfMeasureValues.GRM">
            <summary>
             Gram
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.UnitOfMeasureValues.LBR">
            <summary>
             Libra
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.UnitOfMeasureValues.LTR">
            <summary>
             Liter
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.UnitOfMeasureValues.GLI">
            <summary>
             Imperial Gallon (UK)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.UnitOfMeasureValues.GLL">
            <summary>
             Liquid Gallon (US)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Price.UnitOfMeasureValues.CAL">
            <summary>
             Calorie
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.DepositCashDuringSaleMode.IDepositCashDuringSaleModeConfiguration.AllowedDepositCashDuringSaleMode">
            <summary>
            Gets true if allowed to deposit cash during sale mode
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountDisplayConfiguration.MemberAccountKey">
            -------------------------------------------------------------------------------------------------
             <summary>Gets or sets the identifier Member Account  </summary>
            
             <value>The identifier Member Account </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountDisplayConfiguration.BusinessUnitId">
            -------------------------------------------------------------------------------------------------
             <summary>Gets or sets the Business Unit Id  </summary>
            
             <value>Business Unit Id </value>
            -------------------------------------------------------------------------------------------------
            
        </member>
        <member name="P:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountDisplayConfiguration.RetailSegmentId">
            -------------------------------------------------------------------------------------------------
             <summary>Gets or sets the Touch Point Type </summary>
            
             <value>The identifier Touch Point Type </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplay.LoyaltyAccountId">
            -------------------------------------------------------------------------------------------------
             <summary> Gets or sets the Member Account Type Id  </summary>
            
             <value>The Member Account Type Id </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplay.DisplayOnActionWindow">
            -------------------------------------------------------------------------------------------------
             <summary>Gets or sets the Display On Action Window  </summary>
            
             <value> True if member acount is for display </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplay.DisplayOrder">
            -------------------------------------------------------------------------------------------------
             <summary>Gets or sets the Display Order of the account </summary>
            
             <value> the Display Order of the account </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplayDao.Remove(Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountDisplayConfiguration)">
            <summary>
            Removes an existing by BU and touch point type e.g POS, QSR<see cref="T:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplay">IAccountToDisplay</see>.
            </summary>
            <param name="accountsToDisplayConfiguration">Configuration to remove</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplayDao.Remove">
            <summary>
            Removes all existing <see cref="T:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplay">IAccountToDisplay</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplayDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountDisplayConfiguration})">
            <summary>
             Saves the collection of <see cref="T:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplay">IAccountToDisplay</see>s.
            </summary>
            <param name="accountsToDisplayConfigurations">a collection of accountsToDisplay that should be saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplayDao.Get">
            <summary>
             Returns all <see cref="T:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplay"></see> 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplayDao.Get(System.String)">
            <summary>
             Returns all <see cref="T:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountDisplayConfiguration"> according to business unit id</see> 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplayDao.Get(System.String,System.String)">
            <summary>
             Returns all <see cref="T:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountDisplayConfiguration"> according to business unit id and retail segment id </see> 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplayDao.AddOrUpdate(Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountDisplayConfiguration)">
            <summary>
            Adds or updates a account to display.
            </summary>
            <param name="accountToDisplayConfiguration"> The account to display </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.MemberAccountsToDisplay.IAccountToDisplayDao.FindRelevant(System.String,System.String)">
            <summary>
            account display lookup by BU and touch point type e.g POS, QSR
            </summary>
            <param name="businessUnitId"></param>
            <param name="retailSegmentId"></param>
            <returns></returns>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Calorie.DataModel.CaloriesDisplayModeEnum.Single">
            <summary>
            The Basic Calories value will be displayed, e.g., 520 (default).
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Calorie.DataModel.CaloriesDisplayModeEnum.Two">
            <summary>
            The Min/Max Value will be displayed with a '/', i.e. X / Y.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Calorie.DataModel.CaloriesDisplayModeEnum.Range">
            <summary>
            The Min/Max Value will be displayed with a '-', i.e. X – Y.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Calorie.DataModel.CaloriesActionTypeAddUpdateDeleteCodes.AddOrUpdate">
            <remarks/>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Calorie.DataModel.CaloriesActionTypeAddUpdateDeleteCodes.Delete">
            <remarks/>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Calorie.DataModel.CaloriesActionTypeAddUpdateDeleteCodes.Inherit">
            <remarks/>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Calorie.CalorieQuantity.EntryMethod">
            <summary>
            Gets or sets entry method
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Calorie.CalorieQuantity.#ctor">
            <summary>
            Default constructor for serialization
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Calorie.CalorieQuantity.#ctor(System.Decimal)">
            <summary>
            Creates calorie quantity
            </summary>
            <param name="units">amount of calories</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Calorie.ICalorieValueProvider">
            <summary>
            Provides calorie values
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Calorie.ICalorieValueProvider.GetBasicValue(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Gets calories value.
            In a complex product, when this field remains empty, 
            the value will be calculated based on calories data of its ingredients
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Calorie.ICalorieValueProvider.GetMemberBasicValue(Retalix.StoreServices.Model.Product.Associations.Links.ILink,Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Gets calories value of member.
            The value will be calculated based on calories basic value and link data
            </summary>
            <param name="link"></param>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Calorie.ICalorieValueProvider.GetMinValue(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Gets minimum calories value of linked products
            Summing up the least calories value in every group that have a selection.
            When this field remains empty, it's calculated automatically.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Calorie.ICalorieValueProvider.GetMaxValue(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Gets minimum calories value of linked products
            Summing up the highest calories value in every group that have a selection.
            When this field remains empty, it's calculated automatically.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Calorie.ProductCalories.Measure">
            <summary>
            Gets or sets product unit of measure
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Calorie.ProductCalories.BasicValue">
            <summary>
            Includes calories value.
            In a complex product, when this field remains empty, 
            the value will be calculated based on calories data of its ingredients
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Calorie.ProductCalories.MinValue">
            <summary>
            Summing up the least calories value in every group that have a selection.
            When this field remains empty, it's calculated automatically.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Calorie.ProductCalories.MaxValue">
            <summary>
            Summing up the highest calories value in every group that have a selection.
            When this field remains empty, it's calculated automatically.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Calorie.ProductCalories.DisplayMode">
            <summary>
            Describes how calories values are presented 
            Singe (basic value) \ Two (Min value - max value) \ Range (Min value\Max value)
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Calorie.ICalorieValueRounding">
            <summary>
            /// <summary>
            Provides rounded calorie values according to rounding rules
            </summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Calorie.ICalorieValueRounding.RoundMemberCaloriesValue(System.Decimal)">
            <summary>
            Provides rounded member calorie values according to rounding rules
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Calorie.ICalorieValueRounding.RoundTotalCaloriesValue(System.Decimal)">
            <summary>
            Provides rounded kit calorie values according to rounding rules
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IMenuConfigurationProductDao.GetPluMenu(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a collection of products that corresponds the given products' entityKeys.
            </summary>
            <param name="entityKeys">A list of wanted products' <see cref="P:Retalix.StoreServices.Model.Product.IProduct.EntityKey">entity keys</see></param>
            <remarks>This unique key used to retrieve a certain product from the database but not to invoke
            business activities (i.e. lookup).
            </remarks>
            <returns>the collection of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>s that match the given entityKeys, null if not found</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.StoreRange.IProductToBusinessUnitDistribution">
            <summary>
            Represents Product distribution information for various business locations (Stores, Regions, etc)
            Having certain Business Unit Identity exist in BusinessUnits collection, means that Product updates are relevant for that Business Unit
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.StoreRange.IProductToBusinessUnitDistribution.Product">
            <summary>
            Product EntityKey
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.StoreRange.IProductToBusinessUnitDistribution.BusinessUnits">
            <summary>
            List of BusinessUnit ids that Product should be distributed to
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.StoreRange.IProductToBusinessUnitDistribution.ExcludedBusinessUnits">
            <summary>
            List of BusinessUnit ids that Product should not be distributed to
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.StoreRange.IIncludeInRange">
            <summary>
             Represents single availability of included/excluded product inside storeRange.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.StoreRange.IIncludeInRange.StartDate">
            <summary>
             The start date from which the product is included in the store range.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.StoreRange.IIncludeInRange.IsInclude">
            <summary>
             Specifies that a product is included or excluded in store range in the business unit.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.StoreRange.IIncludeInRangeFactory">
            <summary>
             Represents a factory for creating <see cref="T:Retalix.StoreServices.Model.Product.StoreRange.IIncludeInRangeFactory">IIncludeInRange</see>s.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IIncludeInRangeFactory.CreateIncludeInRange(System.DateTime,System.Boolean)">
            <summary>
             Creates a new IIncludeInRange with the assigned startingDate and include/exclude value.
            </summary>
            <param name="startDate">The startDate for the new IIncludeInRange</param>.
            <param name="isInclude">The isInclude for the new IIncludeInRange</param>.
            <returns>The created<see cref="T:Retalix.StoreServices.Model.Product.StoreRange.IIncludeInRange">IIncludeInRange</see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.StoreRange.IProductInStore">
            <summary>
             Represents a single product that available at the store.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.StoreRange.IProductInStore.Product">
             <summary>
              Gets the details of the product that available at the store.
             </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> that contains the details of the product.</value>     
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.StoreRange.IProductInStore.IncludeInRange">
            <summary>
             Gets the details of When product will be included at the store.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.StoreRange.IProductInStoreFactory">
            <summary>
             Represents a factory for creating <see cref="T:Retalix.StoreServices.Model.Product.StoreRange.IProductInStore">IProductInStore</see>s.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IProductInStoreFactory.CreateProductInStoreRange(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Creates a new IProductInStore with the assigned product.
            </summary>
            <param name="product">The product for the new IProductInStore</param>.
            <returns>The created<see cref="T:Retalix.StoreServices.Model.Product.StoreRange.IProductInStore">IProductInStore</see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange">
            <summary>    
              Represents the store range or list of all the products marked in the catalog as available at a store.
            </summary>
             <example>
             <code lang="cs" description ="This example shows how to create store range in the context of a business service.">
             <![CDATA[    
            public class CreateStoreRangeService
            {
                private readonly IStoreRangeFactory _storeRangeFactory;
                private readonly IBusinessUnit _businessUnit;
            
                public CreateStoreRangeService(IStoreRangeFactory storeRangeFactory, IBusinessUnit businessUnit)
                {
                    _businessUnit = businessUnit;
                    _storeRangeFactory = storeRangeFactory;
                }
            
                public IStoreRange CreateStoreRange()
                {
                    IStoreRange storeRange = _storeRangeFactory.CreateStoreRange(_businessUnit);
                    return storeRange;
                }
            }
            ]]>
             </code>
             </example>
             <example>
             <code lang="cs" description ="This example shows how to get all the business units 
             that includes the product in their store range using the data connectivity services.">
             <![CDATA[    
            public class GetAllBusinessUnitsIncludedInStoreRangeService
            {
                private readonly IStoreRangeDao _storeRangeDao;
                private readonly IProductDao _productDao;
            
            
                public GetAllBusinessUnitsIncludedInStoreRangeService(IStoreRangeDao storeRangeDao, IProductDao productDao)
                {
                    _storeRangeDao = storeRangeDao;
                    _productDao = productDao;
                }
            
                public IEnumerable<IBusinessUnit> GetAllBusinessUnitsIncludedInStoreRange()
                {
                    const string productId = "123";
                    IProduct product = _productDao.Get(productId);
                    return _storeRangeDao.GetAllIncludedRanges(product);
                }
            }
            ]]>
             </code>
             </example>
             <para>
             The StoreRange provides the following services:
             <list type="bullet">
             <item>
             <description>Adds a product to the store range.</description>
             </item>
             <item>
             <description>Excludes a product from the store range.</description>
             </item>
              <item>
             <description>Checks if a product is in the range</description>
             </item>
              <item>
             <description>Checks if a product was removed from the store range.</description>
             </item>
              <item>
             <description>Deletes all store range configurations for the specified product.</description>
             </item>
             </list>
             </para>
             <remarks>
             Selling processes validate the store range when retrieving the relevant products for sale. 
             During a sale, the system checks if a product is in the store range. If not,  
             the product is not allowed to be sold.
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange.BusinessUnit">
            <summary>
             Gets the details of the business unit that contains the products in the store range.
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> that contains the details of the business unit.</value>     
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange.AddToRange(Retalix.StoreServices.Model.Product.IProduct,System.DateTime)">
            <summary>
             Adds a product to a store range. During the selling process, each business unit is checked to verify if the products belong to the store range.
            </summary>
             <remarks>This action inserts the product into the store range.</remarks>
            <param name="product">An instance of a product that should be added to the store range.</param>
            <param name="startDate">The start date from which the product is included in the store range. </param>  
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange.ExcludeFromRange(Retalix.StoreServices.Model.Product.IProduct,System.DateTime)">
            <summary>
             Specifies that a product is not in the store range in the business unit.        
            </summary>
            <param name="product">An instance of a product that should be removed from the store range.</param>
            <param name="excludeFromSaleDate">The date from which the product is included in the store range.</param>
             <remarks>This action prohibits selling the product in this store range.</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange.IsInRange(Retalix.StoreServices.Model.Product.IProduct,System.DateTime)">
            <summary>
             Verifies if a product is included in the store range. The response is true, if the product is included in the store range, or false, if not.
            </summary>
            <param name="product">The product that is validated in order to verify that the product in included in the store range.</param>
            <param name="businessDate">The start date from which to verify that the product is included in the store range.</param>
            <returns>If true, the product is in the store range; if false, then it is not included in the store range.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange.IsExcludeFromRange(Retalix.StoreServices.Model.Product.IProduct,System.DateTime)">
            <summary>
             Verifies if a product is excluded from this store range. The response is true if the product is excluded in the store range, or false, if it is not.
            </summary>
            <param name="product">The product that is validated in order to verify that the product is excluded from the store range.</param>
            <param name="businessDate">The start date from which to verify that the product is excluded in the store range.</param>
            <returns>If true, the product is not in the store range; if false, the item is in the store range.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange.RemoveAllConfigurationsForProduct(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Deletes all the store range configurations for the specified <paramref name="product"/>.
            </summary>
            <param name="product">The product </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange.AreProductsInRange(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct},System.DateTime)">
            Added in 10.5
            <summary>
             Verifies if the products are explicitly included/excluded in the store range for business date. Corresponding dictionary value is true, if the product is explicitly included in the store range. False, if explicitly excluded.
             Products that have no specific record will not be returned.
            </summary>
            <param name="products">The products to check if the are explicitly included or excluded in the store range.</param>
            <param name="businessDate">The start date from which to verify that the products are included in the store range.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange.GetProductsInfo(System.Collections.Generic.IList{Retalix.StoreServices.Model.Product.IProduct})">
            Added in 10.5
             <summary>
              Get all ProductsInStore info in StoreRange.
             </summary>
             <param name="products">The products to retrieve</param>
             <returns>Multiple products with start dates from which the product is included in the store range.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange.Replace(System.Collections.Generic.IList{Retalix.StoreServices.Model.Product.StoreRange.IProductInStore})">
            Added in 10.5
             <summary>
              Replace specific StoreRange info for the given products.
             </summary>
             <param name="productsInStore">Multiple products with start dates from which the product is included in the store range.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange.Delete(System.Collections.Generic.IList{Retalix.StoreServices.Model.Product.StoreRange.IProductInStore})">
            Added in 10.5
             <summary>
              Delete products configuration from storeRange.
             </summary>
             <param name="productsInStore">Multiple products with start dates from which the product is included in the store range.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange.AddOrUpdate(System.Collections.Generic.IList{Retalix.StoreServices.Model.Product.StoreRange.IProductInStore})">
            Added in 10.5
             <summary>
              Add or update products in the storeRange.
             </summary>
             <param name="productsInStore">Multiple products with start dates from which the product is included in the store range.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao">
            <summary>
             Represents the data access object responsible for saving and retrieving store ranges from the database.
            </summary>
             <para>
             The StoreRangeDao provides the following services:
             <list type="bullet">
             <item>
             <description>Adds products to the store range in the database.</description>
             </item>
             <item>
             <description>Removes products from the store range in the database.</description>
             </item>
              <item>
             <description>Checks if the product is in the store range in the database. </description>
             </item>
              <item>
             <description>Gets all the business units in which the product is included in the store range.</description>
             </item>
              <item>
             <description>Gets all business units in which the product is excluded from the store range.</description>
             </item>
              <item>
             <description>Gets all the dates from which the product is included in the store range.</description>
             </item>
              <item>
             <description>Gets all the dates from which the product is excluded from the store range.</description>
             </item>
             </list>
             </para>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.AddProductToRange(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct,System.DateTime,System.Boolean)">
            <summary>
             Adds a product to the store range.
            </summary>
            <param name="businessUnit">The business unit for which a store range should be retrieved.</param>
            <param name="product">The product for which a store range should be retrieved.</param>
            <param name="startDate">The start date from which the product is included in the store range.</param>
            <param name="isIncluded">Indicates if a product is included in the store range.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.RemoveProductsFromStoreRange(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Deletes the store range's products for the business unit.
            </summary>
            <param name="businessUnit">The business unit.</param>
            <param name="product">product</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.IsInRangeProduct(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct,System.DateTime)">
            <summary>
             Verifies if a product is available for sale in the store range.
            </summary>
            <param name="businessUnit">The business unit validated to check that the product is included in the store range.</param>
            <param name="product">The product to be checked.</param>
            <returns>If true, the product is in the store range, if false, the product is not in the store range.</returns>
            <param name="startSaleDate">The start date from which the system verifies that the product is included in the store range.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.IsExcludedProduct(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct,System.DateTime)">
            <summary>
             Verifies if a product is excluded for sale in the store range.
            </summary>
            <param name="businessUnit">The business unit validated to check that the product is excluded from the store range.</param>
            <param name="product">The product to be checked.</param>
            <returns>If true, the product is not in the store range, if false, then the product is in the store range.</returns>
            <param name="startSaleDate">The start date from which the system verifies that the product is excluded from the store range.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.GetAllIncludedRanges(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Returns all the business units, for which the specific product is included in the store range.
            </summary>
            <param name="product">The specific product included in the business unit's range.</param>
            <returns>All business units, in which the product is included in the range.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.GetAllExcludedRanges(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Return all the business units, for which the specific product is excluded from the store range.
            </summary>
            <param name="product">The specific product excluded from the business unit's range.</param>
            <returns>All the business units, in which the product is excluded from the range.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.GetIncludedDatesForProduct(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
             Returns a list of the dates from which the product is included in the store range.
            </summary>
            <param name="product">The products included in the store range for the specified dates to be supplied.</param>
            <param name="businessUnit">The business unit containing the store ranges for the specified dates (included dates).</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.GetExcludeDatesForProduct(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
             Returns a list of the dates from which the product is excluded from the store range.
            </summary>
            <param name="product">The products excluded from the store range for the specified dates should be supplied.</param>
              ///<param name="businessUnit">The business unit containing the store ranges for the specified dates (excluded dates).</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.GetInRangeProducts(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct})">
            Added in 10.5
            <summary>
             Verifies if the products are explicitly included/excluded in the store range for business date. Corresponding dictionary value is true, if the product is explicitly included in the store range. False, if explicitly excluded.
             Products that have no specific record will not be returned.
            </summary>
            <param name="products">The products to check if the are explicitly included or excluded in the store range.</param>
            <param name="businessUnit">The business unit containing the store ranges for the specified dates (excluded dates).</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.DeleteProductsFromAllStores(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct})">
            Added in 10.5
             <summary>
              Remove specific <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Products</see> from all StoreRanges. 
              The specific products will be removed from all storeRanges.
             </summary>
             <param name="products">The products to remove from all StoreRanges.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.Replace(System.Collections.Generic.Dictionary{Retalix.StoreServices.Model.Product.StoreRange.IStoreRange,System.Collections.Generic.IList{Retalix.StoreServices.Model.Product.StoreRange.IProductInStore}})">
            Added in 10.5
             <summary>
              Replace <see cref="T:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange">StoreRange</see> info for all the given productsInStore.                
             </summary>
             <param name="productsInStoreRanges">The productsInStore to Replace in the given StoreRange.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.Delete(System.Collections.Generic.Dictionary{Retalix.StoreServices.Model.Product.StoreRange.IStoreRange,System.Collections.Generic.IList{Retalix.StoreServices.Model.Product.StoreRange.IProductInStore}})">
            Added in 10.5
             <summary>
              Delete <see cref="T:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange">StoreRange</see> info for all the given productsInStore.        
             </summary>
             <param name="productsInStoreRanges">The productsInStore to Delete in the given StoreRange.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.AddOrUpdate(System.Collections.Generic.Dictionary{Retalix.StoreServices.Model.Product.StoreRange.IStoreRange,System.Collections.Generic.IList{Retalix.StoreServices.Model.Product.StoreRange.IProductInStore}})">
            Added in 10.5
             <summary>
              AddOrUpdate <see cref="T:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange">StoreRange</see> info for all the given productsInStore.        
             </summary>
             <param name="productsInStoreRanges">The productsInStore to AddOrUpdate in the given StoreRange.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.GetProductsInStore(Retalix.StoreServices.Model.Product.StoreRange.IStoreRange,System.Collections.Generic.IList{Retalix.StoreServices.Model.Product.IProduct})">
            Added in 10.5
             <summary>
              Get all ProductsInStore info for given StoreRange.
             </summary>        
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeDao.GetProductsDistribution(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Provides current <see cref="T:Retalix.StoreServices.Model.Product.StoreRange.IProductToBusinessUnitDistribution">IProductToBusinessUnitDistributions</see> for required Products.
            </summary>
            <param name="productIds"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeFactory">
            <summary>
             Represents a factory responsible for creating a new instance of <see cref="T:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange">IStoreRange</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.StoreRange.IStoreRangeFactory.CreateStoreRange(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
             Creates a new store range which is defined for the business unit and supplied as input.
            </summary>
            <param name="businessUnit">The business unit for which the store range is defined.</param>
            <returns>A new instance of <see cref="T:Retalix.StoreServices.Model.Product.StoreRange.IStoreRange">IStoreRange</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseHierarchyBuilder.BuildDescriptions(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            BuildDescriptions for merchandiseHierarchy
            </summary>
            <param name="orderLine"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Hierarchy.Criterions.CategoryCriterion">
            <summary>
            Used for filtering merchandise categories by ID
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryProductSelector">
            <summary>
            Represent a selector which references directly to one of the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> 
            hold one direct instance of the ICategory.
            Responsible to determine whether the specified product is contained in the category it holds.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryProductSelector.Category">
            <summary>
            Reference to <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Category</see> to determine   the containment of a specified product over.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Hierarchy.IProductCategory">
            <summary>
            Represents a connection between a product and a category
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Hierarchy.CategoryIdentity">
            <summary>
            Category Identity
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.CategoryIdentity.Type">
            <summary>
            Category Type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.CategoryIdentity.Id">
            <summary>
            Category Id
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment">
            <summary>
             Represent a department which is a specified node in the Merchandize Hierarchy.
            </summary>
             <remarks>
             This entity has two main uses in the system:
             <list type="bullet">
             <item><description>
             As a retailer I would like to track after financial performance of per specific nodes in the Merchandize Hierarchy.
             This tracking occurs on the product's departments in order to retrieve business information regarding any retail activities.
             </description></item>
             <item><description>
             As a retailer I would to be able to sell any item that was added to the customer's cart.
             In order to achieve this goal a retailer must sell items that were not found in the catalog with respect to a specific Department, as a department-product.
             For example, if the cashier wishes to sell a milk which doesn't exist in the catalog, in this case the cashier has an option to sell it as a department-product.
             </description></item>
             </list>
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment.Id">
            <summary>
            Gets the department unique ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment.Disable">
            <summary>
            Gets or sets a flag which determines department's activation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment.TaxCategory">
            <summary>
            <para><b>Note: This property is non stable and could be removed in future versions</b></para> 
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">Tax Category</see> to which the products in this specific department belong.
            </summary>
            TODO: (YuvalD) this convention for "Tax" (as below) is very fragile - as no one will know how to manage it all the way.  
            <remarks>
            Note that TaxCategory must be a <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see> with Label "Tax".
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment.CustomCategories">
            <summary>
            <para><b>Note: This property is non stable and could be removed in future versions</b></para> 
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">CustomCategory </see> to which the products in this specific department belong.
            </summary>
            <remarks>
            CustomCategory must be a <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see> with Any Label.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment.MerchandiseCategory">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see> of the department.
            </summary>
            <remarks>
            Note that there is no restriction and there maybe more than one departments that are referenced with the same <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see>.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment.AssociatedProduct">
            <summary>
            Gets the product associated with the department.
            </summary>
            <remarks>
            The department holds this "generic" product which represents the department. This purpose of this product is to
            allow Department-Sell. Department sell is the case when the cashier want to sell a product that does not exist in the 
            catalog. In this case the cashier use the AssociatedProduct to represent this product.<br/>
            Note that this product is predefined and associated with the same Merchandize Hierarchy node as the Department is. 
            This product is also defined as a product with OpenPrice and the cashier need to price it upon selling.
            /// </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartmentDao">
            <summary>
            Represents an entity responsible for persisting a <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment">Department</see>.
            </summary>
            <remarks>
            This entity supports the following actions:
            <list type="bullet">
            <item>
            <description>Save a department</description>
            </item>
            <item>
            <description>Get all the departments in the system</description>
            </item>
            </list>
            <item>
            <description>Get certain departments by list of identifications</description>
            </item>
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartmentDao.Save(Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment)">
            <summary>
            Saves the specific <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment">Department</see>.
            </summary>
            <param name="department">The <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment">Department</see> that has been saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartmentDao.GetAll">
            <summary>
            Gets all the existing <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment">Department</see>s in the organization.
            </summary>
            <returns>All of the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment">Department</see>s that defined in the system</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartmentDao.GetByIds(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a list of existing <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment">Department</see>s by the given list of their identifications.
            </summary>
            <param name="departmentIds">A collection of departments identifications</param>
            <returns>List of corresponding <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment">Department</see>s.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartmentFactory">
            <summary>
             Represents a factory responsible for creating an instance of <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment">Department</see>.
             </summary> 
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartmentFactory.Create(System.String)">
            <summary>
            Creates a <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment">Department</see>.
            </summary>
            <remarks>
            Creation of a Department requires a unique id.
            Note that the caller is responsible for the ID's uniqueness.
            </remarks>
            <param name="departmentId">The Department ID.</param>
            <returns>A new instance of <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment">Department</see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">
            <summary>
            Represents a category in the product classification. 
            </summary>
             <remarks>
             Products are categorized by two different type of categories:<br/>
             1. <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see><br/>
             2. <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see><br/>
             ICategory is provided as a base for those interface so it is possible to perform many operations on those different categories seamlessly.<br/>
             As such, this interface cannot be implemented directly but only when implementing a IMerchandiseCategory or ICustomCategory.<br/>
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.ICategory.Id">
            <summary>
            Gets the unique category ID.        
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.ICategory.Descriptions">
            <summary>
            Gets or sets the category description. 
            The category description is selected by culture and is displayed in the relevant fields.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategory.DoesInclude(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Indicates whether provided <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> is associated to the category or to any of the sub-categories
            </summary>
            <param name="product"><see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> to check</param>
            <returns>True when provided Product is associated with category or it's sub-categories</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.ICategory.ProductSelectors">
            <summary>
            Collection of <see cref="T:Retalix.StoreServices.Model.Product.Selector.IProductSelector">Product Selectors</see> directly associated with the category.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategory.IsSubCategoryOf(System.String,System.String)">
            <summary>
            Checks if the category is a sub category of the category received as input.
            </summary>
            <param name="categoryId">The checked category's id.</param>
            <param name="heirarchyType">The checked category's type.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategory.AddProduct(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Adds a product to a category.
            </summary>
            <param name="product">the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> that should be added to the category</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategory.RemoveProduct(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Removes a product from category.
            </summary>
            <param name="product">the product that should be removed from category</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.ICategory.LastUpdated">
            <summary>
            Gets Last Modified Date of the category record. Each time the category is updated, the LastUpdated gets new value.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategory.GetHierarchyPath">
            <summary>
            Gets HierarchyPath of the Category record
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao">
            <summary>
            Represents an entity which persists both, <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see>s and <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see>s.
            This includes various update and retrieving operations. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao.GetMerchandiseCategory(System.String)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see> that corresponds to the given ID.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao.GetMerchandiseCategories(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see>s that match the corresponding IDs.
            </summary>
            <param name="nodeIds">The IDs of the IMerchandiseCategorys that should be retrieved</param>
            <returns>All the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see>s that match the given IDs.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao.GetCustomCategory(System.String,System.String)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see> that corresponds.
            </summary>
            <param name="customCategoryName"></param>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao.GetCustomCategories(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see>s that match the given IDs.
            </summary>
            <param name="customCategoryName"></param>
            <param name="nodeIds"></param>
            <returns>all the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see>s that match the corresponding IDs.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao.Save(Retalix.StoreServices.Model.Product.Hierarchy.ICategory)">
            <summary>
            Saves a category in the classification.
            </summary>
            <param name="category">the category to be added</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao.Remove(Retalix.StoreServices.Model.Product.Hierarchy.ICategory)">
            <summary>
             Removes a category from the classification.
            </summary>
            <param name="category">the category to be removed</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao.FindAll">
            <summary>
             Returns all the defined <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see>.
            </summary>
            <returns>All the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> defined in the system.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao.FindByDescription(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
             Returns all categories of the given type (Merchandise, Tax, e.t.c) that contain a description of a given culture that is matching the given search criteria<see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see>.
            </summary>
            <param name="categoryName">determines a category type to be searched</param>
            <param name="searchValues">the string to be found in category's description</param>
            <param name="searchCultures">culture of descriptions to be searched for the key</param>
            <param name="matchModes">defines where the keyword will be searched inside the description</param>
            <returns>All the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> matching the search criteria.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao.GetSubCategories(Retalix.StoreServices.Model.Product.Hierarchy.ICategory)">
            <summary>
             Gets all the sub <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> of the selected category, and is empty when no sub categories exist.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao.GetDirectSubCategories(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Gets direct the direct descendant nodes of the selected <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Category</see> node.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao.GetAllParentCategories(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Gets all the recursive ascending nodes of the selected <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Category</see> node.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao.GetAllRoots">
            <summary>
             Gets all root nodes of all the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> defined in the system.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryDao.GetRoot(System.String)">
            <summary>
             Gets the root node of a specified <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Category</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryFactory">
            <summary>
             Represents a factory which creates instances of <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see> and <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryFactory.CreateMerchandiseCategory(System.String)">
            <summary>
            Creates instance of <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see>.
            </summary>
            <param name="id">Unique identifier of <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see>.</param>
            <returns>new <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryFactory.CreateCustomCategory(System.String,System.String)">
            <summary>
            Creates instance of <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see>.
            Custom categories require name in order to group them.
            </summary>
            <param name="id">Unique identifier of <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see>.</param>
            <param name="customCategoryName">Name of the Custom Category</param>
            <returns>new <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICategoryFactory.CreateCustomCategory(System.String,System.String,Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory,System.String,System.String)">
            <summary>
            Creates instance of <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see> with a description and MasterCategory.
            Custom categories require name in order to group them.
            </summary>
            <param name="id">Unique identifier of <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see>.</param>
            <param name="customCategoryName">Name of the Custom Category</param>
            <param name="parent">The parent instance of ICategory node to be created</param>
            <param name="description">Description</param>
            <param name="descrCulture">Description's culture</param>
            <returns>new <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see>.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">
            <summary>
             Represents a node in a CustomCategory Hierarchy.
            </summary>
             <remarks>
             The CustomCategory Hierarchy is a general purpose construct used to correlate products to a CustomCategory Hierarchy.
             The CustomCategory Hierarchy is constructed as a tree where the position and depth of the nodes in the tree are significant.  
             </remarks>
            <example>
            <code lang="cs">
            <![CDATA[
            <code lang="cs" description="This example shows how to add a category to the ICustomCategory Hierarchy.">
            
            public class CustomCategoryService
            {
                public ICustomCategory AddNewCustomCategory(ICustomCategory parent, ICategoryFactory categoryFactory)
                {
                    string id = "Big_Heavy";
                    string level = "";
                    string type = "SizeHierarchy";
            
                    var descriptions = new List<LocalizedDescription>()
                                           {
                                               new LocalizedDescription("en-US", "Heavy products")
                                           };
             
                    ICustomCategory category = categoryFactory.CreateCustomCategory(id, type);
                    category.Descriptions = descriptions;
                    category.SetMasterCategory(parent);
                    return category;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory.Label">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory.MasterCategory">
            <summary>
            Gets the containing category of the current category.
            For example, If "Dairy products" is a sub category of "All products", then the master category for "Dairy products" is "All products".
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory.SetMasterCategory(Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory)">
            <summary>
            Sets the containing category of the current category.
            An exception is thrown when trying to set a category from a different type.
            </summary>
            <param name="masterCategory">Containing category</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory.IsSubCategoryOf(Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory)">
            <summary>
            Checks if the category is a sub category of the category received as input.
            </summary>
            <param name="category">The checked category.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory.AddProduct(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Adds a product to a category.
            </summary>
            <param name="product">the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> that should be added to the category</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory.RemoveProduct(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Removes a product from category.
            </summary>
            <param name="product">the product that should be removed from category</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">
            <summary>
             Represents a node in the Retailer's Merchandise Hierarchy.
            </summary>
             <remarks>
             Merchandise Hierarchy is a basic construct used to correlate the products to departments.<br/>
             Merchandise Hierarchy is constructed as a tree where the position and the depth of the nodes in the tree are significant.<br/> 
             See also <seealso cref="T:Retalix.StoreServices.Model.Product.Hierarchy.Department.IDepartment">IDepartment</seealso> which is an addition to this mapping.<br/>
             Another constraint related to the Merchandise Hierarchy is that any product must be associated unequally with a specific IMerchandiseCategory.
             </remarks>
             <example>
             <code lang="cs">
             <![CDATA[
             <code lang="cs" description="This example shows how to add a category to the Merchandise Hierarchy.">
             public class MerchandiseCategoryService
             {
                 public IMerchandiseCategory AddNewMerchandiseCategory(IMerchandiseCategory parent, ICategoryFactory categoryFactory)
                 {
                     string id = "root_dairy_milk"; 
                     string level;
                     string type = "Merchandise";
             
                     var descriptions = new List<LocalizedDescription>()
                                            {
                                                new LocalizedDescription("en-us", "Milk")
                                            };
             
                     IMerchandiseCategory category = categoryFactory.CreateMerchandiseCategory(id);
                     category.Descriptions = descriptions;
                     category.SetMasterCategory(parent);
                     return category;
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory.MasterCategory">
            <summary>
            Gets the containing <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see> of the current category.
            </summary>
            <remarks>
            For example, if "Dairy products" is a sub category of "All products", the master category of "Dairy products" will be "All products".
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory.SetMasterCategory(Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory)">
            <summary>
            Sets the containing category of the current category.
            </summary>
            <remarks>
            Note that a IMerchandiseCategory must be unique in merchandize hierarchy and the user of this interface is responsible not to violate this requirement. 
            </remarks>
            <param name="masterCategory">Containing category</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory.IsSubCategoryOf(Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory)">
            <summary>
            Checks if the specific category is a sub category of the assigned category.
            Or alternatively, Checks if the specific category is the MasterCategory for this category.
            </summary>
            <param name="category">The checked category.</param>
            <returns>
            True if the given category is the MasterCategory of this category.
            </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Hierarchy.IProductCategoryDao">
            <summary>
             Represents an entity responsible for persistency to manage <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> classification to the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.IProductCategoryDao.GetAllProductsForCategory(Retalix.StoreServices.Model.Product.Hierarchy.ICategory)">
            <summary>
             Returns all the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see>s in the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Category</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.IProductCategoryDao.AddProductToCategory(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Product.Hierarchy.ICategory)">
            <summary>
             Adds a product to the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Category</see>.
            </summary>
            <param name="product">The <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> added to <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Category</see></param>
            <param name="category">The <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Category</see> to which the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> is added.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.IProductCategoryDao.RemoveProductFromCategory(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Product.Hierarchy.ICategory)">
            <summary>
             Removes a <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> from a product <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Category</see>.
            </summary>
            <param name="product">The<see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> that should be removed from the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Category</see>.</param>
            <param name="category">The <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Category</see> from which the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> is removed</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.IProductCategoryDao.GetAllClassificationsCategoriesForProduct(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
             Returns all the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> linked to the product. 
             For example, if a product is classified as a "Dairy product", then the Dairy products category is returned.
            </summary>
            <param name="product">The <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> to which all the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> are provided.</param>
            <returns>All the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> defined for the product.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.IProductCategoryDao.GetAllClassificationsCategoriesForProducts(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct})">
            <summary>
             Returns all the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> linked to provided products. 
            </summary>
            <param name="products">The <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Products</see> to find all linked <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see>.</param>
            <returns>Dictionary of all the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> defined for the products.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.IProductCategoryDao.FindClassificationsCategoriesContainProducts(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct})">
            <summary>
             Returns all the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> for the list of products in the Dictionary that hold the product, its <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> and all its parent <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see>. 
             For example, if a <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> is classified as a "Dairy product" which has a parent called "Dairy",
             The Diary <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> and Diary <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> are returned for this <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see>.
            </summary>
            <param name="product">The <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> to which all the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> are provided.</param>
            <returns>All the classifications defined for the product including all the parent <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.IProductCategoryDao.FindDirectAndIndirectCategoriesForProducts(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct},System.Collections.Generic.IDictionary{Retalix.StoreServices.Model.Product.IProduct,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.Hierarchy.ICategory}}@)">
            <summary>
             Returns all the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> for the list of products in a Dictionary that hold the product, and the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> 
             it is linked to directly. 
             An additional out parameter returns all the parent <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> for the product. 
             This is the same as <see cref="M:Retalix.StoreServices.Model.Product.Hierarchy.IProductCategoryDao.FindClassificationsCategoriesContainProducts(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct})">FindClassificationsCategoriesContainProducts</see>, only
             it seperates the direct categories from the indirect (parent) ones.
            </summary>
            <param name="product">The <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Products</see> to which all the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">Categories</see> are provided.</param>
            <param name="indirectCategories">All the parent (indirect) <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">classifications</see> defined per queried product.</param>
            <returns>All the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">classifications</see> defined directly for the queried product.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Hierarchy.IProductCategoryDao.UpdateProductCustomCategories(Retalix.StoreServices.Model.Product.IProduct,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory})">
            <summary>
            Link the given product to the given custom categories (and remove the old links)
            </summary>
            <param name="product">the product to update its custom categories</param>
            <param name="customCategories">The categories which the product will be linked to</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.LinkGroupWithFullData.Tag">
            <summary>
             Represents an extensible enumeration of possible Tag values in Link Group.
             When linking <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Products</see> to a group they can be linked as Warranty,Deposit etc...
             The business logic is manipulated by this Tag.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.LinkGroupWithFullData.Links">
            <summary>
            Collection of all the links data in the group
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.LinkWithFullData.ProductId">
            <summary>
            Linked item product id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.LinkWithFullData.MaxPortion">
            <summary>
            Max portion of the linked product for example: maximum allowed tomato slices in hamburger is 5.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.LinkWithFullData.MinPortion">
            <summary>
            Min portion of the linked product for example: minimum allowed tomato slices in hamburger is 1.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.LinkWithFullData.DefaultPortion">
            <summary>
            it is an actual amount of portions chosen unless other amount was specified by the customer
            for example the default portion of tomato slices in hamburger that will be provided to the customer is 3 if the customer says he wants 5
            then he will receive 5 slices if this meets the minimum and maximum conditions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.LinkWithFullData.UnitOfMeasure">
            <summary>
            The unit of measure of the linked product for example: tomato measured in Kg while bottle of cola measured in Each.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.LinkWithFullData.Quantity">
            <summary>
            The quantity of the linked product for example: beef which linked to the hamburger is 200 gram.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.LinkWithFullData.Price">
            <summary>
            Monetary value for quantity
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Associations.Links.ILink">
            <summary>
             Represents a link to a <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>.
             Each <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILink">ILink</see> represents the connection between the parent IProduct to the child.
             For example, Hamburger can have linked product (Tomato) which has default portion of 1 tomato slide.
             and the customers must take slides between the minimum and the maximum portion defined.
             the slide have unit of measure and quantity (for example 200 gram)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.ILink.LinkedProduct">
            <summary>
            The Linked child product for example: tomato will be linked to hamburger.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.ILink.MaxPortion">
            <summary>
            Max portion of the linked product for example: maximum allowed tomato slices in hamburger is 5.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.ILink.MinPortion">
            <summary>
            Min portion of the linked product for example: minimum allowed tomato slices in hamburger is 1.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.ILink.DefaultPortion">
            <summary>
            it is an actual amount of portions chosen unless other amount was specified by the customer
            for example the default portion of tomato slices in hamburger that will be provided to the customer is 3 if the customer says he wants 5
            then he will receive 5 slices if this meets the minimum and maximum conditions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.ILink.UnitOfMeasure">
            <summary>
            The unit of measure of the linked product for example: tomato measured in Kg while bottle of cola measured in Each.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.ILink.Quantity">
            <summary>
            The quantity of the linked product for example: beef which linked to the hamburger is 200 gram.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.ILink.MaxFreePortion">
            <summary>
            Max portion of free linked product for example: maximum free allowed tomato slices in hamburger is 3, the rest will be charged.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.ILink.ExtraPriceValue">
            <summary>
            Extra price value of the linked product. For example: tomato slice will cost 0.10 starting from the third slice
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup.Id">
            <remarks>
            The ID and BusinessUnit is unique
            </remarks>  
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup.Descriptions">
            <summary>
            Gets a list of the product descriptions.
            </summary>        
            <value>A collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription">LocalizedDescription</see>s that can contain multiple descriptions for the group in different languages</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup.MaxLinkPortions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup.MaxFreeLinkPortions">
            <summary>
            The maximum free portions 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup.Links">
            <summary>
            Collection of all the <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILink">ILink</see>s in the group.
            Use the <see cref="T:System.Collections.Generic.ICollection`1"/> methods to add, remove and iterate through the <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILink">ILink</see>s collection.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroupDao.Get(System.String,System.String)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see>s which match the Id.
            </summary>
            <param name="id">The Id for the link group.</param>
            <returns>List of <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see>s</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroupDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup})">
            <summary>
             Saves a new <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see>. If the <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see> already exists, then an update is performed.
            </summary>
            <param name="linkGroups">The <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see> that is saved or updated.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroupDao.GetLinkGroups(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see>s which match a collection of IDs.
            </summary>
            <param name="ids">The collection of IDs used to query for the link groups.</param>
            <returns>List of <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see>s</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroupDao.GetAllLinkGroups">
            <summary>
            Gets All <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see>s
            </summary>        
            <returns>List of <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see>s</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroupDao.Remove(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup})">
            <summary>
            Remove the provided <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see> list from, the underlined data storage.
            </summary>
            <param name="linkGroups">The <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup"/>ILinkGroup</param> instance to remove.
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroupDao.GetLinkGroupsByQuery(Retalix.StoreServices.Model.Infrastructure.Query.IQuery)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see>s which match the criterion in the query.
            </summary>
            <param name="query">The query which holds the criterion to search by</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroupDao.GetLinkGroupsByProductAndBusinessUnit(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct},System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit})">
            <summary>
            Gets dictionary of <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see>s of the products by businessUnit
            </summary>
            <param name="products">enumerable of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see></param>
            <param name="businessUnit">enumerable of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IBusinessUnit</see></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroupDao.GetLinkGroupsByProduct(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct})">
            <summary>
            Gets dictionary of <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see>s of the products
            </summary>
            <param name="products">enumerable of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Associations.Links.LinkGroupTag">
            <summary>
             Represents an extensible enum of possible Tag values in Link Group.
             When linking <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Products</see> to a group they can be linked as Warranty,Deposit etc...
             The business logic is manipulated by this Tag.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation">
            <summary>
            <see cref="T:Retalix.StoreServices.Model.Product.Associations.IAssociation">IAssociation</see> to a packaging <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>, that is Homogeneous to the association owner.
            The <see cref="T:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation">ContainmentAssociation</see> is just the way the owner <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> is packed.
            
            <example>
            <code lang="cs" description="This examples shows how to look at the containmant associations for Packaging.">
            <![CDATA[
                Console.WriteLine("Snack-Pack are available in few batch types.");
            
                IProduct snackPack = _productDao.Get("Snack-Sku");
                Console.WriteLine("  When managing inventory for <{0}>, you must make sure to take into account:", snackPack);
            
                IEnumerable<ContainmentAssociation> containmentOfSnacks = snackPack.AssociatedTo.OfType<ContainmentAssociation>();
                foreach (var package in containmentOfSnacks)
                {
                    Console.WriteLine("    The <{0}> packaging of {1} units", package.ContainedBy, package.RatioInContainment);
                }
            
                /* Output:
                    Snack-Pack are available in few batch types.
                        When managing inventory for <[Snack-Sku]: "Snack Pack">, you must make sure to take into account:
                            The <[PkgOf10]: "10 Snack Packs"> packaging of 10 units
                            The <[PkgOf100]: "100 Snack Packs"> packaging of 100 units.
            
                */
            ]]>
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation.#ctor(Retalix.StoreServices.Model.Product.IProduct,System.Decimal)">
            <summary>
            Create new instance of ContainmentAssociation
            </summary>
            <param name="containment">The Homogeneous Container.</param>
            <param name="ratioInContainment">The Capacity Ratio of the the Container <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>s.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation.ContainedBy">
            <summary>
            The Homogeneous Container.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation.RatioInContainment">
            <summary>
            The Capacity Ratio of the the Container <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>s.
            E.g. A "Snack" <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> will have <see cref="T:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation">ContainmentAssociation</see> 
            with RatioInContainment of 10 when it is Contained-By a "10 Pack" <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation.Equals(Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation)">
            <summary>
            Determines whether the specified <see cref="T:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation"/> is equal to the current <see cref="T:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation"/> is equal to the current <see cref="T:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation"/>; otherwise, false.
            </returns>
            <param name="other">The <see cref="T:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation"/> to compare with the current <see cref="T:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation"/>. </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Associations.ILinkGroup">
            <summary>
             Represents a group of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>s to be made available as <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation">LinkAssociation</see>s from other products.
             Each <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> represents an available linked during the sale of a parent product.
             For example, a TV which can be sold with three pre defined warranties :
              Warranty for 1 year, warranty for two years and warranty for 3 years.
             The association provides the following services:
             <para>
             <list type="bullet">
             <item>
             <description>The category of the linked <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> - Represents the type of linked association.</description>
             </item>   
             </list>
             In addition, all services from parent interface are included.
             </para>    
            </summary>
             <summary><para><b>Note: since 10.5.0 and will be discontinued from version 10.5.3. Use interface Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup instead.</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.ILinkGroup.Category">
            <summary>
            The link category of the group
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Associations.IAssociation">
            <summary><para><b>Note: The interface is obsolete since 10.5.0 and will be discontinued from version 10.5.3. Use interfaces related to Link and Containment in Retalix.StoreServices.Model.Product.Associations.Links And Retalix.StoreServices.Model.Product.Associations.Containment instead.</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.IAssociation.ToProduct">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> this association points to.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation">
            <summary>
            An integral <see ref="IAssociation">IAssociation</see> to another <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> that need to be sold / handled together with the association owner.  
            The linked product is tend to be treated as an inseparable part of the link owner during sale, sharing its' quantity, weight and mobility.
            <example>
            <code lang="cs" description="This example shows how to look at the link associations for Deposit.">
            <![CDATA[
                Console.WriteLine("The beer have a bottle deposit that must be sold with it.");
            
                IProduct beer = _productDao.Get("Six Pack SKU");
                Console.WriteLine("  When selling <{0}>", beer);
            
                IEnumerable<LinkAssociation> linkedToBeer = beer.AssociatedTo.OfType<LinkAssociation>();
                foreach (var link in linkedToBeer)
                {
                    if(link.Category.Mandatory == MandatoryLinkOptions.All)
                        Console.WriteLine("   Need to sell <{0}> as well {1} times.", link.To, link.Quantity);
                }
            
                /* Output:
                    The beer have a bottle deposit that must be sold with it.
                        When selling <[Six Pack SKU]: "Pepsi Max Glass">
                            Need to sell <[250mlBottle]: "250 ml Bottles"> as well 6 times.
                */
            ]]>
            </code>
            <code lang="cs" description="This example shows how to look at the link associations for Tare.">
            <![CDATA[
                    Console.WriteLine("Cookies are always sold in a one of pre-defined Containers.");
            
                    IProduct cookies = _productDao.Get("Cookies id");
                    Console.WriteLine("  When selling <{0}>, you must select one of the following containers:", cookies);
            
                    IEnumerable<LinkAssociation> linkedToCookies = cookies.AssociatedTo.OfType<LinkAssociation>();
                    foreach (var link in linkedToCookies)
                    {
                        if (link.Category.Mandatory == MandatoryLinkOptions.AtLeastOne)
                            Console.WriteLine("    * <{0}>", link.To);
                    }
            
                /* Output:
                    Cookies are always sold in a one of pre-defined Containers.
                        When selling <[Cookies id]: "Cookies">, you must select one of the following containers:
                        * <[Tare id]: "Tare">
                        * <[New Tare id]: "NewTare">
                */
            ]]>
            </code>
            </example>
            
            </summary>
            <summary><para><b>Note: since 10.5.0 and will be discontinued from version 10.5.3. Use interface Retalix.StoreServices.Model.Product.Associations.Links.LinkAssociation instead.</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.LinkAssociation.#ctor(Retalix.StoreServices.Model.Product.IProduct,System.Decimal,Retalix.StoreServices.Model.Product.Associations.LinkCategory)">
            <summary>
            Create new instance of link association
            </summary>
            <param name="linkTo">The <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> that the <see ref="LinkAssociation">LinkAssociation</see> point to.</param>
            <param name="quantity">The number of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>s this <see ref="LinkAssociation">LinkAssociation</see> represent.</param>
            <param name="category">Arbitrary classification of the link.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.LinkAssociation.To">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> that the <see ref="LinkAssociation">LinkAssociation</see> point to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.LinkAssociation.Quantity">
            <summary>
            The number of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>s this <see ref="LinkAssociation">LinkAssociation</see> represent. 
            E.g. A <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> named "Six-Pack" may be linked to 6 Deposit <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>s.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.LinkAssociation.Category">
            <summary>
            Arbitrary classification of the link, that allow definition of meaning to the link. E.g. Tare, Warranty, Extended Warranty, Box.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.LinkAssociation.Equals(Retalix.StoreServices.Model.Product.Associations.LinkAssociation)">
            <summary>
            Determines whether the specified <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation"/> is equal to the current <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation"/> is equal to the current <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation"/>; otherwise, false.
            </returns>
            <param name="other">The <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation"/> to compare with the current <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.LinkAssociation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.LinkAssociation.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Associations.LinkCategory">
            <summary>
            The association category represent definition of link association. E.g. Tare, Warranty, Extended Warranty, Box.
            </summary>
            <summary><para><b>Note: since 10.5.0 and will be discontinued from version 10.5.3. Use interface Retalix.StoreServices.Model.Product.Associations.Links.LinkGroupTag instead.</b></para></summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Associations.LinkCategory.Tare">
            <summary>
            Represents a tare product which can be defined as the container of the product.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Associations.LinkCategory.Warranty">
            <summary>
            Represents the activation of a product, for example, an activation of a gift card.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Associations.LinkCategory.Activation">
            <summary>
            Represents a warranty product, which is defined as a linked product. For example, a TV warranty.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.LinkCategory.#ctor(System.String,Retalix.StoreServices.Model.Product.Associations.MandatoryLinkOptions)">
            <summary>
            Create new instance of LinkCategory
            </summary>
            <param name="name">The category name.</param>
            <param name="mandatory">Indicate if the linked is mandatory.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.LinkCategory.Name">
            <summary>
            The category name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Associations.LinkCategory.Mandatory">
            <summary>
            Indicate if the linked <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> will always be handled with the link owner. If false the link is optional.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.LinkCategory.Equals(Retalix.StoreServices.Model.Product.Associations.LinkCategory)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="other">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.LinkCategory.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.LinkCategory.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.LinkCategory.op_Equality(Retalix.StoreServices.Model.Product.Associations.LinkCategory,Retalix.StoreServices.Model.Product.Associations.LinkCategory)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Associations.LinkCategory.op_Inequality(Retalix.StoreServices.Model.Product.Associations.LinkCategory,Retalix.StoreServices.Model.Product.Associations.LinkCategory)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Associations.MandatoryLinkOptions">
            <summary><para><b>Note: since 10.5.0 and will be discontinued from version 10.5.3. Use interface Retalix.StoreServices.Model.Product.Associations.Links.LinkGroupTag instead.</b></para></summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Associations.MandatoryLinkOptions.None">
            <summary>
            No link is mandatory. The link owner is valid for handling without any of its' linked products.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Associations.MandatoryLinkOptions.AtLeastOne">
            <summary>
            At least one link is mandatory. The link owner can be handled only if one of the linked products is included in the process.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Associations.MandatoryLinkOptions.All">
            <summary>
            All link are mandatory. Any handling of the link owner must include all the links in the category.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Exceptions.ProductNotFoundException">
            <summary>
             Exception thrown when requested item not found
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Exceptions.ProductNotFoundException.#ctor(Retalix.StoreServices.Model.Product.Identifier)">
            <summary>
             Create new instance of ProductNotFoundException
            </summary>
            <param name="identifier">The identifier of the product that was not found</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Exceptions.ProductNotFoundException.#ctor(System.String,System.String)">
            <summary>
             Create new instance of ProductNotFoundException
            </summary>
            <param name="message">Error message</param>
            <param name="errorCode">Business Error code</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityFactory">
            <summary>
            This factory required to create IProductAvailabilityFactory object;
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityFactory.Create(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create IProductAvailabilityFactory object.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityJobConfiguration">
            <summary>
            Configuration for product availability.
            This job should execute every X days during specific hours.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityJobConfiguration.CheckInterval">
            <summary>
            Scheduled interval for job (in seconds). 
            Check if job should run every X seconds.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityJobConfiguration.DaysInterval">
            <summary>
            Job should execute every X days.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityJobConfiguration.JobTimeSlot">
            <summary>
            Job will run during this time slot.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityJobConfiguration.LastSuccessfulJobRun">
            <summary>
            Time of last successful job run.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityLookupCriteria">
            <summary>
            Represents lookup criteria used for search of all product's availability data for business unit, retail segment and training mode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityLookupCriteria.BusinessUnitId">
            <summary>
             Search all product availabilities for BusinessUnitId specified
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityLookupCriteria.RetailSegmentId">
            <summary>
             Search all product availabilities for RetailSegmentId specified; this field could not be specified, in this case it should be extracted from AciveServiceRequest
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityLookupCriteria.IsTrainingMode">
            <summary>
             Search all product availabilities for IsTrainingMode specified; this field could not be specified, in this case it should be extracted from AciveServiceRequest
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailability">
            <summary>
             Represents ProdauctAvailability object, which contains data about availability of product, 
             defined by ProductID, all touch points relayed to business unit and 
             retail segment, specified by BusinessUnitId and RetailSegmentId correspondingly.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailability.ProductId">
            <summary>
             Gets a <see cref="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailability.ProductId">ProductId</see> that is the part of product availability data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailability.BusinessUnitId">
            <summary>
             Gets a <see cref="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailability.BusinessUnitId">BusinessUnitId</see> that is the part of product availability data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailability.RetailSegmentId">
            <summary>
             Gets a <see cref="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailability.RetailSegmentId">RetailSegmentId</see> that is the part of product availability data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailability.IsTrainingMode">
            <summary>
             Gets a boolean value IsTrainingMode; true value means that current data related to training mode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailability.IsAvailable">
            <summary>
             Gets a boolean value IsAvailable; true value means that product is available.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityDao">
            <summary>
            Represents a data access object for <see cref="T:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailability">IProductAvailability</see> responsible for saving and retrieving product's availability data.
            </summary>
            <remarks>
            <para>
            The ProductAvailabilityDao provides the following services:
            <list type="bullet">
            <item>
            <description>Save product availability data for one product</description>
            </item>
            <item>
            <description>Delete the product availability data for one product</description>
            </item>
            <item>
            <description>Gets the product availability data for specified Business Unit, Retail Segment and Training Mode</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityDao.Save(Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailability)">
            <summary>
             Save product availability data for one product
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityDao.Delete(Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailability)">
            <summary>
             Delete product availability data for one product
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityDao.Get(Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityLookupCriteria)">
            <summary>
            Gets the product availability data (product entity key) for specified Business Unit, Retail Segment and Training Mode
            </summary>
            <param name="criteria">criteria to get results by</param>
            <returns>list of product availabilities</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityDao.Get(Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityLookupCriteria,System.Boolean)">
            <summary>
            Gets the product availability data for specified Business Unit, Retail Segment and Training Mode
            </summary>
            <param name="criteria"></param>
            <param name="convertedToSellableIds">if true - will return product sellableIds instead of entityKey</param>
            <returns>list of product availabilities</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityMovable.Product">
            <summary>
             Gets or sets a <see cref="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityMovable.Product">Product</see> that is the part of product availability data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityMovable.BusinessUnit">
            <summary>
             Gets or sets a <see cref="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityMovable.BusinessUnit">BusinessUnit</see> that is the part of product availability data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityMovable.RetailSegment">
            <summary>
             Gets or sets a <see cref="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityMovable.RetailSegment">RetailSegment</see> that is the part of product availability data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityMovable.IsTrainingMode">
            <summary>
             Gets or sets a boolean value IsTrainingMode; true value means that product availability was set/get for training mode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityMovable.IsAvailable">
            <summary>
             Gets or sets a boolean value IsAvailable; true value means that product is available.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityStatus">
            <summary>
            Represents IProduct with its availability status
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductAvailability.IProductAvailabilityStatus.IsAvailable">
            <summary>
             Gets a boolean value IsAvailable; true value means that product is available.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Criterions.LocalProductSelectionGroupCriterion">
            <summary>
            Used for filtering local groups by group ids.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Criterions.SellingBehaviorCriterion">
            <summary>
            Used for filtering selling behaviors by business unit id.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Criterions.TenderTypeIdsCriterion">
            <summary>
            Used for filtering tender types by tender type ids.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Criterions.DepartmentIdsCriterion">
            <summary>
            Used for filtering departments by department ids.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Criterions.ProductIdentifierCriterion">
            <summary>
            Used for filtering products by product's identifier.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Criterions.ProductsIdsCriterion">
            <summary>
            Used for filtering products by product ids.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Group.IProductGroupSelector">
            <summary>
            Represent a selector that holds an Instance of <see cref="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup">Product group</see>
            responsible to answer whether the group contains the specified product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Group.IProductGroupSelector.LocalProductSelectionGroup">
            <summary>
            Reference to <see cref="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup">Product group</see> to determine the containment of a specified product over.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">
            <summary>
            Represents a group of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>s. 
            The association provides the following services:
            <para>
            <list type="bullet">
            <item>
            <description>The description of the group, provides more information about the purpose of the group.</description>
            </item>   
            <item>
            <description>A collection of all the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>s in the Group, with the ability to add and remove them.</description>
            </item>   
            </list>
            </para>      
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Group.IProductGroup.Id">
            <summary>
             Gets the ID of the association.
            </summary>
             <remarks>
             The ID is unique.
             </remarks>  
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Group.IProductGroup.Description">
            <summary>
            Gets or sets the description of the group, providing more information about the purpose of the group.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Group.IProductGroup.Products">
            <summary>
            Collection of all the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>s in the group.
            Use the <see cref="T:System.Collections.Generic.ICollection`1"/> methods to add, remove and iterate through the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>s collection.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Group.IProductGroupDao">
             <summary> 
            <summary>
             Represents the data access object responsible for saving and retrieving <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup" />s from a pre defined data management system, 
             e.g.,database, file system, web service etc.
            </summary>
             <para>
             <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroupDao" /> provides the following services:
             <list type="bullet">
             <item>
             <description>Gets the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>s which match a collection of Ids.</description>
             </item>
             <item>
             <description>Saves a new <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>. If the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see> already exists, then an update is performed.</description>
             </item>
              <item>
             <description>Gets all the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>s that are defined in the system.</description>
             </item>
              <item>
             <description>Gets a collection of the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>s displayed in page size.</description>
             </item>
              <item>
             <description> Gets all the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>s paged from the starting position.</description>
             </item>
              <item>
             <description>Gets a collection of the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>s, when the first element in the collection has an ID received as input.</description>
             </item>
              <item>
             <description>Deletes all the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>s in the system.</description>
             </item>
             </list>
             </para>  
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Group.IProductGroupDao.GetProductGroups(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>s which match a collection of IDs.
            </summary>
            <param name="ids">The collection of IDs to which returned associations are matched.</param>
            <returns>A dictionary with an <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see> for every ID received in the input.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Group.IProductGroupDao.GetAll(System.String,System.Nullable{System.Int32})">
            <summary>
            Gets all the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>s. 
            Paged and Starting Position may be specified to limit the return.
            </summary>
            <param name="firstProductGroupId">If not null, the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroupDao"/> will retrieve all <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup"/> with id equal or larger then this.</param>
            <param name="pageSize">If not null, limit the number of <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup"/>s returned if it exceed the parameter value.</param>
            <returns>A collection of <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see> from starting position (if specified), displayed in page size (if specified).</returns> 
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Group.IProductGroupDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.Group.IProductGroup})">
            <summary>
             Saves a new <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>. If the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see> already exists, then an update is performed.
            </summary>
            <param name="productGroups">The <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see> that is saved or updated.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Group.IProductGroupDao.Remove(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.Group.IProductGroup})">
            <summary>
            Remove the provided <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see> list from, the underlined data storage.
            </summary>
            <param name="productGroups">The <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup"/>IProductGroup</param> instance to remove.
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Group.IProductGroupDao.GetLinkGroups(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Product.Associations.ILinkGroup">ILinkGroup</see>s which match a collection of IDs.
            </summary>
            <param name="ids">The collection of IDs used to query for the link groups.</param>
            <returns>List of <see cref="T:Retalix.StoreServices.Model.Product.Associations.ILinkGroup">ILinkGroup</see>s</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Group.IProductGroupFactory">
            <summary>
            <summary>
             Represents a factory responsible for creating a new instance of <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>.
             The factory provides the following services:
             <para>
             <list type="bullet">
             <item>
             <description>Creates a new instance of an <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>.</description>
             </item>
             <item>
             <description>Creates a new instance of an <see cref="T:Retalix.StoreServices.Model.Product.Associations.ILinkGroup">ILinkGroup</see>.</description>
             </item>
             </list> 
             </para>    
            </summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Group.IProductGroupFactory.CreateProductGroup(System.String)">
            <summary>
             This method is used to create a new instance of an <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>
            </summary>
            <param name="id">
              The unique identifier of the group. 
              The new instance of the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>  will receive the <paramref name="id" /> parameter as a value in the Id property.</param>
            <returns>A new instance of the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see>.</returns>       
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Group.IProductGroupFactory.CreateLinkGroup(System.String,Retalix.StoreServices.Model.Product.Associations.LinkCategory)">
            <summary>
             This method is used to create a new instance of an <see cref="T:Retalix.StoreServices.Model.Product.Associations.ILinkGroup">ILinkGroup</see>.
             <see cref="T:Retalix.StoreServices.Model.Product.Associations.ILinkGroup">ILinkGroup</see> is a private case of <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">IProductGroup</see> to handle products for <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation"/>.
            </summary>
            <param name="id">The unique identifier of the <see cref="T:Retalix.StoreServices.Model.Product.Associations.ILinkGroup" />. 
             The new instance of the <see cref="T:Retalix.StoreServices.Model.Product.Associations.ILinkGroup">ILinkGroup</see>  will receive the <paramref name="id">id</paramref> as a value in the Id property.</param>
             Two values are available:
             <param name="linkCategory">The link category the <see cref="T:Retalix.StoreServices.Model.Product.Associations.ILinkGroup">ILinkGroup</see> will be initiated with.
             Link group Category may not be null, and although it may be set later, an instance of it must be specified on creation.</param>
            <returns>A new instance of the <see cref="T:Retalix.StoreServices.Model.Product.Associations.ILinkGroup">ILinkGroup</see>.</returns>      
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.IdentifiersCriteria">
            <summary>
             Represents the option to look up a product by the product identifier.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.IdentifiersCriteria.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Lookup.IProductLookupPolicy.GetPolicyReturnData(System.Object)">
            <summary>
            
            </summary>
            <param name="productSelectionResponseArray">should be  typeof(SelectionTypeResponse[])</param>
            <returns>should be  typeof(CustomPolicyReturnDataType[])</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Lookup.IProductLookupPolicy.ErrorHandling(System.Exception)">
            <summary>
            This method is called from the service after an error occured.
            </summary>
            <param name="error">The reason for failure</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductConjunctionCriteria.StoreRangeCriteria">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductConjunctionCriteria.DescriptionCriterias">
            <summary>
             Gets the search criteria for the descriptions values.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductConjunctionCriteria.IdentifierCriterias">
            <summary>
             Gets the search criteria for the codes values with relationship of AND between them.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductConjunctionCriteria.IdentifiersCriterias">
            <summary>
             Gets the search criteria for the codes values with relationship of OR between them.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductConjunctionCriteria.IdentifierOrCodeCriterias">
            <summary>
             Gets the search criteria by product identifier or code values.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductConjunctionCriteria.DescriptionOrCodeCriterias">
            <summary>
             Gets the search criteria for the description or codes values.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductConjunctionCriteria.DescriptionOrIdentifierOrCodeCriterias">
            <summary>
             Gets the search criteria for the description or identifier or code values.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductConjunctionCriteria.HierarchyCriterias">
            <summary>
             Gets the criteria hierarchies, such as the Merchandise Hierarchy tree.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductConjunctionCriteria.HierarchyDescriptionCriterias">
            <summary>
            Gets the search criteria for the hierarchies (by description and hierarchy ID)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductConjunctionCriteria.MainIdCriterias">
            <summary>
            Gets the search criteria for the main product id
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.ProductEagerLoadingCriteria">
            <summary>
            Represent DAO hint for loading requested products.
            Each flag notifies DAO that corresponding data will be required along with default product data.
            For example, if ProductSearchCriteria result will be used to present Descriptions and Identifiers of product to user, setting these flags will 
            provide a hint to load Descriptions and Identifiers more efficiently, rather then loading them one-by-one afterwards.
            When no flag is set, DAO is expected to load eagerly only small part of product's related data, thus preserving resources and execution time.
            Note that not providing the flag will not cause an error, as it is only a suggestion.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.BestMatchCriteria">
            <summary>
            Represent the option to look up for a products by best match.
            For example you can look up for all the products that contains description cola.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.DescriptionSortingCriteria">
            <summary>
            Represent the option to lookup for products and retrieve them sorted by description.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.DescriptionSortingCriteria.DescriptionType">
            <summary>
            Type of description to use when sorting (e.g. "Long", "E-Commerce" etc)
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.ISortingCriteria">
            <summary>
            Represents the option to retrieve products from look up sorted by the the relevant order.  
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.PriceSortingCriteria">
            <summary>
            Represents the option to retrieve products from look up sorted by price order.  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.PriceSortingCriteria.UnitOfMeasure">
            <summary>
            Prices of that unit of measure will be used for sorting
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.PriceSortingCriteria.BusinessUnit">
            <summary>
            Prices related to that BusinessUnit will be used for sorting
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.PriceSortingCriteria.BusinessDate">
            <summary>
            Prices relevant for that BusinessDate will be used for sorting
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.SortingCriteria">
            <summary>
            Represents the option to retrieve products from look up sorted by the the relevant order.  
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.MainIdCriteria">
            <summary>
             Represents the option to look up a product by the product Main Id.
             </summary>
             <remarks>
             The lookup can be made by a given product Main Id.
             For example, lookup products according to a product with id 466 .
             </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Lookup.MainIdCriteria.#ctor(System.String,Retalix.StoreServices.Model.Product.Lookup.CriteriaMatchMode)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="matchMode"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.DescriptionOrIdentifierOrCodeCriteria">
            <summary>
             Represents the option to look up a product by the product description or  product Identifier or 
             product code(Entity key) criteria.
             </summary>
             <remarks>
             The lookup can be made by a given product description or identifier or code.
             For example, lookup products according to a product called "Milk" or Code "555555" or Identifier: Code=466 Type=EAN.
             </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Lookup.DescriptionOrIdentifierOrCodeCriteria.#ctor(System.String,Retalix.StoreServices.Model.Product.Lookup.CriteriaMatchMode)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="matchMode"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.IdentifierOrCodeCriteria">
            <summary>
            Represents the option to look up a product by the product identifier or code (Entity Key).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Lookup.IdentifierOrCodeCriteria.#ctor(Retalix.StoreServices.Model.Product.Identifier,Retalix.StoreServices.Model.Product.Lookup.CriteriaMatchMode)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="matchMode"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.HierarchyCriteria">
            <summary>
             Represents the product lookup by hierarchy level node.
             This Class is obsolete since version 10.4.0. 
             <remarks>
             The lookup can be made by a given hierarchy level node.
             For example, lookup products according to an hierarchy node within id "1".
             </remarks>
             </summary>  
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Lookup.HierarchyCriteria.#ctor(Retalix.StoreServices.Model.Product.Hierarchy.ICategory)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.HierarchyDescriptionCriteria">
            <summary>
             Used for products lookup by hierarchy description criteria.
             This Class is obsolete since version 10.4.0. 
             </summary>
             <remarks>
             The lookup can be made by a given hierarchy description.
             For example, lookup products according to an hierarchy description called "Merchandise".
             </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Lookup.HierarchyDescriptionCriteria.#ctor(System.String,System.String,Retalix.StoreServices.Model.Product.Lookup.CriteriaMatchMode)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="hierarchy"></param>
            <param name="matchMode"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.HierarchyDescriptionCriteria.Hierarchy">
            <summary>
            Represents the hierarchy's description.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.ProductSearchCriteria">
             <summary>
             Encapsulates a composite criteria that enables defining complex search filters.<b/>
             When using this criteria the products that returned match all the following sections: 
             
              1. A list of <see cref="T:Retalix.StoreServices.Model.Product.Lookup.DescriptionCriteria">DescriptionCriteria</see>.<b/>
                 When using this criteria the products that returned will match all the <see cref="T:Retalix.StoreServices.Model.Product.Lookup.DescriptionCriteria">DescriptionCriteria</see> in the list.<b/>  
              
              2. A list of <see cref="T:Retalix.StoreServices.Model.Product.Lookup.IdentifierCriteria">CodeCriteria</see>.<b/>
                 When using this criteria the products returned will match all the codes in the list.<b/>  
            
              3. A list of <see cref="T:Retalix.StoreServices.Model.Product.Lookup.HierarchyCriteria">HierarchyCriteria</see>.<b/>
                 When using this criteria the products returned will match all the hierarchy in the list.<b/>  
            
              4. A list of <see cref="T:Retalix.StoreServices.Model.Product.Lookup.DescriptionOrCodeCriteria">DescriptionOrCodeCriteria</see>.<b/>
                 When using this criteria the products returned will match all the DescriptionOrCodeCriteria in the list.<b/>  
             
              5. A list of <see cref="T:Retalix.StoreServices.Model.Product.Lookup.HierarchyDescriptionCriteria">HierarchyDescriptionCriteria</see>.<b/>
                 When using this criteria the products returned will match all the HierarchyDescriptionCriteria in the list.<b/>  
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Lookup.ProductSearchCriteria.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductSearchCriteria.EagerLoading">
            <summary>
            Provides an indication for eager loading associated Product data (e.g. Descriptions, ImageNames)
            When flag is set, DAO will try to load requested data in more efficient way, along with found products.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductSearchCriteria.Disjunction">
            <summary>
            List of criteria to perform OR operation.
            If provided, only those provided will be calculated.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductSearchCriteria.SortingCriterias">
            <summary>
            Gets the sorting criteria for the search result.
            Note: As for 10.5 only one sorting criteria is supported. In case more then one sorting criteria provided, errors will occur.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.ProductSearchCriteria.PagingCriteria">
            <summary>
            Specifies paging criteria for search result set
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.CriteriaMatchMode">
            <summary>
            Represents an enumeration for a given criteria's result positioning.
            </summary>
            <remarks>
            When a search is invoked, the string to look for can be determined whether to look it:
            <para>
            <list type="bullet">
            <item>
            <description>Anywhere</description>
            </item>
            <item>
            <description>In the beginning</description>
            </item>
            <item>
            <description>In the end</description>
            </item>
            <item>
            <description>Exact match</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Lookup.CriteriaMatchMode.Anywhere">
            <summary>
            Look for the wanted criteria "Anywhere" in the string.
            </summary>
            <remarks>
            For example,
            Supposed the system contain products: Milk, Chocolate, Bread and Cola.
            If a search is invoked with a criteria that holds a value for "co" and CriteriaMatchMode.Anywhere,
            then the search results will be: Chocolate and Cola.
            </remarks>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Lookup.CriteriaMatchMode.Start">
            <summary>
            Look for the wanted criteria which "Starts" with the given string.
            </summary>
            <remarks>
            For example,
            Supposed the system contain products: Milk, Chocolate, Bread and Beer.
            If a search is invoked with a criteria that holds a value for "B" and CriteriaMatchMode.Start,
            then the search results will be: Bread and Beer.
            </remarks>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Lookup.CriteriaMatchMode.End">
            <summary>
            Look for the wanted criteria which "Ends" with the given string.
            </summary>
            <remarks>
            For example,
            Supposed the system contain products: Tea, Coffee, and Juice.
            If a search is invoked with a criteria that holds a value for "e" and CriteriaMatchMode.End,
            then the search results will be: Coffee and Juice.
            </remarks>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Lookup.CriteriaMatchMode.Exact">
            <summary>
            Look for the wanted criteria which matches the "Exact" given string.
            </summary>
            <remarks>
            For example,
            Supposed the system contain products: Tea, Coffee, and Juice.
            If a search is invoked with a criteria that holds a value for "Tea" and CriteriaMatchMode.Exact,
            then the search results will be: Tea.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.IdentifierCriteria">
            <summary>
             Represents the option to look up a product by the product identifier.
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Lookup.IdentifierCriteria.#ctor(Retalix.StoreServices.Model.Product.Identifier,Retalix.StoreServices.Model.Product.Lookup.CriteriaMatchMode)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="matchMode"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.DescriptionCriteria">
            <summary>
             Represents the option to look up a product by the product description.
             </summary>
             <remarks>
             The lookup can be made by a given product description.
             For example, lookup products according to a product called "Milk".
             </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.DescriptionOrCodeCriteria">
            <summary>
             Represents the option to look up a product by the product description or code criteria.
             </summary>
             <remarks>
             The lookup can be made by a given product description or code.
             For example, lookup products according to a product called "Milk" or Code "555555".
             </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Lookup.DescriptionOrCodeCriteria.#ctor(System.String,Retalix.StoreServices.Model.Product.Lookup.CriteriaMatchMode)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="matchMode"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.LogicalFunction">
            <summary>
             Represents the logical function used with the criteria.
            </summary>
             <remarks>
             The logical function operator can be used:
             <para>
             <list type="bullet">
             <item>
             <description>The 'Or' operator will be used to look for a product by groupId 1 Or groupId 2.</description>
             </item>
             <item>
             <description>The 'And' operator will be used to look for a product by groupId 1 And groupId 2.</description>
             </item>
             </list>
             </para>
             </remarks>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Lookup.LogicalFunction.AND">
            <summary>
            The AND logical operator to be used for look up a product by two combined parameters.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Product.Lookup.LogicalFunction.OR">
            <summary>
            The OR logical operator to be used for look up a product by two optional parameters.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.PickerCriteria">
            <summary>
             Presents a single set of criteria to find a product.
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Lookup.PickerCriteria`1">
            <summary>
            Presents a single set of criteria to find a product.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.PickerCriteria`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Lookup.PickerCriteria`1.MatchMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.ProductDescription">
            <Summary>
             This interface holds the Localized Description definition.
             Localized description is a description assigned to some culture.
             For example, Product could have two descriptions for English and French culture.
            </Summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductDescription.Type">
            <summary>
            The description classification
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.ProductId">
            <summary>
            Represents product identifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.ProductId.Id">
            <summary>
            Product ID.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Selector.IProductSelector">
            <summary>
            Represents a selection of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Products</see>
            Each instance of IProductSelector references products, it can be directly to a product or Indirectly via product group or hierarchy
            or any other implementation. 
            The instance responsible to answer whether it contains a specific product or not.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Selector.IProductSelector.Id">
            <summary>
            Represents the unique identifier of the IProductSelector.
            used as key for persistence
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Selector.IProductSelector.IsProductContained(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Determines whether the selector contains the specified  <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see>
            Will return True in case it does and False otherwise.
            </summary>
            <param name="product">The <see cref="T:Retalix.StoreServices.Model.Product.IProduct">The product to check the containment over.</see></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Selector.ISingleProductSelector">
            <summary>
            Represent a selector which references directly to one of the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Products</see> 
            hold one direct instance of the IProduct.
            Responsible to determine whether the specified product is the one it holds or not.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Selector.ISingleProductSelector.Product">
            <summary>
            Reference to a single <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see>  to determine the containment over.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Activation.IActivationProviderResolver">
            <summary>
            Checks whether the provider exists by the selection group.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Activation.IActivationProviderResolver.IsExists(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup)">
            <summary>
            Checks if activation provider exists for selection group.
            </summary>
            <param name="localProductSelectionGroup">An instance of <see cref="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup">ILocalProductSelectionGroup</see>.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Activation.IProductActivationAuthorizationCancellation">
            <summary>
            Represents a cancellation token for OnlineService operations.    
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Activation.IProductActivationAuthorizationCancellation.Void">
             <summary>
            Performs Void operations on specific OnlineService operations.
             </summary>
             <returns>An instance of the <see cref="T:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult">IProductActivationProviderResult</see>.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Activation.IProductActivationProvider">
            <summary>
            Represents the external provider required to handle all ProductActivation requests.
            </summary>
            <remarks>
            The external provider supports the following actions:
            <para>
            <list type="number">
            <item>
            <description>Activation</description>
            </item>
            <item>
            <description>TopUp</description>
            </item>
            <item>
            <description>Refund</description>
            </item>
            <item>
            <description>Confirm</description>
            </item>
            <item>
            <description>Balance Inquiry</description>
            </item>
            <item>
            <description>Void Last</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Activation.IProductActivationProvider.Activate(Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest)">
            <summary>
            Activating a new item whose details are passed to the online service provider.
            </summary>
            <returns>An instance of the <see cref="T:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult">IProductActivationProviderResult</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Activation.IProductActivationProvider.TopUp(Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest)">
            <summary>
            Adding funds to the activated item.
            </summary>
            <returns>An instance of the <see cref="T:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult">IProductActivationProviderResult</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Activation.IProductActivationProvider.Refund(Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest)">
            <summary>
            Refunding funds to the activated item.
            </summary>
            <returns>An instance of the <see cref="T:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult">IProductActivationProviderResult</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Activation.IProductActivationProvider.Confirm(Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest)">
            <summary>
            The Confirmation received on activation of an item.
            </summary>
            <remarks>
            Confirmation means that the online services provider activated the item in 2-step activation.
            <para>
            <list type="bullet">
            <item>
            <description>Activation</description>
            </item>
            <item>
            <description>Confirmation</description>
            </item>
            </list>
            </para>
            </remarks>
            <returns>An instance of <see cref="T:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult">IProductActivationProviderResult</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Activation.IProductActivationProvider.BalanceInquiry(Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest)">
            <summary>
            Retrieves the item's current balance.
            </summary>
            <remarks>
            The item must be activate in order to retrieve its current balance from the online services provider.
            </remarks>
            <returns>An instance of <see cref="T:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult">IProductActivationProviderResult</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Activation.IProductActivationProvider.HistoryInquiry(Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest)">
            <summary>
            Retrieves the item's current history.
            </summary>
            <remarks>
            The item must be activate in order to retrieve its current history from the online services provider.
            </remarks>
            <returns>An instance of <see cref="T:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult">IProductActivationProviderResult</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Activation.IProductActivationProvider.VoidLast">
            <summary>
             Cancels the last online service provider request.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult">
            <summary>
            Represents product activation provider results for the authorization request.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult.ReferenceNumber">
            <summary>
            Gets a unique reference number to find the transaction related to this provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult.ResultCode">
            <summary>
            Gets the provider's result code from the authorization request.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult.AuthorizationCode">
            <summary>
            Gets a code for the authorization request.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult.InitialBalance">
            <summary>
            Gets the initial balance at the time of the operation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult.CurrentBalance">
            <summary>
             Gets the current Balance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult.CustomerReceipt">
            <summary>
            Gets a receipt, which is passed on to the customer as part of the authorization process.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult.AuthorizationDateTime">
            <summary>
            Gets the authorization date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult.ProviderData">
            <summary>
             Gets the specific data related to the provider, which is saved as part of the transaction log.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.IProductActivationProviderResult.CancellationToken">
            <summary>
            Gets a cancellation token for the possible Void request on every authorization performed.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest">
            <summary>
            Represents a general request that would be sent to the ProductActivation provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest.ItemId">
            <summary>
            Gets or sets the Product Id that is authorized.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest.Amount">
            <summary>
            Gets or sets the authorization amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest.Price">
            <summary>
            Gets or sets the value of the price to be authorized.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest.ExternalIdType">
            <summary>
            Gets or sets the type of authorization (Second Barcode, In BarCode, Card or External)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest.ExternalId">
             <summary>
            Gets or sets the external id which represents the item at the provider.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest.EntryMethod">
            <summary>
            Gets or sets the entry method required for authorization.
            </summary>
            <remarks>
            For example, the entry method may be "keyed" (manually entered), automatic, etc.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest.IsTrainingMode">
            <summary>
            Gets or sets a flag that indicates whether training mode operations are allowed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest.IsConfirmationRequired">
            <summary>
            Gets or sets a flag that indicates whether confirmation is required for the authorization process.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Activation.ProductActivationRequest.IsOpenPrice">
            <summary>
            Gets or sets a flag to identify whether the price is hardcoded or manually entered.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Identifier">
            <summary>
            Represents a single general-purpose <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> identifier.
            </summary>
            <remarks>
            Products may have multiple identifiers associated with them.<br/>
            Identifier is a general-purpose Product identification with the following constrains:<br/>
            <list type="number">
            <item><description>an Identifier (the combination of code and type) must be unique.</description></item>
            <item><description>an Identifier must not be associated with more then one product.</description></item>
            </list>
            Besides of those constraints there are no specific ways how a retailer should use the Identifiers, yet, 
            Identifier are widely used in the R10 system in order to associate or in order to find products. 
            For example, Identifiers may represent an enterprise organizational code or code that is used to identify product 
            in one or more business activities done in the organization. <br/>
            Some cases where Identifier is used:<br/>
            <list type="number">
            <item>
            <description>Product Identifiers, mostly barcodes, may come in different formats such as EAN, UPC, GTIN etc .</description>
            </item>
            <item>
            <description>the manufacturer may assign an identifier to the product.</description>
            </item>
            <item>
            <description>Product may be related to specific unique retailer identifier.</description>
            </item>
            <item>
            <description>The retailer may choose to treat several physical products, with different identifiers, as the same Product.</description>
            </item>
            <item>
            <description>For instance, a retailer may decide to define a model of a shirt in all its available sizes and colors as a single product, 
            daily newspapers may have a different code per each day of week etc.</description>
            </item>  
            <item>
            <description>
            Example - Cola may be associated with following identifiers:
                a) Code: "123" ; Type "RetailerMainID"
                b) Code: "2595603692153" ; Type "GTIN"
                c) Code: "3595603692153" ; Type "GTIN"
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Identifier.Code">
            <summary>
            The product's identifier code.
            For example: Newspaper's identifier's code is 22446563477.
            </summary>
            <remarks>
            Note that setting this property is nontrivial and the constrains specified for this interface (see above)  
            must be kept by the user of this interface. 
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Identifier.Type">
            <summary>
            The product's identifier format.
            For example: EAN, UPC, Manufacturer, etc.
            </summary>
            <remarks>
            Note that setting this property is nontrivial and the constrains specified for this interface (see above)  
            must be kept by the user of this interface. 
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Identifier.LastUpdated">
            <summary>
            Gets Last Modified Date of the identifier record. Each time the identifier is updated, the LastUpdated gets new value.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Identifier.#ctor(System.String,System.String)">
            <summary>
            Construct and initialize an Identifier 
            </summary>
            <remarks>
            Note that using this class is nontrivial and the constrains specified for this interface (see above)  
            must be kept by the user of this interface. 
            </remarks>
            <param name="code">the code of the Identifier</param>
            <param name="type">the type of the Identifier</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.IProduct">
            <summary>
            Represents goods or services in the retailer's catalog, either for selling, ordering, or any other use.
            <br />
            Product is the reference for associating information published by the manufacturer or service provider regarding any item in the catalog.
            <br />
            Products are usually labeled by one or more external identifiers, e.g. GTIN or EAN (See: http://www.gtin.info/index.html).
            Products are described by a set of attributes with values, the attributes may be complex or simple, but are usually fixed and not sensitive to the environmental conditions
            i.e. a can of coke contains the same amount of sugar regardless of the temperature or time at which it is sold. 
            </summary>
            <example>
            <code lang="cs" description="This example shows how to retrieve an existing product with code 123 of type EAN in the context of a business service.">
            <![CDATA[
            public class ProductLookupService
            {
                private readonly IProductDao _productDao;
            
                public ProductLookupService(IProductDao productDao)
                {
                    _productDao = productDao;
                }
            
                public IProduct GetProduct(string code, string type)
                {
                    Identifier identifier = new Identifier(code, type);
                    IProduct product = _productDao.GetByIdentifier(identifier);
                    return product;
                }
            }
            
            public class ProductLookupServiceExample
            {
                const string code = "123";
                const string type = "EAN";
                
                private readonly ProductLookupService _service;
            
                public ProductLookupServiceExample(IProductDao productDao)
                {
                    _service = new ProductLookupService(productDao);
                }
            
                public IProduct FindProductByIdentifier()
                {
                     return _service.GetProduct(code,type);
                }
            }
            ]]>
            </code>
            </example>
            <example>
            <code lang="cs" description="This example shows how to update an existing product's identifiers and save it in the context of a business service.">
            <![CDATA[
            public class UpdateProductIdentifiersService
            {
                private readonly IProductDao _productDao;
            
                public UpdateProductIdentifiersService(IProductDao productDao)
                {
                    _productDao = productDao;
                }
            
                public IProduct UpdateProductIdentifiers(string productId, string code, string type)
                {
                    IProduct product = _productDao.Get(productId); /*Pay attention that this is the product's entity key, 
                                                                    * it is used for retrieving a specific product by its unique key
                                                                    * and not used to lookup this product.*/
            
                    Identifier newIdentifier = new Identifier(code, type);
                    product.Identifiers.Add(newIdentifier);
                    return product;
                }
            }]]>
            </code>
            </example>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.EntityKey">
            <summary>
            Gets the unique key of the product entity in the system that cannot be change once you create it.
            <br />
            This key is used to identify product uniquely for maintenance purposes,
            for example, if you have a daily process that import(update) products from external system to your system,
            this key will be the reference to specific instance like ID\Passport for people.
            <br />
            With this key you can find the product and change his identifiers for example.
            </summary> 
            <remarks>
            <para>
            Note that in order to identify a product for business purposes (i.e. lookup) use the <see cref="P:Retalix.StoreServices.Model.Product.IProduct.Identifiers">Identifiers</see> property.
            </para>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.Weight">
            <summary>
            Gets or sets the supplied weight of the product.
            </summary>
            <value>A product's <see cref="P:Retalix.StoreServices.Model.Product.IProduct.Weight">Weight</see>. The default value is <see langword="null"/> - no weight provided.</value>
            <remarks>
            A weight could be used for reporting and for calculation of weight reduction, when product is container.<br/>
            Please note the limitations of <see cref="P:Retalix.StoreServices.Model.Product.IProduct.Weight">Weight</see> that means comparison and calculation of Weight are possible only within a single UnitOfMeasureType  
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.Descriptions">
            <summary>
            Gets a list of the product descriptions.
            </summary>        
            <value>A collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription">ProductDescription</see> that contains the product's descriptions, 
            a product can have multiple descriptions for different languages and types</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.Identifiers">
            <summary>
            Gets a list of <see cref="T:Retalix.StoreServices.Model.Product.Identifier">Identifier</see>s this product identify by.
            <br />
            Identifiers are used to look up product in a system, each identifier is unique in the system.
            For example, if you have product in the system with too identifiers (123,EAN) and (456,UPC) you can find this product by look up by identifier (123,EAN) or by identifier (456,UPC). 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.ImageNames">
            <summary>
            Gets or sets the names of product images in a URL format.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.IsNonMerchandise">
            <summary>
            <para><b>Note: This property is non stable and could be removed in future versions</b></para> 
            Gets or sets the flag that indicates that the product is Non-Merchandise product.
            <br />
            Non-Merchandise products include items such as postage stamps, gift certificates, gift cards, and bottle deposits.
            Non-Merchandise products could be treated differently in total order calculations. (Taxation, Tendering etc.)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.IsManualPercentageEnable">
            <summary>
            <para><b>Note: This property is non stable and could be removed in future versions</b></para> 
            Gets or sets a flag, which indicates if manual entry of tare percentage is allowed.
            <br />
            When True, it is possible to manually enter percentage of product's weight that is actually tare.
            Tare weight can be reduced from gross product weight to get net product weight.
            In case that tare weight is relative (e.g. ice weight in frozen fish), manual entry of tare percentage is required.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.AssociatedTo">
            <summary>
             Gets a collection of <see cref="T:Retalix.StoreServices.Model.Product.Associations.IAssociation">IAssociation</see>s, this product is associated to.
             <br />
             This includes the links associated to this product using a <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup"/>.
             The collection may include instances of both <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation"/> and <see cref="T:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation"/>.
             Note that <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation"/> is obsolete. Links should be handled by <see cref="P:Retalix.StoreServices.Model.Product.IProduct.LinkedGroups"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.AssociatedBy">
            <summary>
            Get a collection of products that are associated to this product.
            <br />
            The collection may include instances products linked to this one using either <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation"/> or <see cref="T:Retalix.StoreServices.Model.Product.Associations.Containment.ContainmentAssociation"/>.
            It will not include associations made through the <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup"/>s.
            Note that <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation"/> is obsolete. Links should be handled by <see cref="P:Retalix.StoreServices.Model.Product.IProduct.LinkedGroups"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.LinkGroups">
            <summary>
            Gets a collection of <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">ILinkGroup</see>s this product points to.
            <br />
            All products in these groups will appear as <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkAssociation">LinkAssociation</see>s 
            with the groups' <see cref="T:Retalix.StoreServices.Model.Product.Associations.LinkCategory">LinkCategory</see> on it.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.MerchandiseCategory">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">IMerchandiseCategory</see> of this product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.TareWeightPercentages">
            <summary>
            Gets the <see cref="T:System.Decimal">TareWeightPercentages</see> of this product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.ProductAttributes">
            <summary>
            Gets dictionary of <see cref="T:Retalix.StoreServices.Model.Product.ProductAttribute.IProductAttribute">attributes</see> of this product. 
            the key of the dictionary must be the same as the key inside <see cref="T:Retalix.StoreServices.Model.Product.ProductAttribute.IProductAttribute">the attribute</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProduct.GetDescriptions(System.String)">
            <summary>
            Gets a list of the product descriptions.
            </summary>
            <param name="type">Type description</param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.IProduct.Calories">
            <summary>
            Gets or sets product calories info
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.IProductDao">
            <summary>
            Represents a data access object for <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> responsible for saving and retrieving products.
            </summary>
            <remarks>
            <para>
            The ProductDao provides the following services:
            <list type="bullet">
            <item>
            <description>Gets a product by an entity key.</description>
            </item>
            <item>
            <description>Gets list of products by a list entity keys.</description>
            </item>
            <item>
            <description>Gets a product by an <see cref="T:Retalix.StoreServices.Model.Product.Identifier">Identifier</see></description>
            </item>
            <item>
            <description>Adds a product</description>
            </item>
            <item>
            <description>Gets the number of products that match a certain criteria</description>
            </item>
            <item>
            <description>Gets the products that match a certain criteria and classification type</description>
            </item>
            <item>
            <description>Gets the products that match a certain criteria with paging</description>
            </item>
            <item>
            <description>Adds a list of products</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductDao.Get(System.String)">
            <summary>
            Gets a product by a given entity key.
            </summary>
            <param name="entityKey">
            The wanted product's <see cref="P:Retalix.StoreServices.Model.Product.IProduct.EntityKey">entity key.</see>.
            <remarks>This unique key used to retrieve a certain product from the database but not to invoke
            business activities (i.e. lookup).
            </remarks>
            </param>
            <returns>the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> corresponding to the entityKey, null if not found</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductDao.Get(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a collection of products that corresponds the given products' entityKeys.
            </summary>
            <param name="entityKeys">A list of wanted products' <see cref="P:Retalix.StoreServices.Model.Product.IProduct.EntityKey">entity keys</see></param>
            <remarks>This unique key used to retrieve a certain product from the database but not to invoke
            business activities (i.e. lookup).
            </remarks>
            <returns>the collection of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>s that match the given entityKeys, null if not found</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductDao.GetByIdentifier(Retalix.StoreServices.Model.Product.Identifier)">
            <summary>
            Gets a product by an <see cref="T:Retalix.StoreServices.Model.Product.Identifier">Identifier</see>
            </summary>
            <param name="productIdentifier">The product identifier to look for</param>
            <returns>An instance of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductDao.Save(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Saves a single product into the database.
            </summary>
            <param name="product">The <see cref="T:Retalix.StoreServices.Model.Product.IProduct">product </see> to save</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductDao.CountOfProductsSatisfyingCriteria(Retalix.StoreServices.Model.Product.Lookup.ProductSearchCriteria)">
            <summary>
            Finds the total count of the products by a various criteria.
            </summary>
            <remarks>For example, used to find how many items belong to the group "cheese" </remarks>
            <param name="productSearchCriteria">The <see cref="T:Retalix.StoreServices.Model.Product.Lookup.ProductSearchCriteria">ProductSearchCriteria</see></param>
            <returns>The total count of matched products.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductDao.CountOfProductsSatisfyingCriteriaPerCategoryTree(Retalix.StoreServices.Model.Product.Lookup.ProductSearchCriteria,System.String,System.Boolean)">
            <summary>
             Returns the number of products that match each <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">ICategory</see>.
            </summary>
            <returns>A collection that holds the the number of products that match each <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">ICategory</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductDao.CountOfProductsSatisfyingCriteriaPerCategoryTree(Retalix.StoreServices.Model.Infrastructure.Query.IQuery,System.String,System.Boolean)">
             <summary>
               ///<summary>
             Returns the number of products that match each <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">ICategory</see>.
            </summary>
            <returns>A collection that holds the the number of products that match each <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">ICategory</see></returns>
             </summary>
             <param name="query">search criteria</param>
             <param name="classificationType">hierarchy type to return</param>
             <param name="includeEmptyCategories">should include empty hierarchies</param>
             <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductDao.FindBySearchCriteria(Retalix.StoreServices.Model.Product.Lookup.ProductSearchCriteria,System.Int32,System.Int32)">
             <summary>
             Finds products according to various criteria.
             The search results are displayed in the defined page size. 
             </summary>
            <param name="productSearchCriteria"></param>
            <param name="pageNumber">requested page number</param>
            <param name="pageSize">number of Products in page</param>
             <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductDao.FindBySearchCriteria(Retalix.StoreServices.Model.Product.Lookup.ProductSearchCriteria)">
             <summary>
             Finds products according to various criteria, order and page size.
             </summary>
            <param name="productSearchCriteria"></param>
             <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductDao.FindByLookupCriteria(Retalix.StoreServices.Model.Infrastructure.Query.IQuery,Retalix.StoreServices.Model.Product.Lookup.ProductEagerLoadingCriteria)">
             <summary>
             Finds products according to various criteria,
             </summary>
            <param name="productQuery">query criteria sort and paging section</param>
            <param name="includeWith">properties to include with the product</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductDao.CountByLookupCriteria(Retalix.StoreServices.Model.Infrastructure.Query.IQuery)">
             <summary>
             get count of products according to various criteria
             </summary>
            <param name="productQuery">query criteria section</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct})">
            <summary>
            Saves the given set of products.
            </summary>
            <param name="products">A list of products to be saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductDao.Find``1(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Infrastructure.DataAccess.IQueryCriterion{Retalix.StoreServices.Model.Product.IProduct}},System.Collections.Generic.IEnumerable{Retalix.StoreServices.Infrastructure.DataAccess.IQuerySpecification{Retalix.StoreServices.Model.Product.IProduct}})">
            <summary>
            Executes IProduct query of role TRole
            </summary>
            <typeparam name="TRole">IQuery role</typeparam>
            <param name="criteria">IProduct query criteria to apply</param>
            <param name="specifications">IProduct query specifications to apply</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.IProductFactory">
            <summary>
            Represents a method used to create a new <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>.   
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.IProductFactory.Create(System.String)">
            <summary>
            Creates a new product by a specified EntityKey.
            </summary>
            <remarks>
            The given key is used to identify product uniquely for maintenance purposes.<b/>
            It is important to note that it is up to the retailer (who use this interface) to keep the following constrains:<b/>
            1. This key must be set during the creation of a product entity and it cannot be changed during the lifetime of a product.<b/>
            2. The uniqueness of this key is in the responsibility of the retailer who set it and there are no generation and validation methods that are built in the R10 core to support this.<b/> 
            </remarks>
            <param name="productEntityKey">The product ID.</param>
            <returns>the corresponding <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Product.Weight">
            <summary>
             Represents a composite weight value.
             </summary>
             <remarks>
             A weight in R10 is represented by a <see langword="decimal"/> value and a <see langword="string"/> that represent the unitOfMeasure.<b/>
             Using this representation it is possible to specify different weight scales such as "gr", "kg" or "kilogram" and compare or calculate composite scales. 
             Yet, as the specific unitOfMeasure are not specified yet, there is no way to make conversions between different unitOfMeasure(s).     
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Weight.Value">
            <summary>
             Gets or sets the weight value.
             For example : If weight is 10.33Kg then the weight's value equals to 10.33.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Product.Weight.UnitOfMeasureType">
            <summary>
             Gets or set the Unit of measure type.
             For example: If weight is 10.33Kg then the weight's unit of measure is Kilogram.
            </summary>
             <remarks>
             Each item has its own weight, if the item is sold in units, then its weight's unit of measure type equals to EA (Each),
             and its value will be set to the number of sold units.
             </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Product.Weight.#ctor(System.Decimal,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="unitOfMeasure"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.PromotionService.IApportionmentValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.IApportionmentValue.Amount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.IApportionmentValue.Funding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.IApportionmentValue.ReturnValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.PromotionService.IPromotionResourcePool">
            <summary>
            A resource pool represents a state of <see cref="T:Retalix.StoreServices.Model.PromotionService.PromotionResources.IPromotionResource">promotion resources</see>
            </summary> 
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.IPromotionResourcePool.Resources">
            <summary>
            The resources of this pool
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.PromotionService.IReward">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.IReward.PromotionId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.IReward.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.IReward.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.IReward.Apportionments">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.PromotionService.PromotionResources.IBusinessUnitResource">
            <summary>
            Business unit resource
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.PromotionResources.IBusinessUnitResource.BusinessUnitId">
            <summary>
            Business unit unique identifier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.PromotionResources.IContinuityHistoryResource.PreviousPurchaseQuantity">
            <summary>
            The quantity of the resource accumulated by previous purchases
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.PromotionService.PromotionResources.ICouponResource">
            <summary>
            Represents a scanned coupon 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.PromotionResources.ICouponResource.Barcode">
            <summary>
            Coupon barcode
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.PromotionService.PromotionResources.ICustomerAccountResource">
            <summary>
            Represents a customer account
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.PromotionService.PromotionResources.IProductResource">
            <summary>
            Represents an order product
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.PromotionResources.IProductResource.ProductId">
            <summary>
            Unique product Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.PromotionResources.IProductResource.NetPrice">
            <summary>
            Current price of the product. This price may change during reward calculation process to represent the discounted net price.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.PromotionService.PromotionResources.IPromotionContinuityResource">
            <summary>
            A continuity tracking of the resources that are required by a specific condition of a promotion
            </summary>
            <remarks>
            When a condition is marked with 'over multiple tickets' indication, is means that the condition's threshold
            can be met by resources that are acquired over multiple orders; e.g: products purchased over multiple customer orders.
            Until the condition threshold is met, it is required to keep track of the purchased resources, so when the following order
            is evaluated, all the purchase history of resources is accounted for.
            The promotion continuity resource functions as a <see cref="T:Retalix.StoreServices.Model.PromotionService.IPromotionResourcePool">promotion resource pool</see>, containing only
            the historic resources relevant to the specific continuity condition.
            If the less common scenario, when a single promotion has multiple continuity conditions, each condition will have a corresponding 
            IPromotionContinuityResource with its own resource pool.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.PromotionService.PromotionResources.IPromotionResource">
            <summary>
            A resource represents any aspect of a retail interaction that may affect reward calculation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.PromotionResources.IPromotionResource.SequenceNumber">
            <summary>
            A sequence number of a resource.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.PromotionResources.IPromotionResource.Id">
            <summary>
            A unique id of the resource in the <see cref="T:Retalix.StoreServices.Model.PromotionService.IPromotionResourcePool">resource pool</see>      
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PromotionService.PromotionResources.IPromotionResource.Quantity">
            <summary>
            The quantity of the resource
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IGs1DateAiCondition.ApplicationIdentifier">
            <summary>
            Stores the Application Identifier for Date of Production
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IGs1DateAiCondition.Name">
            <summary>
            Name of the Type
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Conditions.IGs1DateAiCondition.IsApplicable(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Checks if the condition satisfies
            </summary>
            <param name="orderLine"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.IItemRewardFailureCondition">
            <summary>
            Item Reward Failure Condition 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.IExpressionContextSegment">
            <summary>
            Segment context data for evaluating Expressions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IExpressionContextSegment.SegmentId">
            <summary>
            Segment Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IExpressionContextSegment.SegmentName">
            <summary>
            Segment Name
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.ILoyaltyCardCondition">
            <summary>
            The condition is met when the customer has LoyaltyCardCondition
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.IRegistrationRequiredCondition">
            <summary>
            The condition is met when the customer has Registration for the promotion
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.IRetailSegmentsCondition">
            <summary>
            The condition is met when the 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.ThresholdRoundingMethod">
            <summary>
            Configure rounding option so that customers who are close
            to the condition threshold will be able to get a reward.   
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.IContinuable">
            <summary>
            Describe a continuable condition , i.e spend X over multiple tickets to met the condition.
            In the last ticket of getting to the required accumulation the condition is met   
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IContinuable.ContinuityStrategy">
            <summary>
            Describe continuity strategy, i.e accumulate over multiple tickets
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Conditions.IContinuable.CreateContinuityLine(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Decimal)">
            <summary>
            Create continuity line that represent customer accumulation value
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.IAccountCondition">
            <summary>
            the condition will be met when the  <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">Customer</see>
            is list to <see cref="T:Retalix.StoreServices.Model.Customer.Loyalty.ILoyaltySubscription">Loyalty program</see> and hold
            the required value in matched by the condition <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionCriterion">Criteria</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IAccountCondition.ThresholdAppliedOn">
            <summary>
            can be applied on CurrentBalance or the OpenBalance of the specify <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.IAccountType">Account</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IAccountCondition.Values">
            <summary>
            the values need to be met in the <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.IAccountType">Account</see>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.ICouponCondition">
            <summary>   
            the condition is met when the condition <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionCriterion">criteria</see> 
            is met for a  <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine">coupons</see> on the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.ICouponCondition.Thresholds">
            <summary>
            the required coupon threshold 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.IDayTimeCondition">
            <summary>
            describe a condition that will be met against  <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">CustomerOrder</see> 
            creation date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IDayTimeCondition.DayTimeCriterias">
            <summary>
            the time and day the condition is applicable , between all criteria 
            there is an "or" operand 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IDayTimeCondition.EligibilityByItemSellTime">
            <summary>
            determines whether the condition will apply per OrderLine or it will apply on the whole CustomerOrder
            true value stands for each OrderLine
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Conditions.IDayTimeCondition.AddCriteria(System.DayOfWeek)">
            <summary>
            add criteria with the required day
            </summary>
            <param name="activeDay"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Conditions.IDayTimeCondition.IsMet(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Returns True when condition is met for the given <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see>.
            </summary>
            <remarks>
            Consider the given order line to see if there is a specific match case.
            </remarks>
            <returns>true if met, false otherwise.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Conditions.IDayTimeCondition.TryMet(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine,System.Decimal)">
            <summary>
            try to met the condition if not successive <see cref="T:Retalix.StoreServices.Model.Promotion.ConditionNotMetExecption">ConditionNotMetExecption</see> will be thrown  
            </summary>
            <param name="orderLine"></param>
            <param name="count">number of match</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.ISegmentCondition">
            <summary>
            the condition is met when the expression value is matched 
            against  a <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">Customer</see> with a<see cref="T:Retalix.StoreServices.Model.Customer.Segmentation.ISegment">Segment</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.ISegmentCondition.Value">
            <summary>
            the value of the segment formula
            example : SegmentId == '1' and SegmentId == '2'
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Conditions.ISegmentCondition.IsMet(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.Conditions.IExpressionContextSegment})">
            <summary>
            Evaluating is met directly by getting the customer segments.
            </summary>
            <param name="customerSegments">The <see cref="T:Retalix.StoreServices.Model.Promotion.Conditions.IExpressionContextSegment">customerSegments</see> For evaluating using IExpression.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.ISpendCondition">
            <summary>
            describe a monetary spend condition , i.e spend X to met the condition
            the accumulation will be on <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">OrderLine</see> Amount     
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.ISpendCondition.Values">
            <summary>
            the required threshold to be met
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.ISpendCondition.MinimumThreshold">
            <summary>
            Minimum threshold required for the condition to be met
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.ISpendCondition.CalculateOnlyFromMinimumThreshold">
            <summary>
            start the threshold calculation from the min threshold value
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.ISpendCondition.RoundToLastTriggerLevel">
            <summary>
            round the spend to the last trigger value
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.ISpendCondition.ThresholdRoundingMethod">
            <summary>
            Configure rounding option so that customers who are close
            to the threshold will be able to get a reward
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.ISpendCondition.ThresholdApplies">
            <summary>
            describe if the threshold can be applied to
            AnyItem,SameItem
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.ISpendCondition.IncludeProhibitDiscountItems">
            <summary>
            enables discount on "Prohibit Discount" Items
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.ISpendCondition.ApplyOnGrossPrice">
            <summary>
            consieer the the gorss price of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">order line</see> amount for the 
            thresold count        
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.ISpendCondition.ApplyOnItemWithoutModifiers">
            <summary>
            Indicates whether item modifiers' extra price take part in spend threshold
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.ISpendCondition.Gs1DateAiCondition">
            <summary>
            Gs1 Production date time condition
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.IStoreCondition">
            <summary>
            allow to filter the   <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">Promotion</see> by <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see> 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.ITenderSpendCondition">
            <summary>
            describe a monetary spend condition , i.e spend X to met the condition
            the accumulation will be on   <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">Payment term</see> Amount     
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.ITenderSpendCondition.Values">
            <summary>
            the required threshold to be met
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.IUnitCondition">
            <summary>
            repress a unit purchase condition
            i.e buy 2 products to Met the condition
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IUnitCondition.Thresholds">
            <summary>
            the threshold value need to met the condition
            if case more then one threshold exist , it mean a level condition,
            buy more get more
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IUnitCondition.MinimumThreshold">
            <summary>
            Minimum threshold required for the condition to be met
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IUnitCondition.CalculateOnlyFromMinimumThreshold">
            <summary>
            start the threshold calculation from the min threshold value
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IUnitCondition.ThresholdApplies">
            <summary>
            describe if the threshold can be applied to
            AnyItem,SameItem
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IUnitCondition.IncludeProhibitDiscountItems">
            <summary>
            enables discount on "Prohibit Discount" Items
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IUnitCondition.Gs1DateAiCondition">
            <summary>
            Gs1 Production date time condition
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.IUnitOfMeasureCondition">
            <summary>
            describe a unit of measures  condition , i.e buy X kgs to met the condition
            the accumulation will be on   <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">OrderLine</see> Quantity     
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IUnitOfMeasureCondition.Values">
            <summary>
            the required threshold to be met
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IUnitOfMeasureCondition.MinimumThreshold">
            <summary>
            Minimum threshold required for the condition to be met
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IUnitOfMeasureCondition.CalculateOnlyFromMinimumThreshold">
            <summary>
            start the threshold calculation from the min threshold value
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IUnitOfMeasureCondition.ThresholdApplies">
            <summary>
            describe if the threshold can be applied to
            AnyItem,SameItem
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IUnitOfMeasureCondition.RoundToLastTriggerLevel">
            <summary>
            round the value , i.e for every 1kg , and threshold is 1.5 , it will be round to 1kg
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IUnitOfMeasureCondition.IncludeProhibitDiscountItems">
            <summary>
            enables discount on "Prohibit Discount" Items
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IUnitOfMeasureCondition.Gs1DateAiCondition">
            <summary>
            Gs1 Production date time condition
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.IManulyTriggeredCondition">
            <summary>
            the condition is met when the promotion was requested by external source
            to be triggered
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Conditions.IManulyTriggeredCondition.ApplyOnAllPromotionLines">
            <summary>
            Reward will apply on all the lines according to other conditions,
            or only on the specific line from the  <see cref="P:Retalix.StoreServices.Model.Promotion.Instructions.IManualPromotionInstruction.OrderLineSequenceNumber">instruction</see>. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Conditions.ITenderStateCondition">
            <summary>
             that  condition is met when the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">CustomerOrder</see> 
            is in in tender mode , i.e when customer is read to pay and transaction is read to be finished
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ExternalCouponData">
            <summary>
             Represents the Coupon Series description. 
            </summary>    
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.Exceptions.CouponExtensibleException">
            <summary>
            Add Extensibility to coupon Add 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.GracePeriod">
            <summary>
            Allow accepting the coupon X days before its start date and y days after its end date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.GracePeriod.StartGracePeriod">
            <summary>
            Accept the coupon X days before it's start date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.GracePeriod.EndGracePeriod">
            <summary>
            Accept the coupon X days after it's expiry date
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponType">
            <summary>
            indicate a type for a coupon instance
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.IDatabarCouponDecoder">
            <summary>
            response for decode data bar spec coupon barcode
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.IDatabarCouponDecoder.Decode(System.String)">
            <summary>
            give raw barcode and return parsed data
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponRuleCondition">
            <summary>
            condition for Business rules on coupons
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponRuleCondition.SeriesIds">
            <summary>
            the relevant <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries">coupon series</see>id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponRuleCondition.CouponTypes">
            <summary>
            the type of the coupon :
             Data bar
             UPC5
             Store
             Manual
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ProductManufacture.IProductManufacture">
            <summary>
            describe identities for manufacture code and family code for manufacture coupons
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ProductManufacture.IProductManufacture.ProductEntityKey">
            <summary>
            the relate <see cref="T:Retalix.StoreServices.Model.Product.IProduct">product</see> entity key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ProductManufacture.IProductManufacture.Code">
            <summary>
            the manufacture code of the product
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ProductManufacture.IProductManufacture.FamilyCode">
            <summary>
            the family code of the product
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ProductManufacture.IProductManufactureDao">
            <summary>
            repository for all  <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ProductManufacture.IProductManufacture">ProductManufacture</see> 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ProductManufacture.IProductManufactureDao.ByProductKeys(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            get by <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> keys
            </summary>
            <param name="productKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ProductManufacture.IProductManufactureDao.SaveOrUpdate(Retalix.StoreServices.Model.Promotion.Coupons.ProductManufacture.IProductManufacture)">
            <summary>
            save product Manufacture
            </summary>
            <param name="productManufacture"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ProductManufacture.IProductManufactureDao.Get(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            get by product
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ProductManufacture.IProductManufactureFactory">
            <summary>
            single entry point for create <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ProductManufacture.IProductManufacture">ProductManufacture</see> 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ProductManufacture.IProductManufactureFactory.Create(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            create ProductManufacture
            </summary>
            <param name="productEntityKey"></param>
            <param name="code"></param>
            <param name="familyCdoe"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.BusinessRules.ICouponOverrideRestrictionBehavior.Direction">
            <summary>
             represents increase or decrease in price change. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.BusinessRules.ICouponOverrideRestrictionBehavior.MaxPercentageChange">
            <summary>
            The change of the initial price amount by percentage. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.BusinessRules.ICouponOverrideRestrictionBehavior.MaxFixedValueChange">
            <summary>
            The change of the initial price amount by fixed value. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition">
            <summary>
            Represents the Coupon definition in the database.
            </summary>
            <remarks>See also: <seealso cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">ICoupon</seealso>.</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition.Descriptions">
            <summary>
            Gets or sets a collection of coupon <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription">descriptions</see>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription">CouponDescriptions</see></value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition.Message">
            <summary>
            Gets or sets a configurable <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">message</see> to print the coupon (coupon visualization).
            </summary>
            <value>An <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">IMessage</see> that represents the message for coupon.</value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition.TenderId">
            <summary>
            Gets the tender ID used/reported when the coupon reward is created as a tender. 
            (If it does not exist at the coupon level, then it is taken from the coupon series level).
            </summary>
            <value>A <see cref="T:System.Int32">integer</see> that contains the tender unique ID. Default value is <see langword="null"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition.ManualRewardLowerBound">
            <summary>
            Gets the minimum reward allowed to be entered manually. (If it does not exist at the coupon level, then it is taken from the series level).
            </summary>
            <value>A <see cref="T:System.Decimal">decimal</see> value that contains the upper limit for manual rewards. The default value is <see langword="null"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition.ManualRewardUpperBound">
            <summary>
            Gets the maximum reward allowed to be entered manually. (If it does not exist at the coupon level, then it is taken from the series level).
            </summary>
            <value>A <see cref="T:System.Decimal">decimal</see> that contains the lower limit for manual rewards. The default value is <see langword="null"/></value>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition.Blocked">
            <summary>
            Gets or sets a boolean value indicating that the coupon is blocked from scanning.
            </summary>
            <value><see langword="true"/> If the coupon in blocked; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition.MemberCardRequired">
            <summary>
            Gets or sets a boolean value indicating that the coupon is valid only after the coupon members card is scanned. 
            (If it does not exist at the coupon level, then it is taken from the coupon series level)
            </summary>
            <value><see langword="true"/> if a loyalty card is required; otherwise <see langword="false"/>. the default is <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition.Type">
            <summary>
            Gets or sets the type of the coupon. 
            (If it does not exist at the coupon level, then it is taken from the series level)
            </summary>
            <value>A <see cref="T:System.String"/> value. For example : "Virtual" for virtual coupon, and "Undefined" if undefined./>.</value> 
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition.Equals(System.Object)">
            <summary>
            Compares two objects.
            </summary>
            <param name="obj">The compared Object.</param>
            <returns><see langword="true"/> If objects are equal. Otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition.Equals(Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition)">
            <summary>
            Compares two objects.
            </summary>
            <param name="other"><see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition">Coupon definition</see> to compare with</param>
            <returns><see langword="true"/> If objects are equal. Otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition.GetHashCode">
            <summary>
            Calculates the hash code of the object.
            </summary>
            <returns>An integer number representing the hash code of the object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceDefinition.GetObjectHashCode(System.Object)">
            <summary>
            Calculates the hash code of the object.
            </summary>
            <param name="o">The Object for which the hash code is calculated.</param>
            <returns>An integer number representing the hash code of the object.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription">
            <summary>
             Represents the Coupon Series description. 
            </summary>    
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription.#ctor">
            <summary>
            The Default constructor.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription.#ctor(Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription)">
            <summary>
            The Constructor used for the coupon instance.
            </summary>
            <param name="couponSeriesDescription">The <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription">description</see> object</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription.DefaultValue(System.Collections.Generic.ICollection{Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription})">
            <summary>
            Gets the default description from the list.
            </summary>
            <param name="descriptions"><see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription">CouponDescriptions</see></param>
            <returns>The <see cref="T:System.String">string</see> of default description.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription.CreateDefault(System.String)">
            <summary>
            Creates a default Coupon Series Short Description for the 'en-US' culture.
            </summary>
            <param name="value">The default description value.</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription">CouponDescription</see> object.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs">
            <summary>
             Represents the Coupon factory arguments.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.OfferId">
            <summary>
            Gets or sets the coupon offer ID.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the offer Id.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.Series">
            <summary>
            Gets or sets the coupon series object.
            </summary>
            <value>An <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries">ICouponSeries</see></value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.Message">
            <summary>
            Gets or sets a configurable <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">message</see> for printing the coupon (coupon visualization).
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">IMessage</see> that represents the coupon message.</value> 
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.Descriptions">
            <summary>
            Gets or sets a collection of coupon <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription">descriptions</see>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription">CouponDescriptions</see></value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.MaxAllowedScans">
            <summary>
            Gets or sets the maximum number of scans.
            </summary>
            <value>An <see cref="T:System.Int32">Integer</see> that represents the maximum number of scans allowed.
             Default value is <see langword="null"/>.</value> 
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.TenderId">
            <summary>
            Gets or sets the tender ID to use/report when the coupon reward is created as a tender. 
            </summary>
            <value>An <see cref="T:System.Int32">Integer</see> representing the tender identifier. The default value is <see langword="null"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.EmbeddedRewardAmountForManualEntry">
            <summary>
            Gets or sets the value embedded in barcode, which when scanned prompts a manual entry popup at the POS.
            </summary>
            <value>An <see cref="T:System.Decimal">decimal</see>  representing the reward amount for manual entry popups. The default value is <see langword="null"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.Blocked">
            <summary>   
            Gets or sets a boolean value indicating that all the coupons in the series are blocked from scanning.
            </summary>
            <value><see langword="true"/> when all coupons is blocked under this series; otherwise <see langword="false"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.ManualRewardLowerBound">
            <summary>
            Gets or sets a decimal value indicating the minimum reward allowed for manual entry.
            </summary>
            <value>A <see cref="T:System.Decimal">decimal</see> that contains the upper bound for manual reward. Default value is <see langword="null"/></value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.ManualRewardUpperBound">
            <summary>
            Gets or sets the maximum reward that is allowed for manual entry.
            </summary>
            <value>A <see cref="T:System.Decimal">decimal</see> that contains the lower limit for manual rewards. The default value is <see langword="null"/></value>                
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.IsCoupon">
            <summary>
            Gets or sets a boolean value indicating that a coupon was found.
            </summary>
            <value><see langword="true"/> when a coupon is found; otherwise <see langword="false"/></value>         
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.MemberCardRequired">
            <summary>
            Gets or sets a boolean value indicating that a coupon is valid when the coupon members card is scanned.
            </summary>
            <value><see langword="true"/> If a loyalty card is required; otherwise <see langword="false"/>. The default is <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.Type">
            <summary>
            Gets or sets the type of the coupon. 
            (If it does not exist at the coupon level, then it is taken from the series level)
            </summary>
            <value>A <see cref="T:System.String"/> value. For example : "Virtual" for virtual coupon, and "Undefined" if undefined./>.</value> 
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.#ctor">
            <summary>
            The default coupon arguments creator.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.#ctor(Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries)">
            <summary>
            Creates arguments from the coupon series.
            </summary>
            <param name="couponSeries"><see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries">ICouponSeries</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs.#ctor(Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance)">
            <summary>
            Creates arguments from the coupon. 
            </summary>
            <param name="couponInstance"><see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">ICoupon</see></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceIdentifier">
            <summary>
             Represents the identifier of a Coupon Instance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceIdentifier.OfferId">
            <summary>
            Gets or sets the Offer ID of a coupon.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the offer Id.</value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceIdentifier.Series">
            <summary>
            Gets or sets the series object.
            </summary>
            <value>An <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries">ICouponSeries</see></value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceIdentifier.#ctor">
            <summary>
            Constructs the Coupon Identifier.
            </summary>        
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceIdentifier.#ctor(System.String,Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries)">
            <summary>
            Constructs the Coupon Identifier.
            </summary>
            <param name="offerId">The offer ID.</param>
            <param name="series">The <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries">series</see>.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceIdentifier.Equals(System.Object)">
            <summary>
            Compares two objects.
            </summary>
            <param name="obj">The compared Object.</param>
            <returns><see langword="true"/> if objects are equals. Otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceIdentifier.Equals(Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceIdentifier)">
            <summary>
            Compares two objects.
            </summary>
            <param name="other"><see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceIdentifier">Coupon identifier</see> to compare with</param>
            <returns><see langword="true"/> If objects are equals. Otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceIdentifier.GetHashCode">
            <summary>
            Calculates the hash code of the object.
            </summary>
            <returns>An integer number representing the hash code of the object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceIdentifier.ToString">
            <summary>
            Converts the identifier to a string value.
            </summary>
            <returns>Formatted string that contains the coupon identifier. For example, coupon series ID [1] offer ID [22] </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription">
            <summary>
             Represents the Coupon Series description object.
            </summary>    
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription.Type">
            <summary>
            Gets or sets the description type.
            </summary>
            <value>A <see cref="T:System.String">String</see> containing the description type. For example, "Short", "Long"</value>                
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription.LanguageCode">
            <summary>
            Gets or sets the language code of the description.
            </summary>
            <value>A <see cref="T:System.String">String</see> containing the language code.</value>                        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription.Culture">
            <summary>
            Gets or sets the culture of the description.
            </summary>
            <value>A <see cref="T:System.String">String</see> containing the culture code.</value>                                
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription.Value">
            <summary>
            Gets or sets the value of the description.
            </summary>
            <value>A <see cref="T:System.String">String</see> containing the description.</value> 
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription.Equals(System.Object)">
            <summary>
            Compares two objects.
            </summary>
            <param name="obj">The compared Object.</param>
            <returns><see langword="true"/> if objects are equals. Otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription.Equals(Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription)">
            <summary>
            Compares two objects.
            </summary>
            <param name="other"><see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription">Coupon description</see> to compare with</param>
            <returns><see langword="true"/> If objects are equal. Otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription.GetHashCode">
            <summary>
            Calculates the hash code of the object.
            </summary>
            <returns>An integer number represents the hash code of the object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription.GetObjectHashCode(System.Object)">
            <summary>
            Calculates the hash code of the object.
            </summary>
            <param name="o">The compared object.</param>
            <returns>An integer number representing the hash code of the object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription.DefaultValue(System.Collections.Generic.ICollection{Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription})">
            <summary>
            Gets the default Description from a list.
            </summary>
            <param name="descriptions">A <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription">CouponSeriesDescription</see></param>
            <returns>The default description value</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription.CreateDefault(System.String)">
            <summary>
            Creates a default Coupon Series with Short Description win the 'en-US' culture.
            </summary>
            <param name="value">The default description value.</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription">CouponSeriesDescription</see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs">
            <summary>
            Represents the factory arguments for the Coupon Series.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.CouponSeriesId">
            <summary>
            Gets or sets the coupon series external ID.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the series external unique ID.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.DataPatternId">
            <summary>
            Gets or sets the data pattern external ID.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the data pattern unique id.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.Message">
            <summary>
            Gets or sets the coupon series <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">printing template</see>.
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">IMessage</see> that determines the message to be printed.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.Descriptions">
            <summary>
            Gets or sets the collection of coupon series <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription">names</see>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription">CouponSeriesDescription</see></value>.
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.MaxAllowedScans">
            <summary>
            Gets or sets the maximum number of coupons that can be scanned in a single transaction.
            </summary>
            <remarks>If value is NULL means that no limitation is exists</remarks>
            <value>An <see cref="T:System.Int32">Integer</see> that represents the maximum number of scans allowed. Default value is <see langword="null"/>.</value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.TenderId">
            <summary>
            Gets or sets the tender ID to use/report when creating the coupon reward as a tender. 
            </summary>
            <value>An <see cref="T:System.Int32">Integer</see> representing the tender identifier. The default value is <see langword="null"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.EmbeddedRewardAmountForManualEntry">
            <summary>
            Gets or sets the decimal value embedded in barcode to prompt a manual entry popup in POS
            </summary>
            <value>An <see cref="T:System.Decimal">decimal</see> that represents the reward amount for manual entry popup. Default value is <see langword="null"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.Blocked">
            <summary>   
            Gets or sets a Boolean value indicating if all the coupons in the series are blocked from scanning.
            </summary>
            <value><see langword="true"/> When all the coupons in the series is blocked, otherwise <see langword="false"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.CouponIssuingByExternalSystem">
            <summary>
            Gets or sets a Boolean value indicating if a coupon series's coupons were issued by an external system.
            </summary>
            <value><see langword="true"/> When a coupon is issued by external system; otherwise <see langword="false"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.ExternalBarcodeGenerationRequired">
            <summary>
            Gets or sets a Boolean value indicating if a coupon series's coupons were issued by an external system.
            </summary>
            <value><see langword="true"/> When a coupon is issued by external system; otherwise <see langword="false"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.AcceptInSaleMode">
            <summary>
            Gets or sets a Boolean value indicating if a coupon is allowed in Sale mode.
            </summary>
            <value><see langword="true"/> if the series is accepted in sale mode; otherwise <see langword="false"/>. Default value is <see langword="null"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.AcceptInTenderMode">
            <summary>
            Gets or sets a Boolean value indicating if the coupon is allowed in tender mode.
            </summary>
            <value><see langword="true"/> If the series is accepted in tender mode; otherwise <see langword="false"/>. Default value is <see langword="null"/></value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.ManualRewardLowerBound">
            <summary>
            Gets or sets a decimal value indicating the minimum reward allowed for manual entry.
            </summary>
            <value>A <see cref="T:System.Decimal">decimal</see> that contains the upper limit for manual reward. The default value is <see langword="null"/></value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.ManualRewardUpperBound">
            <summary>
            Gets or sets a decimal value indicating the maximum reward allowed for manual entry.
            </summary>
            <value>A <see cref="T:System.Decimal">decimal</see> that contains the lower bound for manual reward. Default value is <see langword="null"/></value>                
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.MemberCardRequired">
            <summary>
            Gets or sets a boolean value indicating if a coupon is valid only when the coupon members card is scanned. 
            </summary>
            <value><see langword="true"/> If a loyalty card is required; otherwise <see langword="false"/>. the default is <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.ExternalSystemValidationRequired">
            <summary>
            Gets or a boolean value indicating if external system validation is required.
            </summary>
            <value><see langword="true"/> If external system validation is required; otherwise <see langword="false"/>. the default is <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.AllowOverride">
            <summary>
            Gets or a boolean value indicating if a manual coupon override is allowed.
            </summary>
            <value><see langword="true"/> If an override is allowed; otherwise <see langword="false"/>. the default is <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.FallBackRewardType">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.IFallBackStrategy">strategy</see> used to handle the reward if promotion does not exist for the coupon.
            </summary>
            <value>A <see cref="T:System.String">string</see> that represents the fall back strategy. See also <seealso cref="T:Retalix.StoreServices.Model.Promotion.Coupons.IFallBackStrategy">IFallBackStrategy</seealso></value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.FallBackAssociatePromotionGroup">
            <summary>
             the associate promotion group the fallback promotion will be attach to
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.FallBackRewardAccountId">
            <summary>
            Gets or sets the account ID to handle the reward if a promotion does not exist for the coupon.
            </summary>
            <value>A <see cref="T:System.String">string</see> that represents the member account ID used in the fall back strategy. See also <seealso cref="T:Retalix.StoreServices.Model.Promotion.Coupons.IFallBackStrategy">IFallBackStrategy</seealso></value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.SameBarcodeMaxAllowedScans">
            <summary>
            Gets or sets the maximum number of scans allowed for the same barcode restriction.
            </summary>
            <value>An <see cref="T:System.Int32">Integer</see> representing the maximum number of scans allowed with the same barcode per transaction.
             Default value is <see langword="null"/>.</value>    
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.RedemptionPolicy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.RedemptionSegmentation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs.Type">
            <summary>
            Gets the coupon type>
            </summary>
            <value>A <see cref="T:System.String"/> value. For example : "Virtual" for virtual coupon, and "Undefined" if undefined./>.</value> 
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon">
             <summary>
            A coupon instance is a refinement of a coupon series. The coupon instance unique identifiers are the 'Series ID' and 'Offer ID'.
            The coupon instance unique identifier is defined as the promotion's condition\reward, which allows the promotion engine 
            to identify which promotion is triggered when this coupon is scanned, or as a promotion's reward. 
            Multi coupon instances are linked to a single coupon series and their properties are inherited from the series properties. 
            However, some properties can be overridden by the instance properties, for example, printing message, tender ID in case of a fallback scenario etc.).
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon.Identifier">
            <summary>
            Gets or sets the identifier of the coupon.
            </summary>
            <value>A <see cref="T:System.Guid">Guid</see> that contains the identifier.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon.Barcode">
            <summary>
            Gets the full barcode of the coupon.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains full barcode.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon.SeriesId">
            <summary>
            Gets or sets the related coupon series ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon.OfferId">
            <summary>
            Gets or sets the related coupon offer ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon.RewardValue">
            <summary>
            Gets or sets the attached reward value.
            </summary>
            <value>A <see cref="T:System.Decimal">decimal</see> that represents the value of the reward.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon.StartDate">
            <summary>
            Gets oe sets the start date of the coupon.
            </summary>
            <value>A <see cref="T:System.DateTime">DateTime</see> that contains the start date from which the coupon is valid. 
            The default is <see langword="null"/></value>.
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon.EndDate">
            <summary>
            Gets or sets the end date of the coupon.
            </summary>
            <value>A <see cref="T:System.DateTime">DateTime</see> that contains the end date from which the coupon is not valid. 
            The default is <see langword="null"/></value>.
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon.Blocked">
            <summary>
            Gets or sets a boolean value indicating if the coupon is blocked for use.
            </summary>
            <value><see langword="true"/> If the coupon in blocked; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon.RedemptionCount">
            <summary>
            Gets or sets value indicating  the coupon redemption count.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon.RedemptionDate">
            <summary>
            the date the coupon was redeem
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon.CustomerId">
            <summary>
            Gets or sets  the customer who issued the coupon
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceCriteria">
            <summary>
            Represents the coupons search criteria.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceCriteria.OfferId">
            <summary>
            Gets or sets the coupon offer ID.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the offer Id.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceCriteria.SeriesId">
            <summary>
            Gets or sets the coupon series ID.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the series Id.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceCriteria.Description">
            <summary>
            Gets or sets the coupon description.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the description of coupon.</value>        
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceCriteria.SetLimit(System.Int32,System.Int32)">
            <summary>
            Gets the limitation number of coupons for paging.
            </summary>
            <param name="firstResultIndex">Index of the first result</param>
            <param name="skipResultAmount">Number of results to skip</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceCriteria.IsLimited">
            <summary>
            Gets a boolean value indicating if the number of coupons is limited for paging.
            </summary>
            <value><see langword="true"/> If result should be limited; otherwise <see langword="false"/>.</value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceCriteria.FirstResultIndex">
            <summary>
            Gets the index of the first result.
            </summary>
            <value>An <see cref="T:System.Int32">integer</see> that contains index of first result.</value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceCriteria.MaxResultAmount">
            <summary>
            Gets a maximum coupon index limited for paging.
            </summary>
            <value>A <see cref="T:System.Int32">integer</see> that contains the maximum records that should exists in search result.</value>                
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceCriteria.IncludeCount">
            <summary>
            Gets a boolean value indicating if the count should be included in the result.
            </summary>
            <value><see langword="true"/> if count should be included; otherwise <see langword="false"/>.</value>                
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceCriteria.OfferIdSortBy">
            <summary>
            Gets the sorting type, either ascending or descending, by the by Offer ID.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the ordering type.</value>                
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponDao">
            <summary>
            Represents a single entry for coupon data access.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponDao.GetInstacneCoupons(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets attached coupons for the single instance.
            </summary>
            <param name="offerId"></param>
            <param name="seriesId"></param>
            <param name="customerIds"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponDao.Delete(Retalix.StoreServices.Model.Promotion.Coupons.ICoupon)">
            <summary>
            Deletes coupon.
            </summary>
            <param name="coupon"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponDao.SaveOrUpdate(Retalix.StoreServices.Model.Promotion.Coupons.ICoupon)">
            <summary>
            Saves or updates coupon.
            </summary>
            <param name="coupon"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponDao.CouponExist(System.String,System.String)">
            <summary>
            Check if a coupon exists for the specified instance.
            </summary>
            <param name="offerId"></param>
            <param name="seriesId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponDao.GetByBarcode(System.String)">
            <summary>
            Gets the coupons by barcode.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponDao.GetByIdentifier(System.Guid)">
            <summary>
            Gets the coupon by identifier.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponDao.All">
            <summary>
            Get all coupons entities.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponDao.DeleteAllExpired(System.DateTime)">
            <summary>
            Deletes coupons for which the end date has passed the defined date.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponFactory">
            <summary>
            coupon creator
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponFactory.Create(System.String,System.String,System.String)">
            <summary>
            Creates a single coupon.
            </summary>
            <param name="barcode"></param>
            <param name="offerId"></param>
            <param name="seriesId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponFactory.CreateCouponInstance(Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs)">
            <summary>
            Creates a Coupon Instance from the CouponInstanceFactoryArgs.
            </summary>
            <param name="couponInstacneFactoryArgs">Coupon Series Arguments <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneFactoryArgs"/></param>
            <returns>A Coupon Instance <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponFactory.CreateCouponSeries(Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs)">
            <summary>
            Creates a Coupon Series from the CouponSeriesFactoryArgs.
            </summary>
            <param name="couponSeriesArgs">Coupon Series Arguments <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesFactoryArgs"/></param>
            <returns>The Coupon Series <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries"/></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">
            <summary>
            A coupon is a full barcode which is linked to a coupon instance. Its unique identifier is considered its full barcode.
            A coupon has its own validity period, reward value, and an indication whether it is active or blocked.
            When a coupon is scanned at the POS, if it exists in the data repository, then the reward and other parameters are retrieved. 
            If the coupon does not exist in the data repository, then the reward and other parameters are taken from the coupon barcode\promotion definition.
            </summary>
             <summary><para></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.Identifier">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceIdentifier">coupon identifier</see> , which includes the coupon instance.
            </summary>
            <value>An <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstanceIdentifier">CouponIdentifier</see> that represents the identifier of the coupon.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.Ik">
            <summary>
            Gets the coupons internal key.
            </summary>
            <value>A <see cref="T:System.Int32">integer</see> that contains the Coupon unique ID.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.Descriptions">
            <summary>
            Gets the collection of Coupon descriptions <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription"/> of the coupon.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponInstacneDescription">CouponDescription</see></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.Coupons">
            <summary>
            Gets the collection of connected instances <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon"/> of the coupons.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon">ICouponInstance</see></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.Message">
            <summary>
            Gets the printing <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">template </see> of the coupon. 
            (If it does not exist at the coupon level, then it is taken from the series level).
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">configurable message</see></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.TenderId">
            <summary>
            Gets the tender ID that is used/reported when creating the coupon reward as a tender 
            (If it does not exist at the coupon level, then it is taken from the series level).
            </summary>
            <value>A <see cref="T:System.Int32">integer</see> that contains the tender unique ID. Default value is <see langword="null"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.Blocked">
            <summary>
            Gets a Boolean value indicating if the coupon is blocked from scanning.
            </summary>
            <value><see langword="true"/> if the coupon in blocked; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.ManualRewardLowerBound">
            <summary>
            Gets the minimum reward allowed for manual entry (If it does not exist at the coupon level, then it is taken from the series level).
            </summary>
            <value>A <see cref="T:System.Decimal">decimal</see> that contains the upper bound for manual reward. Default value is <see langword="null"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.ManualRewardUpperBound">
            <summary>
            Gets the maximum reward allowed for manual entry (if it does not exist at the coupon level, then it is taken from the series level).
            </summary>
            <value>A <see cref="T:System.Decimal">decimal</see> that contains the lower bound for manual reward. Default value is <see langword="null"/></value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.MemberCardRequired">
            <summary>
            Gets a Boolean value indicating that the coupon is valid, when the coupon members card is scanned. 
            (If it does not exist at the coupon level, then it is taken from the series level)
            </summary>
            <value><see langword="true"/> if a loyalty card is required; otherwise <see langword="false"/>. the default is <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.Type">
            <summary>
            Gets the type of the coupon. 
            (If it does not exist at the coupon level, then it is taken from the series level)
            </summary>
            <value>A <see cref="T:System.String"/> value. For example : "Virtual" for virtual coupon, and "Undefined" if undefined./>.</value> 
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.CouponInstanceDefinition">
            <summary>
            Gets the coupon definition <see cref="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.CouponInstanceDefinition"/>, 
            which contains the attributes that are from the coupon level only. (No override attributes from the series level).
            </summary>
            <value>A <see cref="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.CouponInstanceDefinition">CouponDefinition</see></value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.GenerateBarcode(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDao,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The barcode is generated by the data pattern and coupon offer ID.
            </summary>
            <param name="dataPatternDao">Data pattern</param>
            <param name="encodeData">encodeData</param>
            <returns>barcode</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.Merge(Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance)">
            <summary>
            The merge between the coupons.
            </summary>
            <param name="couponInstance"><see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">coupon</see> to merge.</param>
            <returns>The merged coupon <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance"/>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.GetAttachedPromotions(Retalix.StoreServices.Model.Promotion.IPromotionDao,System.String)">
            <summary>
            Gets the attached promotions for the coupon.
            </summary>
            <param name="promotionDao">Promotions <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionDao">data access</see>.</param>
            <param name="barcode"> </param>
            <returns>A collection of <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotions</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.GetCouponByBarcode(System.String)">
            <summary>
            Gets the specific coupon by barcode.
            </summary>
            <param name="barcode">The full coupon barcode string</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon">coupon</see> if founded.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance.ToPromotion(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.IPromotion})">
            <summary>
            convert couponLine to promotions
            </summary>
            <param name="customerOrder"></param>
            <param name="couponLine"></param>
            <param name="attachedPromotions"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceDao">
            <summary>
             Represents the Coupon Instance Dao.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceDao.SaveOrUpdate(Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance)">
            <summary>
             Saves the coupon instance.
            </summary>
            <param name="couponInstance"><see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">ICoupon</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceDao.Delete(System.String,System.String)">
            <summary>
             Deletes the coupon instance.
            </summary>
             <param name="offerId">OfferId</param>
             <param name="seriesId">SeriesId</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceDao.GetById(System.String,System.String)">
            <summary>
            Gets the Coupon by its OfferIdD and Coupon Series ID
            </summary>
            <param name="offerId">OfferID</param>
            <param name="seriesId">SeriesID</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">ICoupon</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceDao.GetIssuedCouponById(System.String,System.String)">
            <summary>
            Gets the single redemption coupon by its OfferIdD and Coupon Series ID
            </summary>
            <param name="offerId">OfferID</param>
            <param name="seriesId">SeriesID</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">ICoupon</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceDao.GetByDataPattern(System.String,System.String)">
            <summary>
             Gets the coupon by DataPattern ID and instance ID.
            </summary>
            <param name="offerId">Coupon Offer ID</param>
            <param name="dataPatternId">A Data pattern ID</param>        
            <returns><see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">ICoupon</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceDao.GetAllBySeriesId(System.String)">
            <summary>
             Gets all the coupons by the coupon series ID.
            </summary>
            <param name="seriesId">The Series ID used to filter the coupon series.</param>        
            <returns>IEnumerable of <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">ICoupon</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceDao.GetAll">
             <summary>
             Gets all the Coupons.
             </summary>
            <returns>An IEnumerable of <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">ICoupon</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceDao.GetByCriteria(Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceCriteria,System.Int32@)">
            <summary>
            Gets all the coupons by the coupon criteria.
            </summary>
            <param name="couponInstanceCriteria"><see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstanceCriteria">ICouponCriteria</see></param>
            <param name="resultCount">The number of coupons without the top and skip limitations.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.ScanBarcode">
            <summary>
            Gets the scanned coupon barcode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.SequenceNumber">
            <summary>
             Gets the Line sequence within the customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.CreationTime">
            <summary>
            Gets the line's creation time stamp
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.Status">
            <summary>
             get or set the status of the line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.StatusReason">
            <summary>
            the reason of the line status , for example why it was voided or rejected due to business rules
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.CouponInstance">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.CouponRedemptions">
            <summary>
            Gets the Coupon redemptions.
            </summary>
            <remarks>
            The coupon line can be redeemed, and give any number of rewards.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.AddCouponRedemption(Retalix.StoreServices.Model.Promotion.Coupons.ICouponRedemption)">
            <summary>
            Adds a coupon redemption. 
            </summary>
            <param name="couponRedemption"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.RemoveCouponRedemption(Retalix.StoreServices.Model.Promotion.Coupons.ICouponRedemption)">
            <summary>
            Cancels a coupon redemption.
            </summary>
            <param name="couponRedemption"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.RewardModifierInfo">
            <summary>
            Gets the <see cref="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.RewardModifierInfo">reward-modifier</see> that have been applied to this line.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.ModifyReward(Retalix.StoreServices.Model.Promotion.Coupons.RewardModifierInfo)">
            <summary>
            modify the reward value of the coupon
            </summary>
            <param name="rewardModifierInfo"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.DecodedData">
            <summary>
            the barcode decoded data parsing
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.EntryMethod">
            <summary>
             Gets the entry method for the current order line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.ExtendedData">
            <summary>
            Gets or sets non mandatory data that can be used by classes extending core functionality.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.InitialCouponRedemptions">
            <summary>
            when reward modifier is applied
            the initial coupon redemptions will hold the original calculated redemptions
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine.IsManufactureCoupon">
            <summary>
            Indicate if the coupon is Manufacture coupon (UPC5/data bar)
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLineFactory">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLineFactory.CreateCouponLine(Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            
            </summary>
            <param name="couponAddInfo"></param>
            <param name="customerOrder"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters">
            <summary>
            Represents all the parameters used to support government programs relevant to specific stores.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters.BusinessUnit">
            <summary>
            Gets or sets the business unit the coupon is linked to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters.VendorCouponSearchLogic">
            <summary>
            Gets or sets the logic used to decide if a coupon is accepted.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters.MaximumQuantityOfCouponsInTransaction">
            <summary>
            Gets or sets the maximum number of coupons in a transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters.MaximumValueOfCouponsInTransaction">
            <summary>
            Gets or sets the maximum amount of coupons in transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters.CouponAmountLimitation">
            <summary>
            Gets or sets the coupon amount limited during sales.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters.IsManualCouponBarcodeRequired">
            <summary>
            Gets or sets a Boolean value indicating whether a coupon barcode information is required when entering a manual coupon.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters.ManualCouponTenderId">
            <summary>
            Gets or sets the Tender used as reward for the manual coupon.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters.GracePeriod">
            <summary>
            Allow accepting the coupon X days before its start date and y days after its end date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters.AssociatePromotionGroup">
            <summary>
            the Associate promotion group the coupon will be attached to in case of vendor coupon/manual coupon
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters.CouponsMultiply">
            <summary>
            reflect if the data bar vendor coupon reward can be multiply
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters.MaximumBonusAmount">
            <summary>
            in case coupon multiply allow , allow to restrict the bonus amount given
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParametersDao">
            <summary>
            Represents the coupon parameters data access object.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParametersDao.TryGetParametersForLocationNode(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters@)">
            <summary>
            Attempts to retrieve coupon behavior parameters for a specific node in location hierarchy. If parameters not found for specific node
            false is returned.
            </summary>
            <param name="businessUnit"> A node in the location hierarchy in which the coupon parameters are searched.</param>
            <param name="couponParameters">If the request is successful, the Coupon parameters for the specific node are retrieved. </param>
            <returns>True if parameters found, false otherwise</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParametersDao.TryGetParameters(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters@)">
            <summary>
            Attempts to retrieve relevant coupon behavior parameters for a specific store attached to the location hierarchy. Location hierarchy nodes are
            iterated up to the root until the first set of coupon parameters is found, otherwise false is returned.
            </summary>
            <param name="store">The store for which the parameters are retrieved.</param>
            <param name="couponParameters">If the request is successful, the Coupon parameters for the specific store.</param>
            <returns>True if any coupon parameters relevant to the specified store are found, false otherwise</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParametersDao.GetParameters">
            <summary>
            Gets all the coupon parameters regardless of the node in the Location hierarchy they are attached to.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParametersDao.SaveParameters(Retalix.StoreServices.Model.Promotion.Coupons.ICouponParameters)">
            <summary>
            Adds or updates coupon parameters.
            </summary>
            <param name="couponParameters">Changed parameters</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParametersFactory">
            <summary>
            Represents a factory that creates coupon behavior parameters.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponParametersFactory.CreateParametersForLocation(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Creates new coupon parameters for a specific location hierarchy node
            </summary>
            <param name="businessUnit">Business unit for which coupon parameters are relevant</param>
            <returns>Newly created coupon parameters</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponProvider">
            <summary>
            Represents the coupon actions.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponProvider.GetCoupon(Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.CouponDecodedData,System.String)">
            <summary>
            Gets the coupon Instance by the Decoded Data in the data pattern.
            If the coupon instance is not found by the offer ID, then the instance is searched for by the series.
            </summary>
            <param name="decodedData">Decoded barcode data <see cref="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.CouponDecodedData"/></param>
            <param name="barcode">Full barcode string</param>
            <returns> A Coupon instance <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance"/> or null if not found</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponProvider.GetCoupon(System.String,System.String)">
            <summary>
            Gets the coupon by the series ID and offer ID.
            If the coupon instance is not found by the Offer ID , then the instance is searched for by the series.
            </summary>
            <param name="seriesId">Identifier of the series.</param>
            <param name="offerId">Identifier of the offer.</param>
            <returns>A Coupon instance <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance"/> or null if not found</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponProvider.GetCoupon(System.String)">
            <summary>
            Gets the coupon by the barcode string.
            </summary>
            <param name="barcode">The full barcode string.</param>
            <returns>Coupon instance <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance"/> or null if not found</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponProvider.SelectByPrefixMatch(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DecodedData})">
            <summary>
            Get the best match of the coupon decode data. 
            </summary>
            <param name="decodeData">A collection of decoded data <see cref="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DecodedData"/></param>
            <returns>Decoded coupon data <see cref="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.CouponDecodedData"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponProvider.IssueCoupon(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Issue unique coupons, that have unique barcodes
            </summary>
            <param name="barcode"></param>
            <param name="seriedsId"></param>
            <param name="offerId"></param>
            <param name="parsedData"></param>
            <param name="customerId"></param>
            <param name="couponIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponProvider.RedeemCoupon(System.String,System.String,System.String,System.String)">
            <summary>
            Redeem unique coupons, that have unique barcodes after single usage
            </summary>
            <param name="barcode"></param>
            <param name="seriedsId"></param>
            <param name="offerId"></param>
            <param name="couponIdentifier"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries">
             <summary>
             A coupon series is a range of coupons that are based on the defined attributes, which can be controlled centrally. 
             Each series can be set up with specific attributes, which determine how the system handles the coupon when identified at the touch point.
             Each coupon series can be comprised of a number of coupon instances. Each instance inherits the specific coupon series' defined attributes, 
             however it may override them with its own set of attributes.
             </summary>
            <remarks>See also : <seealso cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">ICoupon</seealso> and <seealso cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICoupon">ICouponInstance</seealso></remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.Ik">
            <summary>
            Gets the coupon series database internal key.
            </summary>
            <value>An <see cref="T:System.Int32">Integer</see> that represents the internal unique identifier of coupon series</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.SeriesId">
            <summary>
            Gets the coupon series external ID.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the series external unique ID.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.Descriptions">
            <summary>
            Gets the collection of coupon series <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription">names</see>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponSeriesDescription">CouponSeriesDescription</see></value>.
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.DataPatternId">
            <summary>
            Gets the data pattern external ID.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the data pattern unique id.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.Message">
            <summary>
            Gets the coupon series <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">printing template</see>.
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">IMessage</see> that determines the message to be printed.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.MaxAllowedScans">
            <summary>
            Gets the maximum number of allowed coupon scans in single transaction.
            </summary>
            <remarks>If value is NULL means that no limitation is exists</remarks>
            <value>An <see cref="T:System.Int32">Integer</see> that represents the maximum number of scans allowed. Default value is <see langword="null"/>.</value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.TenderId">
            <summary>
            Gets the tender ID to use/report when creating the coupon reward as a tender. 
            </summary>
            <value>An <see cref="T:System.Int32">Integer</see> that represents the tender identifier. Default value is <see langword="null"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.EmbeddedRewardAmountForManualEntry">
            <summary>
            Gets the value embedded in the barcode to prompt a manual entry popup at the POS.
            </summary>
            <value>An <see cref="T:System.Decimal">decimal</see> that represents the reward amount for manual entry popup. Default value is <see langword="null"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.Blocked">
            <summary>   
            Gets an a boolean value indicating if all the coupons in the series are blocked for scanning.
            </summary>
            <value><see langword="true"/> When all coupons in the series are blocked, otherwise <see langword="false"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.CouponIssuingByExternalSystem">
            <summary>
            Gets a boolean value indicating if the coupon series's coupons were issued by an external system.
            </summary>
            <value><see langword="true"/> When a coupon is issued by external system; otherwise <see langword="false"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.AcceptableScanModes">
            <summary>
            Gets the transaction <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeriesAcceptableScanModes">mode</see> that is accepted for scanning.
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeriesAcceptableScanModes">ICouponSeriesAcceptableScanModes</see> enumeration of scan modes.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.Instances">
            <summary>
            Gets the list of coupon instances <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance"/> related to the series.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">ICoupon</see></value>.        
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.GenerateBarcode(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDao,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The generated barcode.
            </summary>
            <param name="dataPatternDao">The data pattern.</param>
            <param name="encodeData">Encoded data.</param>
            <returns>A generated barcode string.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.Merge(Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries)">
            <summary>
            The merge between the coupon series.
            </summary>
            <param name="couponSeries">The merged coupon <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries">series</see>.</param>
            <returns>The merged <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries">coupon series</see>.</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.ManualRewardLowerBound">
            <summary>
            Gets the minimum reward allowed for manual entry.
            </summary>
            <value>A <see cref="T:System.Decimal">decimal</see> that contains the upper limit for manual rewards. The default value is <see langword="null"/></value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.ManualRewardUpperBound">
            <summary>
            Gets the maximum reward allowed for manual entry.
            </summary>
            <value>A <see cref="T:System.Decimal">decimal</see> that contains the lower limit for manual reward. The default value is <see langword="null"/></value>                
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.MemberCardRequired">
            <summary>
            Gets a boolean value indicating if the coupon is valid when the coupon members card is scanned.
            </summary>
            <value><see langword="true"/> If a loyalty card is required; otherwise <see langword="false"/>. the default is <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.ExternalSystemValidationRequired">
            <summary>
            Gets a boolean value indicating if external system validation is required.
            </summary>
            <value><see langword="true"/> If external system validation is required; otherwise <see langword="false"/>. the default is <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.AllowOverride">
            <summary>
            Gets a boolean value indicating if manual coupon override is allowed.
            </summary>
            <value><see langword="true"/> if an override is allowed; otherwise <see langword="false"/>. the default is <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.FallBackStrategy">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.IFallBackStrategy">strategy</see> to handle the reward if the promotion does not exist for the coupon.
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.IFallBackStrategy">IFallBackStrategy</see>.</value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.SameBarcodeMaxAllowedScans">
            <summary>
            Gets the maximum number of scans allowed for the same barcode restriction.
            </summary>
            <value>An <see cref="T:System.Int32">Integer</see> that represents maximum allowed scans with same barcode per transaction.
             Default value is <see langword="null"/>.</value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.RedemptionPolicy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.RedemptionSegmentation">
            <summary>
            Gets who can redeem the promotion, any customer or same household
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.Type">
            <summary>
            Gets the coupon type>
            </summary>
            <value>A <see cref="T:System.String"/> value. For example : "Virtual" for virtual coupon, and "Undefined" if undefined./>.</value> 
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries.ExternalBarcodeGenerationRequired">
            <summary>
            Indicates about coupon who required third party barcode generation
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeriesDao">
            <summary>
             Represents the Coupon Series Data access layer.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeriesDao.SaveOrUpdate(Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries)">
            <summary>
             Do save coupon series
            </summary>
            <param name="couponSeries">Coupon Series <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries"/></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeriesDao.Delete(System.String)">
            <summary>
             Deletes the Coupon Series by the ID.
            </summary>
            <param name="couponSeriesId">Coupon Series Id</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeriesDao.GetById(System.String)">
            <summary>
             Gets the Coupon Series by the ID.
            </summary>
            <param name="couponSeriesId">Coupon Series Id</param>
            <returns>The Coupon series <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries"/> object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeriesDao.GetByDataPatternId(System.String)">
            <summary>
            Gets the Coupon Series by the Data Pattern ID.
            </summary>
            <param name="dataPatternId">Data Pattern Id</param>
            <returns>The Coupon Series <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeriesDao.GetAll">
            <summary>
             Get all the Coupon Series.
            </summary>
             <returns>A collection of coupon series. <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries"/></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.IFallBackStrategy">
            <summary>
            Represents the method used to handle the reward when a promotion does not exist for the coupon.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.IFallBackStrategy.RewardType">
            <summary>
            Gets the required reward type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.IFallBackStrategy.AccountId">
            <summary>
            Gets the member account ID for points reward type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.IFallBackStrategy.AssociatePromotionGroup">
            <summary>
            the associate promotion group the fallback promotion will be attach to
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.IFallBackStrategy.ToPromotion(Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine)">
            <summary>
            convert coupon line to promotion by the fallback strategy
            </summary>
            <param name="couponLine"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValue">
            <summary>
            Represents one line in UPC5 face value table.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValue.ValueCode">
            <summary>
            GEts or sets the unique ID of the face value in the UPC5 table.
            This value is being extracted from the barcode
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValue.RewardType">
            <summary>
            Gets the reward type. (Amount Off or Free Item)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValue.Description">
            <summary>
            Gets or sets the description of the face value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValue.BuyValue">
            <summary>
            Gets or sets the amount that must be purchased in order to get the reward. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValue.Threshold">
            <summary>
            Gets the amount that must be purchased in order to trigger the reward in the PE.
            Value cannot be zero
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValue.Value">
            <summary>
            Gets or sets the reward amount.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValueDao">
            <summary>
            Represents the method used to access the UPC5 face values table entries.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValueDao.GetFaceValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the UPC5 face values entries for specified value codes. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValueDao.GetAllFaceValues">
            <summary>
            Gets all the UPC5 face values entries.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValueDao.ModifyFaceValue(Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValue)">
            <summary>
            Modifies the UPC5 face value line.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValueDao.Add(Retalix.StoreServices.Model.Promotion.Coupons.IUpc5FaceValue)">
            <summary>
            add new face value
            </summary>
            <param name="upc5FaceValue"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.RewardModifierInfo">
            <summary>
            Encapsulates the arguments required to modify a reward value in the coupon.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.RewardModifierInfo.Value">
            <summary>
            Gets or sets the value of the modified value
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.RewardModifierInfo.MethodCode">
            <summary>
            Gets or sets the method used to change the value of the reward.
            </summary>
            <example>Indicates that the reward was changed due to embedded reward in the barcode.</example>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.RewardModifierInfo.SequenceNumber">
            <summary>
            the sequence of the coupon line
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.CouponLineStatus">
            <summary>
            represent a coupon line status in a customer order
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Promotion.Coupons.CouponLineStatus.New">
            <summary>
            the line is valid for sale
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Promotion.Coupons.CouponLineStatus.Active">
            <summary>
            the line is valid for sale
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Promotion.Coupons.CouponLineStatus.Voided">
            <summary>
            the live was voided
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Promotion.Coupons.CouponLineStatus.Rejected">
            <summary>
            the line was rejected for sale
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Promotion.Coupons.CouponLineStatus.Uncertain">
            <summary>
            the line Uncertain for reward
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Promotion.Coupons.CouponLineStatus.Offline">
            <summary>
            the line cannot be validated
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponRedemption">
            <summary>
             Represents coupon redemption information, which includes which promotions used coupons and the actual coupon values. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponRedemption.PromotionId">
            <summary>
            Gets the reward that is applied to the current discount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponRedemption.Value">
            <summary>
            the actual value of the coupon 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponRedemption.ValueType">
            <summary>
            the type of the value like Money,Points 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeriesAcceptableScanModes">
            <summary>
            The transaction mode that is acceptable for scanning of coupons in the coupon series.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeriesAcceptableScanModes.AcceptInSaleMode">
            <summary>
            Gets and sets a boolean value indicating if a coupon is allowed in sale mode.
            </summary>
            <value><see langword="true"/> if the series is accepted in sale mode; otherwise <see langword="false"/>. Default value is <see langword="null"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeriesAcceptableScanModes.AcceptInTenderMode">
            <summary>
            Gets and sets a boolean value indicating if a coupon is allowed in tender mode.
            </summary>
            <value><see langword="true"/> if the series is accepted in tender mode; otherwise <see langword="false"/>. Default value is <see langword="null"/></value>        
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeriesAcceptableScanModes.Merge(Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeriesAcceptableScanModes)">
            <summary>
            Represents the merge between the acceptable scan modes.
            </summary>
            <param name="scanModes">The scan modes.</param>
            <returns>The merged scan modes.</returns>        
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Instructions.IItemRewardFailurePromotionInstruction">
            <summary>
            Item Reward Failure promotion instruction
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Instructions.IExternalPromotionInstruction">
            <summary>
            External Promotion Instruction
            The promotion engine will add the External Promotion by any External Promotion Instruction detected in the customer order. 
            </summary>
            <remarks>
            A common use case is the creation of specific promotions 'on the fly', by communicating with external system that defines targeted promotion for customers.
            an extension is able to create the targeted promotion and adding it to the current customer order for evaluation, without any need of having a promotion setup pre-configured 
            in the database.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Instructions.IExternalPromotionInstruction.ExternalPromotion">
            <summary>
            The external promotion added to the calculation of the promotion engine.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Instructions.IGiftCardAuthorizationStatus">
            <summary>
            Gift card authorization status instruction.
            </summary>
            <remarks>
            <see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.IGiftCard">Gift card rewards</see>(with activation amount) needs third party authorization.
            Gift card authorization status indicates if the gift card reward got authorized.
            This instruction indicates the promotions not to send the gift card reward with activation amount.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Instructions.IGiftCardAuthorizationStatus.Status">
            <summary>
            The status of the gift card authorization
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Instructions.IGiftCardAuthorizationStatus.PromotionIds">
            <summary>
            The ids of the <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotions</see> that gived the gift card reward.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Instructions.IManualPromotionInstruction">
            <summary>
            Manual promotion activation instruction.
            </summary>
            <remarks>
            This promotion instruction is used to activate a manual promotion; by providing the promotion id, the reward value and order line sequence number, 
            the promotion engine will generate a promotion with the requested attributes and reward the order line specified by the given sequence number.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Instructions.IManualPromotionInstruction.PromotionId">
            <summary>
            Manual Promotion identifier. This promotion is used as a template for the promotion that will calculate the requested reward.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Instructions.IManualPromotionInstruction.OrderLineSequenceNumber">
            <summary>
            The order line sequence number to be rewarded by the manual promotion.        
            </summary>
            <remarks>
            If order line sequence number is null, the manual promotion will reward the entire transaction.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Instructions.IManualPromotionInstruction.RewardValue">
            <summary>
            the requested reward value. If not supplied, the reward is taken from the manual promotion specified by the PromotionId.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Instructions.IManualPromotionInstruction.ConfigureManualPromotion(Retalix.StoreServices.Model.Promotion.IPromotion)">
            <summary>
            Return a configured <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion"/> copy of the given manual promotion, ready for calculation.
            </summary>
            <param name="manualPromotion">The manual promotion 'prototype'. This is the promotion stored in the database, without the specific configuration attributes specified by the manual promotion instruction.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Instructions.IRestrictedTenderCoverageInstruction.IsRelvant(Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm)">
            <summary>
            return true is the payment restricted by the promotion instruction
            </summary>
            <param name="paymentTerm"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Instructions.IRestrictedTenderCoverageInstruction.GetCoveredAmount(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            get the covered amount of the order line by the restrictted tender
            </summary>
            <param name="customerOrder"></param>
            <param name="paymentTerm"></param>
            <param name="orderLine"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Instructions.ICustomerApprovalPromotionInstruction">
            <summary>
            Customer approval for a promotion that is pending confirmation.
            </summary>
            <remarks>
            Some promotions require customer approval in order to give rewards. This is a common practice for promotions that redeem points from a customer account.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPartialRewardLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPartialRewardLimit.IsAllowed">
            <summary>
            Defines period in days which will reset the limitation accumulation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IMemberAccountLateBinding.AccountTypeId">
            <summary>
            Gets or sets member account id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IPointsWitdrwal.AccountId">
            <summary>
            the id of the <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.IAccountType">Account</see> 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IPointsWitdrwal.Points">
            <summary>
            the points value
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.RewardFunction.ICouponRewardFunction">
            <summary>
            issue a coupon as a reward
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.ICouponRewardFunction.OfferId">
            <summary>
            the offer id of the  <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">Coupon</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.ICouponRewardFunction.SeriesId">
            <summary>
            the series id of the  <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries">Coupon</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.ICouponRewardFunction.ExpirationPeriod">
            <summary>
            expression period in date = current day + ExpirationPeriod
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.ICouponRewardFunction.StartDate">
            <summary>
            start date of the coupon
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.ICouponRewardFunction.EndDate">
            <summary>
            end date of the coupon
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.ICouponRewardFunction.Barcode">
            <summary>
            issue full barcode coupon without <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">Coupon</see> series id and offer id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.ICouponRewardFunction.MessageName">
            <summary>
            the message name that will be printed with the coupon
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.ICouponRewardFunction.AggregationType">
            <summary>
            how to aggregate the coupon in the printing
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction">
            <summary>
            describe calculation strategy of <see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.IDiscount">Discount</see> reward
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.Values">
            <summary>
            the value of the discount
            5% , 5$ amount off
            more then one value indicate its level promotion ( buy more get more)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.AppliedCondition">
            <summary>
            the applied <see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">Condition</see> external id for the reward calculation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.PreferMostExpensiveItems">
            <summary>
            indicate how to select <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Products</see> by price
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.LimitDiscountedItemsCount">
            <summary>
            limit the discount to amount of items according to item's unit of measure.
            For example : Items with unit of measure "Unit" will be limited by items count,
            and items with unit of measure "Weight" will be limited by items weight.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.AccountingType">
            <summary>
            the default is Discount , can be use to report
            the reward as <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean">Payment</see>  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.AccountingId">
            <summary>
            the id of the accounting ( for example <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">Tender</see> id)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.ReedmAccountId">
            <summary>
            the <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.IAccountType">Account</see> that the points will be redeem from
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.ReedmPoints">
            <summary>
            the amount of points that will be redeem from the <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.IAccountType">Account</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.RedeemPointsValueSource">
            <summary>
            the source of the amount of points that will be redeem from the <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.IAccountType">Account</see>,
            the options are :
            1.redeem points value.
            2.reward value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.RedeemPointsScope">
            <summary>
            The scope on which the points will be redeem  from the <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.IAccountType">Account</see>
            , once per promotion or at any triggering of the promotion
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.RoundingRuleName">
            <summary>
            indicate how the reward should be round
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.FundingStrategy">
            <summary>
            describe how the reward will be funded by the <see cref="T:Retalix.StoreServices.Model.Promotion.RewardFunction.IFundingParticipator">Participators</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.RewardDestination">
            <summary>
            the result of the discount will be inject into  <see cref="T:Retalix.StoreServices.Model.Promotion.RewardFunction.IDifferedRewardFunction">Differed reward</see>
            for example 5% percent as points
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.ApplyOnGrossPrice">
            <summary>
            calculate the reward from the gross price
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDiscountRewardFunction.ApplyOnItemWithoutModifiers">
            <summary>
            Indicates whether reward is calculated based on item amount without its modifiers' extra price
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.RewardFunction.IFunding">
            <summary>
            describe how <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">Promotion</see> <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">Reward</see>
            value we disturbed ageist the participators
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IFunding.Participators">
            <summary>
            different participators can fund the reward , like retailer , supplier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IFunding.Id">
            <summary>
            what is the reward disturb ton algorithm
            for example : the triggered items , rewired items
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IFunding.CategoryType">
            <summary>
            the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">category</see> type in case the funding strategy is department
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IFunding.CatagoryId">
            <summary>
            the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">category</see> id in case the funding strategy is department
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IFunding.AppliedCondition">
            <summary>
            the applied  <see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">condition</see> for the funding calculation
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.RewardFunction.IFunding.AddParticpator(System.String,System.String,System.String,System.Decimal)">
            <summary>
            add <see cref="T:Retalix.StoreServices.Model.Promotion.RewardFunction.IFundingParticipator">Participator</see> to the funding
            </summary>
            <param name="strategy"></param>
            <param name="type"></param>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.RewardFunction.IFundingParticipator">
            <summary>
            describe how the participator want to fund the reward
            for example : supplier (ParticipatorType )  X (ParticipatorId ) want to participate by 50  (FundingValue )  %  (FundingStrategy) in the reward value
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IFundingParticipator.ParticipatorType">
            <summary>
            the type name : Retailer , supplier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IFundingParticipator.ParticipatorId">
            <summary>
            id of the type , Id of the supplier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IFundingParticipator.FundingStrategy">
            <summary>
            amount , percent
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IFundingParticipator.FundingValue">
            <summary>
            the participation value 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.RewardFunction.IGiftCardRewardFunction">
            <summary>
            applied gift card reward
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IGiftCardRewardFunction.GiftCardId">
            <summary>
            the identifier of the gift card
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.RewardFunction.IDifferedRewardFunction">
            <summary>
            describe a reward that will not be applied to the current <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">Order</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDifferedRewardFunction.Values">
            <summary>
            the value of the discount
            5% , 5$ amount off
            more then one value indicate its level promotion ( buy more get more)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDifferedRewardFunction.AppliedCondition">
            <summary>
            the applied <see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">Condition</see> external id for the reward calculation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDifferedRewardFunction.RoundingRuleName">
            <summary>
            indicate how the reward should be round
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IDifferedRewardFunction.FundingStrategy">
            <summary>
            in case the promotion required Authorization
            hold the  <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">Message</see> attached to it
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.RewardFunction.IMessageRewardFunction">
            <summary>
            communicate a message reward
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IMessageRewardFunction.MessageName">
            <summary>
            the id if the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">Message</see> that returns when reward is given
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IMessageRewardFunction.MessageDestination">
            <summary>
            message will be received at : receipt,cashier ..
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IMessageRewardFunction.AggregationType">
            <summary>
            how to aggregate the message
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IMessageRewardFunction.Value">
            <summary>
             the value should be printed on the message
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IMessageRewardFunction.RewardCancelledMessageName">
            <summary>
             The name of the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">Message</see> that should display when the reward is cancelled
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.RewardFunction.IPointsRewardFunction">
            <summary>
            add points to <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">Customer</see> <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.IAccountType">Account</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IPointsRewardFunction.AccountId">
            <summary>
            the id of the <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.IAccountType">Account</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IPointsRewardFunction.ExcludeTenderOptimization">
            <summary>
            indicate of the reward participate in tender optimization process
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.RewardFunction.IPointsRewardFunction.PointsWitdrwal">
            <summary>
            reedem points  
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Rewards.IRewardLateBinding">
            <summary>
            Reward late binding resolves the dynamic reward value in real time,  
            when the promotion reward value cannot be defined in setup time or when the reward is different for each rewarded resource.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IRewardLateBinding.RewardFunction">
            <summary>
            Gets or sets the related reward function.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Rewards.IRewardLateBinding.Bind(System.Decimal,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine})">
            <summary>
            Bind an incomplete reward according to the information
            available in real time for a specific rewarded resource.
            </summary>
            <remarks>
            When the reward is different for each rewarded resource, this method
            is used to bind the reward per resource.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Rewards.IApportionable">
            <summary>
            Item that is participating in the <see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.IApportionmentCalculator">apportionment</see> calculation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IApportionable.Coefficient">
            <summary>
            Gets the item coefficient value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IApportionable.Id">
            <summary>
            Gets the item id.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Rewards.IApportionmentCalculator">
            <summary>
            The apportionment calculator calculates the distribution of the reward value amount 
            across the items that participated in the promotion
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Rewards.IApportionmentCalculator.Calculate(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.Rewards.IApportionable},Retalix.StoreServices.Model.Promotion.Rewards.IRounding)">
            <summary>
            
            </summary>
            <param name="apportionables"></param>
            <param name="roundingRule"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Rewards.IApportionmentCalculator.Calculate(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.Rewards.IApportionable},Retalix.StoreServices.Model.Promotion.Rewards.IRounding,System.Decimal)">
            <summary>
            Calculates the distribution of the reward value amount 
            across the <see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.IApportionable">apportionables</see> items that participated in the promotion
            </summary>
            <param name="apportionables">The <see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.IApportionable">apportionables</see> participating in the apportionment calculation.</param>
            <param name="roundingRule"><see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.RoundingRuleNameEnum">Rounding rule name</see> for apportionment algorithm to handle the remainder of the apportionment calculation</param>
            <param name="amount">The reward value amount.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Rewards.IApportionmentCalculator.Calculate(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.Rewards.IApportionable},Retalix.StoreServices.Model.Promotion.Rewards.IRounding,System.Decimal,System.Int32)">
            <summary>
            Calculates the distribution of the reward value amount 
            across the <see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.IApportionable">apportionables</see> items that participated in the promotion
            </summary>
            <param name="apportionables">The <see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.IApportionable">apportionables</see> participating in the apportionment calculation.</param>
            <param name="roundingRule"><see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.RoundingRuleNameEnum">Rounding rule name</see> for apportionment algorithm to handle the remainder of the apportionment calculation</param>
            <param name="amount">The reward value amount.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Rewards.IRounding">
            <summary>
            Calculates rounding for <see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.IApportionmentCalculator">apportionment algorithm</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Rewards.IRounding.Round(System.Decimal,System.Int32)">
            <summary>
            Calculates rounding for <see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.IApportionmentCalculator">apportionment algorithm</see>
            </summary>
            <param name="value">The value amount.</param>
            <param name="numberOfDigits">Number of digits for apportionment algorithm to handle the remainder of the apportionment calculation.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Rewards.RoundingRuleNameEnum">
            <summary>
            Rounding rule name for <see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.IApportionmentCalculator"> apportionment algorithm</see>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Rewards.ICommunicationMessage">
            <summary>
            message reward that can be communicate to different destinations     
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.ICommunicationMessage.MessageText">
             <summary>
            Gets the text representation of the message, and its type (Body,Title, etc').
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.ICommunicationMessage.Message">
             <summary>
            Gets the text format message.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.ICommunicationMessage.ResolvedMessage">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.ICommunicationMessage.Destination">
             <summary>
            Get the destination of the message: cashier, receipt.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.ICommunicationMessage.Aggregation">
            <summary>
            the aggregate method of the message
            for example PromotionLevel 2 messages will be aggregate into 1 with quantity of 2 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.ICommunicationMessage.RewardCancelledMessage">
            <summary>
            Gets the message to present when reward is canceled
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Rewards.IIssuedCoupon">
            <summary>
            issue coupon reward that printed to the customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IIssuedCoupon.Message">
            <summary>
            the message that should be printed on the coupon
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IIssuedCoupon.MessageText">
            <summary>
            message text format
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IIssuedCoupon.Value">
            <summary>
            the value the issued coupon hold
            for example : points , amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IIssuedCoupon.CouponQuantity">
            <summary>
            the Quantity should be printed on the coupon
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IIssuedCoupon.StartDate">
            <summary>
            the Start Date activation of the coupon.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IIssuedCoupon.ExpirationDate">
            <summary>
            the Expiration Date activation of the coupon.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IIssuedCoupon.Barcodes">
            <summary>
            the Barcodes should be printed on the coupon
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IIssuedCoupon.IsUnique">
            <summary>
            indicate if the issued coupon is unique 
            i.e can be redeem only once
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IIssuedCoupon.CouponDataPatternId">
            <summary>
            the <see cref="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern">Date Pattern</see> id related to the
            <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">Coupon</see> Group
            the filed could be empty in case the barcode not related 
            to any Group
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IIssuedCoupon.MessageName">
            <summary>
            the message name that attach to the coupon
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Rewards.IDiscount">
            <summary>
            Discount reward applied against transaction balance
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IDiscount.Amount">
            <summary>
            the total discount amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IDiscount.RewardedProducts">
            <summary>
            the product lines the reward was applied on
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IDiscount.IsReporetedAsMeanOfPayment">
            <summary>
            is the discount is reported as mean of payment
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Rewards.IDiscount.GetProductFundingAmount(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine,System.String)">
            <summary>
            the funding amount is the amount the participator contribution 
            to the promotion funding . for example retailer and supplier can agree
            that the reward will be pay 50% , 50% between them 
            </summary>
            <param name="customerOrder"></param>
            <param name="orderLine"></param>
            <param name="fundingParticaptor">Retailer,Supplier,Store</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Rewards.IDiscount.GetProductRefundAmount(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            calculate the refund value for base on TBR
            </summary>
            <param name="customerOrder"></param>
            <param name="orderLine"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Rewards.IDiscount.GetProductContrbutionAmount(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            get the amount the product Contributed to the reward
            </summary>
            <param name="customerOrder"></param>
            <param name="orderLine"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Rewards.IDiscount.GetProductContrbutionAmountPerUnit(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            get the contribution of the reward per unit line
            </summary>
            <param name="customerOrder"></param>
            <param name="orderLine"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Rewards.IDiscount.RefundAmount(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            get the reward product refunt amount distrebution 
            </summary>
            <param name="customerOrder"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Rewards.IGiftCard">
            <summary>
            gift card reward 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IGiftCard.AmountToLoad">
            <summary>
            the amount that need to be load into the gift card item
            if the activation amount is bigger then zero then activation message will be sent
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IGiftCard.GiftCardId">
            <summary>
            the id of the gift card
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IGiftCard.Amount">
            <summary>
            the all amount that the raward is giving. 
            Including the amount that needs to load into gift card item,
            the amount that already loded into gift card item,
            and the amount that should given, but loading cancelled or declined.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IGiftCard.LoadedAmount">
            <summary>
            The amount that already loded into gift card item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IGiftCard.RewardedProducts">
            <summary>
            the products that the reward was applied on
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IGiftCard.AssosiateGiftCards">
            <summary>
            the associate gift card sequence lines
            on the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">order line</see>
            of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order</see>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Rewards.IPoints">
            <summary>
            Points reward accumulates additional balance to a customer account
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IPoints.AccountType">
            <summary>
            The customer account to be credited with the accumulated amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IPoints.AccumulatedAmount">
            <summary>
            The accumulated amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Rewards.IPoints.RewardedProducts">
            <summary>
            the product lines the reward was applied on
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Criteria.IPromotionCountQuery">
            <summary>
            Represents the total count of promotion result 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Criteria.IPromotionQuery">
            <summary>
            Represents query that loads an promotion and associated with a promotion Role.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Criteria.PromotionLookUpResult">
            <summary>
            PromotionLookUpResult handles search result of promotion and its associated data
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionLookUpResult.Promotion">
            <summary>
            Get or Set Promotion Result
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Promotion.Criteria.PromotionLookUpResult.AssociatedBusinessUnitss">
            <summary>
            Get or Set requested Stores which associated promotion
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Promotion.Criteria.PromotionLookUpResult.EligibilityProducts">
            <summary>
            Get or Set requested products which associated promotion
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Promotion.Criteria.PromotionLookUpResult.AssociatedProduct">
            <summary>
            Associated product  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionClassificationCriterion.Classification">
            <summary>
            Get or Set the promotion classifications
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Criteria.PromotionCouponSpecification">
            <summary>
            Represents the coupon search criterion for promotions.
            Search by Coupon Series\Instance or by barcode. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionCouponSpecification.Linkage">
            <summary>
            Gets or sets the coupon Linkage. Issuing\Redemption 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionCouponSpecification.OfferId">
            <summary>
            Set or Get Coupon series\instance
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionCouponSpecification.Barcode">
            <summary>
            Gets or sets full barcode coupon
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionDescriptionsSpecification.Description">
            <summary>
            Gets or sets promotion description 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionEndDateCriterion.FromEndDate">
            <summary>
            Gets or sets the from date of the promotion end date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionEndDateCriterion.ToEndDate">
            <summary>
            Gets or sets the to date of the promotion end date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionExternalCodeCriterion.ExternalCode">
            <summary>
            Gets or sets the external code of the promotion.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionGroupCriterion.GroupIds">
            <summary>
            Get or Sets the groups of promotions
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionLoyaltyCardSpecification.ClubIds">
            <summary>
            The club ids requirement means that the promotion will be triggered if the customer registered to one of the clubs.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionLoyaltyCardSpecification.NoClubs">
            <summary>
            Indicates if the promotion triggered by loyalty card only, without clubs requirement.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionManualTriggerCriterion.IsTriggeredManualy">
            <summary>
            Gets or sets the Boolean value indicating if the promotion is triggered manually
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionProductsSpecification.Products">
            <summary>
            Get or Set requested Products
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionProductsSpecification.IncludeRootCatagory">
            <summary>
            Gets or sets the Boolean value indicating to include the categories root which related to products
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionRetailSegmentsSpecification.RetailSegmentIds">
            <summary>
            Gets or sets the requested retail segments 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionStartDateCriterion.FromStartDate">
            <summary>
            Gets or sets from date of promotion start date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionStartDateCriterion.ToStartDate">
            <summary>
            Gets or sets to date of promotion start date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionStoresSpecification.StoresId">
            <summary>
            Gets or sets the linked business units id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionSuspendedCriterion.Suspended">
            <summary>
            Gets or sets the Boolean value indicating to search suspended promotions
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.PromotionTenderStateCriterion.IsEndOfTicket">
            <summary>
            Gets or sets the Boolean value indicating to search promotions which triggered on total ticket
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.SkipSpecification.FirstResult">
            <summary>
            Gets or sets the first record index for paging.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.TakeSpecification.MaxResults">
            <summary>
            Gets or sets the page size for paging.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Criteria.IClassificationCriterion">
            <summary>
            this is a criteria applied for <see cref="T:Retalix.StoreServices.Model.Product.IProduct">product</see> <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">category</see> 
            the category can by applied to  <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory">Merchandise</see> or  <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">custom</see> 
            one that can be distinct by the label attribute on it
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.IClassificationCriterion.CategoryType">
            <summary>
            the label of the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">category</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Criteria.ICouponInstanceCriterion">
            <summary>
            this is a criteria for coupon <see cref="T:Retalix.StoreServices.Model.Promotion.Conditions.ICouponCondition">condition</see> 
            that meet for a <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponInstance">instance</see> or <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponSeries">series</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.ICouponInstanceCriterion.SeriesId">
            <summary>
            the identifier of the series
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.ICouponInstanceCriterion.OfferId">
            <summary>
            series and offered are unique identifiers for coupon instance
            in case the offer id not exist , the match will be against the series id only
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Criteria.IDayTimeCriterion">
            <summary>
            describe an applicable day and time
            for the date and time <see cref="T:Retalix.StoreServices.Model.Promotion.Conditions.IDayTimeCondition">condition</see> 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.IDayTimeCriterion.ActiveDay">
            <summary>
            the active day of the week
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.IDayTimeCriterion.StartTime">
            <summary>
            the applicable start time
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.IDayTimeCriterion.EndTime">
            <summary>
            the applicable end time , if not mention         
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Criteria.IDayTimeCriterion.IsApplicable(System.DateTime)">
            <summary>
            is the criterion met the given time
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Criteria.IProductPriceRestriction">
            <summary>
            restrict  <see cref="T:Retalix.StoreServices.Model.Product.IProduct">product</see>  that in the price range
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.IProductPriceRestriction.MaximumPrice">
            <summary>
            the maximum price allowed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.IProductPriceRestriction.MinimumPrice">
            <summary>
            the min price allowed
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Criteria.IStoreTimingCriteria">
            <summary>
            indicate the store valid time range
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.IStoreTimingCriteria.EndDate">
            <summary>
            the criteria will be valid only when the the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderContext">CreationContext</see> 
            TimeStamp is before or equal the  date if exist
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Criteria.IStoreTimingCriteria.StartDate">
            <summary>
            the criteria will be valid only when the the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderContext">CreationContext</see> 
            TimeStamp is after or equal the  date if exist
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.ICustomerOrderModificationProvider">
            <summary>
            Customer order modification provider.
            This provider gets <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order</see>, evaluate the promotion and the customer order,
            and returns a modification object that the promotion engine uses for its calculation.
            <see cref="T:Retalix.StoreServices.Model.Promotion.ICustomerOrderModification">customer order modification</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ICustomerOrderModificationProvider.CustomerOrderModificationRequired(Retalix.StoreServices.Model.Promotion.IPromotion)">
            <summary>
            Based on the promotion return whether a modification is required.
            </summary>
            <param name="promotion"><see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ICustomerOrderModificationProvider.GetModification(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Promotion.IPromotion)">
            <summary>
            Gets <see cref="T:Retalix.StoreServices.Model.Promotion.ICustomerOrderModification">customer order modification</see>, in case
            This method will run only if the CustomerOrderModificationRequired method returns true.
            </summary>
            <param name="customerOrder"><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order</see></param>
            <param name="promotion"><see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.ICustomerOrderModification.NewCustomer">
            <summary>
             Returns a new customer<see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">customer</see>> that the 
             promotion engine will use for its calculation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.ICustomerOrderModification.RemoveOrderLines">
            <summary>
            Gets a collection of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">order lines</see> that the 
            prmotion engine will remove from customer order before evaluating the promotion.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IIntersectionSubgroupsFilter">
            <summary>
            Filter for promotion's criteria intersection groups 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IIntersectionSubgroupsFilter.Filter(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.Criteria.PromotionLookUpResult})">
            <summary>
            For use from service
            </summary>
            <param name="results">promotions list</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IIntersectionSubgroupsFilter.Filter(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.IPromotion},System.Collections.Generic.ICollection{Retalix.StoreServices.Model.Product.IProduct},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            For use from Dao
            </summary>
            <param name="promotions">promotions</param>
            <param name="products">products</param>
            <param name="productToCategory">categories</param>
            <param name="productToSelectionGroups">selection groups</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IMultipleTicketsRewardLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IMultipleTicketsRewardLimit.ExpirationPeriod">
            <summary>
            Defines period in days which will reset the limitation accumulation
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncetiveRuleConext">
            <summary>
            the context of the incentive message
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncetiveRuleConext.BusinessUnits">
            <summary>
            the relevant businessUnits that  rule is applied for , will be check against  <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">CustomerOrder</see> context
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncetiveRuleConext.RetailSegments">
            <summary>
            the relevant retail segment , will be check against  <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">CustomerOrder</see> context
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncetiveRuleConext.IsApplicable(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            check if the context is applicable to current state
            of the customer order
            </summary>
            <param name="customerOrder"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessage">
            <summary>
            incentive message is message that should encourage customer to 
            Fulfulde a  <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">Promotion</see> and to be qualify for a reward
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessage.AppliedRule">
            <summary>
            the <see cref="T:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRule">rule</see> that cause the incentive message to be triggered
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessage.Promotion">
            <summary>
            the promotion will be apply in case the customer will complete the remaining <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see> <see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">conditions</see> 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessage.MessageText">
             <summary>
            the message , and its type (body, title, etc') , that describe how to met the promotion and be qualify for a <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">Reward</see> 
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessage.Message">
            <summary>
            formatted message
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessage.ResolvedMessage">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageEngine">
            <summary>
            responsible to calculate <see cref="T:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessage">Incentive Message</see> 
            for <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">Promotion</see> that marked as participating in incentive message
            for example :
            promotion buy 2 get 1 for free
            retailer will able to mark a rule that said in case of 50% complication , send incentive message
            that if you will buy 1 more you will get it for free
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageEngine.Calcualte(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            calculate and return if incentive message is required
            </summary>
            <param name="customerOrder"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRule">
            <summary>
            rule for incentive message calculation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRule.RuleName">
            <summary>
            the name of the rule
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRule.MessageName">
            <summary>
            the see <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">Message</see> name 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRule.Context">
            <summary>
            the context the incentive message will be applicable
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRule.UnitsThresholds">
            <summary>
            applied on <see cref="T:Retalix.StoreServices.Model.Promotion.Conditions.IUnitCondition">Unit</see> or <see cref="T:Retalix.StoreServices.Model.Promotion.Conditions.IUnitOfMeasureCondition">Unit of measure</see>
            and indicate from which threshold incentive message should be applied against the triggered value of the  <see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">Condition</see>
            i.e buy 3 bugs ,and get incentive from 2 bags . 
            so the value is 2 , and the trigger value is 3
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRule.ThresholdCompletionPercentage">
            <summary>
            This is a decimal field where the user defines the % of threshold completion 
            from which the customer should be prompted with an incentive message. 
            Example: 60% completion means that a promotion which is configured as:
                 buy 5 of item 'X' and get something is a candidate for the incentive engine
                 to prompt a message when the customer bought 3 items and above of item 'X'.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRule.MessageCountLimit">
            <summary>
            allow to restrict the number of message will be return from applicable rules
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRule.Apply(Retalix.StoreServices.Model.Promotion.IPromotion,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            apply for incentive message
            </summary>
            <param name="promotion">Promotion</param>
            <param name="customerOrder">CustomerOrder</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRuleDao">
            <summary>
            repository for all  <see cref="T:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRule">Incentive Message</see> 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRuleDao.AllRules">
            <summary>
            get all rules
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRuleDao.SaveOrUpdate(Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRule)">
            <summary>
            save or update a new rule
            </summary>
            <param name="incentiveMessageRule"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRuleDao.ByName(System.String)">
            <summary>
            get by id
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRuleDao.Delete(System.String)">
            <summary>
            delete rule by name
            </summary>
            <param name="ruleName"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IncentiveThreshold">
            <summary>
            the units threshold state that should triggered 
            the incentive message
            for example 3 of 5 , mean you bought 3 and you should have 5 for 
            the <see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">Condition</see> to be fulfilled
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IncentiveThreshold.TriggerValue">
            <summary>
            the units of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">products</see> need to be purchase in the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order</see> 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IncentiveThreshold.PromotionValue">
            <summary>
            the units value that will met the <see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">Condition</see> of the <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">Promotion</see> 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionClassification">
            <summary>
            responsible to classify a single promotion by its business behavior
            when promotion is save in the R10 repository.
            for example :Buy 1 item from 'Dairy' department; get it for 10% discount
            will be classify as TPR ( temporary price reeducation )
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionClassification.RelvantPromotions(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.IPromotion})">
            <summary>
            get the replant promotion for the classificatory
            </summary>
            <param name="promotion"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotionClassification.Name">
            <summary>
            the classification name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotionClassification.PriortySequence">
            <summary>
            the bigger the value the later the classificatory will run.
            this function is required because when promotion get classification
            other classification will not run for him. so it can be usefully for behavior change
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionClassification.IsRelvant(Retalix.StoreServices.Model.Promotion.IPromotion)">
            <summary>
            check if the promotion qualify the classification
            </summary>
            <param name="promotion"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionClassficator">
            <summary>
            responsible to classify all the given promotion
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionClassficator.Classify(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.IPromotion})">
            <summary>
            set the Classification attribute on the promotion
            </summary>
            <param name="promotions"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IMultipleTicketsMatchLimit">
            <summary>
            Represents match limitation that applied on  a <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see>
            <see cref="T:Retalix.StoreServices.Model.Promotion.ICapture">capture</see> count.
            the number of matches is tracked per <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">customer</see>
            or per affiliated customers.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionCollectionAdjustment">
             <summary>
             An abstract object that modified the promotion collection after the promotion engine retrive the relavent promotions.
             <example>
             <code lang="cs">
             <![CDATA[
                public class PromotionCollectionAdjustment : IPromotionCollectionAdjustment
                {
                     public void Adjust(ICustomerOrder customerOrder, IList<IPromotion> promotions)
                     {
                         var prom = promotions.FirstOrDefault(p => p.Id == "282659");
            
                         if (prom == null) return;            
             
                        promotions.Remove(prom);
                     }
                }
             ]]>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionCollectionAdjustment.Adjust(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Collections.Generic.IList{Retalix.StoreServices.Model.Promotion.IPromotion})">
            <summary>
            Adjust collection.
            </summary>
            <param name="customerOrder"></param>
            <param name="promotions"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionFailureHandler">
            <summary>
            Handles creation of an alert, for failed promotion
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionIdsFilter">
            <summary>
            From list of promotion ids responsible of removing the not relevat\not necessary ids.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionIdsFilter.RemoveNotRelevant(System.Collections.Generic.IEnumerable{System.String}@,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            filter the ids, removing the not relevant 
            </summary>
            <param name="promotionIds">the original ids</param>
            <param name="customerOrder">the customer order of the current process</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IRewardContribution">
             <summary>
             allow to override the default behavior of the reward contribution  <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine">line</see> 
             and the calculation strategy of each product that contributed to the reward
             
             the interface should be register via <see cref="T:Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver">IoC container</see> with
             the reward type + "Contribution"
              <example>
             <code lang="cs">
             <![CDATA[
             
                 Resolver.Register<IRewardContribution>(new ProRataContribution(), "PercentageOffPerItemContribution");
                 Resolver.Register<IRewardContribution>(new ProRataContribution(), "PercentageOffContribution");
                 Resolver.Register<IRewardContribution>(new ProRataContribution(), "FreeItemContribution");
                 Resolver.Register<IRewardContribution>(new ProRataContribution(), "AmountOffPerItemContribution");
                 Resolver.Register<IRewardContribution>(new ProRataContribution(), "PrecentOffPerTicketContribution");
            
             internal class ProRataContribution : IRewardContribution
             {
                public IEnumerable<IOrderUnitLine> Contributors(IEnumerable<IOrderUnitLine> triggering, IEnumerable<IOrderUnitLine> rewarded)
                {
                   return triggering;
                }
            
               public ContributionCalcuationStrategy CalculationStrategy
               {
                  get { return ContributionCalcuationStrategy.ProRata; }
               }
             }
            }
             ]]>
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardContribution.Contributors(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine},System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine})">
            <summary>
            get the rewarded item that contribute for the reward
            for example :
            buy 2 get 1 for free.
            the default behavior that the rewarded item is the free item selected
            </summary>
            <param name="triggering"></param>
            <param name="rewarded"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IRewardContribution.CalculationStrategy">
            <summary>
            get the calculation strategy for the reward contribution 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IRewardLimitation.RewardFunction">
            <summary>
            the related reward function of the limitation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IRewardLimitation.Type">
            <summary>
            the limitation type
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardLimitation.Apply(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.IReward})">
            <summary>
            Applies the limitation on a customer order.
            </summary>
            <param name="customerOrder">customer order</param>
            <param name="rewards">The value that is not limited.</param>
            <returns>the limited value</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardLimitation.TryMet(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Int32)">
            <summary>
            try to met the reward limitation if not successive <see cref="T:Retalix.StoreServices.Model.Promotion.LimitationNotMetException">LimitationNotMetException</see> will be thrown  
            </summary>
            <param name="customerOrder"></param>
            <param name="count">number of match</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardLimitation.Enquiry(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Enquiry the promotion against the customer Order.
            </summary>
            <param name="customerOrder">Customer Order</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Promotion.PromotionEnquiryInformation">promotion enquiry information</see> </returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IMaxValueLimit.MaxValue">
            <summary>
             the max value of the reward
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IMaxValueLimit.MinValue">
            <summary>
            the min value of the reward
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IVendorMatchStrategy">
            <summary>
            describe how to match vendor criteira to orderlines
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IVendorMatchStrategy.Match(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Collections.Generic.List{Retalix.StoreServices.Model.Promotion.VenderCriteria},System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine})">
            <summary>
            match lines by given strategy 
            </summary>
            <param name="customerOrder"></param>
            <param name="criteria">tuple of manufacutre id and familty code</param>
            <param name="candidateLines">the candidate form which the critira should be matched against</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.VenderCriteria">
            <summary>
            criteria hold tuple of manufactre id and family code
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.PromotionEnquiryInformation">
            <summary>
             Promotion enquiry information represents the state of the promotion against the customer order,
             for example the state of the  <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionLimitation">promotion limitations</see> represent
             the current limitation state in the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.PromotionEnquiryInformation.PromotionLimitations">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionLimitation">promotion limitations </see> 
             <see cref="T:Retalix.StoreServices.Model.Promotion.PromotionLimitationInformation">information</see> 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.PromotionLimitationInformation.Scope">
            <summary>
            the scope , for example in case of redemption limit - per days,total or promotion 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.PromotionLimitationInformation.Name">
            <summary>
            the name of the limitation : for example promotion limitation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.PromotionLimitationInformation.Type">
            <summary>
            the type of the limitation, for example redemption limit
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.PromotionLimitationInformation.Value">
            <summary>
            the value the limitation, for example limit to 3 redemptions
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.PromotionLimitationInformation.ActualValue">
            <summary>
            the actual value the limitation, for example limit to 3 redemptions, currently 
            promotion activated 2 redemptions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.PromotionLimitationInformation.IsLimitReached">
            <summary>
            Gets is limit reached 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Mapper.IConditionMapper">
            <summary>
            map between promotion<see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">condition</see>
            and the condition contract
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Mapper.IConditionMapper.ConditionTypeName">
            <summary>
            the condition name in the contract
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Mapper.IConditionMapper.ConvertToModel(System.Object)">
            <summary>
            convert to condition model
            </summary>
            <param name="conditionContract"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Mapper.IConditionMapper.ConvertToContract(Retalix.StoreServices.Model.Promotion.ICondition)">
            <summary>
            convert to contract
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.PromotionsFinalizeResult">
            <summary>
            Repesent the Promotion Engine Result in case of "Finalize"
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.PromotionsFinalizeResult.Rewards">
            <summary>
            The given rewards.   
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroupDao">
            <summary>
            promotion group repository
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroupDao.ById(System.Int32)">
            <summary>
            get by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroupDao.ByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            by ids
            </summary>
            <param name="groupIds"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroupDao.SaveOrUpdate(Retalix.StoreServices.Model.Promotion.Group.IPromotionGroup)">
            <summary>
            save group
            </summary>
            <param name="promotionGroup"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroupDao.Delete(System.Int32)">
            <summary>
            delete group
            </summary>
            <param name="groupId"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroupDao.All">
            <summary>
            get all groups
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroupDao.SubGroups(System.Int32)">
            <summary>
             check if group has sub groups
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroup">
            <summary>
            represent  a group of <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotions</see> 
            whit business common sense
            for example:
             best deal group - select best promotion from a group of promotions
             conflict - select best promotion from group with shared products
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroup.Id">
            <summary>
            unique id of the group
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroup.Descriptions">
            <summary>
            Description of the group
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroup.Priority">
            <summary>
            the execution priority of the group,
            the higher the priory is , it will be execute earlier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroup.Strategy">
            <summary>
            the strategy of the group :
             BestDeal
             Conflict
             None
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroup.ParentGroup">
            <summary>
            the parent group 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroup.Ancestors">
            <summary>
            get the root group to the current group
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroup.Resolve(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Collections.Generic.ICollection{Retalix.StoreServices.Model.Promotion.IPromotion},System.Collections.Generic.ICollection{Retalix.StoreServices.Model.Promotion.Group.IPromotionGroup})">
            <summary>
            resolve the group rewards
            </summary>
            <param name="customerOrder"></param>
            <param name="promotions">all the promotion the relevant to the customer order</param>
            <param name="subgroups">the subgroup of the current group</param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessageIndicator.IsParticipating">
            <summary>
            tell if the  <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">Promotion</see> participating
            in incentive message calculation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessageIndicator.MessageName">
            <summary>
            override the default  <see cref="T:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageRule">Incentive Message Rule</see> 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IncentiveMessageIndicator.MessageDestination">
            <summary>
            the destination of the message 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IProhibitDiscountSellingBehavior">
            <summary>
            selling behavior that exclude product to be eligible for discount
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs">
            <summary>
            Represent the Advertisement arguments used to create execution objects from contract objects.
            For the full explanation of every property, please see: <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion"/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs.LinkedEntityIds">
            <summary>
            Gets or sets the linked entity ID that indicates the entity that is an advertisement, and can be the promotion ID ,Item ID etc.. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs.ChannelIds">
            <summary>
            Gets or sets the Advertisement Channels - Mobile,Portal etc.. 
            The advertisement is presented only in these channels.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of the channel IdDs.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs.CategoryIds">
            <summary>
            Gets or sets the Advertisement Categories - Food,Games etc.. 
            the categories are to filter advertisements by category.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of category IDs.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs.Descriptions">
            <summary>
            Gets or sets the description.
            </summary>
            <value>A<see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of descriptions.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs.Images">
            <summary>
            Gets or sets the Images.
            The advertisement can be presented with or without images.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of images</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs.LogicalAreas">
            <summary>
            Gets or sets the logical areas.
            The advertisement is displayed in mobile client depending on the physical area - logical area mapping.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of strings.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs.SavingValue">
            <summary>
            Gets or sets the SavingValue which is value that indicates  
            the reward of the promotion. Promotions can be sorted by their Saving Values, e.g. $2, 10%, etc..
            </summary>
            <value>A <see cref="T:System.String">string</see> that contains the promotion saving value.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs.StartDate">
            <summary>
            Gets or sets the date from which the promotion starts. Promotions can be sorted by the StartDate.
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime">nominal date time</see> that contains the start date from which the promotion is valid. </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs.EndDate">
            <summary>
            Gets or sets the date the promotion is no longer available. Promotions can be sorted by the EndDate. 
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime">nominal date time</see> value that contains the end date from which the promotion is no longer valid. </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs.Restrictions">
            <summary>
            Gets or sets the Restrictions applied to the promotions. 
            For example, a promotion can be limited to 1 per ticket, only for loyalty members with the segment 'Baby Club' etc..  
            All the restrictions of the real promotion should be written to avoid claims. Any restriction can be added, even if it does not exist in the real promotion.
            </summary>
            <returns>A collection of the relevant <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData">restrictions</see>.</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs.Informations">
            <summary>
            Gets or sets the any Promotion Additional Information -
            For example - If out of stock, you will get the discount for 2 bottles of Sprite
            </summary>
            <returns>A collection of the relevant <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData">information's</see>.</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs.ValidDaysFromRegistration">
            <summary>
            Gets or sets the ValidDaysFromRegistration's which  holds the number of days which the promotion 
            is valid from the date the customer registered to the promotion.
            </summary>
            <value>A <see cref="T:System.Int32">Integer</see> that represent number of days.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementCategoryLookUpResult">
            <summary>
            Represents the <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion"> advertisement categories </see> lookUp criteria result information in the search results.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementCategoryLookUpResult.CategoryLookUpResult">
            <summary>
            Gets or sets all the relevant category information retruned as a result of the criteria look up. 
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementCategoryLookUpResult.CategoryLookUpResult">CategoryLookUpResult</see>.</value>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementCategoryLookUpResult.ResultCount">
            <summary>
            Gets or set the number of advertisement categories in the search results of the criteria look up. Not limited by paging.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.CategoryLookUpResult">
            <summary>
            Represents the <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategory"> advertisement categories </see> lookUp criteria result information in the search results.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.CategoryLookUpResult.AdvertisementCategory">
            <summary>
            Gets or sets the relevant advertisement category of the criteria look up result. 
            </summary>
            <value>An <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategory">IAdvertisementCategory</see> that represents the category of the criteria look up result </value>  
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.CategoryLookUpResult.AdvertisementsCount">
            <summary>
            Gets or sets the number of advertisements in the channel the category is linked to.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementPromotionLookUpResult">
            <summary>
            Represents the <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion"> advertisement promotion </see> lookUp criteria result information, which is required for the search results.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementPromotionLookUpResult.AdvertisementPromotions">
            <summary>
            Gets or sets all the relevant advertisement promotions of the criteria look up result. 
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion">AdvertisementPromotion</see></value>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementPromotionLookUpResult.ResultCount">
            <summary>
            Gets or sets the number of advertisement promotions in the criteria look up results. 
            Not limited by paging.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData">
            <summary>
            Represents the text used to display an advertisement promotion. The advertisement promotion description is used to display the advertisement promotion on the different channels, e.g.,portals, mobile etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData.Type">
            <summary>
            Gets or sets the type of the description, which can be either short or long.
            </summary>
            <example>ShortDescription,LongDescription</example>
            <value>A <see cref="T:System.String">String</see> that contains the description type.</value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData.CreateDefualt(System.String)">
            <summary>
            Creates the default parameters for the descriptions, which include the default culture and type.
            </summary>
            <param name="value">Description text</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData">DescriptionData</see> object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData.Equals(System.Object)">
            <summary>
            A method for comparing two descriptions.
            </summary>
            <param name="obj">A description for comparing the descriptions.</param>
            <returns>A boolean value indicating if the descriptions are equal.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData.Equals(Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData)">
            <summary>
            A method for comparing two descriptions.
            </summary>
            <param name="other">A description to compare the descriptions. <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData"/></param>
            <returns>A boolean value indicating if the descriptions are equal.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData.GetHashCode">
            <summary>
            Calculates the hash code of the object.
            </summary>
            <returns>The hash code number.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisement.Identifier">
            <summary>
            Gets or sets the Identifier, containing the Advertisement linked entity IDs and channels.
            </summary>
            <value>A <see cref="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisement.Identifier">AdvertisementIdentifier</see> advertisement identifier.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisement.Categories">
            <summary>
            Gets or sets the Categories - Food,Games etc.. 
            The categories are used to filter advertisements by category.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategory">Advertisement category</see></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisement.Descriptions">
            <summary>
            Gets or sets the description.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData">Description data</see>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisement.Images">
            <summary>
            Gets or sets the Images.
            The advertisement can be presented with or without images.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementImage">Advertisement image</see></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisement.LogicalAreas">
            <summary>
            Gets or sets the logical areas.
            The advertisement is displayed in mobile clients depending on the physical area - logical area mapping.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:System.String">string</see></value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategory.Ik">
            <summary>
            Gets or sets the Category internal ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategory.Id">
            <summary>
            Gets or sets the Category external unique ID. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategory.Names">
            <summary>
            Gets or sets the Category Names. Supports multi cultures. 
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData">DescriptionData</see></value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategory.Merge(Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategory)">
            <summary>
             Merges the current category  with the assigned <paramref name="advertisementCategory">parameter</paramref>.
            </summary>
            <param name="advertisementCategory">An <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion">IAdvertisementCategory</see> to merge with the current category.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategoryDao">
            <summary>
            Represents the data access point, which is required for advertisement category data.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategoryDao.GetCategories(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Gets the collection of advertisement categories. 
            </summary>
            <param name="categoryIds">A collection of categories IDs.</param>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"><![CDATA[IEnumerable<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategory">AdvertisementCategory</see>s.</value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategoryDao.SaveOrUpdate(Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategory)">
            <summary>
            Saves or updates the advertisement category.
            </summary>
            <param name="category">The <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannel">Advertisement category</see> saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategoryDao.Delete(System.String)">
            <summary>
             Deletes a Category .
            </summary>
            <param name="categoryId">The deleted Category ID.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategoryDao.GetAll">
            <summary>
            Gets a collection of the advertisement categories. 
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"><![CDATA[IEnumerable<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategory">IAdvertisementCategory</see></value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategoryDao.GetByCriteria(Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategoryCriteria)">
            <summary>
            Returns the categories and the number of advertisements, which are filtered by complex criteria. <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria"/>
            </summary>
            <param name="lookupCategoryCriteria">The criteria for filtering the advertisement promotions. <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria"/></param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementCategoryLookUpResult">result </see> of the advertisement criteria lookup.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementFactory">
            <summary>
            Represents the method used to create a advertisement promotion. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementFactory.CreateAdvertisementPromotion(Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs)">
            <summary>
            Creates a single advertisement promotion type.
            </summary>
            <param name="advertisementArgs">The creation <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementArgs">arguments</see>.</param>
            <returns>The advertisement promotion <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion">object</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementFactory.CreateAdvertisementCategory">
            <summary>
            Creates a single advertisement promotion category type.
            </summary>
            <returns>The advertisement promotion category<see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategory">object</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementFactory.CreateAdvertisementChannel">
            <summary>
            Creates a single advertisement promotion channel type.
            </summary>
            <returns>The advertisement promotion channel<see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannel">object</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementFactory.CreateAdvertisementImage">
            <summary>
            Creates a single advertisement promotion image type.
            </summary>
            <returns>The advertisement promotion image<see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementImage">object</see>.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion.Ik">
            <summary>
            Gets an internal unique identifier.
            </summary>
            <value>A <see cref="T:System.Int32">Integer</see> representing a unique ID.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion.SavingValue">
            <summary>
            Gets or sets the SavingValue which is value that indicates 
            the promotion reward, e.g., $2, 10%, etc...  Promotions can be sorted by their Saving Values.
            </summary>
            <value>A <see cref="T:System.String">String</see> representing the promotion saving value.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion.StartDate">
            <summary>
            Gets or sets the Date from which is the promotion is valid. Promotions can be sorted by the Start Date. 
            </summary>
            <value>A <see cref="T:System.DateTime">DateTime</see> that contains the start date from which the promotion is valid. 
            The default is <see langword="null"/></value>.
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion.EndDate">
            <summary>
            Gets or sets the Date from which the promotion is not valid. Promotions can be sorted by the End Date. 
            </summary>
            <value>A <see cref="T:System.DateTime">DateTime</see> that contains the end date from which the promotion is no longer valid. 
            The default is <see langword="null"/></value>.
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion.Restrictions">
            <summary>
            Gets or sets the restrictions that can be applied to a promotion. 
            For example, promotions can be limited to 1 per ticket, only for loyalty members with segment 'Baby Club' etc..  
            All the restrictions of the real promotion should be written to avoid claims. Any restriction can be added, even if the restriction does not exist in the real promotion. 
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData">DescriptionData</see></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion.Informations">
            <summary>
            Gets or sets the Promotion Additional Information.
            For example - If out of stock, you will get the discount for 2 bottles of Sprite.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.DescriptionData">DescriptionData</see></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion.ValidDaysFromRegistration">
            <summary>
            Gets or sets the ValidDaysFromRegistration's which holds the number of days the promotion is valid after the customer registers to the promotion. 
            </summary>
            <value>A <see cref="T:System.Int32">Integer</see> value indicating the number of days.
            The default is <see langword="null"/></value>.
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion.Merge(Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion)">
            <summary>
             Merges the current advertisement promotion with the assigned <paramref name="advertisement">parameter</paramref>.
            </summary>
            <param name="advertisement">An <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion">IAdvertisementPromotion</see> to merge with the current advertisement promotion.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionDao">
            <summary>
            Represents the data access point required for advertisement promotions data.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionDao.FindAllAdvertisementContains(System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Finds the advertisement promotion by the ID. 
            </summary>
            <param name="entityIds">The external entities ID.</param>
            <param name="channelIds">The external channels ID.</param>
            /// <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"><![CDATA[IEnumerable<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion">IAdvertisementPromotion</see></value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionDao.Delete(System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Deletes the advertisement promotion.
            </summary>
            <param name="entityIds">The external entities ID.</param>
            <param name="channelIds">The external channels ID.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionDao.SaveOrUpdate(Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion)">
            <summary>
            Saves or updates the advertisement promotion.
            </summary>
            <param name="advertisementPromotion">The <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion">advertisement promotion</see> saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionDao.GetAll">
            <summary>
            Gets the collection of advertisement promotions. 
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"><![CDATA[IEnumerable<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion">IAdvertisementPromotion</see></value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionDao.GetAll(Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion)">
            <summary>
            Gets the collection of advertisement promotions starting from a specific advertisement promotion. 
            </summary>
            <param name="advertisementPromotion">The <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion">advertisement promotion</see> </param>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"><![CDATA[IEnumerable<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion">IAdvertisementPromotion</see></value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionDao.GetByCriteria(Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria)">
            <summary>
            Returns the advertisement promotions, which are filtered by complex criteria. <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria"/>
            </summary>
            <param name="advertisementPromotionCriteria">The criteria for filtering the advertisement promotions. <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria"/></param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementPromotionLookUpResult">result </see> of the advertisement promotions lookup.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionDao.DeleteAdvertisementsByPromotionId(System.String)">
            <summary>
            Deletes all advertisements with a specified promotion ID. 
            </summary>
            <param name="promotionId">The external promotion ID.</param>
            /// <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"><![CDATA[IEnumerable<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotion">IAdvertisementPromotion</see></value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementIdentifier`1">
            <summary>
            Represents the advertisement unique identifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementIdentifier`1.LinkedEntities">
            <summary>
            Gets or sets the linked entity ID that represents the entity which is advertised.
            Can be promotionId ,ItemId etc.. 
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of advertisement linked entities</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.AdvertisementIdentifier`1.Channels">
            <summary>
            Gets or sets Channels, including Mobile,Portal etc.. 
            The advertisements are only displayed  in the above channels.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannel">AdvertisementChannel</see></value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategoryCriteria">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategoryCriteria.ChannelId">
            <summary>
            Gets or sets the advertisement channel ID. The channel ID defines specific marketing channels for the purpose of 
            getting a total count of advertisements for each category and which channel it is linked to.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the advertisement channel ID.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategoryCriteria.FirstResultIndex">
            <summary>
            Gets or sets the index of the first result.
            </summary>
            <value>An <see cref="T:System.Int32">integer</see> that contains an index of the first result.</value>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategoryCriteria.MaxResultAmount">
            <summary>
            Gets and sets the maximum number of advertisement categories in the index which is limited for paging.
            </summary>
            <value>An <see cref="T:System.Int32">integer</see> that contains the maximum number of records that exist in the search result.</value>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategoryCriteria.IsLimited">
            <summary>
            Gets and sets the bolean value of advertisement categories that are limited for paging.
            </summary>
            <value><see langword="true"/> If result is limited; otherwise <see langword="false"/>.</value>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementCategoryCriteria.IncludeCount">
            <summary>
            Gets and sets the bolean value that indicates if the count should be included in the results.
            </summary>
            <value><see langword="true"/> If count is included; otherwise <see langword="false"/>.</value>    
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannel.Ik">
            <summary>
            Gets or sets the Channel  internal key.
            </summary>
            <value>An <see cref="T:System.Int32">Integer</see> that represents the advertisement channel internal key</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannel.Id">
            <summary>
            Gets or sets the Channel external unique ID.
            </summary>
            <value>A <see cref="T:System.String">string</see> that contains the advertisement channel ID.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannel.Name">
            <summary>
            Gets or sets the Channel name.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the advertisement channel Name.</value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannel.Merge(Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannel)">
            <summary>
             Merges the current channel  with the given <paramref name="advertisementChannel">parameter</paramref>.
            </summary>
            <param name="advertisementChannel">An IAdvertisementChannel to merge with the current channel.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannelDao">
            <summary>
            Represents the interface that provides the data access point which is required for advertisement channel data.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannelDao.GetChannels(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Gets the collection of advertisement channels. 
            </summary>
            <param name="channelIds">A collection of channel Ids to find</param>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"><![CDATA[IEnumerable<T>]]></see> of IAdvertisementPromotion</value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannelDao.SaveOrUpdate(Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannel)">
            <summary>
            Saves or updates the advertisement channel.
            </summary>
            <param name="channel">The <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannel">Advertisement channel</see> to save.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannelDao.Delete(System.String)">
            <summary>
             Delete Channel 
            </summary>
            <param name="channelId">Channel Id</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannelDao.GetAll">
            <summary>
            Gets the collection of advertisement channels. 
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"><![CDATA[IEnumerable<T>]]></see> of <see cref="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementChannel">IAdvertisementChannel</see></value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementImage">
            <summary>
            Represents the image that is used to display an advertisement promotion.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementImage.Advertisement">
            <summary>
            Gets or sets the advertisement internal key.
            </summary>
            <value>An <see cref="T:System.Int32">Integer</see>AdvertisementImageIk</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementImage.Ik">
            <summary>
            Gets or sets the advertisement image  internal ID.
            </summary>
            <value>An <see cref="T:System.Int32">Integer</see>AdvertisementImageIk</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementImage.Image">
            <summary>
            Gets or sets the Image.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementImage.Culture">
            <summary>
            Gets or sets the Image culture.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria">
            <summary>
            Represnts the interface that describes the advertisement promotion lookUp criteria information, which is required for performing a search.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.Channels">
            <summary>
            Gets or sets the advertisement promotion channels.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> that contains the channel Id</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.LinkedPromotions">
            <summary>
            Gets or sets the advertisement promotions that are linked to promotions.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"><![CDATA[ICollection<T>]]></see> that contains the promotion Id</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.ImageType">
            <summary>
            Gets or sets the image size Type (e.g. small,big  etc..). 
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the image type.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.ImageFormat">
            <summary>
            Gets or sets the Format -jpg  etc.. 
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the image format.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.Categories">
            <summary>
            Gets or sets the advertisement promotion categories.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the category Id.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.DescriptionContains">
            <summary>
            Gets the description of the advertisement promotion.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the description of coupon.</value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.LimitToActiveOnly">
            <summary>
            Gets or sets the boolean value indicating which advertisements 
            are active (i.e. When the start date is smaller then Today) and not expired (i.e. When the EndDate bigger thenToday).
            </summary>
            <value><see langword="true"/> if the result is limited by date; otherwise <see langword="false"/>. 
            The default is <see langword="null"/></value>.
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.IncludeImages">
            <summary>
            Gets the boolean value indicating if the advertisement promotions contains images in the look up results.
            </summary>
            <value><see langword="true"/> if result should be limited; otherwise <see langword="false"/>.</value>    
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.FirstResultIndex">
            <summary>
            Gets the index of the first result.
            </summary>
            <value>A <see cref="T:System.Int32">integer</see> that contains index of first result.</value>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.MaxResultAmount">
            <summary>
            Gets a maximum number of advertisement promotions with an index limited for paging.
            </summary>
            <value>A <see cref="T:System.Int32">integer</see> that contains the maximum records that should exists in search result.</value>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.IsLimited">
            <summary>
            Gets the boolean value indicating if a number of advertisement promotions is limited for paging.
            </summary>
            <value><see langword="true"/> if result should be limited; otherwise <see langword="false"/>.</value>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.IncludeCount">
            <summary>
            Gets the boolean value indicating if the count is included in the results.
            </summary>
            <value><see langword="true"/> if count should be included; otherwise <see langword="false"/>.</value>    
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.PromotionStartDateSortBy">
            <summary>
            Gets the sorting type ( ascending or descending ) according to promotion start date.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the ordering type.</value>                
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.PromotionEndDateSortBy">
            <summary>
            Gets the sorting type ( ascending or descending ) according to promotion end date.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the ordering type.</value>                
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.PromotionSavingValueSortBy">
            <summary>
            Gets the sorting type ( ascending or descending ) according to promotion saving value.
            </summary>
            <value>A <see cref="T:System.String">String</see> that contains the ordering type.</value>                
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.PromotionRegistrationRequired">
            <summary>
            Gets the boolean value indicating if the promotion entities require registration.
            </summary>
            <value><see langword="true"/> if promotion advertisement should require registration; otherwise <see langword="false"/>.</value>    
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.LogicalArea">
            <summary>
             Gets the physical location (area) where the advertisement is displayed, which is mapped to a logical area by 3rd party component.
            </summary>
             <value>A <see cref="T:System.String">String</see> that contains the logical area.</value>                
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Advertisement.IAdvertisementPromotionCriteria.BusinessUnits">
            <summary>
             Gets the storeid of the stores where one of the LinkedPromotions is active in one of them.
            </summary>               
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.NotMetException.Name">
            <summary>
            the name of the condition : for example units
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.NotMetException.Type">
            <summary>
            the type , for example Threshold
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.LimitationNotMetException.Scope">
            <summary>
            the limitation scope ,e.g. Promotion,Ticket,Day
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.LimitationNotMetException.ActualValue">
            <summary>
            the actual value the limit reached
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.ConditionNotMetExecption">
            <summary>
            describe the unfulfilled data of the conditions
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ConditionNotMetExecption.#ctor(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.ConditionNotMetExecption})">
            <summary>
            build an exception with a list of unfulfilled conditions
            </summary>
            <param name="execptions"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ConditionNotMetExecption.#ctor(System.String)">
            <summary>
            build with name only , for true false conditions
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ConditionNotMetExecption.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            build an exception with single unmet condition 
            </summary>     
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.ConditionNotMetExecption.ActualValue">
            <summary>
            the actual value the the condition reached
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.ConditionNotMetExecption.Value">
            <summary>
            the value need to be fulfilled
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Description.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Description.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Description.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="culture"></param>
            <param name="type"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IAccountWithdrawal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IAccountWithdrawal.AccountType">
            <summary>
            The customer account to be credited with the accumulated amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IAccountWithdrawal.WithdrawalAmount">
            <summary>
            The amount that should be withdrawn from the customer account
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IAuthorization">
            <summary>
            Define the authorization Requirements to get the rewards of the promotion.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IAuthorization.Authorize(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.IReward})">
            <summary>
            get the rewards that authorized, or still required authorization (with authorizationMessage to authorized).
            not returns rewards that rejected.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.ICapture">
             <summary>
             Represents a condition to allow capturing the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> elements that met the condition.
             </summary>
             <remarks>
             The <see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">ICondition</see> allows defining Boolean conditions that only check IsMet. In some cases, it is also important to capture 
             the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> elements which meet the condition. This is a common practice when implementing purchase conditions, when it is required
             to capture the purchased items that meet the condition, and may therefore be rewarded by a <see cref="T:Retalix.StoreServices.Model.Promotion.IRewardFunction">IRewardFunction</see>
             
             The model tries to keep the concept of conditions as flexible as possible, thus not only anything expressed in a customer order can used as a condition, 
             such as product lines, coupons, payment terms, day of week, date and time, customer, etc.; also external data that can be accessed during 
             promotion evaluation, such as customer's foursquare check-ins, item's central inventory status, central random number generator, etc can be used. 
             Since the concept of conditions is so broad, we have introduced the concept of capturing 'matched entity'. 
             Matched entity is anything that can be matched to fulfill a condition.
             The analogy of a pattern that needs to be matched can help understand the relationship between conditions and matched elements.
             When the pattern of matched elements is found in a customer order, a match is found.
            
             A condition is a building block that is used to express very complex patterns, for example, in the promotion: 
             "Buy a soft drink and a sandwich from a variety and pay only £3; every Monday to Friday between 10:00 to 13:00 (for all customers except store employees)". 
             This promotion's requirements can be expressed by the following conditions:
             •	Buy 1 soft drink from a variety
             •	Buy 1 sandwich from a variety
             •	Day is between Monday and Friday
             •	Time is between 10:00 and 13:00
             •	Customer is not an employee
             
             The above 5 conditions, when the logical AND operator is applied, express the promotion business requirement. Using the above conditions,  
             the following matched elements are identified: product lines, transaction date (day of week), transaction time, customer segmentation. 
             </remarks>>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ICapture.Count(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Gets the number of times, a condition was met.
            </summary>
            <param name="customerOrder"><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">A CustomerOrder.</see></param>
            <returns>The number of times a condition was satisfied.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ICapture.GetMatchedElements(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
             Returns any elements from the Customer Order that are required by the condition.
            </summary>
             <param name="customerOrder"><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">A CustomerOrder.</see></param>
            <returns>a collection of IMatchedElement</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.ICapture.IsRequiredOnce">
            <summary>
            Gets a Boolean value indicating if the condition is required to be met one time only per <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>
            </summary>
            <remarks>
            Sometimes a condition is valid after it was applied once. For example, in the promotion, buy a computer and get 10% off any software. 
            Only one computer is required to be purchased to receive the rewards on each related purchased software. 
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.ICondition">
            <summary>
            Represents the condition for the qualifying promotion.
            </summary>
            <remarks>
            This interface is used to evaluate a given <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order</see> and verify that the condition is met.<br/>
            
            See also <see cref="T:Retalix.StoreServices.Model.Promotion.ICapture">ICapture</see> for a more complex condition, that not only returns a Boolean value indicating if the condition is met, but can also 
            capture the customer order matching elements that where captured.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.ICondition.ExternalId">
            <summary>
            Gets or sets the condition's unique ID.
            </summary>
            <remarks>
            Name should be unique within the set of conditions that are associated with the promotion ...
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ICondition.IsMet(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Returns True when condition is met for the given <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            </summary>
            <remarks>
            Consider the given customer order to see if there is a specific match case.
            </remarks>
            <returns>true if met, false otherwise.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ICondition.TryMet(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Decimal)">
            <summary>
            try to met the condition if not successive <see cref="T:Retalix.StoreServices.Model.Promotion.ConditionNotMetExecption">ConditionNotMetExecption</see> will be thrown  
            </summary>
            <param name="customerOrder"></param>
            <param name="count">number of match</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.ICondition.Criteria">
            <summary>
            Sets or Gets the criteria as a collection of <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionCriterion">IPromotionCriterion</see> for the defined condition.
            </summary>
            <remarks>
            <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionCriterion">IPromotionCriterion</see> is used to specify the relevancy of the condition so only the relevant 
            Conditions will be considered. 
            Using Criterions can both, optimize to matching process and increase the usability of the available Conditions.
            For example, if the same condition can be offered for different products by attaching the proper Criteria.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.ICondition.Promotion">
            <summary>
            the related promotion of the condition
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.ICondition.Type">
            <summary>
            the condition type
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IMatchLimit">
            <summary>
            limit a matching count against <see cref="T:Retalix.StoreServices.Model.Promotion.ICapture">Capture</see> Count
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IMatchLimit.MaxValue">
            <summary>
            the max value allowed to be captured
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IMessageAuthorization.Timing">
            <summary>
            get or set the timing to authorize while transaction. for example: "Once".
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IMessageAuthorization.MessageName">
            <summary>
            get or set the message to authorized.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IMessageAuthorization.ActiveRedemptionSelection">
            <summary>
            get or set the ActiveRedemptionSelection to authorize calculation of promotion redemption.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotion">
            <summary>
             A Promotion represents the rewards offered to a customer against a Customer Order under a set of conditions. 
             A promotion may have a range of rewards corresponding to a range of conditions. A common example of reward scaling 
             is "buy more – get more". 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.Classification">
            <summary>
            describe general purpose of the promotion behavior by
            the collection if its attributes.
            for example : Buy 1 item from 'Dairy' department; get it for 10% discount
            will be classify as temporary price reeducation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.Tags">
            <summary>
            Represents the collection of Tags the promotion can be marked with.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.StartDate">
            <summary>
            Gets or sets the start date of the promotion.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.ExpirationDate">
            <summary>
            Gets or sets the date the promotion expires.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.Status">
            <summary>
            Gets or sets the promotion's status (Active/Suspended).
            </summary>    
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.GroupId">
            <summary>
            Gets or sets the promotion group id<see cref="P:Retalix.StoreServices.Model.Promotion.IPromotion.GroupId">GroupId</see>.  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.ConflictStrategy">
            <summary>
            Gets or sets the promotion's conflict behavior
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.Descriptions">
            <summary>
            Gets or sets the promotion <see cref="T:Retalix.StoreServices.Model.Promotion.Description">Description</see>.  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.MatchLimitations">
            <summary>
            Gets or sets the promotion <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionLimitation">matching count limit</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.Conditions">
            <summary>
            Gets or sets the purchase <see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">ICondition</see>s or a contextual condition to qualify for the promotion.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.RewardFunctions">
            <summary>
            Gets or sets the reward calculated for a specific <see cref="T:Retalix.StoreServices.Model.Promotion.Match.IPromotionMatch">IPromotionMatch</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.Authorization">
            <summary>
            Gets or sets an authorization requirement to Appling the promotion rewards - if required.
            in case the promotion required Authorization of type  <see cref="T:Retalix.StoreServices.Model.Promotion.IMessageAuthorization"/> IMessageAuthorization:
            hold the MessageNae of the  <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">Message</see>, and Timing to be required.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.IncentiveMessage">
            <summary>
            in case marked as true , and the promotion was not triggered ,
            <see cref="T:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessageEngine">Incentive engine</see> will check if any rule completion apply and
            will send <see cref="T:Retalix.StoreServices.Model.Promotion.IncentiveMessage.IIncentiveMessage">Message</see> of incentive.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.DynamiclyExcludeTriggeredItems">
            <summary>
            Determine whether this promotion can apply on promoted items or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.VersionTimeStamp">
            <summary>
            the time the promotion the updated/created
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotion.Evaluate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Evaluates if a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> is eligible for the promotion under the defined conditions, and returns one or more rewards. 
            </summary>
            <param name="customerOrder"></param>
            <returns>the collection of evaluated <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">IReward</see>s</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.InternalId">
            <summary>
            Currently the internal Id is mapped in hbm as the entity key. This should be fixed in the next release.
            To support promotion extensibility, we need to map IPromotion in hbm (and not the business component), so we temporarily expose this internal 
            ID in the interface. Extension can return the IPromotion.Id when implementing this method/
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.IsPartialRewardAllowed">
            <summary>
            When Marked as false , and resolved part of <see cref="T:Retalix.StoreServices.Model.Promotion.Group.IPromotionGroup">partial reward conflict group</see> .
            <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see>  cannot use  triggered resources of other  <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see> 
            to be qualified for a   <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">reward</see> 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.LastUpdated">
            <summary>
            Gets Last Modified Date of the promotion record. Each time the promotion is updated, the LastUpdated gets new value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.IsAuthorizationActiveRedemptionSelection">
            <summary>
            Gets The Active Status Redemption Selection of the promotion record.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotion.TriggeringTiming">
            <summary>
            Level 0 = Item 
            Level 1 = Department 
            Level 2 = Transaction Level
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionComponentResolver">
            <summary>
            abstract creation of promotion components
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionComponentResolver.CreatePromotion(System.String)">
            <summary>
            create <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see>  object by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionComponentResolver.CreateCondition(System.String)">
            <summary>
            create <see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">condition</see>  object by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionComponentResolver.CreateCriterion(System.String)">
            <summary>
            create <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionCriterion">criterion</see> object by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionComponentResolver.CreateLimit(System.String)">
            <summary>
            create <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionLimitation">limit</see> object by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionComponentResolver.CreateRewardLimit(System.String)">
            <summary>
            create <see cref="T:Retalix.StoreServices.Model.Promotion.IRewardLimitation">limit</see> object by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionComponentResolver.CreateRewardFunction(System.String)">
            <summary>
            create <see cref="T:Retalix.StoreServices.Model.Promotion.IRewardFunction">limit</see> object by name
            </summary>
            <param name="rewardFunctionName"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionComponentResolver.CreateRewardLateBinding(System.String)">
            <summary>
            create <see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.IRewardLateBinding">late binding</see> object by name
            </summary>
            <param name="rewardLateBindingName"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionComponentResolver.CreatePointsWitdrwal">
            <summary>
            create poits witdrwal
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionCalculationEngine">
             <summary>
             Drives the calculation business flow.
             Agnostic to the business logic of each promotion implementation.
             </summary>
             <example>
             <code lang="cs">
             <![CDATA[
                 public class PromotionsCalculator
            {
                private readonly IStoreApplication _storeApplication;
                public PromotionsCalculator(IStoreApplication storeApplication)
                {
                    _storeApplication = storeApplication;
                }
             
                public void TestPromotionsExecution(ICustomerOrder customerOrder)
                {
                    var promotionCalculationEngine = _storeApplication.Resolver.Resolve<IPromotionCalculationEngine>();
                    customerOrder.RemoveRewards(rewards);
                    var rewards = promotionCalculationEngine.Calculate(customerOrder);
                    customerOrder.AddRewards(rewards);
                }
            }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionCalculationEngine.Calculate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
             Calculates the promotions by given CustomerOrder
            </summary>
            <param name="customerOrder"></param>
            <returns>a collection of <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">IReward</see>s for the given <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionCalculationEngine.Calculate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.IPromotion})">
            <summary>
            Calculates the promotions by given CustomerOrder and promotions
            </summary>
            <param name="customerOrder"></param>
            <param name="promotions"></param>
            <returns>a collection of <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">IReward</see>s for the given <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionCalculationEngine.GetPromotions(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Get that promotion definitions relevant to the CustomerOrder   
            </summary>
            <param name="customerOrder"></param>
            <returns>a collection of <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">IPromotion</see>s for the given <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionCalculationEngine.Calculate(System.String)">
            <summary>
            Calculates the promotions by given CustomerOrder compressed by JSON
            </summary>
            <param name="customerOrder"></param>
            <returns>CustomerOrder with rewards compressed by JSON</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionCalculationEngine.CalculateForFinalize(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Get the promotion engine result in case of "Finalize" - 
            The FinalizePromotionResult include the rewards and the aggregation of the points to the customer.
            </summary>
            <param name="customerOrder"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionCriterion">
            <summary>
            Represents the evaluation criterion for the promotion condition.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotionCriterion.Key">
            <summary>
            Gets the unique representation of the criterion.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotionCriterion.IsExclude">
            <summary>
            Gets a Boolean value indicating if the criterion is excluded from the execution.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotionCriterion.PromotionId">
            <summary>
            Gets or sets the attached promotion ID of the criterion.
            </summary>
            <remarks>
            must be a valid/existing <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">IPromotion</see>.Id.   
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionCriterion.BuildKeys(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            The return criterion key to the relevant entity.
            </summary>
            <param name="customerOrder"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionCriterion.Evaluate(System.Object)">
            <summary>
            Evaluates a Boolean value indicating if the criterion matches the object.
            </summary>
            <param name="matchedObject"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotionCriterion.CriterionId">
            <summary>
            Gets the ID of the criterion.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotionCriterion.Condition">
            <summary>
            the related condition of the criterion
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotionCriterion.Type">
            <summary>
            the criteria type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotionCriterion.IntersectionSubGroup">
            <summary>
            The intersection sub group
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionDao">
            <summary>
            Represents the data access for promotion data.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.GetByCriteria(System.Collections.Generic.IEnumerable{System.String},Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">IPromotion</see>s attached to the relevant criterion keys.
            </summary>
            <param name="crtierionKeys"></param>
            <param name="customerOrder"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.GetById(System.String)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see> by its ID.
            </summary>
            <param name="promotionId">The external promotion ID.</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.SaveOrUpdate(Retalix.StoreServices.Model.Promotion.IPromotion)">
            <summary>
            Saves or updates the <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see>.
            </summary>
            <param name="promotion">The <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see> saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.DeletePromotionById(System.String)">
            <summary>
            Deletes the <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see> by the ID.
            </summary>
            <param name="promotionId">The promotion's ID.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.GetByIds(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see>s by the given IDs.
            </summary>
            <param name="promotionIds"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.ByCriteria(Retalix.StoreServices.Model.Promotion.SearchCriteriaBase)">
            <summary>
            Gets a list of <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see>s that matched the defined <see cref="T:Retalix.StoreServices.Model.Promotion.SearchCriteria">SearchCriteria</see>.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.PromotionsByCouponId(System.String)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see>s that are configured to be triggered by a specific coupon.
            </summary>
            <param name="couponId">The ID of the coupon to filter.</param>
            <returns>A collection of the relevant <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotions</see>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.PromotionsByCouponInstacne(System.String,System.String,System.String)">
            <summary>
            Retrieves <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see>s by the coupon instance identifiers.
            </summary>
            <param name="barcode"></param>
            <param name="seriesId"></param>
            <param name="offerId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.ResovleDependency(Retalix.StoreServices.Model.Promotion.IPromotion)">
            <summary>
            resolve promotion dependency
            </summary>
            <param name="promotion"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.IPromotion})">
            <summary>
            save new promotions
            </summary>
            <param name="promotions"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.GetPromotionsInGroup(System.Int32)">
            <summary>
            get promoting ids participating in the group
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.IsPromotionExists(System.Collections.Generic.List{System.String})">
            <summary>
            get indication if promotion exist in the repository
            by its id
            </summary>
            <param name="promotionIds"></param>
            <returns>map to promotion id to a flag</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.GetBusinessUnits(System.String)">
            <summary>
            get associate business units of promotion
            </summary>
            <param name="promotionId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionDao.SaveOrUpdate(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.IPromotion})">
            <summary>
            bulk save or update
            </summary>
            <param name="promotions"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionEnquiry">
            <summary>
            represent a enquiry against a  <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>  and a single <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see>
            that allow to capture verity of information about him
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionEnquiry.IsPromotionMet(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.String)">
            <summary>
            try to check if the promotion met the promotion <see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">conditions</see> 
            for example in the order there is 1 Item A , and the promotion hold units condition of 2
            a  <see cref="T:Retalix.StoreServices.Model.Promotion.ConditionNotMetExecption">conditionNotMetExecption</see> 
            exception will be raised that there is a unfulfilled units condition with expected quantity is 2 and
            actual value is 1
            </summary>
            <param name="customerOrder"><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customerOrder.</see></param>
            <param name="promotionId">the id of the given promotion</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionEnquiry.IsPromotionMet(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.String,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            try to check if the promotion met the promotion <see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">conditions</see> 
            for example in the order there is 1 Item A , and the promotion hold units condition of 2
            a  <see cref="T:Retalix.StoreServices.Model.Promotion.ConditionNotMetExecption">conditionNotMetExecption</see> 
            exception will be raised that there is a unfulfilled units condition with expected quantity is 2 and
            actual value is 1
            </summary>
            <param name="customerOrder"><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customerOrder.</see></param>
            <param name="promotionId">the id of the given promotion</param>
            <param name="orderLine">In case of a promotion condition regarding a specific line item</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionEnquiry.Enquiry(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.String)">
            <summary>
            Enquiry of the promotion sections, for example <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionLimitation">promotion limitation</see>.
            </summary>
            <param name="customerOrder"><see cref="T:Retalix.StoreServices.Model.Promotion.PromotionEnquiryInformation">customerOrder.</see></param>
            <param name="promotionId">the id of the given promotion</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Promotion.PromotionEnquiryInformation">Promotion enquiry information</see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionFactory">
            <summary>
            Represents an abstract factory of a set of promotion components.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionFactory.CreatePromotion(System.String)">
            <summary>
            Create a new instance of a promotion.
            </summary>
            <param name="promotionType"></param>
            <returns>the newly created <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">IPromotion</see></returns>  
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionFactory.CreateCondition(System.String)">
            <summary>
            Creates a new instance of a promotion condition.
            </summary>
            <param name="conditionType"></param>
            <returns>the newly created <see cref="T:Retalix.StoreServices.Model.Promotion.ICondition">ICondition</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionFactory.CreateRewardFunction(System.String)">
            <summary>
            Creates a new instance of a promotion reward.
            </summary>
            <param name="rewardFunctionType"></param>
            <returns>the newly created <see cref="T:Retalix.StoreServices.Model.Promotion.IRewardFunction">IRewardFunction</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionFactory.CreatePromotionCriterion(System.String)">
            <summary>
            Creates the criteria for a condition.
            </summary>
            <param name="promotionCriterionType"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionFactory.CreatePromotionLimitation(System.String)">
            <summary>
            Creates the promotion limit.
            </summary>
            <param name="promotionLimitionType"></param>
            <returns>the newly created <see cref="T:Retalix.StoreServices.Model.Promotion.IRewardLimitation">IPromotionLimitation</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionFactory.CreateRewardLimitation(System.String)">
            <summary>
            Creates the promotion reward limit.
            </summary>
            <param name="rewardLimitionType"></param>
            <returns>the newly created <see cref="T:Retalix.StoreServices.Model.Promotion.IRewardLimitation">IRewardLimitation</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionFactory.CreateRewardLateBinding(System.String)">
            <summary>
            Create reward late binding
            </summary>
            <param name="rewardLateBindingType"></param>
            <returns>a new instance <see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.IRewardLateBinding"/>IRewardLateBinding</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionFactory.CreatePointsWitdrwal">
            <summary>
            create poits witdrwal
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionLimitation">
            <summary>
            Represents any limitation that can be applied to a promotion.
            For example, a redemption limit,reward limit etc
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionLimitation.Apply(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Promotion.IPromotion,System.Decimal)">
            <summary>
            Applies the limitation on a Customer Order.
            </summary>
            <param name="customerOrder">Customer Order</param>
            <param name="promotion"></param>
            <param name="value">The value that is not limited.</param>
            <returns>the limited value</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionLimitation.TryMet(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Int32)">
            <summary>
            try to met the condition if not successive <see cref="T:Retalix.StoreServices.Model.Promotion.ConditionNotMetExecption">ConditionNotMetExecption</see> will be thrown  
            </summary>
            <param name="customerOrder"></param>
            <param name="count">number of match</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionLimitation.Enquiry(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Enquiry the promotion against the customer Order.
            </summary>
            <param name="customerOrder">Customer Order</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Promotion.PromotionEnquiryInformation">promotion enquiry information</see> </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionPriorityProfile">
            <summary>
            Promotion priority profile is a composite that defines how promotions that match to the profiles are prioritized. 
            Promotion priority determines the sequence of promotions are executed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotionPriorityProfile.Name">
            <summary>
            Gets the name of the profile.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotionPriorityProfile.Priority">
            <summary>
            Gets or sets the execution order of the promotions that match the profile.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionPriorityProfile.IsApplicable(Retalix.StoreServices.Model.Promotion.IPromotion)">
             <summary>
             Returns true if a given promotion is applicable to the profile.
             </summary>
             <remarks>
             Profiles are constructed as hierarchies of profiles. If IsApplicable returns true, it is assumed that the promotion is relevant to at least one
             of the internal PriorityProfiles (if any). 
             </remarks>
             <example>
             <code lang="cs">
             <![CDATA[
             // Build a Composite of priority profiles that ensures that all supplier promotions are executed before all retailer promotions
             //the internal ordering of the supplier and retailer promotions is defined by the internal profiles.
            public class PromotionPrioritiesDefaultResolver 
            {
                public IEnumerable<IPromotionPriorityProfile> ResolvePromotionPriorityProfiles()
                {
                    return new List<IPromotionPriorityProfile>
                           {
                               new SupplierPromotionsProfile(0, new List<IPromotionPriorityProfile> {
                                     new AmountOffRewardPriorityProfile(10, null),
                                     new PercentageOffRewardPriorityProfile(20, null),
                                     new NewPriceRewardPriorityProfile(30, null),
                                     new FreeItemRewardPriorityProfile(40, null),
                                     new AmountOffPerTicketRewardPriorityProfile(100, null),
                                     new PercentageOffPerTicketRewardPriorityProfile(200, null)},
            
                               new RetailerPromotionsProfile(1, new List<IPromotionPriorityProfile> {
                                     new AmountOffRewardPriorityProfile(10, null),
                                     new PercentageOffRewardPriorityProfile(20, null),
                                     new NewPriceRewardPriorityProfile(30, null),
                                     new FreeItemRewardPriorityProfile(40, null),
                                     new AmountOffPerTicketRewardPriorityProfile(100, null),
                                     new PercentageOffPerTicketRewardPriorityProfile(200, null),
                           };
                }
            }
             
             ]]>
             </code>
             </example>        /// <param name="promotion"></param>
             <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionPriorityProfile.Prioritize(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.IPromotion})">
            <summary>
            Returns a prioritized enumeration of the given <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">IPromotion</see>s.
            </summary>
            <param name="promotions"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionPriorityProfile.AddPromotionPriorityProfile(Retalix.StoreServices.Model.Promotion.IPromotionPriorityProfile)">
            <summary>
            Adds a <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionPriorityProfile">IPromotionPriorityProfile</see> to the Composite profile.
            </summary>
            <param name="priorityProfile"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IPromotionPriorityProfile.PriorityProfiles">
            <summary>
            Gets an enumeration of promotion priority profiles internal to the Composite profile.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionPriorityResolver">
            <summary>
            Represent the method used to resolve the promotions priorities according to the priority profiles.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IPromotionPriorityResolver.ResolvePromotionPriorityProfiles(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.IPromotionPriorityProfile})">
            <summary>
            Returns a prioritized enumeration of profiles.
            </summary>
            <returns>collection of <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionPriorityProfile">IPromotionPriorityProfile</see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IReward">
            <summary>
            Represents an immediate or deferred benefit that is applied against a Customer Order.
            </summary>
            <remarks>
            A reward is an immediate or deferred benefit that is applied against a customer order. It is an essential part of the promotion that expresses  
            “what happens when all promotion conditions are met". The reward is returned by a reward function for a given promotion match. Retalix 10 comes with common rewards 
            out of the box (such as price modifiers, account balance modifiers, coupons,etc) but there are no limits as to what can applied as a reward, as this is developed by extensions. 
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IReward.Apply(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
             Applies a reward to the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> 
            </summary>
             <remarks>
             Modifies a customer order according to the given reward. For example, Discount rewards that update product price modifiers, deferred rewards that 
             update the customer's account balance.
             </remarks>
            <param name="customerOrder"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IReward.Remove(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
             Undo any modification that was done to the customer order by the reward.
            </summary>
            <param name="customerOrder"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IReward.WriteLog(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentWriter,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.String)">
            <summary>
            Writes the log information to a given log object.
            </summary>
            <param name="writer"></param>
            <param name="customerOrder"></param>
            <param name="cultureName"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IReward.AccountWithdrawal">
            <summary>
            The withdrawal amount that will be taken from the customer's account in exchange for this reward.
            </summary>
            <remarks>
            A reward can be given in exchange to customer account balance withdrawal, example: free item for 100 points.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IReward.PromotionMatch">
            <summary>
             The <see cref="T:Retalix.StoreServices.Model.Promotion.Match.IPromotionMatch"/> upon which this reward was calculated.
            </summary>
             <remarks>
             The Promotion match that represents the matched elements required by the promotion.
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IReward.QualifyingSpend">
            <summary>
            Get the amount of the lines that cause the promotion to be triggered
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IReward.IsRequiredAuthorization">
            <summary>
            Is the reward should be applied on customer order, or require an authorization.
            To authorize the reward - add <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionInstruction"/> ApprovalMessageInstruction with the "promotionId" and "approved" to the customerOrder. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IReward.AuthorizationMessage">
            <summary>
            the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage"/> message that should be displayed for the authorization - if required, and their type ("Body", "Title", etc').
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IReward.AuthorizationResolvedMessage">
            <summary>
            the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage"/> message that should be displayed for the authorization - if required
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IRewardFunction">
            <summary>
            Represents the calculation on a reward for a given <see cref="T:Retalix.StoreServices.Model.Promotion.Match.IPromotionMatch">IPromotionMatch</see>
            </summary>
            <remarks>
            Use this interface to calculate the reward for a given <see cref="T:Retalix.StoreServices.Model.Promotion.Match.IPromotionMatch">IPromotionMatch</see>.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardFunction.Execute(Retalix.StoreServices.Model.Promotion.Match.IPromotionMatch,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Calculates a reward for a given <see cref="T:Retalix.StoreServices.Model.Promotion.Match.IPromotionMatch">IPromotionMatch</see>
            </summary>
            <param name="promotionMatch">an IMatch that is legitimate for a reward.</param>
            <param name="customerOrder">the customer order that is a candidate for the reward.</param>
            <returns>a reward that can be applied to an <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see></returns>
            <example>
            <code lang="cs">
            <![CDATA[
            // An extension implementation of IRewardFunction that uses a central lottery service to return a winning prize identifier
            // The price identifier is printed on the receipt and collected in the main till.
            public class LotteryRewardFunction : IRewardFunction
            {
                ILotteryService _lotteryService;
            
                public LotteryRewardFunction(ILotteryService lotteryService)
                {
                    _lotteryService = lotteryService;
                }
            
                IReward Execute(IPromotionMatch promotionMatch, ICustomerOrder customerOrder)
                {
                    // The prize code will be printed on the receipt to be collected from the main till.
                    var prizeCode = _lotteryService.GetRandomPrizeCode();
                    return new LotteryPrize(prizeCode);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IRewardFunction.Limitations">
            <summary>
            Gets or sets a <see cref="T:Retalix.StoreServices.Model.Promotion.IRewardLimitation">IRewardLimitation</see> to restrict the reward value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IRewardFunction.Promotion">
            <summary>
            the related promotion of the condition
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IRewardFunction.RewardLateBindings">
            <summary>
            A reward function can reference zero or more late bindings which it must use in order to resolve the reward value 
            that should be calculated by the reward function.  
            Get or set <see cref="T:Retalix.StoreServices.Model.Promotion.Rewards.IRewardLateBinding">IRewardLateBinding</see> to resolve the reward value.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IRewardSimulation">
            <summary>
            Represents the reward simulation allowed for different customer order states.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardSimulation.SimualteAsMember(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Collections.Generic.List{System.String})">
            <summary>
            Simulates the reward when a customer card exists in the transaction.
            </summary>
            <param name="customerOrder"></param>
            <param name="segmentExternalId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IRewardStrategy">
            <summary>
             Represents the reward strategy that defines the logic of selecting rewards for a list of promotions.
             An example of rewarding strategies may be:<b/>
             'No double dip of product lines', 'No conflict between promotions', 'one reward from a list of promotions', 'top n rewards from a list of promotions'.<b/> 
             Reward strategy is also used by every promotion to orchestrate the reward calculation and the selection of the right promotion match to be rewarded.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardStrategy.GetRewards(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.IPromotion})">
            <summary>
            Applies the IRewardStrategy on the given <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> and <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">IPromotion</see>s and returns the applicable <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">s</see>s. 
            </summary>
            <param name="customerOrder"></param>
            <param name="promotions"></param>
            <returns>the <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">IReward</see>s of a given list of promotions according to the rewarding strategy</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.ITransactionLogPromotions">
            <summary>
            Create promotions from specific transaction log
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ITransactionLogPromotions.GetPromotionsFromTLog(System.Xml.Linq.XDocument)">
            <summary>
            Get promotions from transaction log
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Match.IPromotionMatch">
            <summary>
            Represents the set of matched elements that were captured from the customer order and are required for the promotion.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.IPromotionMatch.Count">
            <summary>
            Gets the number of times the promotion was matched. 
            </summary>
            <remarks>
             When the IMatch represents a promotion match, the count represents the number times the promotion conditions were met; 
             the customer is therefore entitled to that number of rewards.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.IPromotionMatch.Item(System.Int32)">
            <summary>
            Gets the IPromotionMatch of a specified index.
            </summary>
            <param name="index"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.IPromotionMatch.Elements">
            <summary>
             Gets all the <see cref="T:Retalix.StoreServices.Model.Promotion.IMatchedElement">elements</see> of a IMatch (non-recursive).
            </summary>
            <returns>the set of <see cref="T:Retalix.StoreServices.Model.Promotion.IMatchedElement">elements</see> from this match</returns>
             <value>A <see cref="T:System.Collections.Generic.IEnumerable`1"><![CDATA[IEnumerable<T>]]></see> collection of <see cref="T:Retalix.StoreServices.Model.Promotion.IMatchedElement">IMatchedElement</see></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.IPromotionMatch.Promotion">
            <summary>
            Gets the Promotion ID of the <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">IPromotion</see> match.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.IPromotionMatch.RewardScale">
            <summary>
             Gets the RewardScale considered for the match.
            </summary>
             <remarks>
             The RewardScale is the factor assigned by the match for the reward calculation.
             </remarks>
             <value>An <see cref="T:System.Int32">Integer</see> that represents the reward scale.</value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Match.IPromotionMatch.GetElementsByConditionId(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.String)">
            <summary>
            Gets the matched elements that were applied to the given condition.
            </summary>
            <param name="customerOrder"> </param>
            <param name="conditionId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Match.MatchedAccount">
            <summary>
            Represents <see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount">IUpdatableAccount</see> in the <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">Customer</see> that was captured by one of the promotion conditions.
            </summary>
            <remarks>
            MatchedAccount is a widely used representation of a MatchedObject that is the matched customer account.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.MatchedAccount.Name">
            <summary>
            Gets the name that identifies the matched elements.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Match.MatchedAccount.#ctor(Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount)">
            <summary>
            Creates a Matched Account. A Matching Value is taken from the account balance.
            </summary>
            <param name="account"><see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount">The matched account.</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Match.MatchedAccount.#ctor(Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount,System.Decimal)">
            <summary>
            Creates a MatchedOrderUnitLine.
            </summary>
            <param name="matchedAccount"><see cref="T:Retalix.StoreServices.Model.Customer.Accounts.ICustomerAccount">The matched account.</see></param>
            <param name="value">Specific matching value</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Match.MatchedCouponLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.MatchedCouponLine.Name">
            <summary>
            Gets the name that identifies the matched elements.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Match.MatchedCouponLine.#ctor(Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine)">
            <summary>
            Creates a MatchedCouponLine. 
            </summary>
            <param name="couponLine"><see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine">The matched coupon line.</see></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Match.MatchedOrderUnitLine">
            <summary>
            Represents an <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> in the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> that was captured by one of the promotion conditions.
            /// </summary>
            <remarks>
            MatchedOrderUnitLine is a widely used representation of a MatchedObject that is simply the matched Order unitLine.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.MatchedOrderUnitLine.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Match.MatchedOrderUnitLine.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine)">
            <summary>
            Creates a MatchedOrderUnitLine. A MatchingValue is taken from the order line amount
            </summary>
            <param name="orderLine"><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">The matched order unit line.</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Match.MatchedOrderUnitLine.#ctor(Retalix.StoreServices.Model.Promotion.Match.MatchedOrderUnitLine,System.Decimal)">
            <summary>
            Creates a MatchedOrderUnitLine.
            </summary>
            <param name="matchedOrderUnitLine"><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">The matched order unit line.</see></param>
            <param name="value">Specific matching value</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Match.MatchedOrderLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.MatchedOrderLine.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Match.MatchedOrderLine.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Creates a MatchedOrderUnitLine. A MatchingValue is taken from the order line amount.
            </summary>
            <param name="orderLine"><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">The matched order unitLine.</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Match.MatchedOrderLine.#ctor(Retalix.StoreServices.Model.Promotion.Match.MatchedOrderLine,System.Decimal)">
            <summary>
            Creates a MatchedOrderUnitLine.
            </summary>
            <param name="matchedOrderLine"><see cref="T:Retalix.StoreServices.Model.Promotion.Match.MatchedOrderLine">The matched order unitLine.</see></param>
            <param name="value">Specific matching value</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Match.MatchedPaymentTerm">
            <summary>
            Represents an <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">IOrderLine</see> in the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> that was captured by one of the promotion conditions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.MatchedPaymentTerm.MatchedOrderLines">
             <summary>
             The matched order unit lines that are paid by the matched tender.
             </summary>
             <remarks>
             When a payment term is captured for a certain amount, it is also recommended to correlate the order unit lines for the  respective amount.
             The order unit lines are the lines affected by any discount that may be given on the amount of the captured tender.
             For example, spend more than $50 with Visa and get 10% off the amount paid with Visa. The 10% is actually reduced from order unit lines. 
            
             The corresponding captured order unit lines take into account any excluded criteria.
             For example, spend more than $50 in the store (excluding the electronic department) and get %5 off the paid amount. In that case, the 
             captured order unit lines will not include items from the electronic department, not effecting the net price.
             </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Match.MatchedPaymentTerm.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm,System.Decimal,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.Match.MatchedElement{Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine}})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="matchedOrderUnitLines"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Match.MatchedPaymentTerm.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.MatchedPaymentTerm.Name">
            <summary>
            The unique identifier of the matched tender.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Match.MatchedElement">
            <summary>
             Represents the Temporary Implementation of the interface.  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.MatchedElement.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.Match.MatchedElement`1">
            <summary>
             Represents the generic version of the IMatchedElement for type-safety.
            </summary>
            <typeparam name="T">The type of the MatchedElement</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.Match.MatchedElement`1.#ctor(`0,System.Decimal)">
            <summary>
             Represents the MatchedElement construct to initialize its properties.
            </summary>
            <param name="source"></param>
            <param name="value"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.MatchedElement`1.Source">
            <summary>
             Gets and sets a type-safe version of <see cref="T:Retalix.StoreServices.Model.Promotion.IMatchedElement">IMatchedElement.Source</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.Match.MatchedElement`1.Value">
            <summary>
             Gets and sets a a type-safe version of <see cref="T:Retalix.StoreServices.Model.Promotion.IMatchedElement">IMatchedElement.MatchingValue</see>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.PromotionPriorityProfile">
            <summary>
            Represents the base implementation of abstract Promotion Priority Profiles.
            </summary>
            <remarks>
            A promotion priority profile is a composite that allows profile implementations to build complex hierarchies that sort promotions.
            The core comes with the following profile implementations:
            <t>o AmountOffRewardPriorityProfile</t> 
            <t>o PercentageOffRewardPriorityProfile</t> 
            <t>o NewPriceRewardPriorityProfile</t> 
            <t>o FreeItemRewardPriorityProfile</t>
            <t>o AmountOffPerTicketRewardPriorityProfile</t>
            <t>o PercentageOffPerTicketRewardPriorityProfile</t>
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.PromotionPriorityProfile.PrioritizeByThisPrioritizer(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Promotion.IPromotion})">
             <summary>
            Represents the specific prioritization logic that is implemented by a leaf profile.
             </summary>
             <param name="applicablePromotions"></param>
             <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.PromotionPriorityProfile.PromotionProfileSorting">
            <summary>
            Sorts the promotion priority profiles by their priority.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Promotion.PromotionPriorityProfile.PromotionProfileSorting.ProfilePrioritySorter">
            <summary>
            Compares two promotion priority profiles by their priorities.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.SearchCriteria">
             <summary>
            Represents the search criteria for promotions.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.Classification">
            <summary>
            the classification of the promotion
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.Products">
             <summary>
            Gets or sets the list of matched products applicable to the searched promotion.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.FromStartDate">
            <summary>
            Gets or sets the from date of the promotion start date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.ToStartDate">
            <summary>
            Gets or sets the to date of the promotion start date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.FromExpirationDate">
            <summary>
            Gets or sets the from date of the promotion expiration date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.ToExpirationDate">
            <summary>
            Gets or sets the to date of the promotion expiration date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.Description">
             <summary>
            Gets or sets the description criteria.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.ExternalCode">
             <summary>
            Gets or sets the external code of the promotion.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.Suspended">
             <summary>
            Gets or sets the suspend promotion criteria.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.BusinessUnits">
             <summary>
            Gets or sets the linked business units criteria.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.IsTriggeredManualy">
             <summary>
            Gets or sets the Boolean value indicating if the promotion is triggered manually.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.IsEndOfTicket">
             <summary>
            Gets or sets the Boolean value indicating if the promotion is triggered on total ticket.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.CouponSearchCriteria">
            <summary>
            Gets or sets the coupon search criteria.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.PagingCriteria">
            <summary>
            Gets or sets the paging criteria which limit lookup result count.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.GroupIds">
            <summary>
            promotion that related to group ids
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.LoyaltyCardRequirement">
             <summary>
            A <see cref="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.LoyaltyCardRequirement">loyalty card requirement</see> indicates if the promotion needs loyalty card, and can includes clubs registration indications.
            Club registration: Loyalty customer can register to clubs - A type of  <see cref="T:Retalix.StoreServices.Model.Customer.ISubscriptionService">subscription service</see>.
            The <see cref="P:Retalix.StoreServices.Model.Promotion.SearchCriteria.LoyaltyCardRequirement">loyalty card requirement</see> can includes indication if there none requirement to be registered to club,
            or if there is a requirement to be registered to a specific club.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.SearchCriteria.#ctor">
             <summary>
            Defines the default criteria.
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.PagingCriteria">
            <summary>
            Represents the paging search criteria for promotions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.PagingCriteria.FromRecord">
            <summary>
            Gets or sets the first record index for paging.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.PagingCriteria.PageSize">
            <summary>
            Gets or sets the page size for paging.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.CouponSearchCriterion">
            <summary>
            Represents the coupon search criteria for promotions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.CouponSearchCriterion.Linkage">
            <summary>
            Gets or sets the coupon Linkage. Issuing\Redemption 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.CouponSearchCriterion.Coupon">
            <summary>
            promotion is triggered by coupon
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.CouponSearchCriterion.Barcode">
            <summary>
            promotion is triggered by full barcode coupon
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.ISearchResult">
             <summary>
            Represents the search results of the promotion.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.ISearchResult.TotalRecordsCount">
             <summary>
            Gets or sets the total records count for paging.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.ISearchResult.MatchPromotions">
             <summary>
            Gets or sets all promotions that match the given criteria.
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ISearchResult.AttachToProduct(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Promotion.IPromotion)">
             <summary>
            Gets or sets a Boolean value indicating if the promotion is attached to a  product in the request.
             </summary>
             <param name="product"></param>
             <param name="promotion"></param>
             <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ISearchResult.AttachToStore(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Promotion.IPromotion)">
             <summary>
            Gets or sets a Boolean value indicating that the promotion is attached to a store.
             </summary>
             <param name="businessUnit"></param>
             <param name="promotion"></param>
             <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ISearchResult.GetCouponBarcodeRequired(Retalix.StoreServices.Model.Promotion.IPromotion)">
             <summary>
            Gets coupon barcode value if the promotion depends on a coupon to be triggered.
             </summary>
             <param name="promotion"></param>
             <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ISearchResult.AttachToStore(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Gets or sets a Boolean value indicating if all promotions are attached to a store in the request.
            </summary>
            <param name="businessUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ISearchResult.AttachToProduct(Retalix.StoreServices.Model.Product.IProduct)">
             <summary>
            Gets all promotions attached to the product.
             </summary>
             <param name="product"></param>
             <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ISearchResult.GetManualRewardBounds(Retalix.StoreServices.Model.Promotion.IPromotion)">
            <summary>
            
            </summary>
            <param name="promotion"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.ISearchResult.GetCouponLinkageType(Retalix.StoreServices.Model.Promotion.IPromotion)">
            <summary>
            get the linked coupon type :
            Redemption : coupon can be redeem by the given promotion
            Issued : coupon can be issued by the given promotion
            None : no linkage coupon exist
            </summary>
            <param name="promotion"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.LoyaltyCardRequirement">
            <summary>
            A requirement for searching  <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotions</see> by <see cref="T:Retalix.StoreServices.Model.Promotion.SearchCriteria">search criteria</see>.
            Provides indication that the promotion trigger if the customer has loyalty card and registrations to clubs.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.LoyaltyCardRequirement.ClubIds">
            <summary>
            The club ids requirement means that the promotion will be triggered if the customer registered to one of the clubs.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.LoyaltyCardRequirement.NoClubs">
            <summary>
            Indicates if the promotion triggered by loyalty card only, without clubs requirement.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.SearchCriteriaBase">
            <summary>
            base implantation for promotion search criteria
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.TemporaryPriceRedactionCriteria">
            <summary>
            criteria meet the following :
            1. new price on unit or unit of measure  <see cref="T:Retalix.StoreServices.Model.Promotion.IRewardFunction">reward</see>.
            2. active and valid  <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotion">promotion</see> ( dates and status ) 
            3. <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionClassification">classification</see> is TPR or UOMNewPrice
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IMatchedElement">
            <summary>    
            Represents the IMatchedElement interface which is used to place the actual matched elements from the customer order.
            </summary>
            <remarks>
            These elements are usually the order lines in the customer order, but can also be any type of element besides the items (e.g.the current date, time, etc).
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IMatchedElement.Name">
            <summary>
            Matched element name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IMatchedElement.Source">
            <summary>
             Gets and sets the actual element that is matched.  
            </summary>
            <returns>an unknown type reference to the matched element</returns>
            <remarks>
             The source is usually an object that is in the ICustomerOrder.
             This type of specified object is unknown at this level, and an issue the user must resolve.
             Resolving these issues are usually performed using the <see cref="T:Retalix.StoreServices.Model.Promotion.Match.MatchedElement`1">MatchedElement&lt;T&gt;</see> which is a generic version of this interface.
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.IMatchedElement.Value">
            <summary>
             Gets and sets a decimal value that is set by the Condition, which is evaluated by() and transferred to the Rewarding calculations.  
            </summary>
            <returns>a decimal value that represents the matching value assigned during the evaluation</returns>
            <remarks>
             MatchingValue is an easy way to pass information from the condition evaluation process to the Rewarding calculation.
             This is often required in order to coordinate the evaluation and the rewarding processes.
             For example:
             "Spend 10$" and create a customer order of one product with a price of 25$. In this case the condition is matched twice. 
             Therefore, the condition will return an IMatch of two IMatches and both refer to the same product, and each has the MatchedValue = 10$.
             </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IPromotionInstruction">
            <summary>
            An instruction to promotion engine.
            </summary>
            <remarks>
            Promotion instructions are used to affect promotion calculation in cases where the engine is lacking some information. 
            Common examples are: 
            Manual promotion instruction - the cashier requests to activate a manual promotion, providing promotion id and reward amount.
            Customer promotion approval - some promotions require customer approval; this is a common practice when the promotion redeem points from a member account.
            
            The promotion instructions are associated with a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order</see>. The promotion engine acts upon all instructions contained in CustomerOrder.PromotionInstructions    
            Promotion instructions may be used by extensions to inject additional promotions to the promotion engine. 
            </remarks>>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.IRewardsSummary">
            <summary>
            Represents the reward summary of the reward simulation.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardsSummary.CouldHaveEarnedToAccount(System.String)">
            <summary>
            Calculates the possible earned points.
            </summary>
            <param name="accountId">Member account unique id</param>
            <returns>possible reward value in points</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardsSummary.CouldHaveRedeemedFromAccount(System.String)">
            <summary>
            Calculates the possible redeemed points.
            </summary>
            <param name="accountId">Member account unique id</param>
            <returns>possible redeem value in points</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardsSummary.CouldHaveEarnedMoney">
            <summary>
            Calculates the possible monetary reward.
            </summary>
            <returns>possible reward value</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardsSummary.CouldHaveEarnedToAllAccount">
            <summary>
            Calculates the possible earned points to all member accounts.
            </summary>
            <returns>possible reward value in points</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardsSummary.CouldHaveRedeemedFromAllAccount">
            <summary>
            Calculates the possible redeemed points from all member accounts.
            </summary>
            <returns>possible redeem value in points</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardsSummary.TotalSaving">
            <summary>
            Calculates the possible monetary reward difference between customer order and relevant Rewards  .
            </summary>
            <returns>possible reward value difference</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.IRewardsSummary.CouldHaveEarnedRewards">
            <summary>
            Calculates the possible monetary rewards.
            </summary>
            <returns>possible monetary rewards</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Promotion.StringMatch">
            <summary>
            Represents the match string strategy.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Promotion.StringMatch.#ctor(System.String)">
            <summary>
            Represents the build string match with value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.StringMatch.Value">
            <summary>
            Gets or sets the value of the string.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Promotion.StringMatch.MatchMode">
            <summary>
            Gets or sets the Exact or AnyWhere value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.RefundVoucher.IRefundVoucher.Status">
            <summary>
            0 - Active
            1 - Locked
            2 - Burned
            3 - Expired
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.RefundVoucher.IRefundVoucher.CreationDate">
            <summary>
            Record timestamp when created.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.RefundVoucher.IRefundVoucher.DateTimeUpdate">
            <summary>
            Record timestamp when updated.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IVoidWarrantyItemRestrictionBehavior">
            <summary>
            Represents a <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule.Behavior">business rule behavior</see> that
            is triggered when the user void a linked item with warranty tag.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IActivityRestrictionBehaviorExtension">
            <summary>
            An extension point for adding POS function rules
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.ITransactionBeginRestrictionBehavior">
            <summary>
            Represents a <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule.Behavior">business rule behavior</see> that
            is triggered when the user begin a transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IDatesRestrictionBehavior.DateType">
            <summary>
             represents date types. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IDatesRestrictionBehavior.DateOperator">
            <summary>
             represents operators types. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IDatesRestrictionBehavior.Days">
            <summary>
             represents number of days. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IDatesRestrictionBehavior.Hours">
            <summary>
             represents number of hours. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IUnavailableIngredientRestrictionBehavior.UnavailableType">
            <summary>
             The Unavailable ingredient type - for all product\ingredient  
             or for main item with default ingredient
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.UnavailableIngredientType.UnavailableProduct">
            <summary>
             Apply on unavailable product (parent items or ingredient)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.UnavailableIngredientType.UnavailableDefaultIngredient">
            <summary>
             Apply on parent item with default unavailable ingredient 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IVoidTabRestrictionBehavior">
            <summary>
            Represents a behavior which is invoked during a tab void
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IVoidTabRestrictionBehavior.ContainsAuthorizedOnlineItem">
            <summary>
            Indicates whether a validation on customer order should be executed following these values:
            1. True - the customer order is validated to contain order lines with online authorized products.
            2. False - the customer order is validated to not contain order lines with online authorized products.
            3. Null - no validation is performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IOpenPriceRestrictionBehavior.MaxAmount">
            <summary>
             represents the maximum allowed price amount on open price.
            </summary>       
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IOpenPriceRestrictionBehavior.MinAmount">
            <summary>
             represents the minimum allowed price amount on open price.
            </summary>       
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IPriceVerifyRestrictionBehavior.Direction">
            <summary>
             reperents increase or decrease in price change. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IPriceVerifyRestrictionBehavior.MaxPercentageChange">
            <summary>
            The change of the initial price amount by percantage. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IPriceVerifyRestrictionBehavior.MaxFixedValueChange">
            <summary>
            The change of the initial price amount by fixed value. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IRecallTransactionRestrictionBehavior">
            <summary>
            Represents a <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.IBusinessRule.Behavior">business rule behavior</see> that
            is triggered when the user recalls a transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IRecallTransactionRestrictionBehavior.MaxHoursSinceSuspend">
            <summary>
            Gets or sets the maximum time duration, in hours, since the the transaction has been suspended.
            </summary>
            <remarks>
            Null indicates that this property will be ignored and only <see cref="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IRecallTransactionRestrictionBehavior.IsRecallLimitedForSameBusinessDay"/>
            will be checked.
            Otherwise if the transaction is recalled a number of hours equal to or more than this value and
            <see cref="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IRecallTransactionRestrictionBehavior.IsRecallLimitedForSameBusinessDay"/> is satisfied or not applicable, the rule
            will be triggered.
            If <see cref="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IRecallTransactionRestrictionBehavior.IsRecallLimitedForSameBusinessDay"/> is false, this value cannot be null.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IRecallTransactionRestrictionBehavior.IsRecallLimitedForSameBusinessDay">
            <summary>
            Gets or sets a value indicating if recalling of a transaction is allowed only in the current business day.
            True indicates that a transaction can be recalled on the same business day as it was suspended.
            False indicates that recall is limited by the <see cref="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IRecallTransactionRestrictionBehavior.MaxHoursSinceSuspend"/> (and not necessarily to the same business day).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.ISuspendTransactionRestrictionBehavior.ContainsAuthorizedOnlineItem">
            <summary>
            Gets or sets a value indicating whether the behavior should be triggered when the transaction
            contains an authorized online item.
            </summary>
            <remarks>
            True indicates that the behavior will be triggered when an authorized online item exists in the transaction.
            False indicates that the behavior will be triggered only when no authorized online items exist in the transaction.
            Null indicates that the behavior will be triggered regardless of whether or not an authorized online item exists in the transaction.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IVoidTransactionRestrictionBehavior">
            <summary>
            Represents a behavior which is invoked during a transaction void
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Rules.IVoidTransactionRestrictionBehavior.ContainsAuthorizedOnlineItem">
            <summary>
            Indicates whether a validation on customer order should be executed following these values:
            1. True - the customer order is validated to contain order lines with online authorized products.
            2. False - the customer order is validated to not contain order lines with online authorized products.
            3. Null - no validation is performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BusinessRules.Conditions.IProductCondition.ProductIds">
            <summary>
            The list of product IDs assigned to the product condition.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Interventions.IInterventionStrategyFactory">
            <summary>
            Provides intervention handling strategies.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Interventions.IInterventionStrategyFactory.GetNotSatisfiedHandlingStrategy(Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleEvaluationException)">
            <summary>
            Returns an intervention-handling strategy designed to handle <paramref name="exception"/>.
            </summary>
            <param name="exception">The <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleEvaluationException"/> subtype for which to get the appropriate handling strategy.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Interventions.IInterventionStrategyFactory.GetSatisfiedHandlingStrategy(Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention)">
            <summary>
            Returns an intervention-handling strategy designed to handle <paramref name="intervention"/>.
            </summary>
            <param name="intervention">The <see cref="T:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention"/> subtype for which to get the appropriate handling strategy.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Interventions.IRestrictionInterventionHandler">
            <summary>
            Provides the interface for solving interventions for conditional restriction rules.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Interventions.IRestrictionInterventionHandler.SolveIntervention(Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention)">
            <summary>
            Attempts to solve <paramref name="intervention"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Interventions.IRestrictionInteventionNotSatisfiedHandlingStrategy">
            <summary>
            Defines an interface for handling a request to solve a restriction which results in a not-satisfied result.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Interventions.IRestrictionInteventionNotSatisfiedHandlingStrategy.CanHandle(Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleEvaluationException)">
            <summary>
            Returns true if the current strategy can handle <paramref name="exception"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Interventions.IRestrictionInteventionNotSatisfiedHandlingStrategy.Handle(Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleEvaluationException)">
            <summary>
            Handles the result of an attempt to solve an intervention that results in <paramref name="exception"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Interventions.IRestrictionInteventionSatisfiedHandlingStrategy">
            <summary>
            Defines an interface for handling a request to solve a restriction which results in a satisfied result.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Interventions.IRestrictionInteventionSatisfiedHandlingStrategy.CanHandle(Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention)">
            <summary>
            Returns true if the current strategy can handle <paramref name="intervention"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Interventions.IRestrictionInteventionSatisfiedHandlingStrategy.Handle(Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention,Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            Handles the result of an attempt to solve <paramref name="intervention"/> that results in a satisfied result.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConversationAudit">
            <summary>
            Encapsulates a sequence of <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup">IAuditGroup</see> intances
            which together represent a "conversation" between a client and the server that
            may span multiple requests. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConversationAudit.TransactionId">
            <summary>
            Gets the id of the common associated transactional entity.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConversationAudit.IsApproved">
            <summary>
            Gets a boolean indicating whether the business activity represented by this conversation was approved or rejected.
            </summary>
            <remarks>
            Returns true when all contained audits are satisfied; returns false when one or more contained audits are not satisfied.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConversationAudit.AuditKey">
            <summary>
            Gets the common <see cref="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IAuditGroup.AuditKey">IAuditGroup.AuditKey</see> object of the group.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConversationAudit.GetLastRelevantAudits``1">
            <summary>
            Returns the last audits of type <typeparamref name="TAudit"/> found in the conversation, which
            may be truncated according to business specifications.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IKitIngredientAuditLines">
            <summary>
            Contains data about relevant fields in Ingredient price override
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionResult.AspectValidationInvalidRequestData">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionResult.AspectValidationResult.RestrictionRuleId">
            <summary>
            The rule ID of the aspect that has created this aspect result.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionResult.ConditionalRestrictionNotApplicable">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionResult.ConditionalRestrictionSatisfied">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.ConditionalRestrictionResult">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.ConditionalRestrictionResult`1">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.ConditionalRestrictionRuleDefinition">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleAspectDefinitionIsNotValidException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleAspectFactoryNotFoundException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleDefinitionNotFoundException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleMaintenanceException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleMaintenanceUnsupportedActionException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleMaintenanceMissingIdException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleMaintenanceMissingConditionException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleMaintenanceMissingAspectsException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleMaintenanceAspectMissingKeyException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleMaintenanceAspectMissingMessageException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleMaintenanceAspectMessageNotFoundException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleMissingInputException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IAgeAspectAcceptabilityOverrideStrategy">
            <summary>
            Represents a strategy that can change the core decision of an age-restriction aspect,
            that the user-input that it received is acceptable and therefore no prompt needs to be
            displayed in the client in order to gather additional information.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IAgeAspectAcceptabilityOverrideStrategy.ShouldAccept(Retalix.StoreServices.Model.Selling.ConditionalRestriction.IRestrictionRuleAspect,Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionContext,System.String)">
            <summary>
            Implementors should return true if <paramref name="userInput"/> is acceptable,
            i.e., contains enough information in order to automatically approve or reject
            the client's request.
            Returning false indicates that a prompt should be displayed on the client in
            order to gather further information.
            </summary>
            <param name="restrictionRuleAspect">
            The aspect that has determined that the current input is acceptable,
            whose decision this strategy may override.
            </param>
            <param name="restrictionContext">The current <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionContext"/>RestrictionContext</param>.
            <param name="userInput">
            The input that was received from the client, if any, in response to a previous prompt
            that required input (in response to a <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.Exceptions.RestrictionRuleMissingInputException">RestrictionRuleMissingInputException</see>).
            </param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinition">
            <summary>
            Represent a Conditional Restriction Rule Definition
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinitionDao">
            <summary>
            The data access object to query and maintain <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinition">IConditionalRestrictionRuleDefinition</see> data.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinitionDao.FindAllHeaders">
            <summary>
            Find all <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinition">IConditionalRestrictionRuleDefinition</see> and return its header data.
            the id, Group and the relevant BusinessUnits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinitionDao.IterativeFindAll(System.String)">
            <summary>
            Iterate all <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinition">IConditionalRestrictionRuleDefinition</see> for the specified businessUnitId, and all its' parent business units.
            </summary>
            <param name="businessUnitId">Business unit to use to query the <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinition">IConditionalRestrictionRuleDefinition</see> </param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinitionDao.FindAllByCache(System.String)">
            <summary>
            Find all <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinition">IConditionalRestrictionRuleDefinition</see> for the specified businessUnitId, and all its' parent business units.
            This function uses cache.
            </summary>
            <param name="businessUnitId">Business unit to use to query the <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinition">IConditionalRestrictionRuleDefinition</see> </param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinitionDao.FindByAspectKey(System.String)">
            <summary>
             Find all the restriction rule definitions having aspects with this aspect key
            </summary>
            <returns>An array of rule definitions that have aspects with the given key</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinitionDao.Delete(System.String)">
            <summary>
             Deletes <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleDefinitionDao">IConditionalRestrictionRuleDefinitionDao</see> representation from a repository
             by specified identifier.
            </summary>
            <param name="id">Identifier of rule.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleEvaluator">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleRunner">
            <summary>
            Defines the interface for running restriction-rules.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleRunner.Run(Retalix.StoreServices.Model.Selling.IRetailTransaction,Retalix.StoreServices.Model.Selling.ConditionalRestriction.IMissingInputStrategy,Retalix.StoreServices.Model.Selling.ConditionalRestriction.INotSatisfiedStrategy)">
            <summary>
            Runs restriction-rules on all lines in <paramref name="retailTransaction"/> using the specified strategies.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRuleRunner.Run(Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionContext,Retalix.StoreServices.Model.Selling.ConditionalRestriction.IMissingInputStrategy,Retalix.StoreServices.Model.Selling.ConditionalRestriction.INotSatisfiedStrategy)">
            <summary>
            Runs restriction-rules according as specified by <paramref name="restrictionContext"/> using the specified strategies.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IRestrictionRuleAspect">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IRestrictionRuleAspectFactory">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IRestrictionRuleAspectOverrideStrategy">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IRestrictionRuleEvaluationErrorHandler">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IRestrictionRuleRequestContextBuilder">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IUserInputContainer">
            <summary>
            Encapsulates the data related to conditional restriction rules received from external clients
            in the scope of the current transaction.
            </summary>
            <remarks>
            Inputs received over the scope of the transaction are saved per aspect, rather than per rule.
            Multiple inputs received for the same aspect but for different rules
            will generally override each other or be merged, such that per aspect only one set of data
            exists, representing the data received over the transaction for all occurrences of that aspect.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IUserInputContainer.CurrentRequestInputs">
            <summary>
            Gets the collection of inputs received within the scope of the current request.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IUserInputContainer.FindInputFor(System.String)">
            <summary>
            Returns the <see cref="P:Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionRuleInputReturnData.Input">Input</see> value of the
            <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionRuleInputReturnData">RestrictionRuleInputReturnData</see> instance
            matching the requested <paramref name="aspectId"/>, or null if no matching input was found.
            </summary>
            <param name="aspectId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IUserOverrideContainer">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionContext">
            <summary>
             contained the context for restriction rule usage 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionRuleReturnData">
            <summary>
            Encapsulates the input-data received from a client in response to a
            conditional restriction rule error.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionRuleReturnData.AspectKey">
            <summary>
            Gets or sets the <see cref="P:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IRestrictionRuleAspect.Key">Key</see> of
            the <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IRestrictionRuleAspect">IRestrictionRuleAspect</see> type
            that the data in this instance is intended to satisfy.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionRuleReturnData.RestrictionRuleId">
            <summary>
            Gets or sets the <see cref="P:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRule.Id">Id</see> of
            the <see cref="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.IConditionalRestrictionRule">IConditionalRestrictionRule</see> instance
            that the data in this instance is intended to satisfy.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ConditionalRestriction.RestrictionRuleUserNotifications">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.Sell.ProductPreSellingEvent">
            <summary>
            This event is dispatched when the sell process begins and it contains the sale info as was inserted by the cashier which sells the product.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.FormAddedEvent">
            <summary>
            Raise after form was added to the customer order
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.FormAddedEvent.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IForm)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.FormAddedEvent" /> class.
            </summary>
            <param name="customerOrder">The customer order.</param>
            <param name="form">The form was added to the customer order</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.TransactionBalanceCalculatedEvent">
            <summary>
            Raised just after the transaction calculation engine was done
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.TransactionBalanceCalculatingEvent">
            <summary>
            Raised just before invoking the transaction calculation engine
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerOrderExtraDataRemovedEvent`1">
            <summary>
            Notifies the registered handler that extra data has been removed to a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            </summary>
            <typeparam name="T">A concrete type of the customer order extension.</typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerOrderExtraDataAddedEvent`1">
            <summary>
            Notifies the registered handler that extra data has been added to a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            </summary>
            <typeparam name="T">A concrete type of the customer order extension.</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.SelfScan.RescanItemCanceledEvent.#ctor(Retalix.StoreServices.Model.Selling.Rescan.IRescan,System.Boolean,Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Indicates that line item rescan has been canceled
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.SelfScan.RescanItemEvent">
            <summary>
            Indicates rescan related event. RescannedLine is populated if rescanned line was successfully matched as valid order line
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.SelfScan.RescanItemPerformedEvent">
            <summary>
            Indicates that line item rescan has been performed
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.SelfScan.SelfScanCustomerSearchEnd">
            <summary>
             Triggered after customer search was finished
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.SelfScan.SelfScanCustomerSearchStart">
            <summary>
             Triggered before customer search
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.SelfScan.SelfScanTransactionStarted">
            <summary>
             Finished transaction processing.
            </summary>
            <param name="transaction">final result</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.SelfScan.SelfScanTransactionStarting">
            <summary>
             Start searching for active transaction or considering to create new one.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerOrderReversedEligibilityEvent">
            <summary>
            An event which is raised after the tender eligibility of the customer order was reversed.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerOrderReversingEligibilityEvent">
            <summary>
            An event which is raised before reversing the tender eligibility of the customer order.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerReplacedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddedEvent">
            <summary>
            Provides data for the [see cref="ICustomerOrder.GiftReceiptAdded"]ICustomerOrder.GiftReceiptAdded[/see] event.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddedEvent.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink)">
            <summary>
            Constructs a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddedEvent">GiftReceiptAddedEvent</see> object.
            </summary>
            <param name="customerOrder">The customer order.</param>
            <param name="giftReceiptLine">The gift receipt line that is being added to the [see cref="ICustomerOrder"]ICustomerOrder[/see]</param>
            <param name="transactionLineLink">The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
            <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddedEvent.GiftReceiptLine">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> we added. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddedEvent.TransactionLink">
            <summary>
            The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddingEvent">
            <summary>
            Provides data for the [see cref="ICustomerOrder.GiftReceiptAdding"]ICustomerOrder.GiftReceiptAdding[/see] event.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddingEvent.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceipt,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink)">
            <summary>
            Constructs a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddingEventArgs">GiftReceiptAddingEventArgs</see> object.
            </summary>
            <param name="customerOrder">The customer order.</param>
            <param name="giftReceipt">The gift receipt that will be added to the [see cref="ICustomerOrder"]ICustomerOrder[/see]</param>
            <param name="transactionLineLinkDetails">The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
            <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddingEvent.GiftReceipt">
            <summary>
            The gift receipt that will be added to the [see cref="ICustomerOrder"]ICustomerOrder[/see] 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddingEvent.TransactionLink">
            <summary>
            The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovedEvent">
            <summary>
            Provides data for the [see cref="ICustomerOrder.GiftReceiptAdded"]ICustomerOrder.GiftReceiptAdded[/see] event.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovedEvent.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink)">
            <summary>
            Constructs a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovingEventArgs">GiftReceiptRemovingEventArgs</see> object.
            </summary>
            <param name="customerOrder">The customer order.</param>
            <param name="giftReceiptline">The gift receipt that will be removed from the [see cref="ICustomerOrder"]ICustomerOrder[/see]</param>
            <param name="transactionLineLink">The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
            <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovedEvent.GiftReceiptLine">
            <summary>
            The gift receipt that will be removed from the [see cref="ICustomerOrder"]ICustomerOrder[/see] 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovedEvent.TransactionLink">
            <summary>
            The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovingEvent">
            <summary>
            Provides data for the [see cref="ICustomerOrder.GiftReceiptAdded"]ICustomerOrder.GiftReceiptAdded[/see] event.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovingEvent.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink)">
            <summary>
            Constructs a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovingEventArgs">GiftReceiptRemovingEventArgs</see> object.
            </summary>
            <param name="customerOrder">The customer order.</param>
            <param name="giftReceiptline">The gift receipt that will be removed from the [see cref="ICustomerOrder"]ICustomerOrder[/see]</param>
            <param name="transactionLineLink">The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
            <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovingEvent.GiftReceiptLine">
            <summary>
            The gift receipt that will be removed from the [see cref="ICustomerOrder"]ICustomerOrder[/see] 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovingEvent.TransactionLink">
            <summary>
            The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerRemovedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerRemovedEvent.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            
            </summary>
            <param name="customerOrder"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CouponVoidedEventArgs">
            <summary>
            Provides data for the <see cref="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CouponVoided">CouponVoided</see> event.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CouponVoidedEventArgs.CouponLine">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine">ICouponLine</see> object that was voided.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CouponVoidedEventArgs.CouponVoidInfo">
            <summary>
            Gets or sets the arguments used to void the <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine">ICouponLine</see> object.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturningEvent.ProductReturnInfo">
            <summary>
            Gets or sets the arguments used to return a product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturningEvent.InputParametersInfo">
            <summary>
            Gets or sets the data entered to return a product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturningEvent.ReturnLines">
            <summary>
            The newly created <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">return order lines</see>, before they are added to the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order</see>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidingEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidingEvent.InputParametersInfo">
            <summary>
            Gets or sets the data entered to void the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> object.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSellingEvent.ProductSaleInfo">
            <summary>
            Gets or sets the arguments used to sell a product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSellingEvent.InputParametersInfo">
            <summary>
            Gets or sets the data entered to sell a product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSellingEvent.AffectedLines">
            <summary>
            The newly created <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">order lines</see>, before they are added to the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order</see>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerOrderEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerRemovingEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerRemovingEvent.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            
            </summary>
            <param name="customerOrder"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerReplacingEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerReplacingEvent.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.Customer.CustomerReplacingEventArgs)">
            <summary>
            
            </summary>
            <param name="customerOrder"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddedEventArgs">
            <summary>
            Provides data for the [see cref="ICustomerOrder.GiftReceiptAdded"]ICustomerOrder.GiftReceiptAdded[/see] event.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddedEventArgs.#ctor(System.Int64,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceipt,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink)">
            <summary>
            Constructs a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddedEventArgs">GiftReceiptAddedEventArgs</see> object.
            </summary>
            <param name="sequenceNumber">The sequence number of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> we added. </param>
            <param name="giftReceipt">The gift receipt that is being added to the [see cref="ICustomerOrder"]ICustomerOrder[/see] </param>
            <param name="transactionLineLink">The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddedEventArgs.SequenceNumber">
            <summary>
            The sequence number of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> we added. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddedEventArgs.GiftReceipt">
            <summary>
            The gift receipt that is being added to the [see cref="ICustomerOrder"]ICustomerOrder[/see]
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddedEventArgs.TransactionLink">
            <summary>
            The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddingEventArgs">
            <summary>
            Provides data for the [see cref="ICustomerOrder.GiftReceiptAdding"]ICustomerOrder.GiftReceiptAdding[/see] event.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddingEventArgs.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceipt,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink)">
            <summary>
            Constructs a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddingEventArgs">GiftReceiptAddingEventArgs</see> object.
            </summary>
            <param name="giftReceipt">The gift receipt that will be added to the [see cref="ICustomerOrder"]ICustomerOrder[/see] </param>
            <param name="transactionLineLinkDetails">The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.  </param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddingEventArgs.GiftReceipt">
            <summary>
            The gift receipt that will be added to the [see cref="ICustomerOrder"]ICustomerOrder[/see] 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptAddingEventArgs.TransactionLink">
            <summary>
            The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovedEventArgs">
            <summary>
            Provides arguments for the [see cref="ICustomerOrder.GiftReceiptRemoved"]ICustomerOrder.GiftReceiptRemoved[/see] event.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovedEventArgs.#ctor(System.Int64,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink)">
            <summary>
            Constructs a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovedEventArgs">GiftReceiptRemovedEventArgs</see> object.
            </summary>
            <param name="sequenceNumber">The sequence number of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> that was removed. </param>
            <param name="removedGiftReceiptLine">The gift receipt that was removed from the [see cref="ICustomerOrder"]ICustomerOrder[/see] </param>
            <param name="transactionLineLink">The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovedEventArgs.SequenceNumber">
            <summary>
            The sequence number of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> that was removed. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovedEventArgs.GiftReceiptLine">
            <summary>
            The gift receipt that was removed from the [see cref="ICustomerOrder"]ICustomerOrder[/see] 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovedEventArgs.TransactionLink">
            <summary>
            The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to..
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovingEventArgs">
            <summary>
            Provides data for the [see cref="ICustomerOrder.GiftReceiptAdded"]ICustomerOrder.GiftReceiptAdded[/see] event.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovingEventArgs.#ctor(System.Int64,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceipt,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink)">
            <summary>
            Constructs a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovingEventArgs">GiftReceiptRemovingEventArgs</see> object.
            </summary>
            <param name="sequenceNumber">The sequence number of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> that will be removed </param>
            <param name="giftReceipt">The gift receipt that will be removed from the [see cref="ICustomerOrder"]ICustomerOrder[/see] </param>
            <param name="transactionLineLink">The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovingEventArgs.SequenceNumber">
            <summary>
            The sequence number of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> that will be removed 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovingEventArgs.GiftReceipt">
            <summary>
            The gift receipt that will be removed from the [see cref="ICustomerOrder"]ICustomerOrder[/see] 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.GiftReceiptRemovingEventArgs.TransactionLink">
            <summary>
            The link to the [see cref="IRetailTransaction"]IRetailTransaction[/see] and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerOrderVoidingEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerOrderVoidingEvent.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            
            </summary>
            <param name="customerOrder"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddedArgs">
            <summary>
            Class PaymentTermAddedArgs
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddedArgs.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm,Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddedArgs" /> class.
            </summary>
            <param name="paymentTerm">The payment term.</param>
            <param name="tenderType">Type of the tender.</param>
            <param name="paymentInfo">The payment info.</param>
            <param name="inputParametersInfo">The input parameters info.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddedArgs.PaymentTerm">
            <summary>
            Gets the payment term.
            </summary>
            <value>The payment term.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddedArgs.TenderType">
            <summary>
            Gets the type of the tender.
            </summary>
            <value>The type of the tender.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddedArgs.PaymentInfo">
            <summary>
            Gets the payment info.
            </summary>
            <value>The payment info.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddedArgs.InputParametersInfo">
            <summary>
            Gets the input parameters info.
            </summary>
            <value>The input parameters info.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddedEvent">
            <summary>
            Class PaymentTermAddedEvent
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddedEvent.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm,Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddedEvent" /> class.
            </summary>
            <param name="customerOrder">The customer order.</param>
            <param name="paymentInfo"></param>
            <param name="inputParametersInfo"></param>
            <param name="paymentTerm"></param>
            <param name="tenderType"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddingArgs">
            <summary>
            Class PaymentTermAddingArgs
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddingArgs.#ctor(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo,Retalix.StoreServices.Model.Selling.InputParametersInfo,Retalix.StoreServices.Model.Selling.CustomerPayment.TenderUsage)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddingArgs" /> class.
            </summary>
            <param name="tenderType">Type of the tender.</param>
            <param name="paymentInfo">The payment info.</param>
            <param name="inputParametersInfo">The input parameters info.</param>
            <param name="tenderUsage"> </param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddingArgs.TenderType">
            <summary>
            Gets the type of the tender.
            </summary>
            <value>The type of the tender.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddingArgs.PaymentInfo">
            <summary>
            Gets the payment info.
            </summary>
            <value>The payment info.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddingArgs.TenderUsage">
            <summary>
            <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.PaymentTermAddingArgs.TenderUsage">Tender usage</see>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturnedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturnedEvent.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturnedEventArgs)">
            <summary>
            
            </summary>
            <param name="customerOrder"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturnedEventArgs">
            <summary>
            Provides data for the <see cref="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ProductReturned">ICustomerOrder.ProductReturned</see> event.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturnedEventArgs.Empty">
            <summary>
            Provides a value to use with events that do not have event data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturnedEventArgs.ProductReturnInfo">
            <summary>
            Gets or sets the arguments used to return a product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturnedEventArgs.InputParametersInfo">
            <summary>
            Gets or sets the data entered to return a product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturnedEventArgs.AddedReturnLines">
            <summary>
            Gets or sets a sequence of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">IReturnOrderLine</see> objects that were added.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturningEventArgs">
            <summary>
            Provides data for the <see cref="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ProductReturning">ICustomerOrder.ProductReturning</see> event.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturningEventArgs.Empty">
            <summary>
            Provides a value to use with events that do not have event data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturningEventArgs.ProductReturnInfo">
            <summary>
            Gets or sets the arguments used to return a product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductReturningEventArgs.InputParametersInfo">
            <summary>
            Gets or sets the data entered to return a product.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSoldEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSoldEvent.EventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSoldEvent.AffectedLines">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSoldEvent.ProductSaleInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSoldEvent.InputParametersInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSoldEvent.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSoldEventArgs)">
            <summary>
            
            </summary>
            <param name="customerOrder"></param>
            <param name="eventsArgs"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSoldEventArgs">
            <summary>
             Provides data for the [see cref="ICustomerOrder.ProductSold"]ICustomerOrder.ProductSold[/see] event.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSoldEventArgs.Empty">
            <summary>
            Provides a value to use with events that do not have event data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSoldEventArgs.ProductSaleInfo">
            <summary>
            Gets or sets the arguments used to sell a product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSoldEventArgs.InputParametersInfo">
            <summary>
            Gets or sets the data entered to sell a product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSoldEventArgs.AddedOrderLines">
            <summary>
             Gets or sets a sequence of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> objects that were added.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidedEvent.InputParametersInfo">
            <summary>
            Gets or sets the data entered to void the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> object.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidedEvent.VoidOrderLine">
            <summary>
            Gets or sets a sequence of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> objects that were voided.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidedEventArgs">
            <summary>
            Provides data for the [see cref="ICustomerOrder.ProductVoided"]ProductVoided[/see] event.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidedEventArgs.Empty">
            <summary>
            Provides a value to use with events that do not have event data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidedEventArgs.ProductVoidInfo">
            <summary>
            Gets or sets the arguments used to void the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> object.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidedEventArgs.InputParametersInfo">
            <summary>
            Gets or sets the data entered to void the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> object.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidedEventArgs.VoidedOrderLines">
            <summary>
            Gets or sets a sequence of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> objects that were voided.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSellingEventArgs">
            <summary>
             Provides data for the ICustomerOrder.ProductSelling event.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSellingEventArgs.Empty">
            <summary>
            Provides a value to use with events that do not have event data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSellingEventArgs.ProductSaleInfo">
            <summary>
            Gets or sets the arguments used to sell a product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSellingEventArgs.InputParametersInfo">
            <summary>
            Gets or sets the data entered to sell a product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductSellingEventArgs.AddedOrderLines">
            <summary>
             Gets or sets a sequence of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> objects that were added.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidingEventArgs">
            <summary>
            Provides data for the ICustomerOrder.ProductVoiding event.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidingEventArgs.Empty">
            <summary>
            Provides a value to use with events that do not have event data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidingEventArgs.ProductVoidInfo">
            <summary>
            Gets or sets the arguments used to void the IOrderLine object.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.ProductVoidingEventArgs.InputParameters">
            <summary>
            Gets or sets the data entered to void the IOrderLine object.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Audit.DeclinedOnlineItemAuthorizationAuditData">
            <summary>
            Audit data of declined online item authorization
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Audit.DeclinedOnlineItemAuthorizationAuditData.ReferenceNumber">
            <summary>
            The reference number of the online item
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Audit.DeclinedOnlineItemAuthorizationAuditData.AuthorizationCode">
            <summary>
            Declined authorization code
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Audit.DeclinedOnlineItemAuthorizationAuditData.AuthorizationExternalId">
            <summary>
            Authorization external id of the online item
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Audit.DeclinedOnlineItemAuthorizationAuditData.ExternalIdEntryMethod">
            <summary>
            Entry Method of external id of the online item (keyed, Scanned, MSR)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Audit.DeclinedOnlineItemAuthorizationAuditData.AuthorizationDateTime">
            <summary>
            Date and time of online item authorization
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Audit.DeclinedOnlineItemAuthorizationAuditData.InitialBalance">
            <summary>
            The initial balance of the online item
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Audit.DeclinedOnlineItemAuthorizationAuditData.CurrentBalance">
            <summary>
            The current balance of the online item
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Audit.OrderLineAuditData">
            <summary>
            Audit data of selling order line
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.BulkProductVoidInfoWrapper">
            <summary>
            Keeps collection of objects, which represent products intended for Bulk Product Void
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLinkTypeEnum">
            <summary>
            Represent link types like 'CustomerOrderId', 'ThirdPartyOrderId' etc...
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLinkTypeEnum.#ctor(System.String)">
            <summary>
            Creates an instance with a given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLinkTypeEnum.CustomerOrderId">
            <summary>
            'CustomerOrderId' link type - contains Id of CustomerOrder, which the link owner(f.e IOrderLine) is linked to
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLinkTypeEnum.ThirdPartyOrderId">
            <summary>
            'ThirdPartyOrderId' link type - contains Id of Third Party Order (like Aloha Kitchen Order), 
            which the link owner(f.e IOrderLine) is linked to
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.CustomerOrderLinkedInfo">
            <summary>
            This linkedInfo used for merge transactions process
            it contains data about original Customer Order where this line was created
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.CustomerOrderLinkedInfo.LinkedCustomerOrderId">
            <summary>
            Id of CustomerOrder where this orderLine was created
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.CustomerOrderLinkedInfo.LinkedThirdPartyOrderId">
            <summary>
            another OrderId where this orderLine was created
            used by extesion projetcs like Aloha Kitchen
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.CustomerOrderLinkedInfo.OriginalLineSequenceNumber">
            <summary>
            SequenceNumber in CustomerOrder where this orderLine was created
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLineVoidStrategy.VoidLines(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine},Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
            Return the voided matched lines   
            </summary>
            <param name="orderLines"></param>
            <param name="productVoidInfo"></param>
            <param name="inputParametersInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLineVoidStrategy.GetExcludedLines(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine},Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
            Retrun the matched lines for current strategy which are excluded to selected strategy 
            </summary>
            <param name="orderLines"></param>
            <param name="productVoidInfo"></param>
            <param name="inputParametersInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IProductLocatorStrategy">
            <summary>
            Represents an service which has the ability to find product by its code.<br />
            R10 Core implements this service as follows:<br />
            Supports find item when the product code with leading zero (for example: we can find product with id "123" by give id "00123").<br />
            Supports find item when the product code is UPCA (for example: we can find product with id "099999000092" by give id "999999").<br />
            Supports find item when the product code is Barcode.<br />
            Supports find item when the product code is empty.<br />
            Override this interface to change the way the system is looking for product during sale and return.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IProductLocatorStrategy.FindProducts(System.String)">
            <summary>
            Finds the products by its code.
            </summary>
            <param name="productCode">The product code.</param>
            <returns>List of found identifier/product pairs.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLinePropertyUpdater">
            <summary>
            Represent update algorithm during the build up of an order line, in as Sell action.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLinePropertyUpdater.Update(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
            Update a the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> with all relevant data for the selling process.
            </summary>
            <param name="orderLine">The relevant order line that will be added to the Customer Order</param>
            <param name="productSaleInfo">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo">ProductSaleInfo</see> used for executing the Sale</param>
            <param name="inputParameters">The <see cref="T:Retalix.StoreServices.Model.Selling.InputParametersInfo">InputParametersInfo</see> used for executing the Sale</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IProductReturnValidator">
            <summary>
            Represents order line validation rule(s).<br/>
            R10 runs "Validate" on every order line when conducting "product return"
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IProductReturnValidator.Validate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine)">
            <summary>
            Validates the order line, throws an exception upon failure.
            </summary>
            <param name="customerOrder">The order context</param>
            <param name="returnOrderLine">The specific line being validated</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IProductSellingValidator">
            <summary>
            Represents order line validation rule(s).<br/>
            R10 runs "Validate" on every order line when conducting "sell"
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IProductSellingValidator.Validate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Validates the order line, throws an exception upon failure.
            </summary>
            <param name="customerOrder">The order context</param>
            <param name="orderLine">The specific line being validated</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidedOrderLineDetails">
            <summary>
            Contains details regarding the void line such as the actual order line which was voided or the original order line which was split during the voiding process.  
            In case of full void (the whole order line is voided), 
            voidedOrderLine and OriginalOrderLine will reference the same order line which was voided.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidedOrderLineDetails.VoidedOrderLine">
            <summary>
            The order line which was voided.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidedOrderLineDetails.OriginalOrderLine">
            <summary>
            The original order line which was voided.
            In case of partial void, it will reference the original order line which was split during the voiding process.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.BulkSellInfo">
            <summary>
            Encapsulates the arguments required when adding a bulk of products to a customer order
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.BulkSellInfo.Sequence">
            <summary>
            User defined identifier for this bulk entry, can be used to recognize the failed items (usually the sequence number of the line item)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.BulkSellInfo.ProductSaleInfo">
            <summary>
            Gets or sets the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.BulkSellInfo.ProductSaleInfo">product sale info</see> which contains the product information.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.BulkSellInfo.ExtraData">
            <summary>
            Gets or sets the ExtraData which contains all ExtraData of source orderLine
            which will be added to destination orderLine while merging customer orders
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.BulkSellInfo.InputParametersInfo">
            <summary>
            Gets or sets the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.BulkSellInfo.InputParametersInfo">input parameters info</see> of the data input in the client side.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.SellingTareQuantity.#ctor(Retalix.StoreServices.Model.Price.UnitOfMeasure,System.Decimal,System.Nullable{System.Decimal})">
            <summary>
             Constructor
            </summary>
            <param name="unitOfMeasure"></param>
            <param name="units"></param>
            <param name="percentage"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.SellingTareQuantity.UnitOfMeasure">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Price.UnitOfMeasureValues">Unit Of Measure Values</see>. 
            Unit Of Measure values represent the quantity type of the product. The UOM types are: 
            Each, kg, gm, lbr, ltr, gl.  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.SellingTareQuantity.Units">
            <summary>
            Gets or sets the <see cref="T:System.Decimal">Unit</see> that represent the value of the units 
            in the Unit Of Measure != EACH. For example, kg, gm, etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.SellingTareQuantity.Percentage">
            <summary>
             Gets or sets the <see cref="T:System.Int32">Value</see> that represent the value of the quantity
             when the Unit Of Measure == Each. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.Tare">
            <summary>
            Defines the base class for tare information in a product sale.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.Tare.IsManual">
            <summary>
            Gets or sets a value that indicates whether the value of weight units or
            percentage was entered using a numeric keyboard on the POS GUI.
            </summary>
            <value><see langword="true"/> if the value of weight units or percentage was
            entered using a numeric keyboard on the POS GUI, otherwise
            <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.Tare.Weight">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareModifierInfo">
            <summary>
            Represents the data used to update the tare line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareModifierInfo.QuantityArgs">
            <summary>
            Gets or sets a value that indicates the sell quantity in order to calculate
            the IOrderLine amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareModifierInfo.LinkedProduct">
            <summary>
            Gets or sets the list of IDs of the linked IProduct 
            that are sold with the "Parent" Product. (New tare products are updated).
            For example, a new box is linked to cookies, and once updated, the box will be sold with the cookies.        /// </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareModifierInfo.LinkedLinesIsTare">
            <summary>
            Gets or sets a value indicating whether the linked line types of the product
            are tare.
            </summary>
            <value><see langword="true"/> if linked lines are tare; otherwise,
            <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareModifierInfo.TareValueForReduce">
            <summary>
            Gets or sets the Tare Value For Reduce, a value that represents the amount
            deducted when selling a Tare weight product.
            <para>
            For example, when buying a box with cookies with a total weight of 2kg, which
            comprises of 100g for the box and 1900g for the cookies, the Tare Value For
            Reduce is 100g.
            </para>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareModifierInfo.IsManulTareForReduce">
            <summary>
            Gets or sets a value indicating whether the tare amount is manually reduced
            in this instance.
            </summary>
            <value><see langword="true"/> if the tare amount is manually reduced;
            otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareModifierInfo.IsPercentageTareForReduce">
            <summary>
            Gets or sets a value indicating whether the tare amount reduced in this
            instance is percentage.
            </summary>
            <value><see langword="true"/> if the tare amount reduced is a percentage;
            otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareModifierInfo.LineSequenceNumber">
            <summary>
            Gets or sets the line sequence number.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareWeightFixed">
            <summary>
            Represents the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.Tare">Tare</see> which specifies the fixed weight in the weight units of the container, relative to the product.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareWeightFixed.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareWeightFixed">TareWeightFixed</see> class. 
            </summary>
            <param name="weight">value of type <see cref="T:System.Decimal">decimal</see>specified in
            The fixed weight in weight units of the container, relative to the product.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareWeightFixed.Weight">
            <summary>
            Gets the value of the <see cref="T:System.Decimal">decimal</see> type that specifies the fixed weight in weight units of the container, relative to the product.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareWeightPercentage">
            <summary>
            Represents the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.Tare">Tare</see> weight specified by a percentage relative to the overall product weight.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareWeightPercentage.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareWeightPercentage">TareWeightPercentage</see> class.  
            </summary>
             <param name="value">The value of type <see cref="T:System.Decimal">decimal</see>that is specified by a percentage, relative to the overall product weight.</param>
            <param name="productWeight"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareWeightPercentage.Percentage">
            <summary>
            Gets a value of type <see cref="T:System.Decimal">decimal</see> of the weight that is specified by a percentage, relative to the overall product weight.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareWeightPercentage.Weight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLineExtension.Id">
            <summary>
            Required for persistence. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IProductLocator">
            <summary>
            Represents an service which has the ability to find product by its Identifier.<br/>
            R10 Core implements this service as follows:<br/>
            Supports find item when the Identifier code with leading zero (for example: we can find product with id "123" by give id "00123").<br/>
            Supports find item when the Identifier code is UPCA (for example: we can find product with id "099999000092" by give id "999999").<br/>
            Supports find item when the Identifier code is Barcode.<br/>
            Supports find item when the Identifier code is empty.<br/>
            Supports find Department when the Identifier code is Department id
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IProductLocator.FindProduct(Retalix.StoreServices.Model.Product.Identifier)">
            <summary>
            Return value pair of the identifier and the Product we searched.
            </summary>
            <param name="identifier">The identifier of the product we search.</param>
            <returns>value pair of the identifier and the Product we searched</returns>
            <remarks>
            Use IProductLocatorStrategy.FindProducts method instead.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IProductLocator.FindDepartment(Retalix.StoreServices.Model.Product.Identifier)">
            <summary>
            Return the department we searched.
            </summary>
            <param name="productIdentifier">The identifier of the Department we search.</param>
            <returns> the department we searched</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantityEntryMethods">
            <summary>
            List of known Sell Quantity Entry Methods. That is, the way the quantity 
            of a sell was introduced into the selling process.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantityEntryMethods.Automatic">
            <summary>
            Quantity was created automatically. Example: when an item was sold automatically by link.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantityEntryMethods.Keyed">
            <summary>
            The quantity was keyed manually. 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantityEntryMethods.Scanned">
            <summary>
            The quantity was embedded in a barcode, and extracted using Data-Pattern.
            The same entry method is used if the quantity was embedded with other selling information, 
            or the barcode was exclusively used to set the quantity.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantityEntryMethods.Weighed">
            <summary>
            The quantity was acquired using a weighing device.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2.Defaultitemtag">
            <summary>
            The default XML tag name for an item.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2.Defaultkeytag">
            <summary>
            The default XML tag name for a key.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2.Defaultvaluetag">
            <summary>
            The default XML tag name for a value.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2.keySerializer">
            <summary>
            The XML serializer for the key type.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2.valueSerializer">
            <summary>
            The XML serializer for the value type.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2"/> class.
            </summary>
            <param name="info">A
              <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object
              containing the information required to serialize the
              <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </param>
            <param name="context">A
              <see cref="T:System.Runtime.Serialization.StreamingContext"/> structure
              containing the source and destination of the serialized stream
              associated with the
              <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2.ItemTagName">
            <summary>
            Gets the XML tag name for an item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2.KeyTagName">
            <summary>
            Gets the XML tag name for a key.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2.ValueTagName">
            <summary>
            Gets the XML tag name for a value.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2.GetSchema">
            <summary>
            Gets the XML schema for the XML serialization.
            </summary>
            <returns>An XML schema for the serialized object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the object from XML.
            </summary>
            <param name="reader">The XML representation of the object.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes this instance to XML.
            </summary>
            <param name="writer">The writer to serialize to.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRejectedOrderLine.SequenceNumber">
            <summary>
            Gets the line's unique identifier within the customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRejectedOrderLine.CreationTime">
            <summary>
            Gets the line's creation time stamp
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRejectedOrderLine.BusinessErrorCode">
            <summary>
             Gets business error code, generated by the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException">business exception</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRejectedOrderLine.Id">
            <summary>
            Required for persistency. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidOrderLine">
            <summary>
            Represents the voided order lines
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidOrderLine.ProductVoidInfo">
            <summary>
             Gets the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidOrderLine.ProductVoidInfo">ProductSaleInfo</see> 
             that was used for creation of the current <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IVoidOrderLine</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidOrderLine.InputParameters">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Selling.InputParametersInfo"/> sent by the client, used for the creation of the current <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidOrderLine"/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidOrderLine.SequenceNumber">
            <summary>
            Gets the line's unique identifier within the customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidOrderLine.CreationTime">
            <summary>
            Gets the line's creation time stamp
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidOrderLine.VoidedOrderLines">
            <summary>
            Get the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">order lines</see> that were voided by this void line        
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidOrderLine.VoidedOrderLineDetails">
            <summary>
            Get the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidedOrderLineDetails">details of the order lines</see> that were voided by this void line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidOrderLine.CustomerOrder">
            <summary>
            Gets the customer order for current order line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidOrderLine.Id">
            <summary>
            Required for persistency. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLineExtensionInfo">
            <summary>
            Encapsulates the arguments required when adding an product kit to a Customer Order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLineExtensionInfo.ProductSaleInfo">
            <summary>
            Gets the original product sale info which AdditionalInfo is used to persist properties of this facade.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLineExtensionInfo.Product">
            <summary>
            Gets the original product.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLineExtensionInfo.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo,Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLineExtensionInfo" /> class.
            </summary>
            <param name="productSaleInfo">The product sale info.</param>
            <exception cref="T:System.ArgumentNullException">productSaleInfo is <c>NULL</c></exception>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLineExtensionInfo.IsKitProduct">
            <summary>
             Gets or sets indication wether <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLineExtensionInfo.ProductSaleInfo">ProductSaleInfo</see> contains kit product sale information.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLineExtensionInfo.Quantity">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">quantity</see> of the product in the current sale.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLineExtensionInfo.MaxQuantity">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">max quantity</see> of the product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLineExtensionInfo.MinQuantity">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">max quantity</see> of the product.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleExtendedInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleExtendedInfo.ProductSaleInfo">
            <summary>
            Gets the original product sale info which AdditionalInfo is used to persist properties of this facade.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleExtendedInfo.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleExtendedInfo" /> class.
            </summary>
            <param name="productSaleInfo">The product sale info.</param>
            <exception cref="T:System.ArgumentNullException">productSaleInfo is <c>NULL</c></exception>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleExtendedInfo.ExtendedData">
            <summary>
            Gets or sets the data for extensions usage.
            <remarks>The value is not persisted on the created line.</remarks>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.XmlElementsList">
            <summary>
            XML serializable element list for ProductSaleExtendedInfo
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.XmlElementsList.Any">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceipt">
            <summary>
            Represents the data required to produce a gift receipt that can be used to return a product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceipt.Description">
            <summary>
            The product description of the product represented in this gift receipt
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceipt.ProductId">
            <summary>
            The unique product id that this gift receipt refers to
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceipt.ExpirationDate">
            <summary>
            The expiration date of this gift receipt
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceipt.Quantity">
            <summary>
            Gets the product <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">quantity</see> in the Gift Receipt line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceipt.Amount">
            <summary>
            Gets the aggregated <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">money</see> value of the Gift Receipt line.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceipt.UpdateGiftReceiptExpirationDate(Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Calculates and sets the ExpirationDate for this gift receipt
            </summary>
            <param name="transactionClosingTime"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">
            <summary>
            Represents a line on the [see cref="ICustomerOrder"]ICustomerOrder[/see] that holds a gift receipt,
            and provides information on the [see cref="IRetailTransaction"]IRetailTransaction[/see] that
            this IGiftReceiptLine refers to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine.SequenceNumber">
            <summary>
            The line sequence number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine.TransactionLineLink">
            <summary>
            Represents the [see cref="IRetailTransaction"]IRetailTransaction[/see] that
            this IGiftReceiptLine refers to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine.GiftRecipt">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceipt">IGiftRecipt</see> associated with this line.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardLine">
            <summary>
            Represents the link between the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order</see> and the relevant <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">reward</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardLine.SequenceNumber">
            <summary>
            Gets the <see cref="T:System.Int64">long</see> value of the sequence number, which is the unique reward line identifier within the customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardLine.Reward">
            <summary>
            Gets <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">reward</see> applied to the customer order.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardLineFactory">
            <summary>
            Represents a service for creating <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardLine">reward lines</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardLineFactory.Create(Retalix.StoreServices.Model.Promotion.IReward,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Creates a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardLine">reward line</see>.
            </summary>
            <param name="reward">
                The <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">reward</see> from which the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardLine">reward line</see> is created.
            </param>
            <param name="customerOrder"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer">
            <summary>
            Encapsulates additional information that should be passed 
            on the basic information passed into the transaction actions.
            </summary>
            <remarks>
            <para>
            Does not contain null values. If the null value is attempted to be set, the appropriate value will be removed from the container.
            </para>
            <para>
            Safe from overriding property from different owner. 
            For exmaple: two different owners decided to save 
            the same property, but of course each of them put different value, 
            the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer">AdditionalInfoContainer</see> garanties 
            that each of the owners will get the correct value.
            </para>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer.Properties">
            <summary>
             Gets contained properties (property name and value).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer.#ctor">
            <summary>
             Initializes new instance of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer">AdditionalInfoContainer</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer)">
            <summary>
             Initializes new instance of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer">AdditionalInfoContainer</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer.SetAll``1(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <typeparam name="TInfoOwner"></typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer.Get``1(System.String)">
            <summary>
             Gets the property value by <typeparamref name="TInfoOwner">TInfoOwner</typeparamref> 
             and <paramref name="propertyName">propertyName</paramref>.
            </summary>
            <param name="propertyName">Property name.</param>
            <typeparam name="TInfoOwner">Information owner's type.</typeparam>
            <returns>Value associated with the property for the specified owner.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer.Get``1(``0,System.String)">
            <summary>
             Gets the property value by <typeparamref name="TInfoOwner">TInfoOwner</typeparamref> 
             and <paramref name="propertyName">propertyName</paramref>.
            </summary>
            <param name="owner">Information owner.</param>
            <param name="propertyName">Property name.</param>
            <typeparam name="TInfoOwner">Information owner's type.</typeparam>
            <returns>Value associated with the property for the specified owner.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer.Set``1(System.String,System.String)">
            <summary>
             Gets the property value by <typeparamref name="TInfoOwner">TInfoOwner</typeparamref> 
             and <paramref name="propertyName">propertyName</paramref>.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="value"></param>
            <typeparam name="TInfoOwner">Information owner's type.</typeparam>
            <returns>Value associated with the property for the specified owner.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer.GetDeserialized``2(System.String)">
            <summary>
             Gets the property value by <typeparamref name="TInfoOwner">TInfoOwner</typeparamref> 
             and <paramref name="propertyName">propertyName</paramref>.
            </summary>
            <param name="propertyName">Property name.</param>
            <typeparam name="TInfoOwner">Information owner's type.</typeparam>
            <returns>Value associated with the property for the specified owner.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer.SetSerialized``1(System.String,System.Object)">
            <summary>
             Gets the property value by <typeparamref name="TInfoOwner">TInfoOwner</typeparamref> 
             and <paramref name="propertyName">propertyName</paramref>.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="value"></param>
            <typeparam name="TInfoOwner">Information owner's type.</typeparam>
            <returns>Value associated with the property for the specified owner.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer.Set``1(``0,System.String,System.String)">
            <summary>
             Gets the property value by <typeparamref name="TInfoOwner">TInfoOwner</typeparamref> 
             and <paramref name="propertyName">propertyName</paramref>.
            </summary>
            <param name="owner">Information owner.</param>
            <param name="propertyName">Property name.</param>
            <param name="value"></param>
            <typeparam name="TInfoOwner">Information owner's type.</typeparam>
            <returns>Value associated with the property for the specified owner.</returns>        
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">
            <summary>
            Represents the link between the customer order and the relevant product, and the link properties.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.CustomerOrder">
            <summary>
            Gets the customer order for current order line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.SequenceNumber">
            <summary>
            Gets the order line's unique identifier within the customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.CreationTime">
            <summary>
            Gets the line's creation time stamp
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.Product">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> object associated with the order line.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.GetProductCategories(System.Boolean)">
            <summary>
            Gets the relevant product categories for the matching product.
            </summary>
            <param name="includeIndirectCategories">If true, the categories return will include parents of direct linked categories. 
            Otherwise, only categiries defined directly on the lines' product will return.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.GetAllProductCategories">
            <summary>
            Gets information for all the relevant lines' product categories, including category's ancestors.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.GetDirectProductCategories">
            <summary>
            Gets information for categories directly associated to the lines' product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.ProductGroups">
            <summary>
            Gets the product associated groups.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.Department">
            <summary>
             Gets the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.Department">IProduct</see> object associated with the order line.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.IsDepartmentSale">
            <summary>
            Gets a value that indicates whether the order line is a department sale. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.Quantity">
            <summary>
            Gets the product <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">quantity</see> in the order line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.OriginalQuantity">
            <summary>
            Gets the product <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">original quantity</see> in the order line, in case a part of the quantity was voided.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.NetAmount">
            <summary>
            Gets the aggregated <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">money</see> value of the order line, including 
            price modifiers and <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardDiscount">discounts</see> set on all the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.UnitLines">unit lines</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.Amount">
            <summary>
            Line Amount calculated by the catalog price and quantity. The Amount returns CatalogAmount - all price modifiers.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.UnitPrice">
            <summary>
            Gets or sets the actual <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">money</see> value for the UOM of product in this line.
            </summary>
            <remarks>
            This value is set when line is created, based on catalog price or price defined during sale.<br/>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.Price">
            <summary>
            Gets or sets the actual <see cref="T:Retalix.StoreServices.Model.Price.ISellPrice">price</see> value for each product in this line.
            </summary>
            <remarks>
            This value is set when line is created, based on catalog price or price defined during sale.<br/>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.InitialUnitPrice">
            <summary>
            Gets or sets the initial <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">money</see> value for <b>each</b>, product in this line.
            </summary>
            <remarks>
            This value is set when the line is created and remains intact through the line lifecycle.<br/>
            In most cases this will be equal to the <b>RegularUnitPrice</b>.<br/>
            In the event of an<i>open price</i>, <i>price verification</i>, <i>department sale</i>, the price will reflect the initial price set by the user.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.InitialPrice">
            <summary>
            Gets or sets the initial <see cref="T:Retalix.StoreServices.Model.Price.ISellPrice">price</see> value for each, product in this line.
            </summary>
            <remarks>
            This value is set when the line is created and remains intact through the line lifecycle.<br/>
            In most cases this will be equal to the <b>RegularUnitPrice</b>.<br/>
            In the event of an<i>open price</i>, <i>price verification</i>, <i>department sale</i>, the price will reflect the initial price set by the user.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.AdjunctLines">
            <summary>
            Gets a collection of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that represents the lines adjunct to the line.
            </summary>
            <example>
            Adjunct lines may contain linked items such as <b>warranty</b>, <b>bottle deposit</b> etc..
            </example>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.PrincipalLine">
            <summary>
            Gets the principal order line for a current order line, and the current order line is adjunct, then otherwise <b>null</b>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.UnitLines">
            <summary>
            Gets the unit lines for the current order line.
            </summary>
            <remarks>
            When the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.Quantity"/> UnitOfMeasure == Each, the correspondent number of lines to the <b>Value</b> are displayed.<br/>
            Otherwise they are displayed on one line. 
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.PriceModifier">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo">price-modifiers</see> that have been applied to this line.
            </summary>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.SecurityScaleInfo">
            <summary>
            Gets or sets a <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleInfo">SecurityScaleInfo</see> that represents
            data of the Security scale measurement that was performed (Weight, time, ApprovingOperator).
            Commonly used by the security scale validation system triggered from the self checkout touch point.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.EntryMethod">
            <summary>
             Gets the entry method for the current order line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.VoidReasonCode">
            <summary>
             Gets the void reason code for the current order line.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.ModifyTare(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareModifierInfo)">
            <summary>
            Modifies the tare for the current order line.
            </summary>
            <param name="tareModifierInfo">The new tare info to apply.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.Discount">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">money</see> value of total line discount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.Traits">
            <summary>
            Gets a collection of special custom properties of the line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.ProductSaleInfo">
            <summary>
             Gets the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.ProductSaleInfo">ProductSaleInfo</see> 
             that was used for creation of the current <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.InputParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.DecodedBarcode">
            <summary>
            Gets the decoded barcode that was used for creation of the current <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see>, if any.
            Returns the data extracted by the best matched Data Pattern or null if no Data Pattern was matched.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.IsTare">
            <summary>
            Gets whether this line represents a tare product linked to another product 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.IsWarranty">
            <summary>
            Gets whether this line represents a warranty product linked to another product 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.IsLinkedItem">
            <summary>
             Gets an indication if the current line represents a return of linked product.
             Linked return line is created automatically, as a result of returning a purchased product.
             For example: wine return causes return of it's bottle, tv return causes return of the purchased warranty.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.SellingBehaviors">
            <summary>
            Gets the selling behaviors.
            </summary>
            <value>The selling behaviors.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.Id">
            <summary>
            Required for persistency. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.AddNote(System.String,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.NoteTypeEnumeration)">
            <summary>
            Add a Note
            </summary>
            <param name="text">The note text</param>
            <param name="noteType">The note type</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.RemoveNotes(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.NoteTypeEnumeration)">
            <summary>
            Remove all the notes of this type
            </summary>
            <param name="noteType"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine">
            <summary>
            Represents a single unit in an <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine"/>.
            </summary>
            <remarks>
            Unit represents a quantity value of <b>1</b> ordered product.<br/>
            It allows the user to iterate and modify price for each separate unit.<br/>
            <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine.OrderLine"/> property can be used to get all the additional data that is needed.<br/>
            When the parent OrderLine <b>Quantity of the UnitsOfMeasure == Each</b>, there will be <b>Quantity.Value</b> unit lines.<br/>
            For all other units of measure one line will always be present.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine.SequenceNumber">
            <summary>
            Gets the index of current unit in parent order line.<br/>
            This number is given once the order unit line is created and remains intact through the line life cycle.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine.OrderLine">
            <summary>
            Gets the parent order line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine.NetAmount">
            <summary>
            Gets the calculated <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">money</see> value of the current unit 
            with <see cref="N:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers">price modification</see> and<see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine.Discounts">discounts</see> applied.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine.Discounts">
            <summary>
            Gets the discounts applied to the current unit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine.DiscountAmount">
            <summary>
            Gets the discount amount that was aplied to the current unit.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine.AddDiscount(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardDiscount)">
            <summary>
            Adds a discount to current unit.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine.RemoveDiscount(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardDiscount)">
            <summary>
            Removes a discount from current unit.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardDiscount"/> is not present in the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine.Discounts"/> enumerator.</exception>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine.Amount">
            <summary>
            Gets the current (calculated) <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">money</see> value of the order line.
            </summary>
            <remarks>
            This value shows the last effective price in the following order.<br/>
            <c>OrderLine.RegularUnitPrice</c> -> <c>ModifiedAmount</c> -> <c>DiscountedAmount</c>
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardDiscount">
            <summary>
            Represents a discount applied to a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderUnitLine">IOrderUnitLine</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardDiscount.PromotionId">
            <summary>
            Gets the reward that applies the current discount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardDiscount.Amount">
            <summary>
            Gets the amount of the current discount.
            </summary>
            <remarks>
            The amount must be positive.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo">
            <summary>
            Encapsulates the arguments required when adding an online product to a Customer Order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.ProductSaleInfo">
            <summary>
            Gets the original product sale info which AdditionalInfo is used to persist properties of this facade.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo" /> class.
            </summary>
            <param name="productSaleInfo">The product sale info.</param>
            <exception cref="T:System.ArgumentNullException">productSaleInfo is <c>NULL</c></exception>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.IsOnlineProduct">
            <summary>
             Gets or sets indication wether <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.ProductSaleInfo">ProductSaleInfo</see> contains online product sale information.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.AuthorizationCode">
            <summary>
            Gets or sets an authorization code required to sell online products.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.ExternalIdEntryMethod">
            <summary>
            Gets or sets an Entry Method of external id that required for activate online products - can be Keyed\Scanned\MSR.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.AuthorizationMethod">
            <summary>
            Gets or sets an authorization method required to sell online products.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.AuthorizationResultCode">
            <summary>
            Gets or sets the online item code. The value is assigned to line content, unit tests.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.AuthorizationDateTime">
            <summary>
            Gets or sets the date and time the online item was authorized. The value is assigned to line content, unit tests,.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.AuthorizationExternalId">
            <summary>
            Gets or sets the Authorization External ID used by legacy return logic. (ReturnOnlineItemActivationCodeIsSameAsPurchase).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.AuthorizationExtendedData">
            <summary>
            Contains additional information regarding the authorization such as 4 last digits of card number, car number, etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.ReferenceNumber">
            <summary>
            Gets or sets the reference number of the online item. The value is assigned to line content, unit tests.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.ProviderData">
            <summary>
            Gets or sets the provider data of the online item. The value is assigned to line content, unit tests.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.ReceiptText">
            <summary>
            Gets or sets the receipt text of the online item. The value is assigned to line content, unit tests.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.InitialBalance">
            <summary>
            Gets or sets the initial balance of the online item. The value is assigned to line content, unit tests.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.CurrentBalance">
            <summary>
            Gets or sets the current balance of the online item. The value is assigned to line content, unit tests.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.ServiceType">
            <summary>
             Gets or sets the service type of the online item. The value is assigned to line content, unit tests.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.ExternalProviderMessage">
            <summary>
             Gets or sets the external provider message of the online item. The value is assigned to line content, unit tests.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.PIN">
            <summary>
             Gets or sets the PIN of the online item. The value is assigned to line content, unit tests.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.ThirdPartySessionId">
            <summary>
             Gets or sets the third party session ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.IsSeparateSlip">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.ReversalAuthorizationCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.EJOnlyReceipt">
            <summary>
            Gets or sets the receipt text which should be saved in TLOG, displayed on EJ, but not printed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo.PrintOnlyReceipt">
            <summary>
            Gets or sets the receipt text which should be printed only, but not saved in TLOG and displayed on EJ
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLineTrait">
            <summary>
            Specifies special properties of IOrderLine.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OrderLineTrait.IsEatIn">
            <summary>
            Specifies an item that is being eaten in store.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo">
            <summary>
            Encapsulates the arguments required when adding a product to a customer order.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.#ctor">
            <summary>
             Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo">ProductSaleInfo</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer)">
            <summary>
             Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo">ProductSaleInfo</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.AdditionalInfo">
            <summary>
             Container for additional sale information.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.ProductIdentifier">
            <summary>
            Gets or sets <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.ProductIdentifier">the product identifier</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.Quantity">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">quantity</see> of the product in the current sale.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.PriceModifier">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo">price modifiers</see> in case the product price was set or changed on the client side.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.LinkedProducts">
            <summary>
            Gets or sets a collection of linked product IDs.
            </summary>
            <example>When selling a television with waranty.</example>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.Tare">
            <summary>
            Gets or sets <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.Tare">tare</see> information. The tare can be specified either as a fixed weight value or in percents relative to 
            the overall product weight. When the tare is defined as a product it should be specified in the Linked Products argument.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.RepeatLineSequenceNumber">
            <summary>
            Gets or sets sequence number of line to repeat.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.VerifyPrice">
            <summary>
            Gets or sets indication whether the price was approved.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.ProhibitDiscount">
            <summary>
            Get or set indication if this product should be excluded from promotion calculations.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.TaxCalculatioOnCentralPrice">
            <summary>
            Get or set indication if this product should add central price tax calculations.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.IsProxyOrderLineMapped">
            <summary>
            Get or set indication that product in original order line is mapped to proxy order line .
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.IsInStoreRange">
            <summary>
            Get or set indication that product is normally in stock.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.IsOnlineAccount">
            <summary>
            Get or set indication that the product has at least one online account selling behavior associated
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.BatchLotNumber">
            <summary>
            Get or set the identification "number" of the lot number. The value is alphanumeric.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.LineSequenceNumber">
            <summary>
            Gets or sets sequence number of line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo.BatchIdentifier">
            <summary>
            Get or set the identification of the series of lines. The value is alphanumeric.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo">
            <summary>
            Represents the arguments required for voiding a product in Customer Order.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.#ctor(Retalix.StoreServices.Model.Product.Identifier,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity,Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DecodedData)">
            <summary>
            Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo">ProductVoidInfo</see> with the given <see cref="T:Retalix.StoreServices.Model.Product.Identifier">Identifier</see> and <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">SellQuantity</see>
            </summary>
            <param name="productIdentifier">The product <see cref="T:Retalix.StoreServices.Model.Product.Identifier">Identifier</see></param>
            <param name="quantity">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">SellQuantity</see> of the product to void. Passing null means void all items of the product</param>
            <param name="decodedData">Decoded Data for product</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="productIdentifier"/> is null</exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.#ctor(System.Int64,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity)">
            <summary>
            Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo">ProductVoidInfo</see> with the given <see langword="long">sequenceNumber</see> and <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">SellQuantity</see>
            </summary>
            <param name="sequenceNumber">The sequenceNumber of the line to void</param>
            <param name="quantity">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">SellQuantity</see> of the line to void. Passing null means void all items of the product</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.ProductIdentifier">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Product.Identifier">Identifier</see> of the product to void.
            </summary>
            <remarks>
            When <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.ProductIdentifier">ProductIdentifier</see> is null, use <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.SequenceNumber">SequenceNumber</see>.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.Quantity">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">SellQuantity</see> that specifies the voided product quantity.
            </summary>
            <remarks>
            When <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.Quantity">Quantity</see> is null, all quantity of the item will be voided.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.SequenceNumber">
            <summary>
            Gets or sets the <see cref="T:System.Int32">int</see> that specifies the sequence number of the voided line.
            </summary>
            <remarks>
            When <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.SequenceNumber">SequenceNumber</see> is null, use <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.ProductIdentifier">ProductIdentifier</see>.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.ExtendedData">
            <summary>
            Gets or sets the data used for extensions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.Reason">
            <summary>
            Gets or sets the void reason for the product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.ReturnInputData">
            <summary>
            Gets a set of data for ReturnInputData
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.ExternalId">
            <summary>
            Gets or sets the authorization external id for the product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo.DecodedBarcode">
            <summary>
            Returns the data extracted by the best matched Data Pattern or null if no Data Pattern was matched.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">
            <summary>
            Represents the product quantity sold in a selling line in the Customer Order.
            Order Line. 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.DefaultUnitOfMeasure">
            <summary>
             Represents the Unit Of Measure values by which the product quantity is sold. The UOM types are: 
             Each, kg, gm, lbr, ltr, gl.  <see cref="T:Retalix.StoreServices.Model.Price.UnitOfMeasureValues">Unit Of Measure Values</see>. 
             The default unit of measure is each.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.#ctor(Retalix.StoreServices.Model.Price.UnitOfMeasure,System.Decimal,System.Int32)">
            <summary>
             Constructor
            </summary>
            <param name="unitOfMeasure"></param>
            <param name="units"></param>
            <param name="value"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.UnitOfMeasure">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Price.UnitOfMeasureValues">Unit Of Measure Values</see>. 
            Unit Of Measure values represent the quantity type of the product. The UOM types are: 
            Each, kg, gm, lbr, ltr, gl.  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.Units">
            <summary>
            Gets or sets the <see cref="T:System.Decimal">Unit</see> that represent the value of the units 
            in the Unit Of Measure != EACH. For example, kg, gm, etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.Value">
            <summary>
             Gets or sets the <see cref="T:System.Int32">Value</see> that represent the value of the quantity
             when the Unit Of Measure == Each. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.EntryMethod">
            <summary>
            Gets or sets the <see cref="T:System.String">Entry Method</see> type
            used to add the quantity. For example, scale, scanner, etc. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.SellQuantityModifier">
            <summary>
            Contains the data of the modified quantity amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.IsWeightableItem">
            <summary>
            Gets a <see cref="T:System.Boolean">value</see> indicating whether the product quantity is weighable.
            <see cref="T:Retalix.StoreServices.Model.Price.UnitOfMeasureValues">Unit Of Measure Values</see>
            </summary>
            <value>
            <c>True</c> The product quantity weighable; otherwise, <c>False</c>.
            </value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.IsWeightableUOM(Retalix.StoreServices.Model.Price.UnitOfMeasure)">
            <summary>
             Obsolete("Temporary solution for weighable product, need to remodel.")
            </summary>
            <param name="unitOfMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.ToString">
            <summary>
            Return a new string format which represents the SellQuantity amount. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.IsItemByVolume">
            <summary>
            Gets a <see cref="T:System.Boolean">value</see> indicating whether product quantity 
            is measured by volume.
            </summary>
            <value>
            <c>True</c> if the product quantity is measured by volume; otherwise, <c>False</c>.
            </value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.IsVolumeUOM(Retalix.StoreServices.Model.Price.UnitOfMeasure)">
            <summary>
             Obsolete("Temporary solution for product by volume, need to remodel.")
            </summary>
            <param name="unitOfMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.Equals(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity)">
            <summary>
            Returns a <see cref="T:System.Boolean">value</see> that indicates if the SellQuantity is equal to the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>
            If the SellQuantity other is null, then False is returned.
            If the SellQuantity is other, with the same Reference, then True is returned.
            If the SellQuantity is other, and does not have same Reference but is equal to the Unit Of Measure, Units and Value, then True is returned.
            Else False is returned.  
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, which is used in hashing algorithms and data structures such as a hash table. 
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.ValidateSameUnitsOfMeasure(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity)">
            <summary>
             gets two SellQuantity instance and check if the <see cref="T:Retalix.StoreServices.Model.Price.UnitOfMeasureValues">Unit Of Measure Values</see>
             is equals to the specified other.
             if it's not equal throw new ArgumentException.
            </summary>
            <param name="left">SellQuantity left </param>
            <param name="right">SellQuantity right</param>
            <returns> </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.ValidateComparableAndAggregatable(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity)">
            <summary>
             gets two SellQuantity instance and check if they can be Aggregated.  
             if they can not throw new ArgumentException.
            </summary>
            <param name="left">SellQuantity left </param>
            <param name="right">SellQuantity right</param>
            <returns> </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.op_Addition(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity)">
            <summary>
            Summarize between left <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity"/> and right <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.op_Subtraction(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity)">
            <summary>
            Subtract between left <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity"/> and right <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.#ctor(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity},Retalix.StoreServices.Model.Price.UnitOfMeasure)">
            <summary>
            OnCreate instance from list of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity"/>.
            </summary>
            <param name="quantities"></param>
            <param name="unitOfMeasure"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.op_LessThan(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity)">
            <summary>
             gets two SellQuantity instance and return a <see cref="T:System.Boolean">value</see> if the left smaller then the right.  
            </summary>
            <param name="left">SellQuantity left </param>
            <param name="right">SellQuantity right</param>
            <returns> </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.op_GreaterThan(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity)">
            <summary>
             gets two SellQuantity instance and return a <see cref="T:System.Boolean">value</see> if the left bigger then the right.  
            </summary>
            <param name="left">SellQuantity left </param>
            <param name="right">SellQuantity right</param>
            <returns> </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity.EqualQuantity(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity)">
            <summary>
            return a <see cref="T:System.Boolean">value</see> that represent if this SellQuantity is equals to the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>
            if the SellQuantity other is null return false.
            if the SellQuantity other and this have same Reference return true.
            if the SellQuantity other and this does not have same Reference but equals in the UnitOfMeasure, Units and Value return true
            else return false. 
            </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantityModifier">
            <summary>
            Represents the quantity change in data.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantityModifier.#ctor(System.Boolean,System.Boolean,System.Nullable{System.Decimal},System.Boolean,System.Boolean,System.Decimal)">
            <summary>
            
            </summary>
            <param name="isLinkTare"></param>
            <param name="isTareOverride"></param>
            <param name="tareValueForReduce"></param>
            <param name="isManulTareForReduce"></param>
            <param name="isPercentageTareForReduce"></param>
            <param name="units"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantityModifier.UnitsBeforeTareReduce">
            <summary>
            Gets or sets the <see cref="T:System.Decimal">Units Before Tare Reduce</see> that represents 
            the units before tare reduction.
            For example, when buying a box of cookies with the total weight of 2 KG, which is divided into 100 GRMs
            for the box and 1900 GRMs for the cookies, the Units 'Before Tare Reduce' is 2 KG.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantityModifier.IsLinkTare">
            <summary>
            Gets or sets a boolean value <see cref="T:System.Boolean">Is Link Tare</see> indicating if the item has a linked item of type tare. True if IsLinkTare, otherwise fale.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantityModifier.IsTareOverride">
            <summary>
            Gets or sets a boolean value <see cref="T:System.Boolean">Is Tare Override</see> that represents the pre configured tare or manual tare.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantityModifier.TareValueForReduce">
            <summary>
            Gets or sets a <see cref="T:System.Decimal">Tare Value For Reduce</see> that represents 
            the Value For Reduce when selling theTare weight product.
            For example, when buying a box with cookies with the total weight of 2 KG, that is divided into 100 GRMs
            for the box and 1900 GRMs for the cookies. The value to reduce from the Tare Value For Reduce is 100 GRM.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantityModifier.IsManulTareForReduce">
            <summary>
            Gets or sets a boolean value <see cref="T:System.Boolean">Is Manual Tare For Reduce</see> indicating whether the tare is reduced manually.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantityModifier.IsPercentageTareForReduce">
            <summary>
            Gets or sets a boolean value <see cref="T:System.Boolean">Is Percentage Tare For Reduce</see> indicating whether the tare is reduced by a percentage.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderItemFeeAmount">
            <summary>
            Amount of Item Fees only.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderNetAmount">
            <summary>
            Customer-Order-Net-Amount is the total including Discounts and Surcharges without Taxes (assuming tax is not included) 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderTransactionFeeAmount">
            <summary>
            Amount of Transaction Fees only.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderCalculatedValue`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderCalculatedValue`1.GetValue(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            
            </summary>
            <param name="customerOrder"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderDiscountAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderDiscountMerchandiseAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderDiscountNonMerchandiseAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderExcludedExemptedTaxAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderExcludedMerchandiseTaxAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderExcludedNonMerchandiseTaxAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderExcludedTaxAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderForcedExchangeRefundAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderGrandTotalAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderGrossAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderIncludedExemptedTaxAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderIncludedTaxAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderMerchandiseItemsAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderNonMerchandiseItemsAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderPurchaseQuantity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderRefundNetAmount">
            <summary>
            Total of all returned articles after any relevant discount and including sales tax
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderRefundNetQuantity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderVoidedItemsAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderVoidedItemsQuantity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Totals.ICustomerOrderVoidedPurchasedItemsAmount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderLink.MergedCustomerOrderId">
            <summary>
            Gets the CustomerOrder ID of the merged customer order. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderLink.MergedTransactionId">
            <summary>
            Gets the Transaction ID of the merged customer order. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderLink.MergedTransactionSequenceNumber">
            <summary>
            Gets the Transaction SequenceNumber of the merged customer order. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderLink.TransitionContext">
            <summary>
            Gets the OrderProcessTransitionContext for merged transaction. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderMergeVisitor">
            <summary>
            Required to update various orderLine properties while customerOrders merging
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.FormType">
            <summary>
            Represents the Form type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.FormType.None">
            <summary>
            Type of regular form
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.FormType.Tab">
            <summary>
            Type of Tab form
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IFormType">
            <summary>
            Represent the form type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IFormType.Type">
            <summary>
            Get the type of the form.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IForm">
            <summary>
            Represent an object that contain a list of data that composed from key and value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IForm.Name">
            <summary>
            Get the name of the form.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IForm.AddOrUpdate(System.String,System.String)">
            <summary>
            Add or update a form's value.
            </summary>
            <param name="key">The key of the value</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IForm.Remove(System.String)">
            <summary>
            Remove the existing value from the form by the key.
            </summary>
            <param name="key">The key of the value that need to be removed</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IForm.GetAll">
            <summary>
            Get all values.
            </summary>
            <returns>The list of data in the form that composed from key and value</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IForm.Get(System.String)">
            <summary>
            get value by key
            </summary>
            <param name="key"></param>
            <returns>value if exist, else return null</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IFormFactory">
             <summary>
              Represents a factory responsible for creating a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IForm">IForm</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IFormFactory.CreateForm(System.String)">
            <summary>
            Create and return an instance of IForm with default type
            </summary>
            <param name="name"></param>
            <returns>IForm</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IFormFactory.CreateForm(System.String,System.String)">
            <summary>
            Create and return an instance of IForm base on the requiered type
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns>IForm</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IFormsData">
            <summary>
            Represent an object that contain a list of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IForm">IForm</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IFormsData.GetForm(System.String)">
            <summary>
            Get the specific form
            </summary>
            <param name="name">The name of the form</param>
            <returns>Rerurns a form object</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IFormsData.SetForm(Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IForm)">
            <summary>
            Add a new form to the list
            </summary>
            <param name="form">The given form that need to be add</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IFormsData.Remove(System.String)">
            <summary>
            Remove the specific form from the list
            </summary>
            <param name="name">The name of the form</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IFormsData.GetAll">
            <summary>
            Get all forms
            </summary>
            <returns>List of forms</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IFormsData.CreateForm(System.String)">
            <summary>
            Create a new form
            </summary>
            <param name="name">The name of the form</param>
            <returns>Returns the form that was created</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderLinkProvider.GetAll(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            Return all existing in customerOrder.PersistenceMembers collection objects of CustomerOrderLink type 
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderLinkProvider.Add(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderLink)">
            <summary>
             Add CustomerOrderLink instance for specified CustomerOrder into PersistenceMembers collection.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderLinkProvider.Remove(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderLink)">
            <summary>
             Remove CustomerOrderLink instance for specified CustomerOrder into PersistenceMembers collection.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.IPriceOverrideCalculator">
            <summary>
            The calculator calculates the new price for a specific order line 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.IPriceOverrideCalculator.Calculate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.String,Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo)">
            <summary>
            Calculates the new price before running price override on a specific order line
            </summary>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">CustomerOrder</see> to perform the calculation on</param>
            <param name="orderLineSequenceNumber">the sequence of the relevant order line to perform the calculation on</param>
            <param name="priceModifierInfo">the new price data for price override calculation</param>
            <returns>cloned order line with calculated price</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.Audit.AuditLogCustomerPaymentLine">
            <summary>
            Audit data of customer payment line
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTermCommitEvaluator">
            <summary>
            Represents the responsibility for determining the Payment Term final state
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTermCommitEvaluator.IsFinal(Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm)">
            <summary>
            Determines whether a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">IPaymentTerm</see> is final according to the specified <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</see>
            wich associate with the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">IPaymentTerm</see>. 
            </summary>
            <param name="paymentTerm"> </param>
            <returns>True if the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">IPaymentTerm</see> is final</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTermExtension.Id">
            <summary>
            Required for persistency. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">
            <summary>
            Captured on customer order to specify how and when amount due will be settled 
            by the customer or the retailer (payment / refund). 
            In addition payment terms may capture the customer's intent to use a specific tender type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.CustomerOrder">
            <summary>
            Gets the customer order this payment term belongs to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.SequenceNumber">
            <summary>
            Gets the sequence number of the payment term.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.PaymentInfo">
            <summary>
            Gets <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.PaymentInfo">PaymentInfo</see> used in the payment process, including data such as amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.IsRewardPayment">
            <summary>
            Gets <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.IsRewardPayment">IsRewardPaymentInfo</see> is defined as reward tender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.IsPreAuthPayment">
            <summary>
            Gets <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.IsPreAuthPayment">IsPreAuthPayment</see> is defined as pre authorized tender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.Amount">
            <summary>
            Gets an <see cref="T:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney">ExchangeMoney</see> object representing the amount of this payment term
            in both the paid and local currency.
            </summary>
            <remarks>
            If the payment is in a foreign currency, the <see cref="P:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney.BaseAmount">BaseAmount</see> will be the amount 
            in the foreign currency, while the <see cref="P:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney.ConvertedAmount">ConvertedAmount</see> will be the amount
            in the local currency after conversion.
            If the payment is in the local currency, both amounts will have the same value.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.NetAmount">
            <summary>
            The actual purchasing power of the amount specified in the PaymentInfo.Amount. It could be that due to tender promotions, a payment request
            of $x can actually cover goods in a value of $y, where Y > X. In this case the paymentInfo amount will be X and the PaymentTerm amount will be Y.
            (This can be only on a closing tender, not closing tenders will always show the same amount in the paymetnInfo and the PaymetTerm)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.TenderType">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see> used in the payment process.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.Tenders">
            <summary>
            OBSOLETE: Use IRetailTransaction.PaymentTermsCoverage to query Terms to Payments associations.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.IsVoided">
            <summary>
            Gets the returns for a <see cref="T:System.Boolean">bool</see> value indicating if the payment term is voided.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.TenderUsage">
            <summary>
            Gets the intended usage of this payment term (e.g. sale/refund etc.)
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.IsSatisfied">
            <summary>
            OBSOLETE: Use IRetailTransaction.PaymentTermsCoverage.CoveringPayments or IRetailTransaction.PaymentTermsCoverage.UnfulfilledTerms to validate if term was satisfied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.AssociateTender(Retalix.StoreServices.Model.Selling.CustomerPayment.Tender)">
            <summary>
            OBSOLETE: Use IRetailTransaction.PaymentTermsCoverage to query Terms to Payments associations.
            </summary>
            <param name="addedTender">A <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">tender</see> to be associated.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm.IsFinal">
            <summary>
            Gets the returns for a <see cref="T:System.Boolean">bool</see> value indicating if the payment term is final.
            <remarks>
            In case of true:
            The server by accepting the term is committing to accept the payment matching this term and
            this implies running all relevant Eligibilities, BRMs etc.
            </remarks>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierReasonCode">
            <summary>
            This class enumerates possible reason codes for performing price modification.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierReasonCode.EmbeddedPrice">
            <summary>
            This means that the price was embedded on the barcode.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierReasonCode.OverridePriceEmbedded">
            <summary>
            This means that an override price was embedded on the barcode.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierAction">
            <summary>
            Represents the method used to determine the modifying method of the product price.
            </summary>
            <example>
            <para>
            The New price is set, regardless of the original price of the product.<br/>
            PriceModifierInfo.Action = <b>PriceModifierAction.Price</b></para>
            IOrderLine.RegularUnitPrice = 10<br/>
            PriceModifierInfo.Amount = 2<br/>
            Result: <br/><b>IOrderUnitLine.ModifiedAmount = 2</b>
            <para>
            The price will change by the amount set.<br/>
            PriceModifierInfo.Action = <b>PriceModifierAction.Amount</b></para> 
            IOrderLine.RegularUnitPrice = 10<br/>
            PriceModifierInfo.Amount = 2<br/>
            Result: <br/><b>IOrderUnitLine.ModifiedAmount = 8</b>
            <para>
            The price will change by the percentage set.<br/>
            PriceModifierInfo.Action = <b>PriceModifierAction.Percantage</b></para> 
            IOrderLine.RegularUnitPrice = 10<br/>
            PriceModifierInfo.Percent = 2<br/>
            Result: <br/><b>IOrderUnitLine.ModifiedAmount = 9.8</b>
            </example>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierAction.Price">
            <summary>
            The new price will be set, regardless of the original price of the product.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierAction.Amount">
            <summary>
            The price will change by the amount set.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierAction.Percantage">
            <summary>
            The price will change by the percentage set.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo">
            <summary>
            Encapsulates the arguments required to modify a price.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierAction,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo">PriceModifierInfo</see> class with <b>price</b> or <b>amount</b> actions.
            </summary>
            <param name="action">The action that should be taken on the price.</param>
            <param name="amount">A <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">Money</see> representing the modifying value.</param>
            <exception cref="T:System.ArgumentException"><c>action == <see cref="F:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierAction.Percantage">PriceModifierAction.Percantage</see></c></exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo">PriceModifierInfo</see> class with <b>percentage</b> action.
            </summary>
            <param name="percent">A <see langword="decimal"/> representing the percent value.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo.Action">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierAction">PriceModifierAction</see> value indicating which action is used to modify the price.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo.Amount">
            <summary>
            Gets or sets the amount by which the price is modified.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo.Percent">
            <summary>
            Gets or sets the percent of the price modifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo.Quantity">
            <summary>
            Gets or sets the quantity of the new price that will be created.
            For example,if we want that the new price will be 3 unit for 1 we will set this value with <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo.Quantity"/> of 3
            and the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo.Amount"/> property to 1.
            If this property is not set,the old price's qunatity will be used as the new price's quantity.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo.ReasonCode">
            <summary>
            Gets or sets the business reason why the price was changed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo.ExtendedAmount">
            <summary>
            Gets or sets the extended amount by which the price is modified (this is the total packed amount value).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo.MethodCode">
            <summary>
            Gets or sets the method that requiered the price change.
            Like: PriceOverride, Return or PriceVerify.
            </summary>
            <remarks>
            This property values can be any static member of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierMethodCode">PriceModifierMethodCode</see> class.
            These values are used for business flow decisions but currently most flows don't use this property, so it is obsolete.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierMethodCode">
            <summary>
            A static set of strings that represents the Price Modifier Method Code
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierMethodCode.PriceOverride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierMethodCode.Return">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Validators.IOrderCalculationValidator.Validate(System.Object)">
            <summary>
            Validates the order calculation request object
            </summary>
            <param name="orderCalculationRequest">ordercalculationrequest, Retalix.Contracts.Generated.Arts.PosLogV6.Source.PosLogType</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Validators.IOrderLineQuantityValidator.Validate(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine})">
            <summary>
            Validates whether there are items of multiple quantity on order line and if they can be be added to the order. If not, throw an appropriate exception.
            </summary>
            <param name="orderLines"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Validators.IOrderLineRepeatValidator.Validate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo)">
            <summary>
            Validates whether there is a repeat item on last order line and whether the repeat action is allowed to be performed. If not allowed, throw an appropriate exception.
            </summary>
            <param name="customerOrder">The current customer order</param>
            <param name="repeatedLine">The last order line</param>
            <param name="productSellInfo">Product details</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderExtension">
            <summary>
            Defines a generic interface for a customer order with a back reference to parent.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderExtension.Id">
            <summary>
            The unique identifier of an entity.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderExtension.CustomerOrder">
            <summary>
            Gets or sets the parent customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderExtension.IsSearchable">
            <summary>
            Determines whether this entity used as search criteria of the parent customer order
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderProcessDataProvider.GetPickupOrderDto(Retalix.StoreServices.Model.Selling.OrderProcess.IClickAndCollectSearchCriteria)">
            <summary>
            Gets pickup orders list by the given search criteria and paging details
            </summary>
            <param name="criteria">Search criteria</param>
            <returns>Pickup orders list</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderSuspendingValidator">
            <summary>
            Represents a validator that runs when trying to suspend a customer order
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderSuspendingValidator.Validate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            validates that the supplied <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> can be suspended, implementer should throw exception if not valid
            </summary>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">CustomerOrder</see> to perform the validations on</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.FulfillmentOptions">
            <summary>
            Customer order fullfillment (Pickup) options represents additional <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> data on <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/>customer order 
            which is assigned to handle the order management process
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.FulfillmentOptions.RequestedPickupTime">
            <summary>
            Gets or sets the user preferred pickup time for the order as an additional data for the order picking procedure
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.IPickupOrderDataProvider.GetPickupOrderDto(Retalix.StoreServices.Model.Selling.OrderProcess.IClickAndCollectSearchCriteria,Retalix.StoreServices.Model.Infrastructure.BPM.PagingInfo)">
            <summary>
            Gets pickup orders list by the given search criteria and paging details
            </summary>
            <param name="criteria">Search criteria</param>
            <param name="pagingInfo">Paging details</param>
            <returns>Pickup orders list</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Pickup.AssignedPicker">
            <summary>
            Represents additional <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> data on <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/>customer order which is assigned to collect and handle it 
            during the order management process
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Pickup.AssignedPicker.Id">
            <summary>
            Represents the <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> which is assigned to collect and handle the customer order 
            during the pickup process
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Pickup.AssignedPicker.CustomerOrder">
            <summary>
            Gets or sets the customer order which holds the user additional data for the order picking procedure
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Pickup.AssignedPicker.UserId">
            <summary>
            gets or sets the picking <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> unique identifier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Pickup.AssignedPicker.UserName">
            <summary>
            gets or sets the picking <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> domain username 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Pickup.AssignedPicker.DisplayName">
            <summary>
            gets or sets the picking <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">user</see> display name, the display name is a combination of the first name and last name
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.IOrderLineFactory.Create(Retalix.StoreServices.Model.Selling.Returns.IReturnContext,System.Collections.Generic.IList{Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog})">
            <summary>
            Creates a sequence of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">IReturnOrderLine</see> objects, based on the data in
            <paramref name="returnContext"/>, and matching the quantities and prices reflected in <paramref name="unitsToReturn"/>.
            </summary>
            <remarks>
            <paramref name="unitsToReturn">UnitsToReturn</paramref> represents the units from the TLog of the original purchase
            order that have been chosen to be returned. Selected unit-logs do not need to belong to the same parent 
            <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog">ISaleLineLog</see> representation. The <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">IReturnOrderLine</see> 
            objects created by the factory will be based on these selected units.
            </remarks>
            <param name="returnContext">
            An <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnContext">IReturnContext</see> instance representing returns-related
            data relevant for the current transaction and product return.
            </param>
            <param name="unitsToReturn">
            The units from the TLog of the original purchase order that have been chosen to be returned and according to which
            the return order lines will be created.
            </param>
            <returns>
            A sequence of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">IReturnOrderLine</see> objects, based on the data in
            <paramref name="returnContext"/>, and matching the quantities and prices reflected in <paramref name="unitsToReturn"/>.
            <remarks>
            Created return order lines do not necessarily reflect the structure of the provided <paramref name="unitsToReturn"/>.
            Lines may be grouped and separated according to various criteria, e.g., the parent log lines of the provided unit lines and
            the prices of the units being returned.
            </remarks>
            </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Cache.ICachableDto">
            <summary>
            Represents DTO for saving cach on customer order
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Cache.ICachableDto.CustomerOrderKey">
            <summary>
            customer order key.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Cache.ICachableDto.EntityType">
            <summary>
            caching entity.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Cache.ICachableDto.Content">
            <summary>
            actually data.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Cache.ICachableDto.GetEntity``1">
            <summary>
            convert entity data for specific type.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Cache.ICachableDto.UpdateContent(System.Object)">
            <summary>
            
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Cache.ICustomerOrderEntitiesDao">
            <summary>
            Represents DAO that assign cache data to customer order. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Cache.ICustomerOrderEntitiesDao.GetOrCreateCachableDto(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.String)">
            <summary>
            
            </summary>
            <param name="customerOrder"></param>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.Cache.ICustomerOrderEntitiesDao.Add(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.String,System.Object)">
            <summary>
            add cacheable data to customer order.
            </summary>
            <param name="customerOrder"></param>
            <param name="entityName"></param>
            <param name="entity"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs">
            <summary>
             Specifies arguments for <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs.#ctor">
            <summary>
             Initializes new instance of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs.AdditionalInfo">
            <summary>
             Gets or sets instance of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.AdditionalInfoContainer"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs.Store">
            <summary>
            The business unit this customer order associated with.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs.TouchPoint">
            <summary>
            The touch point where this customer order is created on.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs.User">
            <summary>
            The user that creates the customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs.BusinessDayDate">
            <summary>
            The business date the customer order is created on.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs.IsTrainingMode">
            <summary>
            Indicate if the customer order should be marked with an "IsTrainingMode" flag.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs.Classification">
            <summary>
             Gets or sets <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderClassification"/> instance.
            </summary>
             <remarks>
             In case not specified, the value will be taken from ILegacyRetailTransaction,
             untill the ILegacyRetailTransactionis in use.
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs.CustomerInfo">
            <summary>
            Information used to identify a cuatomer, and assign it ro the CustomerOrder upon creation
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">
            <summary>    
            Represents the intention to purchase products, which can be initiated from many different touchpoints (POS, Mobile Shopper, Self Scan, etc.). 
            A customer order is composed of the customer details, a list of products, payment terms and the details of the context in which it was created (e.g. Business unit, Touchpoint).
            </summary>
            <example> 
            <code lang="cs" description="This example shows how to create a customer order in the context of a business service.">
            <![CDATA[
            public class CreateCustomerOrderService
            {
                private readonly IStoreApplication _storeApplication;
            
                public CreateCustomerOrderService(IStoreApplication storeApplication)
                {
                    _storeApplication = storeApplication;
                }
            
                public ICustomerOrder CreateCustomerOrderTest()
                {
                    var customerOrderFactory = _storeApplication.Resolver.Resolve<ICustomerOrderFactory>();
                    ICustomerOrder customerOrder = customerOrderFactory.Create();
                    return customerOrder;
                }
            }]]>
            </code> 
            </example>
            <example>      
            <code lang="cs" description="This example shows how to retrieve an existing customer order in the context of a business service.">
            <![CDATA[
            public class GetCustomerOrderService
            {
                private readonly ICustomerOrderDao _customerOrderDao;
            
                public GetCustomerOrderService(ICustomerOrderDao customerOrderDao)
                {
                    _customerOrderDao = customerOrderDao;
                }
            
                public ICustomerOrder GetCustomerOrderTest()
                {
                    string externalCustomerOrderId = "123";
                    ICustomerOrder customerOrder = _customerOrderDao.GetById(externalCustomerOrderId);
                    return customerOrder;
                }
            }]]>
            </code>
            </example>
            <remarks>
            <para>
            A Customer order is defined as the statement of the intention to purchase products for an agreed price and payment terms, and subsequent activities based on that intent,
            until full payment is made and the accountability for the goods is transferred to the customer.
            </para>
            <para>
            Orders are created from one of the touch points by a customer that may or may not be a loyalty member. Orders include sales orders or services.
            If the customer is not a loyalty member, then an anonymous identifier is assigned and used in place of the loyalty members ID.
            When a process occurs such as a product void, adding a loyalty member, etc., the system creates an event that can be used
            by third party systems. For example, when a product is added to an order, an indication is sent to the 
            inventory management system.
            </para>
            <para>
            <b>Suppported Operations:</b>
            <list type="bullet">
            <item>
            <description>Add – Adds a specific product of specific quantity to the order.</description>
            </item>
            <item>
            <description>Set Payment Terms – Associate specific terms with the order. This will affect pricing. For example: the customer orders a sofa with the intention of paying with a credit card payment. 
            This will create a customer order with one line and payment terms.</description>
            </item>
            </list>
            </para>
            <para>
            <b>Common Tasks:</b>
            <list type="bullet">
            <item>
            <description>
            In order to create a Customer order use <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderFactory">ICustomerOrderFactory</see>.
            </description>
            </item>
            <item>
            <description>
            In order to get an existing Customer order use [see cref="Retalix.StoreServices.Model.Selling.DataAccess.ICustomerOrderDao"]ICustomerOrderDao[/see].
            </description>
            </item>
            <item>
            <description>
            In order to associate a Customer Order to a Retail Transaction refer to <see cref="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.AssociateCustomerOrder(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">IRetailTransaction.AssociateCustomerOrder</see>.
            </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CustomerSetting">
            <summary>
            Occurs before associating a [see cref="ICustomerInstance"]ICustomerInstance[/see] to the customer order.      
            </summary>
            <remarks>
            <para>
            <B>CustomerSetting</B> provides an intervention point in the process of adding a customer to the order, 
            this intervention point can be used, for instance, to interact with external systems, in order to execute additonal operations.
            </para>
            <para>
            An example for such interaction with external systems is an integration with an external customer loyalty system, in order to retrieve loyalty related 
            data and add it as an extension data to the customer instance.
            </para>
            </remarks>
            <example>
            <code lang="cs">
            <![CDATA[
            // An implementation of IExtension<T> for ICustomerOrder.
            public class CustomerOrderEntension : IExtension<ICustomerOrder>
            {
                // Handler for OnCustomerAdded event.
                public void OnCustomerAddedHandler(ICustomerOrder customerOrder, CustomerSettingEventArgs args)
                {
                    //at this point we have access to the customer order instance, the customer instance that was added to the order
                    //and the ICustomerInfo instance that contains the arguments that were used when adding the customer.
                    // here you can call the external customer loyalty system to retrieve loyalty related data for the customer.
                }
            }
            
            // Implementation of IEntityExtender<T> for ICustomerOrder
            public class CustomerOrderExtender : IEntityExtender<ICustomerOrder>
            {
                // Subscribe to the customer order entity upon creation
                public void OnCreate(CustomerOrder customerOrder)
                {
                    CustomerOrderEntension ext = new CustomerOrderEntension();
                    
                    customerOrder.CustomerSetting += ext.OnCustomerAddedHandler;
                }
            }
            
            ]]>
            </code>
            </example>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CustomerSet">
            <summary>
            Occurs after associating a [see cref="ICustomerInstance"]ICustomerInstance[/see] to the customer order.
            </summary>        
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CustomerRemoving">
            <summary>
            Occurs before disassociating the existing <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> from the order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CustomerRemoved">
            <summary>
            Occurs after disassociating the existing <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> from the order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CustomerReplacing">
            <summary>
            Occurs before updating the [see cref="ICustomerInstance"]ICustomerInstance[/see] associated to the customer order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CustomerReplaced">
            <summary>
            Occurs after updating [see cref="ICustomerInstance"]ICustomerInstance[/see] associated to the customer order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.PaymentTermAdding">
            <summary>
            Occurs before adding the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">payment term</see> to the order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.PaymentTermAdded">
            <summary>
            Occurs after the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">payment term</see> was added to the order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.PaymentTermVoiding">
            <summary>
            Occurs before voiding the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">payment term</see> on the order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.PaymentTermVoided">
            <summary>
            Occurs after the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">payment term</see> voided on the order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.OnTotalOrder">
            <summary>
            Occurs upon the calculation of the total value of the customer order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Suspending">
            <summary>
            Occurs before the transaction is suspended.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Suspended">
            <summary>
            Occurs after the transaction suspended.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Resumed">
            <summary>
            Occurs after the transaction is resumed.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.OrderVoiding">
            <summary>
            Occurs before voiding a customer order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.OrderVoided">
            <summary>
            Occurs when customer order is voided.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.FormAdded">
            <summary>
            Occures when a form added to the customer order
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ProductSelling">
            <summary>
            Occurs when product is sold in a customer order and new order lines are created.
            </summary>
            <remarks>
            <para>
            <B>ProductSold</B> provides an intervention point during the process of adding a product to the order, 
            this intervention point can be used, for instance, to interact with external systems, in order to execute additional operations.
            </para>
            <para>
            An example for such interaction with external systems is an integration with an inventory system in order to reserve the product 
            for the customer to make sure that it will be available.
            </para>
            </remarks>
            <example>
            <code lang="cs">
            <![CDATA[
            // An implementation of IExtension<T> for ICustomerOrder.
            public class CustomerOrderEntension : IExtension<ICustomerOrder>
            {
                // Handler for ProductSold event.
                public void OnProductSold(object customerOrder, ProductSoldEventArgs eventArgs)
                {
                    //at this point we have access to the customer order instance, the product that was added to the order
                    //and the collection of order lines that were added as a result.
                    // here you can call the inventory system to reserve the product that was added
                }
            }
            
            // Implementation of IEntityExtender<T> for ICustomerOrder
            public class CustomerOrderExtender : IEntityExtender<ICustomerOrder>
            {
                // Subscribe to the customer order entity upon creation
                public void OnCreate(CustomerOrder customerOrder)
                {
                    CustomerOrderEntension ext = new CustomerOrderEntension();
                    
                    customerOrder.ProductSold += ext.OnProductSold;
                }
            }
            
            ]]>
            </code>
            </example>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ProductSold">
            <summary>
            Occurs when product is sold in a customer order and new order lines are created.
            </summary>
            <remarks>
            <para>
            <B>ProductSold</B> provides an intervention point during the process of adding a product to the order, 
            this intervention point can be used, for instance, to interact with external systems, in order to execute additional operations.
            </para>
            <para>
            An example for such interaction with external systems is an integration with an inventory system in order to reserve the product 
            for the customer to make sure that it will be available.
            </para>
            </remarks>
            <example>
            <code lang="cs">
            <![CDATA[
            // An implementation of IExtension<T> for ICustomerOrder.
            public class CustomerOrderEntension : IExtension<ICustomerOrder>
            {
                // Handler for ProductSold event.
                public void OnProductSold(object customerOrder, ProductSoldEventArgs eventArgs)
                {
                    //at this point we have access to the customer order instance, the product that was added to the order
                    //and the collection of order lines that were added as a result.
                    // here you can call the inventory system to reserve the product that was added
                }
            }
            
            // Implementation of IEntityExtender<T> for ICustomerOrder
            public class CustomerOrderExtender : IEntityExtender<ICustomerOrder>
            {
                // Subscribe to the customer order entity upon creation
                public void OnCreate(CustomerOrder customerOrder)
                {
                    CustomerOrderEntension ext = new CustomerOrderEntension();
                    
                    customerOrder.ProductSold += ext.OnProductSold;
                }
            }
            
            ]]>
            </code>
            </example>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ProductReturning">
            <summary>
            Occurs when product is returned in a customer order.
            </summary>
            <remarks>
            <para>
            <B>ProductReturning</B> provides an intervention point during the process of returning a product in the order, 
            this intervention point can be used, for instance, for executing validations wether the return action can be done.
            </para>
            <para>
            An example for such interaction is executing additional validations of business rules for return.
            </para>
            </remarks>
            <example>
            <code lang="cs">
            <![CDATA[
            // An implementation of IExtension<T> for ICustomerOrder.
            public class CustomerOrderEntension : IExtension<ICustomerOrder>
            {
                // Handler for ProductReturning event.
                public void OnProductReturning(ICustomerOrder order, ProductReturnInfo saleInfo, IEnumerable<IReturnOrderLine> returnOrderLines)
                {
                    //at this point we have access to the customer order instance, the product that was returned in the order
                    //and the collection of return order lines that were added as a result.
                    //here you can call the relevant business rule. 
                }
            }
            
            // Implementation of IEntityExtender<T> for ICustomerOrder
            public class CustomerOrderExtender : IEntityExtender<ICustomerOrder>
            {
                // Subscribe to the customer order entity upon creation
                public void OnCreate(CustomerOrder customerOrder)
                {
                    CustomerOrderEntension ext = new CustomerOrderEntension();
                    
                    customerOrder.ProductReturning += ext.OnProductReturning;
                }
            }
            
            ]]>
            </code>
            </example>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ProductReturned">
            <summary>
            Occurs when product is returned in a customer order and new return order lines are created.
            </summary>
            <remarks>
            <para>
            <B>ProductReturned</B> provides an intervention point during the process of returning a product in the order, 
            this intervention point can be used, for instance, to interact with other domains or external systems, in order to execute additional operations.
            </para>
            <para>
            An example for such interaction is executing additional validations of business rules for return.
            </para>
            </remarks>
            <example>
            <code lang="cs">
            <![CDATA[
            // An implementation of IExtension<T> for ICustomerOrder.
            public class CustomerOrderEntension : IExtension<ICustomerOrder>
            {
                // Handler for ProductReturn event.
                public void OnProductReturn(ICustomerOrder order, ProductReturnInfo saleInfo, IEnumerable<IReturnOrderLine> returnOrderLines)
                {
                    //at this point we have access to the customer order instance, the product that was returned in the order
                    //and the collection of return order lines that were added as a result.
                    //here you can call the relevant business rule. 
                }
            }
            
            // Implementation of IEntityExtender<T> for ICustomerOrder
            public class CustomerOrderExtender : IEntityExtender<ICustomerOrder>
            {
                // Subscribe to the customer order entity upon creation
                public void OnCreate(CustomerOrder customerOrder)
                {
                    CustomerOrderEntension ext = new CustomerOrderEntension();
                    
                    customerOrder.ProductReturned += ext.OnProductReturned;
                }
            }
            
            ]]>
            </code>
            </example>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ProductVoiding">
            <summary>
            Occurs before voiding the product specified in the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo">ProductVoidInfo</see>.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ProductVoided">
            <summary>
            Occurs after voiding the product specified in the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo">ProductVoidInfo</see>.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ProductPriceModifying">
            <summary>
            Occurs before modifying the product price using the product identifier.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ProductPriceModified">
            <summary>
            Occurs after modifying the product price using the product identifier.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ProductTareModifying">
            <summary>
            Occurs before modifying the product tare using the product identifier.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ProductTareModified">
            <summary>
            Occurs after modifying the product tare using the product identifier.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.RewardsUpdating">
            <summary>
            Occurs before updating the <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">rewards</see> associated to the customer order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.RewardsUpdated">
            <summary>
            Occurs after updating the <see cref="T:Retalix.StoreServices.Model.Promotion.IReward">rewards</see> associated to the customer order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CouponAdding">
            <summary>
            Occurs before voiding the coupon specified in the <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.ICouponLine">ICouponLine</see>.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CouponAdded">
            <summary>
            Occurs after voiding the coupon specified in the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo">CouponAddInfo</see>.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CouponVoiding">
            <summary>
            Occurs before voiding the coupon specified in the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponVoidInfo">CouponVoidInfo</see>.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CouponVoided">
            <summary>
            Occurs after voiding the coupon specified in the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponVoidInfo">CouponVoidInfo</see>.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CouponRewardModifying">
            <summary>
            Occurs before coupon reward modified the existing coupon <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.RewardModifierInfo">RewardModifierInfo</see>.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CouponRewardModified">
            <summary>
            Occurs after coupon reward modified the existing coupon <see cref="T:Retalix.StoreServices.Model.Promotion.Coupons.RewardModifierInfo">RewardModifierInfo</see>.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.BeforePromotionInstructionAdded">
            <summary>
            Occurs before adding Promotion Instruction to the customer order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.AfterPromotionInstructionAdded">
            <summary>
            Occurs after adding Promotion Instruction to the customer order.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.GiftReceiptAdding">
            <summary>
            Occurs before adding an <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> to the ICustomerOrder.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.GiftReceiptAdded">
            <summary>
            Occurs after adding an <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> to the ICustomerOrder.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.GiftReceiptRemoving">
            <summary>
            Occurs before removing an <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> from the ICustomerOrder.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.GiftReceiptRemoved">
            <summary>
            Occurs when an <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> has been removed  from the ICustomerOrder.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.FulfillmentOptions">
            <summary>
            Gets or sets Customer Order extra data options.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.AssociatedRetailTransactionSequenceNumber">
            <summary>
             Gets the sequence number of current associated Retail Transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.AssociatedRetailTransactionId">
            <summary>
             Gets the Id of the current associated Retail Transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.RetailTransaction">
            <summary>
            Gets the parent retail transaction of current instance.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Sell(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
            Adds products to the customer order, which can be weight items, quantity, etc. 
            The flow of adding a product to the customer order includes the enforcement of various selling restrictions, which are implemented using [see cref="ISellingRestriction"]ISellingRestriction[/see]. 
            After adding a product to the customer order there is an intervention point, which is available by registering to the event. <see cref="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ProductSold">ProductSold</see>.
            </summary>
            <example>
            This example shows how to add a product to a customer order in the context of a business service.
            <code lang="cs">
            public class AddProductToOrderService
            { 
                private ProductSaleInfo CreateProductSale(string productId, int quantity)
                {
                    return new ProductSaleInfo
                    {
                        Identifier = new Identifier(productId),
                        Quantity = CreateQuantity(quantity),
                    };
                }
            
                public void AddProduct()
                {
                    ICustomerOrder _customerOrder = CreateCustomerOrder();
                    ProductSaleInfo oneOnionProductSaleInfo = CreateProductSale(productId: "3023", quantity: 4);
                    InputParametersInfo inputParams = new InputParametersInfo() { EntryCode = "0003023" };
                    _customerOrder.Sell(oneOnionProductSaleInfo, inputParams);
                }
            }
            </code>
            </example>
            <remarks>
            The action of adding a product to the order affects the value of the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.BalanceDue">BalanceDue</see>.
            </remarks>
            <param name="productSaleInfo">A <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo">ProductSaleInfo</see> that contains the details of a single product (price, quantity, linked products, etc.).</param>
            <param name="inputParametersInfo">Contains a description of the entered data in POS.</param> 
            <throws>
            <exception cref="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException"></exception>
            </throws>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Return(Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo)">
            <summary>
             Returns a product that was purchased in a previous transaction. 
             The current customer order may be linked to that previous transaction as part of its creation.
             <para>
             As a result, a respective <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">IReturnOrderLine</see> object is added to the
             <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ReturnOrderLines">ReturnOrderLines</see> property.
             </para>
             </summary>
             <param name="productReturnInfo">The product to be returned.</param>
             [exception cref="DenyReturnedItemException"]Product cannot be returned.[/exception]
             <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InputRequiredException">
             Some predefined required input is not specified in
             <paramref name="productReturnInfo"/>.
             </exception>
             [exception cref="ManagerApprovalRequiredException"]
             Manager approval is required in order to satisfy the return policy.
             [/exception]
             <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyNotFoundException">
             Return policy for the current customer order was not found.
             </exception>
             <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnQuantityGreaterThanPurchasedException">
             The quantity specified in <paramref name="productReturnInfo"/>
             is greater than the quantity of that product left for return in the original transaction.
             </exception>
             <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnWeightGreaterThanPurchasedException">
             The units specified in <paramref name="productReturnInfo"/>
             are greater than units of that product left for return in the original transaction.
             </exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ReturnAllProducts">
            <summary>
            Returns all the products purchased in a previous transaction.
            The current customer order must be linked to that previous transaction, and the 
            required data should be specified in 
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderCreationInfo">IReturnCustomerOrderInfo</see> as part
            of the current customer order's creation, otherwise an exception will be thrown.
            <para>
            As a result, respective <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">IReturnOrderLine</see> objects are added into the
            <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ReturnOrderLines">ReturnOrderLines</see> property.
            </para>
            </summary>
            [exception cref="DenyReturnedItemException"]At least one of the products cannot be returned.[/exception]
            <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InputRequiredException">
            Some predefined required input is not specified in the
            <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderCreationInfo.ReturnInputData">IReturnCustomerOrderInfo.ReturnInputData</see>
            object that was used to create the current customer order.
            </exception>
            [exception cref="ManagerApprovalRequiredException"]
            Manager approval is required in order to satisfy the return policy.
            [/exception]
            <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyNotFoundException">
            Return policy for the current customer order was not found.
            </exception>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CouponLines">
            <summary>
             Gets a collection of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">ICouponLine</see> that represents the link between the customer order and the relevant coupons lines.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CreationContext">
            <summary>
            Gets the customer order creation context that contains the order creation information.
            </summary> 
            <value>
            A <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderContext">ICustomerOrderContext</see> that contains details about the order creation (i.e., in which store it was created, on which touchpoint, etc.)
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Classification">
            <summary>
            Gets the classification which describes the purpose of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            </summary>
            <remarks>See the derived classes of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderClassification">CustomerOrderClassification</see>.</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Customer">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer"/> associated to the customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.OrderLines">
            <summary>
            Gets a collection of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that represents the link between the customer order and the relevant order lines.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.VoidOrderLines">
            <summary>
            Gets a collection of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidOrderLine">void order lines</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ReturnOrderLines">
            <summary>
            Gets a collection of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">IReturnOrderLine</see> objects
            that represent returned products. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.GetProductLines">
            <summary>
            Returns The result of OrderLines and ReturnOrderLines
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.GiftReceiptLines">
            <summary>
            Gets a collection of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> that represents the link between the customer order 
            and the relevant Gift Receipt Line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.BalanceDue">
            <summary>
            Gets the amount required to cover the remaining order balance.
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">Money</see> that contains the remaining order balance.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Id">
            <summary>
            Gets the ID of the customer order. 
            </summary>
            <remarks>
            This value is returned to the client application after creating a new <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>
            and used later on by the client application when making changes to a specific customer order.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.SequenceNumber">
            <summary>
            Gets a sequence number of current customer order.
            </summary>
            <remarks>
            This number is set when the customer order is created.<br/>
            It's uniqueness and cyclic qualities may be retailer specific.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.PaymentTerms">
            <summary>
            Gets a collection of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">IPaymentTerm</see> associated with the order, represents the link between payment terms and customer payments.        
            </summary>       
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.IsVoided">
            <summary>
            Gets a value that indicates if the customer order is voided.
            </summary>
            <value><see langword="true"/> if the order was voided; otherwise <see langword="false"/>. the default is <see langword="false"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.VoidReasonCode">
            <summary>
            Gets a <see cref="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCode">IReasonCode</see> that indicates the reason that the customer order was voided.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.IsReturnOnly">
            <summary>
             Gets a value that indicates if the customer is return the order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CalculatedTaxResults">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Tax.ICalculatedTaxResults"/> instance relevant for the current <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.RecalculateTaxes">
            <summary>
            Invokes Tax recalculation.
            As result the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CalculatedTaxResults"/> is updated.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.TaxModifier">
            <summary>
            Gets <see cref="T:Retalix.StoreServices.Model.Tax.ITaxModifier"/> instance related to current <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/>.
            Actions on <see cref="T:Retalix.StoreServices.Model.Tax.ITaxModifier"/> are reflacted on <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CalculatedTaxResults">ICustomerOrder.CalculatedTaxResults</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.RewardLines">
            <summary>
            Gets a collection of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IRewardLine">IRewardLine</see> that represents the link between the customer order and the relevant reward.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.PromotionInstructions">
            <summary>
            Gets the promotion instructions.
            </summary>
            <value>
            The promotion instructions.
            </value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.SetCustomer(Retalix.StoreServices.Model.Selling.Customer.CustomerInfo,Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
            Associates a <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer" /> to the customer order.
            </summary>
            <param name="customerInfo">
            <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">ICustomerInfo</see> that contains the information required to uniquely identify customer.
            </param>
            <param name="customer">Associated <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer"/></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CustomerInfo">
            <summary>
             Customer identification info
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.RemoveCustomer">
            <summary>
            Replaces the existing [see cref="ICustomerInstance"]ICustomerInstance[/see] related to the order, 
            with a default instance of [see cref="ICustomerInstance"]ICustomerInstance[/see] which represents an anonymous customer.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ReplaceCustomer(Retalix.StoreServices.Model.Selling.Customer.CustomerInfo,Retalix.StoreServices.Model.Customer.ICustomer)">
            <summary>
            Replaces the existing [see cref="ICustomerInstance"]ICustomerInstance[/see] associated to the customer order.
            </summary>
            <param name="customerInfo">A <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CustomerInfo">CustomerInfo</see> that contains the details of the customer that replaces the current one.</param>
            <param name="customer">Associated <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer"/></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.VoidProduct(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
            Removes a specified quantity of a specific product from the customer order.
            </summary>
            <param name="productVoidInfo">A <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductVoidInfo">ProductVoidInfo</see> that contains the product and the quantity to remove.</param>
            <param name="inputParametersInfo">An <see cref="T:Retalix.StoreServices.Model.Selling.InputParametersInfo">InputParametersInfo</see> that contains the entered data</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.VoidProductBulk(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.CustomerOrder.Line.BulkProductVoidInfoWrapper})">
            <summary>
            Removes specific products from the customer order.
            </summary>
            <param name="bulkProductInfos">A <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.BulkProductVoidInfoWrapper">BulkProductVoidInfoWrapper</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ModifyProductQuantity(System.String,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity)">
            <summary>
            Modifies the quantity of a specific product in the customer order.
            </summary>
            <param name="orderLineId">A <see cref="T:System.String">string</see> that contains the line that is modified.</param>
            <param name="sellQuantity">A <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">SellQuantity</see> that contains the quantity modification details.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ModifyProductPrice(Retalix.StoreServices.Model.Product.Identifier,Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo)">
             <summary>
             Modifies the price of a specific product in the customer order.
             </summary>
            <param name="identifier">A <see cref="T:Retalix.StoreServices.Model.Product.Identifier">Identifier</see> that contains the product details.</param>
            <param name="priceModifierInfo">A <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo">PriceModifierInfo</see> that contains the price modification details.</param>
            <remarks>The price modification only applies to the specific order and does not affect the regular price of the product.</remarks>     
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ModifyProductPrice(System.String,Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo)">
             <summary>
             Modifies the price of a specific product in the customer order.
             </summary>
            <param name="orderLineId">A <see cref="T:System.String">string</see> that contains the line that is modified.</param>
            <param name="priceModifierInfo">A <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo">PriceModifier</see> that contains the price modification details.</param>
            <remarks>The price modification only applies to the specific order and does not affect the regular price of the product.</remarks>     
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ModifyProductTare(Retalix.StoreServices.Model.Product.Identifier,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareModifierInfo)">
             <summary>
             Modifies the tare of a specific product in the customer order
             </summary>
            <param name="identifier">A <see cref="T:Retalix.StoreServices.Model.Product.Identifier">Identifier</see> that contains the product details.</param>
             <param name="tareModifierInfo">A <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo">TareModifierInfo</see> that contains the tare modification details.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ModifyProductTare(System.Int64,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.Tare.TareModifierInfo)">
             <summary>
             Modifies the tare on a specified order line
             </summary>
            <param name="orderLineSequenceNumber">A sequence number of an order line.</param>
             <param name="tareModifierInfo">A <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PriceModifiers.PriceModifierInfo">TareModifierInfo</see> that contains the tare modification details.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ModifyProductExtraData(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine,Retalix.StoreServices.Model.Product.Identifier,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ExtraDataModifierInfo)">
             <summary>
             Modifies the kit of a specific product in the customer order
             </summary>
            <param name="orderLine"></param>
            <param name="identifier">A <see cref="T:Retalix.StoreServices.Model.Product.Identifier">Identifier</see> that contains the product details.</param>
             <param name="extraDataModifierInfo">A <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ExtraDataModifierInfo">ExtraDataModifierInfo</see> that contains the extra data modification details.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.AddPaymentTerm(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
             <summary>
             Add a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">IPaymentTerm</see> to the collection of payment terms associated with the customer order.
             </summary>
            <param name="tenderType">The <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see> that will be used</param>
            <param name="paymentInfo">Contains the information needed to add the payment term (e.g. the amount to be paid)</param>
            <param name="inputParametersInfo">The input parameters that were used in the process</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">IPaymentTerm</see> that was associated to the order.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.AddRefundTerm(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
             <summary>
             Add a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">IPaymentTerm</see> reflecting a refund process to the collection of payment terms associated with the customer order.
             </summary>
            <param name="tenderType">The <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see> that will be used for refund</param>
            <param name="paymentInfo">Contains the information needed to add the payment term (e.g. the amount to be refunded)</param>
            <param name="inputParametersInfo">The input parameters that were used in the process</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">IPaymentTerm</see> that was associated to the order.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.VoidPaymentTerm(Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm)">
            <summary>
            Cancels the payment term specified by the <paramref name="paymentTerm" /> parameter.        
            </summary>
            <param name="paymentTerm">A <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">IPaymentTerm</see> that contains the details of the payment term, which will be cancelled.</param>               
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.VoidOrder(Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCode)">
            <summary>
            Voids the current customer order.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.TotalOrder">
            <summary>
            Called when calculating the total for the customer order. <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder" />
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.AddReward(Retalix.StoreServices.Model.Promotion.IReward)">
            <summary>
            Adds a reward to current order.<br/>
            The reward will be visible throw the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.RewardLines">reward lines list</see>.<br/>
            When added, <b>Apply</b> method is called on the added reward.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.RemoveReward(Retalix.StoreServices.Model.Promotion.IReward)">
            <summary>
            Removes reward from current order.<br/>
            When removed, <b>Remove</b> method is called on the reward.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when the supplied reward is not in the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.RewardLines">rewards</see> list.</exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ClearRewards">
            <summary>
            Removes all <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.RewardLines"/>.<br/>
            <b>Remove</b> method is called on each reward when it's line being removed.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.AddCoupon(Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo)">
            <summary>
            Add a specific coupon to customer order.
            </summary>
            <param name="couponAddInfo"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.AddCoupons(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo})">
            <summary>
            Add specific coupons to customer order.
            </summary>
            <param name="couponAddInfos"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.VoidCoupon(Retalix.StoreServices.Model.Selling.CustomerOrder.CouponVoidInfo)">
            <summary>
             Void a specific coupon in customer order.
            </summary>
            <param name="couponVoidInfo"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ModifyCouponReward(Retalix.StoreServices.Model.Promotion.Coupons.RewardModifierInfo)">
            <summary>
            modify the coupon reward value
            </summary>
            <param name="rewardModifierInfo"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.AddPromotionInstruction(Retalix.StoreServices.Model.Promotion.IPromotionInstruction)">
            <summary>
            Adds a Promotion Instruction.
            </summary>
            <param name="promotionInstruction">The promotion instruction to add.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.RemovePromotionInstruction(Retalix.StoreServices.Model.Promotion.IPromotionInstruction)">
            <summary>
            Removes the Promotion Instruction.
            </summary>
            <param name="promotionInstruction">The promotion instruction to be removed.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Suspend">
            <summary>
            Suspends the transaction, changes IsSuspened flag to true, and makes it read-only.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.SuspendTime">
            <summary>
            The time this customer order was suspended.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Resume">
            <summary>
            Resumes the transaction, and changes the IsSuspened flag to false, making it writable.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.IsTrainingMode">
            <summary>
            True when the order was created in training mode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Traits">
            <summary>
            Gets an enumerable of special custom properties of the order
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.AddTrait(Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderTrait)">
            <summary>
            Add a special custom property to the order
            </summary>
            <param name="trait">The trait to add</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.RemoveTrait(Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderTrait)">
            <summary>
            Remove a special custom property from the order
            </summary>
            <param name="trait">The trait to remove</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.AddGiftReceipt(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine)">
            <summary>
            Adds a gift receipt to the customer order
            </summary>
            <param name="giftReceiptLine">The gift receipt to add </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.RemoveGiftReceipt(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine)">
            <summary>
            Removes a gift receipt from the customer order
            </summary>
            <param name="giftReceiptLine">The gift receipt to remove </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.SetForm(Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IForm)">
            <summary>
            Set a form on the customer order
            </summary>
            <param name="form">The form to add </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.UpdateForm(Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IForm)">
            <summary>
            Add a new form or update an existing form on the customer order
            </summary>
            <param name="form">The form to add </param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.TendersEligibilities">
            <summary>
            Contains the tenders eligibility data of the customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CustomerNote">
            <summary>
            Additional data for the order as specified by the customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ExtraData">
            <summary>
            Gets the extra data for current customer order. 
            </summary>
            <remarks>
            This collection is persisted using "table per concrete class" mapping strategy <seealso href="http://ayende.com/blog/3941/nhibernate-mapping-inheritance">http://ayende.com/blog/3941/nhibernate-mapping-inheritance</seealso><br/>
            The benefit is we can map concrete class without creating unnecessary base, but the drawback that nhibernate will create N (per type) SQL statements to load the collection.<br/>
            <b><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerOrderExtraDataAddedEvent`1">CustomerOrderExtraDataAddedEvent&lt;T&gt;</see></b> and <b><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerOrderExtraDataRemovedEvent`1">CustomerOrderExtraDataRemovedEvent&lt;T&gt;</see></b> are raised accordingly.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Forms">
            <summary>
            Get the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.FormData.IFormsData">form</see> data that was initialized by the customer order
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.VoidWarrantyItem(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            void just the highlighted linked item from customer order and not the item itself. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderContext">
            <summary>
            Represents organizational context in which a customer order was created.    
            </summary>
            <remarks>Contains customer order creation information (e.g. Store, TouchPoint, User, etc.).</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderContext.Store">
            <summary>
            Gets the store in which the customer order was created.
            </summary>
            <value>An <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> that represents the store in which the customer order was created.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderContext.TouchPoint">
            <summary>
            Gets the touch point in which the customer order was created.
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see> that represents the touchpoint in which the customer order was made.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderContext.TouchPointApplicationId">
            <summary>
            Gets the ID of the Touch Point Application of the Touch Point used to create the order.
            </summary>
            <value>The ID of a <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderContext.User">
            <summary>
            Gets the user that created the customer order.
            </summary>
            <value>An <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see> that represents the cashier that handled the customer order.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderContext.TimeStamp">
            <summary>
            Gets the customer order creation date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderContext.BusinessDate">
            <summary>
            Gets the business day date
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderFactory">
            <summary>
            Represents a Factory that creates customer orders.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderFactory.Create(Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs)">
            <summary>
            Creates a new customer order.
            </summary>
            <returns>An implementation of the  <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see></returns>       
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderFactory.CreateForReturn(Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs,Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderCreationInfo)">
            <summary>
            Creates a new customer order with returns parameters <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderCreationInfo">IReturnCustomerOrderInfo</see>
            </summary>
            <param name="args">Arguments needed for creation.</param>
            <param name="returnCustomerOrderCreationInfo">Return information</param>
            <returns>An implementation of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see></returns>   
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderFactory.UpdateReturnState(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderCreationInfo,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog,Retalix.StoreServices.Model.Selling.Returns.ReturnType)">
            <summary>
            Updates existing <paramref name="customerOrder"/> with return parameters that are in <paramref name="returnCreationInfo"/>.
            </summary>
            <param name="customerOrder">Customer order whose return state should be updated.</param>
            <param name="returnCreationInfo">Information about return action that was performed, or null.</param>
            <param name="purchasedTransactionLog"></param>
            <param name="returnType">Current return's type which is used to retrieve appropriate policy. If parameter's value is None it will be defined according to customer order classification.</param>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.ReturnCustomerOrderClassification.PrimaryClassification">
            <summary>
            Gets primary classification value.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo">
            <summary>
             Represents the arguments required for adding a coupon in the customer order.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo.Barcode">
            <summary>
             The coupon's barcode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo.EntryMethod">
            <summary>
             Gets the entry method for the current order line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo.MeanOfPaymentId">
            <summary>
            the reported tender id the coupon will be reported as
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo.ManualRewardValue">
            <summary>
            reward value that was entered not from the coupon embedded barcode
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo.ExtendedData">
            <summary>
            Gets or sets the data for extensions usage.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo.Status">
            <summary>
            the status of the line added
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo.StatusReason">
            <summary>
            the reason related to the status of the line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponAddInfo.IsRecognized">
            <summary>
            was the coupon was recognize by a valid data pattern,
            for example the coupon will not be recognize if it was entered via forced manual entry
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponVoidInfo">
            <summary>
            Represents the arguments required to void a coupon in a customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponVoidInfo.SequenceNumber">
            <summary>
             Gets or sets the sequence number of the customer order's line where the coupon is used.
             This is the line which needs to be voided.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponVoidInfo.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerOrder.CouponVoidInfo.ExtendedData">
            <summary>
            Gets or sets the data for extensions usage.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderTrait">
            <summary>
            Specifies special properties of an ICustomerOrder object.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderTrait.IsEatIn">
            <summary>
            Specifies an ICustomerOrder object that is being eaten in store. 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderTrait.IsGiftReceipt">
            <summary>
            Indicates an ICustomerOrder object that contains a gift receipt.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderTrait.IsDriveOff">
            <summary>
            Indicates a Drive Off ICustomerOrder object.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderTrait.IsUnpaid">
            <summary>
            Defines an Unpaid ICustomerOrder object.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderTrait.IsTripEnded">
            <summary>
            Indicates that a self-scanned ICustomerOrder object is suspended due to an ICustomer object finished his order and it is ready for recall at POS.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderTrait.IsSelfScan">
            <summary>
            Indicates a SelfScan managed ICustomerOrder
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderTrait.IsEmployeeSale">
            <summary>
            Specifies an ICustomerOrder object that is being Employee sale. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLineLogBuilder">
            <summary>
            Builds an arts line for the TLog from the requested CustomerPaymentLine
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLineLogBuilder.CreateArtsLineItemFromAuditLogCustomerPaymentLine(Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.Audit.AuditLogCustomerPaymentLine,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Creates the TLog line. whoever calls this method needs to cast the result to LineItemDomainSpecific.
            </summary>
            <param name="auditLogCustomerPaymentLine">The AuditLogCustomerPaymentLine is Payment Data saved in Audit table to build the TLog line from</param>
            <param name="customerOrder">The customer order the line belongs to</param>
            <returns>Returns a LineItemDomainSpecific that represents the TLog line</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.AuthorizationCode">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the payment authorization code received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.VoidAuthorizationCode">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the void authorization code received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.ConfirmationCode">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the payment confirmation code received from the provider (This is an optional second step when two-step activation is required).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.MaskedAccountId">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> tyoe, which represents the masked account number received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.AuthorizationType">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which indicates whether authorization was performed offline/online/local etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.ProviderData">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the additional information received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.ProviderId">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the Provider ID string received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.MerchantNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the Merchant number provided by the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.ReferenceNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the payment authorization code received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.TenderId">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the EPS external Id, as received by tender add service.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.CustomerReceipt">
            <summary>
            Gets or sets a list of the <see cref="T:System.String">string</see> type, which represents the preformatted receipts received from the provider (customer copy).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.DrawerReceipt">
            <summary>
            Gets or sets a list of the <see cref="T:System.String">string</see> type, which represents the preformatted receipts received from the provider (merchant copy).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.TransactionDate">
            <summary>
            Gets or sets a value of type <see cref="T:System.DateTime">DateTime</see> that indicates the date when the tranaction was performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.TerminalId">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the Terminal Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.SignatureRequired">
            <summary>
             Gets or sets a value of the <see cref="T:System.Decimal">decimal</see> type, which represents the required signature.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.RequestedAmount">
            <summary>
            Gets or sets a value of the <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">Money</see> type, which represents the original payment amount sent to the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.AuthorizerTransTypeName">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the type of transaction performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.TransactionNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the eps transaction number received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.PreAuthorizationCode">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the pre payment authorization code received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.IsPreAuthPayment">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.VoidCustomerReceipt">
            <summary>
            Gets or sets a list of the <see cref="T:System.String">string</see> type, 
            which represents the preformatted receipts received from the provider (customer copy)
            on performing Void tender
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.VoidDrawerReceipt">
            <summary>
            Gets or sets a list of the <see cref="T:System.String">string</see> type, 
            which represents the preformatted receipts received from the provider (merchant copy)
            on performing void tender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IElectronicPaymentInfo.VoidReferenceNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the refernce number of void operation received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ElectronicVoucherPaymentInfo.VoidCustomerReceipt">
            <summary>
            Gets or sets a list of the <see cref="T:System.String">string</see> type, 
            which represents the preformatted receipts received from the provider (customer copy)
            on performing Void tender
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ElectronicVoucherPaymentInfo.VoidDrawerReceipt">
            <summary>
            Gets or sets a list of the <see cref="T:System.String">string</see> type, 
            which represents the preformatted receipts received from the provider (merchant copy)
            on performing void tender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ElectronicVoucherPaymentInfo.VoidReferenceNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the refernce number of void operation received from the provider.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.ChequePaymentInfo">
            <summary>
            Encapsulates the arguments required for adding a cheque payment to a retail transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ChequePaymentInfo.DueDate">
            <summary>
             Gets or sets a value of the<see cref="T:System.DateTime">DateTime</see> type that represents the cheque's due date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ChequePaymentInfo.ControlDigit">
            <summary>
            Gets or sets a value of the <see cref="T:System.Int32">int</see> type that represents the cheque number's control digit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ChequePaymentInfo.IsPayments">
            <summary>
             Gets or sets a value of the <see cref="T:System.Boolean">bool</see> type that represents the boolean value indicating if the cheque is one of a number of payments.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ChequePaymentInfo.OfflineAuthNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that represents the offline authorization number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ChequePaymentInfo.ValidateByDevice">
            <summary>
             Gets or sets a value of the <see cref="T:System.Boolean">bool</see> type that represents a boolean value indicating if the cheque should be validated by a device.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ChequePaymentInfo.OfflineAccepted">
            <summary>
            Gets or sets a value of the <see cref="T:System.Boolean">bool</see> type that represents a boolean value indicating if the cheque can be accepted when offline.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ChequePaymentInfo.IsPrinted">
            <summary>
             Gets or sets a value of the <see cref="T:System.Boolean">bool</see> type that represents a boolean value indicating if the cheque should be printed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ChequePaymentInfo.BankId">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that represents the id of the bank the cheque belongs to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ChequePaymentInfo.BankBranchId">
            <summary>
            Gets or sets a value of the <see cref="T:System.Int32">int</see> that represents the id of the branch the cheque belongs to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ChequePaymentInfo.BankAccountNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that represents the bank account number the cheque belongs to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ChequePaymentInfo.ChequeNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.Int32">int</see> that represents the cheque's number.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerPayment.ChequePaymentInfo.ExtendedPaymentParameters">
             <summary>
            A Collection of key-value pairs for any other parameter defined locally by the cheque issuer.
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo">
            <summary>
            Represents the credit card payment arguments required for adding a credit card payment to a retail transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.PreTenderAmount">
            <summary>
            Gets or sets a nullable value of the <see cref="T:System.Decimal">decimal?</see> type, which represents the amount calculated by the pre-tender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.SignatureCapture">
            <summary>
            Gets or sets an array of the <see cref="T:System.Byte">byte</see> type, which represents the customer's signature when captured electronically.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.RequestedAmount">
            <summary>
            Gets or sets a value of the <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">Money</see> type, which represents the original payment amount sent to the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.CreditTypeName">
            <summary>
            Gets or sets a value of the  <see cref="T:System.String">string</see> type, which represents the credit card type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.AuthorizationCode">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the payment authorization code received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.VoidAuthorizationCode">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the void authorization code received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.ConfirmationCode">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the payment confirmation code received from the provider (This is an optional second step when two-step activation is required).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.MaskedAccountId">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> tyoe, which represents the masked account number received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.AuthorizationType">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which indicates whether authorization was performed offline/online/local etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.AuthorizerTransTypeName">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the type of transaction performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.GiftCardBalance">
            <summary>
            Gets or sets a nullable value of the <see cref="T:System.Decimal">decimal</see> type, which represents the remaining balance in a gift card.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.ReferenceNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the payment authorization code received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.ShouldPrintSignatureSlip">
            <summary>
            Gets or sets a nullable value of the <see cref="T:System.Boolean">bool</see> type, which indicates if a signature slip is printed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.MerchantNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the Merchant number provided by the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.PrimaryAccountNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the PAN (card number / gift card account number).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.ProviderData">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the additional information received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.CustomerReceipt">
            <summary>
            Gets or sets a list of the <see cref="T:System.String">string</see> type, which represents the preformatted receipts received from the provider (customer copy).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.DrawerReceipt">
            <summary>
            Gets or sets a list of the <see cref="T:System.String">string</see> type, which represents the preformatted receipts received from the provider (merchant copy).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.ProviderId">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the Provider ID string received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.CashBackSpecified">
            <summary>
            Gets or sets a value of the <see cref="T:System.Boolean">bool</see> type, which indicates if cash back is required.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.CashBackAmount">
            <summary>
            Gets or sets a value of the <see cref="T:System.Decimal">decimal</see> type, which represents the required cash back amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.SignatureRequired">
            <summary>
             Gets or sets a value of the <see cref="T:System.Decimal">decimal</see> type, which represents the required signature.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.TransactionDate">
            <summary>
            Gets or sets a value of type <see cref="T:System.DateTime">DateTime</see> that indicates the date when the transaction was performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.TerminalId">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the Terminal Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.ExpirationDate">
            <summary>
            Gets or sets the expiration date of the credit card.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.VerifiedByPinFlag">
            <summary>
            Gets or sets a value of the <see cref="T:System.Boolean">bool</see> type that indicates the property logical meaning.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.TenderId">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the EPS external Id, as received by tender add service.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.TransactionNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the eps transaction number received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.PreAuthorizationCode">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the pre payment authorization code received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.VoidCustomerReceipt">
            <summary>
            Gets or sets a list of the <see cref="T:System.String">string</see> type, 
            which represents the preformatted receipts received from the provider (customer copy)
            on performing Void tender
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.VoidDrawerReceipt">
            <summary>
            Gets or sets a list of the <see cref="T:System.String">string</see> type, 
            which represents the preformatted receipts received from the provider (merchant copy)
            on performing void tender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.CreditCardPaymentInfo.VoidReferenceNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type, which represents the refernce number of void operation received from the provider.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.ICoveringPayment">
            <summary>
            The amount in which one Payment covers a given Term.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ICoveringPayment.Payment">
            <summary>
            The payment that covers the term, at least partially.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ICoveringPayment.Term">
            <summary>
            The term that is covered, at least partially.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ICoveringPayment.Amount">
            <summary>
            The coverage amount. 
            This may be less then the payment amount, and not higher then the Term amount.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.IPaymentTermsCoverage">
            <summary>
            Describes the coverage of Payment Terms by Customer Payments in a Retail Transaction.
            - All Payments made in a Retail Transaction, must cover one or more matching Payment-Terms in its' 
               associated Customer Orders.
            - Payment will match a Term based on Tender Type and other Tender parameters. 
               Usually the TenderType.Id is the base for the match.
            - A payment must cover Terms to its' full amount, or else it will be considered as "Surplus".
            - Term should be covered to its' full requested amount, or it will be considered as "Unfulfilled".
            
            Example: 
              Customer agreed to pay 10$ in Credit and 10$ in cash.
              He pays 10$ in credit and 5$ in cash. 
              The coverage will be:
                - One Covering Payment of Credit Tender for 10$.
                - One Surplus Payment of Cash for 20$.
                - One Unfulfilled Term of Cash for 10$.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IPaymentTermsCoverage.CoveringPayments">
            <summary>
            A list of Payment to Term coverage amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IPaymentTermsCoverage.SurplusPayments">
            <summary>
            Payments that do not cover the available Terms to its' full amount.
            Example: 
              Customer agreed to pay 10$ in Credit and 10$ in cash.
              He actually paid the full 20$ in cash. 
              In this case, this payment will be considered as Surplus, 
                for it amounts to more then was agreed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IPaymentTermsCoverage.UnfulfilledTerms">
            <summary>
            Terms that were not covered to its' fullest by the available Payments. 
            Example: 
              Customer agreed to pay 10$ in Credit and 10$ in cash.
              He actually paid the full 20$ in cash. 
              In this case, the 10$ Credit Term is considered to be Unfulfilled.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.ITenderCreator">
            <summary>
            Interface for a component that's in charge of creating new instances of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">Tender</see> class.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerPayment.ITenderCreator.Create(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Creates an instance of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">Tender</see> according to the received parameters (this tender will belong to a retail transaction).
            </summary>
            <param name="tenderType">The <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see> that this tender is created from</param>
            <param name="paymentInfo">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo">PaymentInfo</see> used in the transaction</param>
            <param name="businessUnit">The business unit where the transaction occurs</param>
            <returns>The new instance of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">Tender</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerPayment.ITenderCreator.Create(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo,Retalix.StoreServices.Model.Finance.Money.ExchangeMoney)">
            <summary>
            Creates an instance of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">Tender</see> according to the received parameters (this tender will belong to a retail transaction)
            </summary>
            <param name="tenderType">The <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see> that this tender is created from</param>
            <param name="paymentInfo">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo">PaymentInfo</see> used in the transaction</param>
            <param name="exchangeMoney">The <see cref="T:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney">ExchangeMoney</see> used by the tender.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.MobilePaymentInfo">
            <summary>
            Encapsulates the arguments required to add mobile payments to retail transactions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.MobilePaymentInfo.PaymentChargeCode">
            <summary>
            Gets or sets a charge code for mobile payment data.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.PointsPaymentInfo">
            <summary>
            Encapsulates the payment information for points tender type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.PointsPaymentInfo.RedeemptionAmount">
            <summary>
            The number of points which were redeem \ voided.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.PointsPaymentInfo.AccountType">
            <summary>
            The account type.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.RewardPaymentInfo">
            <summary>
            Represents the Reward Tender payment arguments required for adding a Reward Tender payment to a retail transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.RewardPaymentInfo.TenderPromotionId">
            <summary>
            /// Gets or sets a nullable value of the <see cref="T:System.String">string?</see> type, which represents the tender promotion ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.RewardPaymentInfo.AllowVoidTransaction">
            <summary>
            Defines whether a transaction that contains this RewardTermInfo can be voided
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo">
            <summary>
            The arguments required for adding a smart card payment to retail transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.PanSequenceNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that identifies and differentiates cards with the same PAN.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.ApplicationIdentifier">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that identifies the application as described in ISO/IEC 7816-5.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.EffectiveDate">
            <summary>
            Gets or sets a value of the <see cref="T:System.DateTime">DateTime</see> type that indicated the date from which the application may be used.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.TerminalCapabilities">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that indicates the card data input, CVM, and security capabilities of the terminal.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.ReasonOnline">
            <summary>
            Gets or sets a value of the <see cref="T:System.Int32">int</see> type that provides the reason as to why the transaction is going online.
            This is used to form part of the APACS message (not implemented on VerixV).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.ApplicationCryptorgram">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that indicates the cryptogram returned by the ICC in response of the GENERATE AC command.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.UnpredictableNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that provides variability and uniqueness to the generation of a cryptogram.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.IssuerApplicationData">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that contains proprietary application data for transmission to the issuer in an online transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.CryptogramInformationData">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that indicates the type of cryptogram and the actions to be performed by the terminal.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.TerminalVerificationResults">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that indicates the status of the different functions as seen from the terminal.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.TerminalType">
            <summary>
            Gets or sets a value of the <see cref="T:System.Int32">int</see> type that indicates the environment of the terminal, its communications capability, and its operational control.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.ApplicationInterchangeProfile">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that indicates the capabilities of the card to support specific functions in the application.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.ApplicationTransactionCounter">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type which is the counter maintained by the application in the ICC (incrementing the ATC is managed by the ICC).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.ApplicationVersionNumber">
            <summary>
            Gets or sets a value of type <see cref="T:System.String">string</see> that indicates version number assigned by the payment system for the application.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.CardHolderVerificationMethod">
            <summary>
            Gets or sets a value of type <see cref="T:System.String">string</see> that indicates the results of the last CVM performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.PosEntryMethod">
            <summary>
            Gets or sets a value of type <see cref="T:System.Int32">int</see> that Indicates the method by which the PAN was entered, 
            according to the first two digits of the ISO 8583:1987 POS Entry Mode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.AuthoriseResponseCode">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that the code defines the disposition of a message.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.IccDynamicNumber">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type which is the time-variant number generated by the ICC, to be captured by the terminal.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.ApplicationUsageControl">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that indicates an issuer's specified restrictions on the geographic usage and services allowed for the application.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.IssuerActionCodeDefault">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that specifies the issuer‘s conditions that cause a transaction to be rejected if it might have been approved online, 
            but the terminal is unable to process the transaction online.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.IssuerActionCodeDenial">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that specifies the issuer‘s conditions that cause the denial of a transaction without attempt to go online.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.IssuerActionCodeOnline">
            <summary>
            Gets or sets a value of type <see cref="T:System.String">string</see> that specifies the issuer‘s conditions that cause a transaction to be transmitted online.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.TransactionStatusInformation">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that indicates the functions performed in a transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.ApplicationLabel">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type which is the mnemonic associated with the AID according to ISO/IEC 7816-5.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.TransactionCurrencyCode">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that indicates the currency code of the transaction according to ISO 4217.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.TerminalCountryCode">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that indicates the country of the terminal, represented according to ISO 3166.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.TransactionType">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that indicates the type of financial transaction, represented by the first two digits of the ISO 8583:1987 Processing Code.
            The actual values to be used for the Transaction Type data element are defined by the relevant payment system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.StoreId">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that indicates the store ID in which the transaction was performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.SmartCardPaymentInfo.VisaOfflineBalace">
            <summary>
             Gets or sets value of visa offline balance
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.VoucherPaymentInfo">
            <summary>
            Encapsulates the payment arguments for a specific voucher tender type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.VoucherPaymentInfo.StartDate">
            <summary>
            Gets or sets the validity start date of the voucher.
            </summary>
            <remarks>Null means that the voucher doesn't have a lower date limit.</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.VoucherPaymentInfo.ExpirationDate">
            <summary>
            Gets or sets the voucher expiration date, or NULL if the voucher does not have an expiration date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.VoucherPaymentInfo.AmountNotToExceed">
            <summary>
            Gets or sets the maximal amount that is stored in the voucher.
            </summary>
            <remarks>Null indicates that it is an unlimited amount.</remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine">
            <summary>
            Represents the a payment line related to a single retail transaction, containing the line's sequence number, the tender paid with and its usages. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine.SequenceNumber">
            <summary>
            Gets the sequence number of the line.
            </summary>
            <value>The sequence number.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine.CreationTime">
            <summary>
            Gets the line's creation time stamp
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine.Tender">
            <summary>
            Gets the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine.Tender">Tender</see> that is associated with this line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine.IsRewardTender">
            <summary>
            Gets the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine.IsRewardTender">Tender</see> that associated with this line is defined as reward tender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine.InputParametersInfo">
            <summary>
            Gets the input parameters info.
            </summary>
            <value>The input parameters info.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine.Usages">
            <summary>
            Gets the usage and amount.
            </summary>
            <value>The usage and amount.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine.RetailTransaction">
            <summary>
            Gets the retail transaction.
            </summary>
            <value>The retail transaction.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.IPaymentToken">
            <summary>
            Represents a generated short term token mapping to a long term token required for payment with a stored credit card
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IPaymentToken.LongTermToken">
            <summary>
            Token reference in Token Server
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IPaymentToken.ShortTermToken">
            <summary>
            Generated short term token to be externalized from secured zone 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.IPaymentToken.CreationTime">
            <summary>
            Short term token generation time
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">
            <summary>
             Represents the reference document of a financial transaction, based on a Tender Type with a monetary value.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.#ctor">
            <summary>
            Private ctor for nhiberante use only
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.#ctor(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Tender.TenderType.IAuthorization,Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo,Retalix.StoreServices.Model.Finance.Money.ExchangeMoney)">
            <summary>
            Constructor for creating a new instance of tender.
            </summary>
            <param name="tenderType">Type of the tender.</param>
            <param name="authorization">The authorization. 
            This instance holds the authorized amount of this tender. 
            It may be aquiered using Authorize() call on the ITenderType instance.
            This argument may not be null.</param>
            <param name="paymentInfo">The payment info.</param>
            <param name="localConvertedAmount">The local converted amount.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.SequenceNumber">
            <summary>
            Gets or sets the unique <see cref="T:System.Int64">long</see> value which identifies the tender used in a retail transaction.
            </summary>
            <remarks>
            This property is for backward compatibility only.<br/>
            For now it equals to the parent' <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine">ICustomerPaymentLine</see><br/> sequence number.
            It will be deprecated and the tender will have back reference to the parent line.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.CustomerPaymentLine">
            <summary>
            Reference the parent <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine">ICustomerPaymentLine</see><br/> which holds the current tender
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.Amount">
            <summary>
            Gets the value of <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money"/> type representing the amount paid in a transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.Authorization">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.IAuthorization"/> record created for the specific tender type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.PaymentInfo">
            <summary>
            Gets or sets the <see cref="P:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.PaymentInfo"/> that was received for creating this tender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.PaymentInfoSerialized">
            <summary>
             Serialized PaymentInfo for persistence
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.TenderType">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/> paid within a transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.IsVoided">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value indicating if a tender is voided.
            </summary>
            <remarks>
            This property is for backward compatibility only.<br/>
            This property will move to the parent <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine">ICustomerPaymentLine</see> as line status.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.LocalConvertedAmount">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Finance.Money.ExchangeMoney"/> value of the amount converted to local currency.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.Key">
            <summary>
            Gets the <see cref="T:System.String"/> value of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender"/> sequence number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender.Extensions">
            <summary>
            <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender"/> extensions container.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderExchangePaymentInfo">
            <summary>
            The arguments required for the tender exchange process.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderExchangePaymentInfo.ExchangeDefinition">
            <summary>
             Gets or sets the exchange definition, including data such as optional tenders for both sides of the transaction 
             (payable tenders and receivable tenders), min and max amounts for the exchange etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderExchangePaymentInfo.PaidTenderPaymentInfo">
            <summary>
            Gets or sets the payment info of the tender that is being paid with.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderExchangePaymentInfo.PaidTender">
            <summary>
            Gets or sets the type of the tender that is being paid with.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderExchangePaymentInfo.PaidTenderInputParametersInfo">
            <summary>
            Gets or sets the input parameters info of the tender that is being paid with.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderExchangePaymentInfo.ReceivedTenderPaymentInfo">
            <summary>
            Gets or sets the payment info of the tender received by the customer in the exchange process (the tender that was paid for).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderExchangePaymentInfo.ReceivedTender">
            <summary>
            Gets or sets the type of the tender that is received by the customer.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderExchangePaymentInfo.ReceivedTenderInputParametersInfo">
            <summary>
            Gets or sets the input parameters info of the tender received by the customer in the exchange process (the tender that was paid for).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo">
            <summary>
            This class encapsulates all arguments required for adding payments to retail transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo.Amount">
            <summary>
            Gets or sets a value of the <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">Money</see> type that indicates the tender amount and  currency.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo.EndorsementPrinted">
            <summary>
             Gets or sets the value that specifies if the endorsement for the current payment has been printed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo.CardType">
            <summary>
             Gets or sets the value that specifies the restricted payment card name for example "Fuel" or "Arval".
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo.EntryMethod">
            <summary>
             Gets or sets the EntryMethod of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">payment term</see> for example "Manual","Scanned" etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo.EligibleCategoriesNames">
            <summary>
             Gets or sets the eligible Categories description for example "Arval", "Fuel", "FSA" etc..
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo.ExtendedData">
            <summary>
            Gets or sets non mandatory data that can be used by classes extending core functionality.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo.VoidExtendedData">
            <summary>
            Gets or sets non mandatory data that can be used by classes extending core functionality.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo.IsFallback">
            <summary>
            This will be set to true when the payment entry method was a result of falling back from a previously failed entry method.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderUsage">
            <summary>
             The purpose of the usage of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">Tender</see> in the retail transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderUsage.Payment">
            <summary>
             The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">tender</see> is used for payment.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderUsage.Refund">
            <summary>
             The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">tender</see> is used for refund.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderUsage.Change">
            <summary>
             The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">tender</see> is returned as change.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderUsage.ExchangePay">
            <summary>
             The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">tender</see> is the paid tender in the tender exchange procedure.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderUsage.ExchangeReceive">
            <summary>
             The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">tender</see> is the received tender in the tender exchange procedure.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderUsage.Rounding">
            <summary>
             The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">tender</see> is used for rounding in the payment/refund procedure.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.CustomerPayment.TenderUsage.Deposit">
            <summary>
             The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">tender</see> is used for deposit (i.e. to a personal account).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.VoidElectronicPaymentInfo">
            <summary>
            Encapsulates the arguments required to void electronic tender payments.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.VoidElectronicPaymentInfo.AuthorizationCode">
            <summary>
             Gets or sets the authorization code of the EPS tender that was cancelled.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.VoidElectronicPaymentInfo.ReferenceNumber">
            <summary>
            Gets or sets the EPS Session number in which the void was performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.VoidElectronicPaymentInfo.CustomerReceipt">
            <summary>
            Gets or sets a collection of string tokens used to generate the Customer Receipt.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.VoidElectronicPaymentInfo.DrawerReceipt">
            <summary>
            Gets or sets a collection of string tokens used to generate the Drawer Receipt.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.VoidElectronicPaymentInfo.ExtendedData">
            <summary>
            Gets or sets non mandatory data that can be used by classes extending core functionality.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.CustomerPayment.VoidPaymentInfo">
            <summary>
            Encapsulates the arguments required to void payments in a retail transaction.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.CustomerPayment.VoidPaymentInfo.#ctor">
            <summary>
             Creates a new instance of the Data Container.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.VoidPaymentInfo.TenderExternalId">
            <summary>
            Gets or sets the unique <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.Tender">tender</see> identifier in a retail transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.VoidPaymentInfo.ElectronicPaymentInfo">
            <summary>
            Gets or sets the arguments required to void electronic tender payments.
            </summary>
            <value><see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.VoidElectronicPaymentInfo"/></value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.CustomerPayment.VoidPaymentInfo.ExtensionsData">
            <summary>
            Gets or sets non mandatory data that can be used by classes extending core functionality.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Customer.CustomerReplacingEventArgs">
            <summary>
            Provides data for the <see cref="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CustomerReplacing">CustomerReplacing</see> event.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Customer.CustomerReplacingEventArgs.Empty">
            <summary>
            Provides a value to use with events that do not have event data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Customer.CustomerReplacingEventArgs.Customer">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">customer</see> that will be setted to the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Customer.CustomerReplacingEventArgs.CustomerInfo">
            <summary>
            Gets or sets the arguments used to set the <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">ICustomer</see> object.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Customer.CustomerSettingEventArgs">
            <summary>
            Provides data for the <see cref="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.CustomerSetting">CustomerSetting</see> event.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Customer.CustomerSettingEventArgs.Empty">
            <summary>
            Provides a value to use with events that do not have event data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Customer.CustomerSettingEventArgs.Customer">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">customer</see> that will be setted to the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Customer.CustomerSettingEventArgs.CustomerInfo">
            <summary>
            Gets or sets the arguments used to set the <see cref="T:Retalix.StoreServices.Model.Customer.ICustomer">ICustomer</see> object.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Customer.CustomerInfo">
            <summary>
            Encapsulates the information required when adding a customer to a retail transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Customer.CustomerInfo.CustomerId">
            <summary>
            Gets or sets the customer's ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Customer.CustomerInfo.EntryMethod">
            <summary>
            Gets or sets the method used to enter the data. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Customer.CustomerInfo.ExtendedData">
            <summary>
            Gets or sets the data used for extensions.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.DataAccess.RetailTransactionIdCriterion">
            <summary>
            Id Restriction for a Retail Transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.DataAccess.RetailTransactionIdCriterion.Id">
            <summary>
            Id of a retail transaction
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.DataAccess.SequenceSpecification">
            <summary>
            Filters Retail transaction with Sequence Number Store id and POS id (Currently in use for self scan scenarios).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.DataAccess.SequenceSpecification.SequenceNumber">
            <summary>
            Represents a Sequence Number of a retail transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.DataAccess.SequenceSpecification.StoreId">
            <summary>
            Represent relevant store id of retail transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.DataAccess.SequenceSpecification.PosId">
            <summary>
            Represent relevant Pos Id .
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionLookupStrategy">
            <summary>
            Represent the strategy to use in order to get existing <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">retail transaction</see>
            The strategy should be based on the parameters described below 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionLookupStrategy.Evaluate(System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Retrieves the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">retail transaction</see> by the desired Strategy.
            </summary>
            <param name="transactionUniqueId"> a unique identifier of the retail transaction on all levels</param>
            <param name="sequenceNumber">a unique identifier of retail transaction per touch point and store</param>
            <param name="storeId">represents a unique identifier for store</param>
            <param name="posId">represents a unique identifier for touch point per store</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.DataAccess.ICustomerOrderDaoBase">
            <summary>
            Represents the data access object responsible for saving and retrieving customer orders from the database.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.ICustomerOrderDaoBase.Save(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Saves an an <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> object to the database.
            </summary>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> object.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.ICustomerOrderDaoBase.Migrate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Migrates the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order</see> from another organization node to the current node.
            </summary>
            <param name="customerOrder"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.ICustomerOrderDaoBase.GetById(System.String)">
            <summary>
            Retrieves an <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> object from the database by the given <paramref name="id"/>.
            </summary>
            <param name="id">the id that is saved with the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> object in the database.</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> object from the database</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionDao">
            <summary>
            Represents the data access object responsible for saving and retrieving <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">retail transaction</see> from the database.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionDao.Save(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            Saves the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">retail transaction</see> to the database.
            </summary>
            <param name="retailTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionDao.GetByExternalId(System.String)">
            <summary>
            Retrieves the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">retail transaction</see> by the external ID.
            </summary>
            <param name="transactionExternalId"> </param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionDao.Delete(Retalix.StoreServices.Model.Selling.IRetailTransaction,System.Boolean)">
            <summary>
            Deletes the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">retail transactions</see>.
            </summary>
            <param name="retailTransaction">The retail transaction.</param>
            <param name="deleteCustomerOrder">Indicates if customer order should be deleted as well</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionDao.Get(System.Int32,System.String,System.String)">
            <summary>
            Gets a <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">transaction</see> according to the sequence number, store ID and POS ID.
            </summary>
            <param name="sequenceNumber"></param>
            <param name="storeId"></param>
            <param name="posId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionDao.Find(Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria)">
            <summary>
            Returns list of retail transactions that match the given criteria
            </summary>
            <param name="transactionsLookupCriteria">The <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria">criteria</see> for the retail transaction search</param>
            <returns>A list of retail transactions that match the given criteria</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionDao.GetByExternalIdWithExtraData(System.String)">
            <summary>
            
            </summary>
            <param name="transactionExternalId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionDao.GetWithExtraData(System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sequenceNumber"></param>
            <param name="storeId"></param>
            <param name="posId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionDao.Find``1(Retalix.StoreServices.Infrastructure.DataAccess.IQuery{Retalix.StoreServices.Model.Selling.IRetailTransaction,Retalix.StoreServices.Model.Selling.IRetailTransaction,``0})">
            <summary>
            Finds Transactions based on a custom query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionDao.GetActiveRetailTransactionsForAutoSuspend">
            <summary>
            Gets retail transactions ready for an automatic suspend
            </summary>
            <returns>Collection of Retail Transactions to be suspended by Active Transaction Suspend Job</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionDao.GetActiveRetailTransactionsForAutoVoidAbandon">
            <summary>
            Gets retail transactions ready for an automatic void
            </summary>
            <returns>Collection of Retail Transactions to be voided by Active Transaction AutoVoidAbandon Job</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.DataAccess.IRetailTransactionDao.GetTransactionsByLookupCriteria(Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria)">
            <summary>
            Gets retail transactions using external criteria
            </summary>
            <returns>Collection of Retail Transactions</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Exceptions.OmniChannel.ServiceErrorContent.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Exceptions.OmniChannel.ServiceErrorContent.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Exceptions.OmniChannel.ServiceErrorContent.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Exceptions.BarcodeNotFoundInTransactionException.ItemCode">
            <summary>
            The item code which is not part of the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Exceptions.AllMatchingItemsReturnedInPreviousTransactionsException.ItemCode">
            <summary>
            The entity key that was already returned
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.CannotDeleteUserWithSuspendedTransactionsException">
            <summary>
            Thrown when trying to delete a user that has suspended transactions
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.ItemAlreadyCancelledException">
            <summary>
             Will be thrown when trying to void product that was already voided.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Exceptions.ItemAlreadyCancelledException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Exceptions.ItemAlreadyCancelledException.ItemCode">
            <summary>
            Item code that was already voided.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Exceptions.ItemNotFoundInTransactionException.ItemCode">
            <summary>
            The item code which is not part of the transaction.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.ItemRelatedToCodeAlreadyCancelledException">
            <summary>
             Will be thrown when trying to void product by identifier that was already cancelled.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Exceptions.ItemRelatedToCodeAlreadyCancelledException.Identifier">
            <summary>
            The identifier that was already cancelled
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Exceptions.ItemRelatedToCodeAlreadyReturnedException.Identifier">
            <summary>
            The identifier that was already returned
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Exceptions.ItemRelatedToCodeLargerQuantityThanPurchasedException.Identifier">
            <summary>
            The identifier that was already returned
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.ItemRelatedToCodeNotFoundException">
            <summary>
             Will be thrown when trying to void product by identifier that was not found in transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Exceptions.ItemRelatedToCodeNotFoundException.Identifier">
            <summary>
            The item identifier that was not found on transaction.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Exceptions.OnlineItemSwitchRequiredException.#ctor(System.String,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemAuthorizationInfo})">
            <summary>
             Online item wasn't found by related code. Matched other online item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Exceptions.OnlineItemSwitchRequiredException.ItemCode">
            <summary>
            Item code that was asked to be voided.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Exceptions.ReturnQuantityInCurrentTransactionGreaterThanPurchaseException.ItemCode">
            <summary>
            The entity key that was already returned
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.InvalidTareValueException">
            <summary>
            The exception is thrown when trying to modify the weight of the tare to weight that greater or equal to the value of the main product.
            to prevent selling the item with negative price. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.ProductNotFoundOnTransactionException">
            <summary>
             Will be thrown when trying to add product to customer order without appropriate hierarchy.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Exceptions.ProductNotFoundOnTransactionException.#ctor(Retalix.StoreServices.Model.Product.Identifier)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.MissingParameterException">
            <summary>
            The exception that is thrown when Parameter is Missing.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.PriceIsLowerThanSumOfFixedTaxRatesException">
            <summary>
            Gets thrown when product price is lower than the sum of inclusive fixed tax rates assigned to it.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.DeviceReleaseException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.OnlineItemPriceOverrideForbiddenException">
            <summary>
            The exception that is thrown when a trying to perform price override to an online item.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Exceptions.OnlineItemPriceOverrideForbiddenException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.Exceptions.OnlineItemPriceOverrideForbiddenException">OnlineItemPriceOverrideForbiddenException</see> class.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.RescanContextException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.SuspendedShopperException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.TransactionIsNotSuspendedException">
            <summary>
            Thrown for resume transaction
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.ProductNotRelatedToCategoryException">
            <summary>
             Will be thrown when trying to add product to customer order without appropriate hierarchy.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Exceptions.ProductNotRelatedToCategoryException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.OnlineItemMissingVoidAuthorizationCodeException">
            <summary>
            This exception will be thrown whenerver an online Item is missing void authorization from the provider
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Exceptions.OnlineItemMissingVoidAuthorizationCodeException.OnlineItemVoidInfos">
            <summary>
            Represents the Online Item's void infos
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Exceptions.OnlineItemMissingVoidAuthorizationCodeException.#ctor(System.Collections.Generic.List{Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemVoidInfo})">
            <summary>
            Derived base constructor
            </summary>
            <param name="voidInfos"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.OnlineItemRequiredDataException">
            <summary>
            This Class is obsolete since version 10.4.0. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.CanNotRepeatReturnItemException">
            <summary>
            The exception that is thrown when trying to 'Repeat' a return on an item.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Exceptions.CanNotRepeatReturnItemException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.Exceptions.CanNotRepeatReturnItemException">CanNotRepeatReturnItemException</see> class.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.DataNotFoundInBarcodeException">
            <summary>
            The exception that is thrown when a barcode is missing required data.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Exceptions.DataNotFoundInBarcodeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.Exceptions.DataNotFoundInBarcodeException">DataNotFoundInBarcodeException</see> class.
            </summary>
            <param name="dataTypeName">The data type that was supposed to be found in barcode.</param>
            <param name="barcode">The barcode that is missing the data.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.InvalidBarcodeException">
            <summary>
            The exception that is thrown when a barcode is not valid to represent a data type.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Exceptions.InvalidBarcodeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Exceptions.InvalidBarcodeException">InvalidBarcodeException</see> class.
            </summary>
            <param name="decodedDataType">The type of data that was expected to be in the barcode.</param>
            <param name="barcode">The invalid barcode.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Exceptions.NoDeviceAvailableException">
            <summary>
            The exception that is thrown when a device doesn't exist when it is needed.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Exceptions.NoDeviceAvailableException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Exceptions.NoDeviceAvailableException">NoDeviceAvailableException</see> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="errorCode">The error code that can be used to identify this exception for configuration. Preferably the class name.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.HistoryInquiryServiceLine">
            <summary>
            Represents an audit for History inquery
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.HistoryInquiryServiceLine.AuthorizationExternalId">
            <summary>
            Gets or sets the authorization ExternalId
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.HistoryInquiryServiceLine.RemainingHistory">
            <summary>
             Gets or sets the remaining History
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.HistoryInquiryServiceLine.InitialHistory">
            <summary>
             Gets or sets the initial History of the card
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.HistoryInquiryServiceLine.AuthorizationCode">
            <summary>
             Gets or sets the authorization code
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.HistoryInquiryServiceLine.ReferenceNumber">
            <summary>
             Gets or sets the unique number for identifying the authorization
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.HistoryInquiryServiceLine.AuthorizationDateTime">
            <summary>
             Gets or sets the time of the authorization
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.HistoryInquiryServiceLine.CustomerReceipt">
            <summary>
             Gets or sets the customer receipt
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.HistoryInquiryServiceLine.ProviderData">
            <summary>
            Gets or sets the online item provider data
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.HistoryInquiryServiceLine.SignatureRequiredFlag">
            <summary>
            Gets or sets the online item SignatureRequiredFlag
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.HistoryInquiryServiceLine.VerifiedByPINFlag">
            <summary>
            Gets or sets the online item VerifiedByPinFlag
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.BalanceInquiryServiceLine">
            <summary>
            Represents an audit for balance inquery
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.BalanceInquiryServiceLine.AuthorizationExternalId">
            <summary>
            Gets or sets the authorization ExternalId
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.BalanceInquiryServiceLine.RemainingBalance">
            <summary>
             Gets or sets the remaining balance
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.BalanceInquiryServiceLine.InitialBalance">
            <summary>
             Gets or sets the initial balance of the card
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.BalanceInquiryServiceLine.AuthorizationCode">
            <summary>
             Gets or sets the authorization code
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.BalanceInquiryServiceLine.ReferenceNumber">
            <summary>
             Gets or sets the unique number for identifying the authorization
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.BalanceInquiryServiceLine.AuthorizationDateTime">
            <summary>
             Gets or sets the time of the authorization
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.BalanceInquiryServiceLine.CustomerReceipt">
            <summary>
             Gets or sets the customer receipt
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.BalanceInquiryServiceLine.ProviderData">
            <summary>
            Gets or sets the online item provider data
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.BalanceInquiryServiceLine.SignatureRequiredFlag">
            <summary>
            Gets or sets the online item SignatureRequiredFlag
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.BalanceInquiryServiceLine.VerifiedByPINFlag">
            <summary>
            Gets or sets the online item VerifiedByPinFlag
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.CustomerServiceLineAddedEvent`1">
            <summary>
            Notifies the registered handler that a service line has been added to a <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see>.
            </summary>
            <typeparam name="T">A concrete type of the service line.</typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.PriceInquiryServiceLine">
            <summary>
            Represents an audit for price inquery
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.PriceInquiryServiceLine.ProductId">
            <summary>
            Gets or sets the product id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.PriceInquiryServiceLine.Descriptions">
            <summary>
            Gets or sets the descriptions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.PriceInquiryServiceLine.Prices">
            <summary>
            Gets or sets the prices.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.PriceInquiryServiceLine.ItemNotOnFileFlag">
            <summary>
            Flag for the logging
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.ServiceLineBase">
            <summary>
            An abstraction for audit line of service performed in a lifecycle of <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.ServiceLineBase.SequenceNumber">
            <summary>
            Gets or sets the sequence number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.ServiceLineBase.InputParameters">
            <summary>
            Gets or sets the input parameters info.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.ServiceLineBase.Date">
            <summary>
            Gets or sets the date.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.SuspendTabEvent">
            <summary>
            Event raised on suspend Tab transaction
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.NecessaryChangeAddingEvent">
            <summary>
            Raised at the beginning of AddNecessaryChange method
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.NecessaryChangeAddedEvent">
            <summary>
            Raised at the end of AddNecessaryChange method
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.SecurityScaleMeasurementsAddedEvent">
            <summary>
            Raised just after <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement">ISecurityScaleMeasurement</see> was added
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.SecurityScaleMeasurementsAddedEvent.SecurityScaleMeasurement">
            <summary>
            The added <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement">ISecurityScaleMeasurement</see> 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.TransactionVoidingEvent">
            <summary>
            Raised at the beginning of VoidTransaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.TransactionVoidingEvent.VoidReasonCode">
            <summary>
            The void reason code, if any.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentVoidedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentVoidedEventArgs.VoidPaymentInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentVoidedEventArgs.VoidedLines">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentAddedArgs">
            <summary>
            Class PaymentAddedArgs
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentAddedArgs.#ctor(Retalix.StoreServices.Model.Selling.CustomerPayment.Tender,Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentAddedArgs" /> class.
            </summary>
            <param name="tender">The tender that was paid with</param>
            <param name="customerPaymentLine">The new customer payment line added by the Pay method</param>
            <param name="inputParametersInfo"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentAddedArgs.Tender">
            <summary>
            Gets the tender.
            </summary>
            <value>The tender.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentAddedArgs.CustomerPaymentLine">
            <summary>
            Gets the customer payment lines.
            </summary>
            <value>The customer payment lines.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentAddedArgs.InputParametersInfo">
            <summary>
            Gets the input parameters info.
            </summary>
            <value>The input parameters info.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentAddingArgs">
            <summary>
            Class PaymentAddingArgs
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentAddingArgs.#ctor(Retalix.StoreServices.Model.Selling.CustomerPayment.Tender,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentAddingArgs" /> class.
            </summary>
            <param name="tender">The tender that will be paid with</param>
            <param name="inputParametersInfo">The input parameters info for the Pay method</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentAddingArgs.InputParametersInfo">
            <summary>
            Gets the input parameters info.
            </summary>
            <value>The input parameters info.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentAddingArgs.Tender">
            <summary>
            Gets the tender.
            </summary>
            <value>The tender.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.RefundPaymentAddedArgs">
            <summary>
            Class RefundPaymentAddedArgs
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.RefundPaymentAddedArgs.#ctor(Retalix.StoreServices.Model.Selling.CustomerPayment.Tender,Retalix.StoreServices.Model.Selling.CustomerPayment.ICustomerPaymentLine)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.RefundPaymentAddedArgs" /> class.
            </summary>
            <param name="tender">The tender that was refunded</param>
            <param name="customerPaymentLine">The new customer payment line added by the Refund method</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.RefundPaymentAddedArgs.CustomerPaymentLine">
            <summary>
            Gets the customer payment lines.
            </summary>
            <value>The customer payment lines.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.RefundPaymentAddedArgs.Tender">
            <summary>
            Gets the tender.
            </summary>
            <value>The tender.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.RefundPaymentAddingArgs">
            <summary>
            Class RefundPaymentAddingArgs
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.RefundPaymentAddingArgs.#ctor(Retalix.StoreServices.Model.Selling.CustomerPayment.Tender,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.RefundPaymentAddingArgs" /> class.
            </summary>
            <param name="tender">The tender that will be refunded</param>
            <param name="inputParametersInfo">The input parameters info for the Refund method</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.RefundPaymentAddingArgs.InputParametersInfo">
            <summary>
            Gets the input parameters info.
            </summary>
            <value>The input parameters info.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.RefundPaymentAddingArgs.Tender">
            <summary>
            Gets the tender.
            </summary>
            <value>The tender.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.ISelfScanTransactionDataPatternEncoder">
            <summary>
             Encapsulated encoding of transaction principle data into a barcode
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.ISelfScanTransactionDataPatternEncoder.Encode(System.String,System.String,System.Int32)">
            <summary>
             Encode the provided data based on the data patterns defined for "SelfScanTransaction" entity
            </summary>
            <param name="storeId">The id of the store business unit the transaction associated with</param>
            <param name="touchPointId">The id of the touch point the transaction associated with</param>
            <param name="sequenceNumber">The sequence identifier of the transaciton</param>
            <returns>Dictionary of encoded barcodes, where the key is the Data-Pattern Id, and the value is the Encoding result of this pattern</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITipinTransactionLogDocumentVisitor">
            <summary>
            Marks the visitor for usage by the tips
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TipInLineLog">
            <summary>
            Represent the Tip data from the current transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TipInLineLog.Id">
            <summary>
            Id of current tip 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TipInLineLog.TenderId">
            <summary>
            The tenderId of the current tip
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TipInLineLog.Amount">
            <summary>
            The amount of the current tip
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TipInLineLog.Authorization">
            <summary>
            The payment authorization code received from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TipInLineLog.OriginalPaymentAmount">
            <summary>
            The amount that was paid with the current tender in the linked transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TipInLineLog.AccountExternalId">
            <summary>
            The cash office account which the current tip is related to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TipInLineLog.OriginalTransactionId">
            <summary>
            The ExternalId of the original transaction which current tip related to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TipInLineLog.OriginalTransactionTime">
            <summary>
            The date and time of the original transaction which current tip related to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TipInLineLog.Type">
            <summary>
            The Type Of the current tip.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TipInLineLog.ForeignCurrency">
            <summary>
            The foreign currency.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.AuditLogActionName">
            <summary>
            Represents an enumeration of the different actions to audit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ControlAndRetailTransactionLogSearchCriteria.BusinessDayDateFrom">
            <summary>
            Gets or sets the BusinessDayDate range start, which searches for transactions which were closed after or equal to this value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ControlAndRetailTransactionLogSearchCriteria.BusinessDayDateTo">
             <summary>
            Gets or sets the BusinessDayDate range end, which searches for transactions which were closed after or equal to this value.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ControlAndRetailTransactionLogSearchCriteria.BusinessUnitIds">
             <summary>
            Gets or sets the identifiers of the business units at which the transactions were performed.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ControlAndRetailTransactionLogSearchCriteria.TouchPointIds">
             <summary>
            Gets or sets the identifiers of the touch points at which the transactions were performed.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ControlAndRetailTransactionLogSearchCriteria.SequenceNumberFrom">
             <summary>
            Gets or sets the Sequence number range start, 
             which will search for transactions with the Sequence ID starting from this value.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ControlAndRetailTransactionLogSearchCriteria.SequenceNumberTo">
             <summary>
            Gets or sets the Sequence number range end, 
             which will search for the transactions with the Sequence ID up to this value.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ControlAndRetailTransactionLogSearchCriteria.UserId">
            <summary>
             The operatorId of the transaction
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IApportionmentDataLog">
            represent IApportionment data for the IApportionment
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITaxPerUnitLog.SequenceNumber">
            <summary>
            Gets the sequence number of the current tax per unit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITaxPerUnitLog.TaxableAmount">
            <summary>
            Gets or sets the unit taxable amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITaxPerUnitLog.TaxAmount">
            <summary>
            Gets or sets the unit tax amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITaxPerUnitLog.Exempted">
            <summary>
            Gets or sets the unit exempted amount.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">
            <summary>
            Represents a unit within a parent <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog">ISaleLineLog</see> line
            in a TLog.
            </summary>
            <remarks>
            An <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">IUnitLineLog</see> instance in runtime may not have
            an actual xml representation in the associated TLog. In cases where no unit line
            exists for a sale line in a TLog, the return engine manufactures one with the
            assumption that all units in the line are equally priced or there is only one
            unit in the parent line.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog.SequenceNumber">
            <summary>
            Gets the sequence number of the unit within <see cref="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog.ParentLine">ParentLine</see>.
            </summary>
            <remarks>
            A unit's sequence number is unique within a parent <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog">ISaleLineLog</see>
            line, but may recurr in other units belonging to other lines. 
            If the section in the TLog
            represented by <see cref="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog.ParentLine">ParentLine</see> contained a "unitLines" section,
            then <see cref="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog.SequenceNumber">SequenceNumber</see> will represent the sequence numbers
            documented in that section. If no "unitLines" section exists for this line in the TLog,
            the returns domain generates sequential numbers for each unit line log (starting at 1).
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog.ParentLine">
            <summary>
            Gets the parent <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog">ISaleLineLog</see> line to which this 
            <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">IUnitLineLog</see> instance belongs.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog.RewardAmount">
            <summary>
            Gets or sets the unit line reward amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog.PromotionDataLogs">
            <summary>
            Gets or sets the unit line <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitPromotionDataLog">IUnitPromotionDataLog</see> .
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IOperatorBypassApprovalLogUpdater">
            <summary>
            Represents an extension point for different core domains to participate in the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">IRetailTransactionLogDocument</see>
            writing process of restriction data in the TLog.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IOperatorBypassApprovalLogUpdater.Update(System.Object,System.Object,Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IBusinessRuleAuditLog)">
            <summary>
            Updates the specific arts approval data in <paramref name="approvalBase"/> and <paramref name="businessRuleType"/> based on the data
            in <paramref name="businessRuleAuditLog"/>.
            </summary>
            <param name="approvalBase">
            The arts ApprovalBase object (Retalix.Contract.Schemas.Schema.ARTS.PosLog_V6.Objects.SchemaObjects.ApprovalBase)
            on which to add the data from <paramref name="businessRuleAuditLog"/> to be written.
            </param>
            <param name="businessRuleType">
            The retalix BusinessRuleManagerType (Retalix.Contracts.Generated.Arts.Extensions.POSLog6.BusinessRuleManagerType)
            on which to add the data from <paramref name="businessRuleAuditLog"/> to be written.
            </param>
            <param name="businessRuleAuditLog">
            The relevant <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.IBusinessRuleAuditLog">IBusinessRuleAuditLog</see> instance that is currently being written to the TLog.
            </param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitPromotionDataLog">
            represent promotion data for the IUnitLineLog
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitPromotionDataLog.RewardSplitAmount">
            <summary>
            Gets or sets the unit line Reward Split Amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitPromotionDataLog.TenderId">
            <summary>
            TenderId of Promotion applied as Reward As Tender
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitPromotionDataLog.PromotionId">
            <summary>
            Gets or sets the unit line Promotion description
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitPromotionDataLog.Description">
            <summary>
            Gets or sets the unit line Promotion Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitPromotionDataLog.ApportionmentDataLogs">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IApportionmentDataLog">IApportionmentDataLog</see> .
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IOrderLineLogDocumentCreationVisitor">
            <summary>
            Represents an extension point for different core domains to participate in the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">Retail-Transaction-Log-Document</see> building process.
            </summary>
            <remarks>The visitor is called on each order line</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IOrderLineLogDocumentCreationVisitor.Visit(System.Object,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Visits the specified arts line item.
            </summary>
            <param name="artsLineItem">The arts line item, Retalix.Contract.Schemas.Schema.ARTS.PosLog_V6.Objects.SchemaObjects.LineItemDomainSpecific</param>
            <param name="orderLine">The order line.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogReader">
            <summary>
            A Reader which reads content of RetailTransactionLog, represented by Xml
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogReader.TryToReadXml(System.String,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog@)">
            <summary>
            Try to read the xml and return it as IRetailTransactionLog
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogReader.TryToReadContractObject(System.Object,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog@)">
            <summary>
            Try to read the deserialized contract object and return it as IRetailTransactionLog
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IConsumableGroupLog">
            <summary>
            Represents consumable group value
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IConsumableGroupLog.Id">
            <summary>
            Group id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IConsumableGroupLog.Type">
            <summary>
            Group type
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IItemNotFoundLog">
            <summary>
            Represents an item not found activity
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IItemNotFoundLog.EntryCode">
            <summary>
            The code that was used to retrieve the item
            </summary>  
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IItemNotFoundLog.EntryMethod">
            <summary>
            The method in which the item was entered
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IItemNotFoundLog.EntryMode">
            <summary>
            The Entry Mode in which the item was entered
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IMerchandiseHierarchyLog">
            <summary>
            Log information of the merchandise hierarchy
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IMerchandiseHierarchyLog.Hierarchy">
            <summary>
            Hierarchy identification
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IMerchandiseHierarchyLog.NodeId">
            <summary>
            Id of the node within the level
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IMerchandiseHierarchyLog.Level">
            <summary>
            logical key of the level within the hierarchy tree
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IMerchandiseHierarchyLog.Description">
            <summary>
            the hierarchy description
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IPriceModifierLog">
            <summary>
            Price modification for a sale line
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IPriceModifierLog.SequenceNumber">
            <summary>
            Sequence number of price modifier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IPriceModifierLog.Amount">
            <summary>
            Amount of sale line after price modification
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IPriceModifierLog.PreviousPrice">
            <summary>
            Original price before price modification
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IPriceModifierLog.ReasonCode">
            <summary>
            The reason code of price modification (for example: verify price, price override, etc)
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">
            <summary>
            Represents a document that stores the content of a RetailTransactionLog
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument.Read">
            <summary>
            Reads the content of this document
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentWriter">
            <summary>
             Allow manipulation of the Log Document content during its creation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentWriter.LogDocument">
            <summary>
            The IRetailTransactionLogDocument instance that was written until now.
            Notice that it might not be valid.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentWriter.UpdateXmlDocument(System.String)">
            <summary>
            Set the content of the xml document.
            </summary>
            <param name="xmlContent">The new xml content to set</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentWriter.ObjectContent">
            <summary>
             The TransactionDomainSpecific object
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentWriter.UpdateArtsTransaction(System.Object)">
            <summary>
             Set the content of the TransactionDomainSpecific object
            </summary>
            <param name="artsTransaction">the new TransactionDomainSpecific to set</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogLine">
            <summary>
            Represents a line on RetailTransactionLog
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogLine.SequenceNumber">
            <summary>
            Unique sequence number of the line on the Transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogLine.CreationDateTime">
            <summary>
            Time this line was created on the Transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogLine.ItemLink">
            <summary>
            Gets the item link array.
            </summary>
            <value>
            The item link array.
            </value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IReturnLineLogDocumentCreationVisitor">
            <summary>
            Represents an extension point for different core domains to participate in the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">Retail-Transaction-Log-Document</see> building process.
            </summary>
            <remarks>The visitor is called on each return line</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IReturnLineLogDocumentCreationVisitor.Visit(System.Object,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Visits the specified arts line item.
            </summary>
            <param name="artsLineItem">The arts line item, Retalix.Contract.Schemas.Schema.ARTS.PosLog_V6.Objects.SchemaObjects.LineItemDomainSpecific</param>
            <param name="orderLine">The return order line.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog">
            <summary>
            Interface represent the tax information within the transaction log sale line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.TaxGroupID">
            <summary>
            TaxGroupID
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.TaxRuleID">
            <summary>
            TaxRuleID
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.TaxableAmount">
            <summary>
            TaxableAmount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.IsTenderExemption">
            <summary>
            IsTenderExmption
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.Percent">
            <summary>
            Percent, is available
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.TaxPerUnitAmount">
            <summary>
            Amount of tax per unit for fixed taxes
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.TaxAuthority">
            <summary>
            TaxAuthority
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.SequenceNumber">
            <summary>
            SequenceNumber
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.IsIncluded">
            <summary>
            Specifies whether tax is included or excluded in taxable amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.TaxSign">
            <summary>
            A sign that identifies the tax
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.Imposition">
            <summary>
            The Imposition of the tax
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.IsTaxReversal">
            <summary>
            Indicates that this tax line is information about tax reversal
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.ExemptTaxAmount">
            <summary>
            The amount of tax that was exempt in this tax.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineTaxLog.TaxType">
            <summary>
            The type of the tax log. Tax, ItemFee or TransacitonFee.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISlipLog">
            <summary>
            Interface represents the slip information of the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISlipLog.Type">
            <summary>
            Slip type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISlipLog.Data">
            <summary>
            Slip data
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITaxLineLog">
            <summary>
            Interface represents tax summery information within a transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITaxLineLog.TaxGroupId">
            <summary>
            TaxGroupID
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITaxLineLog.TaxRuleId">
            <summary>
            TaxRuleID
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITaxLineLog.TaxableAmount">
            <summary>
            TaxableAmount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITaxLineLog.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITaxLineLog.Percent">
            <summary>
            Percent
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITaxLineLog.TaxAuthority">
            <summary>
            TaxAuthority
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IVoidOrderLineLogDocumentCreationVisitor">
            <summary>
            Represents an extension point for different core domains to participate in the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">Retail-Transaction-Log-Document</see> building process.
            </summary>
            <remarks>The visitor is called on each <b>void</b> line</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IVoidOrderLineLogDocumentCreationVisitor.Visit(System.Object,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IVoidOrderLine)">
            <summary>
            Visits the specified arts line item.
            </summary>
            <param name="artsLineItem">The arts line item, Retalix.Contract.Schemas.Schema.ARTS.PosLog_V6.Objects.SchemaObjects.LineItemDomainSpecific</param>
            <param name="orderLine">The voided order line.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IVoidLineLog">
            <summary>
            A line which voids sale lines from RetailTransactionLog
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IVoidLineLog.VoidedLines">
            <summary>
            Sequence numbers of lines which are voided by this line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IVoidLineLog.NumberOfUnits">
            <summary>
            Number of units of voided items from sale line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IVoidLineLog.ExtendedAmount">
            <summary>
            Sum of all voided lines
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">
            <summary>
            Business component that perform business-activities and queries based on this committed retail transaction logs
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TransactionSequenceNumber">
            <summary>
            Sequence number assigned to the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TouchPointId">
            <summary>
            Id belonging to the TouchPoint at which the transaction took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TouchPointType">
            <summary>
            Gets the type of the touch point (For example: POS, SelfScanDevice, SelfCheckOut etc.).
            </summary>
            <value>
            The type of the touch point.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TouchPointGroupId">
            <summary>
            Gets the touch point group.
            </summary>
            <value>
            The touch point group.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.WorkerId">
            <summary>
            Gets the Worker Id, which was initialized by <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see> Id. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.OperatorId">
            <summary>
            Id belonging to the Operator which handled the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.OperatorName">
            <summary>
            Name belonging to the Operator which handled the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.PurchaseQuantity">
            <summary>
            Total number of items purchased in the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.NetAmount">
            <summary>
            Sales including discounts without taxes.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.GrandAmount">
            <summary>
            Amount paid by the customer (Net Amount + Taxes).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.CustomerId">
            <summary>
            Customer Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.CustomerExternalId">
            <summary>
            Customer external id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.GrossAmount">
            <summary>
            Sales before any rewards and returns.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TotalSavings">
            <summary>
            Amount of savings for the entire transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TaxAmount">
            <summary>
            Transaction's included tax plus excluded tax.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.EndDateTime">
            <summary>
            DateTime representing when the transaction was closed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.BalanceShiftStart">
            <summary>
            Gets the BalanceShiftStart and time the log document was created.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.BeginDateTime">
            <summary>
            DateTime representing when the transaction was began.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.BusinessDayDate">
            <summary>
            DateTime representing the transaction's business date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.StoreName">
            <summary>
            Name of the Store at which the transaction took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.IsVoided">
            <summary>
            Flag indicating whether the transaction was Voided at the time the transaction took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.IsSuspended">
            <summary>
            Flag indicating whether the transaction was Suspended at the time the transaction took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.IsWicTransaction">
            <summary>
            Flag indicating whether the transaction was a WIC transaction 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.IsTrainingMode">
            <summary>
            Flag indicating whether the transaction was performed in training mode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TransactionType">
            <summary>
            a string that represents the transaction type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.Slips">
            <summary>
            Slips issued for the specific transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.SaleLines">
            <summary>
            Collection of logs containing information about items involved in the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TenderLines">
            <summary>
            Collection of logs containing information about tenders involved in the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TenderChangeLine">
            <summary>
            Retrieves the tender change line from the the tender lines , returns null if there is no tender change line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TenderChangeLines">
            <summary>
            Retrieves the tender change line list from the the tender lines , returns null if there is no tender change line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.VoidLines">
            <summary>
            Collection of lines which are voiding sale lines from SaleLines collection
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TransactionLinks">
            <summary>
            Collection of transaction details containing information about other transactions linked to this transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TaxLines">
            <summary>
            Collection of logs containing information about taxes involved in the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.ItemNotFoundLines">
            <summary>
            Collection of logs containing information about items not found activities involved in the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TransactionExternalId">
            <summary>
            Transaction External Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.NonMerchandiseAmount">
            <summary>
            Sales of non-Merchandise items.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.OriginalTouchPointType">
            <summary>
            The original touch point type of the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.OriginalTouchPointId">
            <summary>
            The original touch point of the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.IsRescanStatusSuccess">
            <summary>
            the transaction's rescan status.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.IsCustomerOrder">
            <summary>
            whether it's a customer order or not.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.CustomerFirstName">
            <summary>
            Customer's first name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.CustomerLastName">
            <summary>
            Customer's last name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.EMailAddress">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.ContactPreference">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TransactionStatus">
            <summary>
            Gets the status of the transaction (Finished, Suspended, Voided est.)
            </summary>
            <value>
            The transaction status.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.AnyElements">
            <summary>
            Gets the status of the transaction (Finished, Suspended, Voided est.)
            </summary>
            <value>
            The transaction status.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.TipIn">
            <summary>
            Returns the tip data from the current transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog.VenueId">
            <summary>
            Id belonging to the venue at which the transaction took place.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentCreationCoreVisitor">
            <summary>
            Represents an extension point for different core domains to participate in the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">Retail-Transaction-Log-Document</see> building process.
            </summary>
            <remarks>
            Classes implementing this interface are called each time the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">Retail-Transaction-Log-Document</see> is created.<br/>
            Business domains extend the log with their proprietary data.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentCreationCoreVisitor.Visit(Retalix.StoreServices.Model.Selling.IRetailTransaction,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentWriter)">
            <summary>
            Allows the appending of the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">Retail-Transaction-Log-Document</see> using the provided <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentWriter"/>.
            </summary>
            <param name="retailTransaction">The Retail-Transaction for which the log is written.</param>
            <param name="writer">The Writer that allows the writing of the log.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentCreationVisitor">
            <summary>
            Represents an extension point for different domains to participate in the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">Retail-Transaction-Log-Document</see> building process.
            </summary>
            <remarks>
            Classes implementing this interface are called each time the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">Retail-Transaction-Log-Document</see> is created.<br/>
            Business domains extend the log with their proprietary data.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentCreationVisitor.Visit(Retalix.StoreServices.Model.Selling.IRetailTransaction,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentWriter)">
            <summary>
            Allows the appending of the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">Retail-Transaction-Log-Document</see> using the provided <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentWriter"/>.
            </summary>
            <param name="retailTransaction">The Retail-Transaction for which the log is written.</param>
            <param name="writer">The Writer that allows the writing of the log.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentCreator">
            <summary>
            Represents a service that creates a <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">Retail-Transaction-Log-Document</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocumentCreator.CreateLog(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            Creates a <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">Retail-Transaction-Log-Document</see> for the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">Retail-Transaction</see> provided.
            </summary>
            <param name="retailTransaction">The Retail-Transaction.</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLogDocument">Retail-Transaction-Log-Document</see>.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLinkLog">
            <summary>
            Intrface represents a link sale line to a line in another transaction
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLinkLog.TouchPointId">
            <summary>
            Id belonging to the TouchPoint at which the original transaction to which this item is linked took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLinkLog.TransactionSequenceNumber">
            <summary>
            Sequence number assigned to the transaction to which this item is linked.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLinkLog.BusinessUnitId">
            <summary>
            Store Retailer Id belonging to the store where the transaction to which this item is linked took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLinkLog.EndDateTime">
            <summary>
            DateTime representing when the transaction was closed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLinkLog.SaleLineSequenceNumber">
            <summary>
            Sequence number assigned to the transaction.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog">
            <summary>
            Interface represent a sale line in the transaction log
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.ItemId">
            <summary>
            Sale line product main Id at time of transaction. 
            This cannot be used as the entry code of a Sell action.
            </summary>        
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.SellableIds">
            <summary>
            Sale line Identities used at time of transaction to identify teh product.
            This can be used as entry code of Sell action, unless this identity was removed from teh Product definition.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.PosIdType">
            <summary>
            The PosIdType (e.g., department or item)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.MainId">
            <summary>
            The Unique Id of the Item or the Department that was used
            to perform the Sale. This cannot be used as the entry code of a Sell action. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.Identifier">
            <summary>
            The identifier (GTIN) that was used to identify the Product or Department 
            to perform the Sale. 
            This can be used as entry code of Sell action, 
            unless this identity was removed from teh Product definition.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.IsDepartment">
            <summary>
            If true, this sale was created as department sale.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.ItemType">
            <summary>
            ItemType
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.EntryMethod">
            <summary>
            EntryMethod
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.EntryMode">
            <summary>
            EntryMode
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.ScanData">
            <summary>
            The barcode used for input
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.IsVoided">
            <summary>
            Flag marking if the sale line was voided.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.IsReturn">
            <summary>
            Flag marking if the line is return item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.OnlineCardNumber">
            <summary>
             OnlineCardNumber
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.ElectronicSerialNumber">
            <summary>
             ElectronicSerialNumber
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.ItemName">
            <summary>
            Sale line item name at time of transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.IsNonMerchandise">
            <summary>
            Sale line item is non merchandise flag 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.BatchIdentifier">
            <summary>
            Sale line item group identifier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.RegularUnitPrice">
            <summary>
            The lookup per-unit price for the item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.RegularPrice">
            <summary>
            Gets a <see cref="T:Retalix.StoreServices.Model.Price.IPricedQuantity">IPricedQuantity</see> representing the recorded catalog
            price of the product in this line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.PriceReason">
            <summary>
            Gets price reason code.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.ActualUnitPrice">
            <summary>
            The final per-unit price at time of transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.ActualPrice">
            <summary>
            Gets a <see cref="T:Retalix.StoreServices.Model.Price.IPricedQuantity">IPricedQuantity</see> representing the recorded actual
            (i.e., the catalog price after price override calculations but before discounts, taxes, etc).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.TotalUnits">
            <summary>
            Total number of units.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.UnitOfMeasure">
            <summary>
            Unit of measure of the specific Sale line item (Each, KG, etc..) at time of transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.Amount">
            <summary>
            Amount for the Sale line item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.ExtendedDiscountAmount">
             <summary>
            The total discount applied to this item.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.ExtendedDiscountRefundAmount">
             <summary>
            The total discount amount calculated for refund
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.TriggeredUnitLinesQuantity">
            <summary>
            The number of triggered units.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.Quantity">
            <summary>
            Unit Quantity
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.MerchandiseHierarchies">
            <summary>
            Merchandise Hierarchies for item
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.TransactionLineLink">
            <summary>
            When this line is linked to line in a different retail-transaction-log, returns the link to that line; 
            otherwise returns null.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.Taxes">
            <summary>
            Tax
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.PriceModifier">
            <summary>
            Modification of sale price. If price was not modified, will be null.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.PromotionPriceModifiers">
            <summary>
            promotions Modifications on sale line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.ReturnPolicyId">
            <summary>
            Representing return policy ID of the returned item
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.ReturnReason">
            <summary>
            The return reason of the returned item
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.ConsumableGroups">
            <summary>
            Location consumable groups.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.RefusalReason">
            <summary>
            The reason, if any, due to which sale of this line was refused.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.TareWeight">
            <summary>
             Gets related tare weight.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.Action">
            <summary>
            Represents the action of the sale line log. For example: "Add", "Lookup", "Refusal" etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.UnitLineLogs">
            <summary>
            Gets all <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">IUnitLineLog</see> from the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog">ISaleLineLog</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.CardNumberType">
            <summary>
            Gets Card Number Type. For example: "Card", "SecondBarcode", "InBarcode"
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog.AuthorizationReferenceNumber">
            <summary>
             Authorization' ReferenceNumber of OnlineService element
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog">
            <summary>
            Interface which holds information for a tender line held within a transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.TenderId">
            <summary>
            Tender line item Id at time of transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.TenderName">
            <summary>
            Tender name at time of transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.Amount">
            <summary>
            Amount for the Tender line item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.MaskedAccountId">
            <summary>
            Last 4 characters of the credit/debit card in the Tender line item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.EntryMethod">
            <summary>
            Tender line entry method
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.Cashback">
            <summary>
            Cash back amount, represents the amount of cash (of this tender type) was was handed to the customer.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.TenderType">
            <summary>
            Tender Type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.IsChange">
            <summary>
            True when the line is tender change line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.IsRounding">
            <summary>
            Whether the tender is rounding
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.IsVoided">
            <summary>
            Specifies whether the tender was voided or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.IsAutoReconcile">
            <summary>
            Specifies whether it is an autoReconcile tender
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.TenderTypeCode">
            <summary>
            Tender's type code
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.ForeignCurrency">
            <summary>
            Gets the foreign currency.
            </summary>
            <value>
            The foreign currency.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.IsDeclined">
            <summary>
            Specifies whether the tender is declined (f.e. by MTX)
            </summary>
            <value>
            Returns false in case of RefusalTypeCode of the Tender is null or string.Empty; otherwise returns true
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.RefusalReason">
            <summary>
            Returns the Refusal Reason (f.e. on Business Rule action)
            </summary>
            <value>
            Returns action of refusal reason
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.CoveredSaleLines">
            <summary>
            Specified sale lines that tender covers in case if it is restricted tender
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.AuthorizationCode">
            <summary>
            Return the Authorization Code that return from the provider 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITenderLineLog.ReferenceNumber">
            <summary>
            Return the ReferenceNumber that return from the provider 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLinkLog">
            <summary>
            Intraface represent a link information to transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLinkLog.BusinessUnitId">
            <summary>
            Store Retailer Id belonging to the store where the transaction took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLinkLog.TransactionSequenceNumber">
            <summary>
            Sequence number assigned to the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLinkLog.TouchPointId">
            <summary>
            Id belonging to the TouchPoint at which the transaction took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLinkLog.IsOriginal">
            <summary>
            Whether this is the original touch-point (for self service usage).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLinkLog.EndDateTime">
            <summary>
            DateTime representing when the transaction was closed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLinkLog.BusinessDayDate">
            <summary>
            DateTime representing the transaction's business date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLinkLog.ReasonCode">
            <summary>
            string type representing the transaction link reason.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLogSaleLineFilter">
            <summary>
             Represents the line filtering mechanism for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">IRetailTransactionLog</see>'s  sale lines.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLogSaleLineFilter.Filter(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog)">
            <summary>
            Applies implementation of the filter. 
            </summary>
            <param name="retailTransactionLog">The <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">IRetailTransactionLog</see> that contains sale lines to be filtered.</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog">Lines</see> that match filtering criteria.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.AmountCriteria">
            <summary>
            Defines if the amount criteria can be used to search for a specific amount including the comparison operation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.AmountCriteria.Amount">
            <summary>
            Gets or sets the amount to search for.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.AmountCriteria.ComparisonOperator">
            <summary>
             Gets or sets the operator by which the amount is compared.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.AmountCriteria.ComparisonEnum">
            <summary>
            Represents the comparison operations for the amount.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.AmountCriteria.ComparisonEnum.Equal">
            <summary>
            Equal
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.AmountCriteria.ComparisonEnum.GreaterThanOrEqual">
            <summary>
            GreaterThanOrEqual
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.AmountCriteria.ComparisonEnum.LessThanOrEqual">
            <summary>
            LessThanOrEqual
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.UserCriteria">
            <summary>
            Represents the criteria used to search for a specific User.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.UserCriteria.UserName">
            <summary>
            Gets or sets the UserName.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerCriteria">
            <summary>
            Represents the criteria used to search for a specific customer.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerCriteria.CustomerId">
            <summary>
            Gets or sets the customer member ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerCriteria.CustomerExternalId">
            <summary>
            Gets or sets the customer external id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerCriteria.CustomerFirstName">
            <summary>
            Gets or sets the customer's first name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerCriteria.CustomerLastName">
            <summary>
            Gets or sets the customer's last name.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerOrderLogSearchCriteria">
            <summary>
            Represents the set of arguments used to search for Customer Order Transaction logs.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerOrderTranStatusEnum">
            <summary>
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerOrderTranStatusEnum.Cancelled">
            <summary>
             Represents a Customer Order Transaction which was voided.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerOrderTranStatusEnum.Finished">
            <summary>
             Represents the Customer Order Transaction which has a Retail Transaction Log linked to it.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerOrderTranStatusEnum.Resumed">
            <summary>
            Represents a Customer Order Transaction, which was resumed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerOrderTranStatusEnum.Returned">
            <summary>
            Returned
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerOrderTranStatusEnum.Suspended">
            <summary>
             Represents the Customer Order Transaction which doesn't have a Retail Transaction Log linked to it.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerOrderTranStatusEnum.Totaled">
            <summary>
            Represents a Customer Order Transaction, which was totalled.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.CustomerOrderTranStatusEnum.Voided">
            <summary>
            The voided
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogKey">
             <summary>
            Represents the unique key for identifying an order transaction log (Retail Transaction Log or Customer Order Log).
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogKey.BusinessUnitId">
             <summary>
            Gets or sets the Store Retailer ID belonging to the store in which the log was recorded.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogKey.TouchPointId">
             <summary>
            Gets or sets the ID belonging to the TouchPoint on which the log was recorded.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogKey.SequenceNumber">
             <summary>
            Gets or sets the sequence number assigned to the log.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogKey.EndDateTime">
             <summary>
            Gets or sets the DateTime representing when the log was closed.
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria">
            <summary>
            Represents the set of arguments used to search for retail transaction logs (customer orders and non customer orders).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.BusinessDayDateFrom">
            <summary>
            Gets or sets the BusinessDayDate range start, which searches for transactions which were closed after or equal to this value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.BusinessDayDateTo">
             <summary>
            Gets or sets the BusinessDayDate range end, which searches for transactions which were closed after or equal to this value.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.BusinessUnitIds">
             <summary>
            Gets or sets the identifiers of the business units at which the transactions were performed.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.TouchPointIds">
             <summary>
            Gets or sets the identifiers of the touch points at which the transactions were performed.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.SequenceNumberFrom">
             <summary>
            Gets or sets the Sequence number range start, 
             which will search for transactions with the Sequence ID starting from this value.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.SequenceNumberTo">
             <summary>
            Gets or sets the Sequence number range end, 
             which will search for the transactions with the Sequence ID up to this value.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.TransactionSequenceNumbers">
            <summary>
             Gets or sets the sequence numbers of the transaction logs.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.OrderTransactionLogKeys">
            <summary>
            Gets or sets Unique keys of the transaction logs.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.ItemIds">
             <summary>
            Gets or sets the identifiers of the items included in the transactions.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.IsVoided">
            <summary>
            Gets or sets the boolean value indicating if the transaction is voided.
            If true, the search will return only voided transactions. 
            If false, the search will return only non-voided transactions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.GrandAmount">
             <summary>
            Gets or sets the amount paid by the customer.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.TransactionExternalIds">
             <summary>
            Gets or sets the Transaction External IDs.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.ItemSerialNumbers">
            <summary>
            Gets or sets the OnLine CardNumber or Electronic Serial numbers of items.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.OriginalTouchPointIds">
             <summary>
            Gets or sets the identifiers of the original touch points on which the transactions were created.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.OriginalTouchPointTypes">
             <summary>
            Gets or sets the identifiers of the origininal touch points Type on which the transactions were created.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.TouchPointTypes">
            <summary>
            Gets or sets the type of touch points (POS, SelfScanDevice, etc...)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.RescanStatuses">
             <summary>
            Gets or sets the transaction self service rescan status.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.CustomersCriteria">
             <summary>
            Gets or sets the criteria used when searching for customers.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.UsersCriteria">
             <summary>
            Gets or sets the criteria used when searching for Users.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.IsTrainingMode">
             <summary>
            Gets or sets the boolean value indicating if Training Mode is active.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.CustomerOrderTranStatuses">
             <summary>
            Gets or sets the transaction type.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.OrderTransactionLogSearchCriteria.ReturnGenericDocument">
            <summary>
            Gets or sets the boolean value indicating if the response type will be GenericDocument
            If True, the search will return GenericDocument type
            Default value is False
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.RescanStatusEnum">
            <summary>
            Represents the Rescan Status.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.RescanStatusEnum.Success">
            <summary>
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.RescanStatusEnum.Failure">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.RetailTransactionLogSearchCriteria">
             <summary>
            Represents a set of arguments used to search for retail transaction logs.    
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.RetailTransactionLogSearchCriteria.TendersCriteria">
             <summary>
            Gets or sets the criteria used to search for tenders in the transactions.
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TenderCriteria">
            <summary>
            Represents the set of parameters used to search for a tender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TenderCriteria.TenderId">
             <summary>
            Gets or sets the Tender ID.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.TenderCriteria.Amount">
             <summary>
            Gets or sets the Amount of the tender.
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionRoundedBalanceDueAmount">
            <summary>
            The total retail transaction rounded balance due amount.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionTenderRewardAmount">
            <summary>
            Summarize all rewards given as tender in the transaction.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionTransactionFeeAmount">
            <summary>
            Amount of Transaction Fees only.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionItemFeeAmount">
            <summary>
            Amount of Item Fees only.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionBalanceDueAmount">
            <summary>
            Retail transaction balance due amount
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionBalanceDueAmount.GetValue(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Get the retail transaction balance due amout
            </summary>
            <param name="grandAmount"></param>
            <param name="tendersAmount"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionCalculatedValue`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionCalculatedValue`1.GetValue(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            
            </summary>
            <param name="retailTransaction"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionCashbackAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionChangeDueAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionDiscountAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionDiscountMerchandiseAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionDiscountNonMerchandiseAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionExcludedExemptedTaxAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionExcludedMerchandiseTaxAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionExcludedNonMerchandiseTaxAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionExcludedTaxAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionForcedExchangeRefundAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionGrandAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionGrandTotalAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionGrossAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionIncludedExemptedTaxAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionIncludedTaxAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionMerchandiseItemsAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionNetAmount">
            <summary>
            Transaction-Net-Amount is the total including Discounts and Surcharges without Taxes (assuming tax is not included) 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionNonMerchandiseItemsAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionPersonalAccountTendersAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionPersonalAccountTendersCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionPurchaseQuantity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionRefundGrandAmount">
            <summary>
            The total of all returned articles after any relevant discount including sales tax.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionRefundNetQuantity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionShouldOpenDrawer">
            <summary>
             Calculates the need to open the cash-drawer based on the current state of the retail transaction set to the RetailTransaction property.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionTenderDiscountAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionTenderExchangeAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionTendersAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionTendersCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionTendersGrossAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionTotalDiscountAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionTransactionEligibilitiesAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionVoidedItemsAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionVoidedItemsQuantity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionVoidedPurchasedItemsAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionVoucherPaymentTermAmount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Totals.IRetailTransactionVoucherPaymentTermCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionGapFiller.ITransactionGapFillerJobConfiguration.JobInterval">
            <summary>
            Hours between job runs. 0 or smaller should disable the job.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionGapFiller.ITransactionGapFillerJobConfiguration.RunningLayers">
            <summary>
            Array of running layers
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.AutoVoidAbandonedTransaction.IAutoVoidAbandonedTransactionJobConfiguration.TimeOut">
            <summary>
            Time limit for abandoned transaction after which job will run. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.AutoVoidAbandonedTransaction.IAutoVoidAbandonedTransactionJobConfiguration.VoidAbandonedTimeSlot">
            <summary>
            Job will run during this time slot.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.AutoVoidAbandonedTransaction.IAutoVoidAbandonedTransactionJobConfiguration.LastSuccessfulJobRun">
            <summary>
            Time of last successful job run.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.EntryMode">
            <summary>
            data enty mode enum
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RecallMobileTransaction.IRecallMobileTransactionConfiguration.MobileOrderRecallWindowInterval">
            <summary>
            mobile order recall window interval parameter
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionFinishingCondition">
            <summary>
            Represents a satisfying condition for finishing a retail transaction.
            This interface supports the business of allowing to finish only retail transactions that represent some kind of commercial interaction between retailer and customer.
            A retail transaction can start the finishing process only in case that at least one registered condition is satisfied.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionFinishingCondition.IsSatisfied(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            Indicating whether this condition has been satisfied.
            </summary>
            <value><c>true</c> if the condition was satisfied; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.ISuspendedTransactionListingDataProvider.GetTransactions(Retalix.StoreServices.Model.Selling.OrderProcess.ISuspendOrderSearchCriteria)">
            <summary>
            Get suspended transactions header details (like ID, balance due etc..) instead of the whole object.
            </summary>
            <param name="searchCriteria">The search criteria.</param>
            <returns>List of suspended transactions.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.SuspendedTransactionDto">
            <summary>
            Represents the details of a suspended transaction.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.ICustomerOrderSerializer">
            <summary>
            Represents the IRetailTransactionSerializer interface used to Serialize and Deserialize IRetailTransactions.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.ICustomerOrderSerializer.Serialize(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder})">
            <summary>
            Gets an object from a IRetailTransaction type and returns a <see cref="T:System.Xml.XmlDocument">XmlDocument</see> that represents the object 
            <param name="customerOrder"><see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction.</see></param>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.ICustomerOrderSerializer.Deserialize(System.Collections.Generic.IEnumerable{System.Xml.XmlDocument})">
            <summary>
            Gets an XmlDocument and returns an <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see> that represent the XmlDocument 
            <param name="customerOrderXml"><see cref="T:System.Xml.XmlDocument">XmlDocument</see></param>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionFactory.Create">
            <summary>
            Creates a new retail transaction with a new sequence number and id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionFactory.Create(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            creates a new retail transaction with the sequence and id of the provided customer order
            </summary>
            <param name="order">The customer order that provides the transaction sequence and id.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionFactory.CreateForTouchPoint(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            Creates a retail transaction for a specified touch point
            </summary>
            <param name="touchPoint">the touch point to create the transaction for</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionLinkProvider.Fetch(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink">RetailTransactionLink</see> of current <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>
            </summary>
            <param name="customerOrder"><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> to search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink">RetailTransactionLink</see></param>
            <returns><see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink">RetailTransactionLink</see> of given <param name="customerOrder"></param></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionLinkProvider.Update(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink)">
            <summary>
             Updates <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink">RetailTransactionLink</see> instance for specified <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/>.
            </summary>
             <param name="customerOrder">Customer order to update.</param>
             <param name="retailTransactionLink">Transaction link information to update.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.ITransactionDataPatternEncoder">
            <summary>
             Encapsulated encoding of transaction principle data into a barcode
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.ITransactionDataPatternEncoder.Encode(System.Int32,System.String,System.Int32,System.DateTime,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
             Encode the provided data based on the data patterns defined for "Transaction" entity
            </summary>
            <param name="sequenceNumber">The sequence identifier of the transaciton</param>
            <param name="storeId">The id of the store business unit the transaction associated with</param>
            <param name="touchPointId">The id of the touch point the transaction associated with</param>
            <param name="date">Date of the transaciton</param>
            <param name="totalAmount">Total Amount of the transaction</param>
            <returns>Dictionary of encoded barcodes, where the key is the Data-Pattern Id, and the value is the Encoding result of this pattern</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.ReportingState">
            <summary>
            Represents state of reporting results
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.ReportingState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.ReportingState" /> class.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.ReportingState.Receipt">
            <summary>
            The receipt which belongs to the current reporting state
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.ReportingState.NotPrintedSlipTypes">
            <summary>
            List of slip types that must not be printed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.ReportingState.GeneratedSlipTypes">
            <summary>
            List of slip types that generated digitaly
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionContext">
            <summary>
            Represents organizational context for retail transaction.    
            </summary>
            <remarks>Contains retail transaction information (e.g. Store, TouchPoint, User, etc.).</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionContext.Store">
            <summary>
            Gets the store in which the retail transaction was created.
            </summary>
            <value>An <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> that represents the store in which the retail transaction was created.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionContext.TouchPoint">
            <summary>
            Gets the touch point in which the customer order was created.
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see> that represents the touchpoint in which the retail transaction was made.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionContext.User">
            <summary>
            Gets the identity that created the retail transaction.
            </summary>
            <value>An <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see> that represents the cashier that handled the retail transaction.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionContext.StoreId">
            <summary>
            Gets The Id of the store
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionContext.TouchPointId">
            <summary>
            Gets the Id of the touchpoint
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.ICustomerOrderCacheDao">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.ICustomerOrderCacheDao.GetById(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.ICustomerOrderCacheDao.GetBySequenceNumber(System.String)">
            <summary>
            
            </summary>
            <param name="sequenceNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.ICustomerOrderCacheDao.Add(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            
            </summary>
            <param name="customerOrder"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.ICustomerOrderCacheDao.Remove(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            
            </summary>
            <param name="customerOrder"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.ICustomerOrderCacheDao.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.ICustomerOrderCacheDao.ClearAll">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionCacheDao">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionCacheDao.GetRetailTransactionByExternalId(System.String)">
            <summary>
            
            </summary>
            <param name="transactionExternalId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionCacheDao.GetById(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionCacheDao.GetBySequenceNumber(System.Int32)">
            <summary>
            
            </summary>
            <param name="sequenceNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionCacheDao.Add(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            
            </summary>
            <param name="retailTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionCacheDao.Remove(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            
            </summary>
            <param name="retailTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionCacheDao.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionCacheDao.ClearAll">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionSerializer">
            <summary>
            Represents the IRetailTransactionSerializer interface used to Serialize and Deserialize IRetailTransactions.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionSerializer.Serialize(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            Gets an object from a IRetailTransaction type and returns a <see cref="T:System.Xml.XmlDocument">XmlDocument</see> that represents the object 
            <param name="retailTransaction"><see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction.</see></param>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionSerializer.Deserialize(System.Xml.XmlDocument)">
            <summary>
            Gets an XmlDocument and returns an <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see> that represent the XmlDocument 
            <param name="retailTransactionXml"><see cref="T:System.Xml.XmlDocument">XmlDocument</see></param>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionSerializer.MigrateRetailTransaction(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            Migrates a retail transaction from another node to this node.
            If a change is required then to the transaction, then it neds to be loaded.
            <param name="retailTransaction"><see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see></param>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.ISequenceNumberGenerator">
            <summary>
            Use this interface to retrieve ordered sequence numbers
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.RetailTransaction.ISequenceNumberGenerator.GetNextSequenceNumber">
            <summary>
            Generates a <see cref="T:System.Int64">sequence number</see> that is continuously incremental on each call.
            </summary>
            <returns>generated sequence number</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink">
            <summary>
             Represents details that describe link to the specific active or inactive retail transaction.
             Inactive retail transaction is represented by retail transaction log.
            </summary>
             <remarks>The ISerializable interface is added to support version 5.1, when we no longer support it the interface should be removed.</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink.BusinessUnitId">
            <summary>
            Associated retail transaction businessunit id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink.TouchPointId">
            <summary>
            Associated retail transaction touchpoint id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink.SequenceNumber">
            <summary>
            Associated retail transaction sequence number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink.TransactionId">
            <summary>
            Associated retail transaction Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink.LineSequenceNumber">
            <summary>
             Associated retail transaction sequence number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink.ProductId">
            <summary>
             Product id of associated transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink.BusinessDate">
            <summary>
            SDK
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink.StartDateTime">
            <summary>
            SDK
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink.EndDateTime">
             <summary>
            SDK
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink.Offline">
            <summary>
            The associated retail transaction log is unreachable
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink.UnitSequenceNumbers">
            <summary>
            Returned Unit sequence numbers
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria">
            <summary>
            Encapsulates a set of transaction search variables.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.PosId">
            <summary>
            Gets or sets the Terminal Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.BusinessUnitId">
            <summary>
            Gets or sets the business unit id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.IsSuspended">
            <summary>
            Gets or sets whether a transaction is suspended.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.IsTrainingMode">
            <summary>
            Gets or sets whether Training Mode is active.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.SequenceNumber">
            <summary>
            Gets or sets the sequence number of the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.UpdateTime">
            <summary>
            Gets or sets the last time a transaction was updated.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.CreationTime">
            <summary>
            Gets or sets the Creation time of the Order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.BusinessDay">
            <summary>
            Gets or sets the Business date for the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.IsInProcess">
            <summary>
            Gets or sets whether the transaction is in process.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.IsClosed">
            <summary>
            Gets or sets whether the transaction is closed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.IsTripEnded">
            <summary>
            Gets or sets whether the trip is ended.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.CustomerId">
            <summary>
            Gets or sets the transaction's customer id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.TransactionExternalId">
            <summary>
            Gets or sets the transaction's external id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.IsVoided">
            <summary>
            Gets or sets whether the transaction is voided.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.ExcludedTransactionTypes">
            <summary>
            Indicates which transaction types should not be retrieved.
            Used when several types of transactions should not be retrieved by the DAO.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.RetailTransaction.TransactionsLookupCriteria.RequiredTransactionTypes">
            <summary>
            Indicates which transaction types should be retrieved, all others are ignored.
            Used when specific types of transactions should be retrieved by the DAO.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.PriceQueries.IPriceQueriesPrintoutReceiptData">
            <summary>
            Receipt Data For Price Queries Printout
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities">
            <summary>
            This class holds the keys used to resolve the different activities <seealso cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.IActivity"/> that 
            are executed when the <see cref="T:Retalix.StoreServices.Model.Selling.OrderProcess.IOrderProcess"/> is moving from one state to another
            (The activities are executed during the transition).
            For example,When a SuspendOrderProcess changes its state from an active state to a suspended state,
            it executes the SuspendCustomerOrderActivity which marks the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/> as suspended.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.SuspendCustomerOrderActivityName">
            <summary>
            This activity suspends the customer order and its retail transaction.The activity preforms the following actions:
            Updates the suspend time of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/>,updates the end time of the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction"/> 
            and creates tlog of the suspened retail transactions.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.DispatchSuspensionEventActivityName">
            <summary>
            This activity dispatches the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerOrderSuspendingEvent"/> using the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEventsDispatcher"/>.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.ValidateSuspendActivityName">
            <summary>
            This activity call to all the regitered CustomerOrderSuspendingValidators <seealso cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderSuspendingValidator"/> to validate that
            the customer order can be suspened.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.InvokeSuspentionActionActivityName">
            <summary>
            This activity invoke the <see cref="E:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Suspending"/> event of the suspended customer order.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.RemoveAllTenderRewardsActivityName">
            <summary>
            This activity removes all the reward that are from type reward as tender from the customer order.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.RemoveAllPaymentTermsActivityName">
            <summary>
            This activity removes all the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm"/> from the customer order.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.DeleteRetailTransactionActivityName">
            <summary>
            This activity deletes the customer order's retail transaction from the db.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.MarkOrderAsEndOfTrippedActivityName">
            <summary>
            This activity mark the order as End Of Tripped.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.LinkSelfScanOrderToPreferedPointActivityName">
            <summary>
            This activity link the transaction to the prefered touchpoint.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.DeleteRetailTransactionInterventionActivityName">
            <summary>
            This activity deletes the retail transaction's interventions from the db.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.RemovePromtionInstructionActivityName">
            <summary>
            This activity Removes all of the <see cref="T:Retalix.StoreServices.Model.Promotion.IPromotionInstruction">TenderStateInstruction</see> from the customer order.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.ResumeCustomerOrderActivityName">
            <summary>
            This activity resumes the customer order and its retail transaction.The activity performs the following actions:
            deletes the retail transaction from the parent server.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.InvokeResumingActivityName">
            <summary>
            dispatches the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerOrderResumingEvent"/>  
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.InvokeResumedActivityName">
            <summary>
            dispatches the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerOrderResumedEvent"/>.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.BuildEventHistoryActivityName">
            <summary>
            This activity builds the retailt transaction <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEventsHistory"/> by moving on all the lines and build the rti history based on 
            these lines.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.VoidRescanItemsOnSuspendActivityName">
            <summary>
            This activity voids rescanned items on suspend in case rescan was not completed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.CompleteRescanOnResumeActivityName">
            <summary>
            This activity runs complete rescan on resume transaction
            in case full rescan exists and All and Only original lines were rescaned.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.DispatchSuspendTabActivityName">
            <summary>
            This activity dispatches the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.SuspendTabEvent"/> event on suspend tab transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.RestoreRetailTransactionTipsActivityName">
            <summary>
            This activity restore Tips payments on Resume transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.SaveRetailTransactionTipsActivityName">
            <summary>
            This activity save Tips payments on Suspend transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.RestoreUserInputActivityName">
            <summary>
            This activity restores user inputs on Resume transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.SaveUserInputActivityName">
            <summary>
            This activity saves user inputs on Suspend transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.WalkoffSuspendClassificationActivityName">
            <summary>
            This activity Change Classification to WalkoffSuspendCustomerOrderClassification and update tab form
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.ResumeActiveTabValidationActivityName">
            <summary>
            This activity validates if resume an active tab
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.SaveScoInterventionsActivityName">
            <summary>
            This activity saves the RetailTransaction ScoInterventions on the CustomerOrder
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessTransitionActivities.IncludeScoInterventionsActivityName">
            <summary>
            This activity includes the saved CustomerOrder ScoInterventions on the RetailTransaction
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessStateActivities">
            <summary>
            This class holds the keys used to resolve the different activities <seealso cref="T:Retalix.StoreServices.Model.Infrastructure.BPM.IActivity"/> that 
            are executed when the <see cref="T:Retalix.StoreServices.Model.Selling.OrderProcess.IOrderProcess"/> is entering to a target state.
            For example,After a SuspendOrderProcess entering to a suspended state, it executes the UploadWithDmsActivityName
            Which register the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/> to be uploaded via the DMS.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessStateActivities.LockedForSaleValidationActivityName">
            <summary>
            This activity checks if there are lines that are now locked for sale and void them from the customer order.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessStateActivities.DispatchCustomerOrderSuspendEventActivityName">
            <summary>
            This activity dispatches the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Events.CustomerOrderSuspendedEvent"/> using the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEventsDispatcher"/>.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.OrderProcess.OrderProcessStateActivities.UploadWithDmsActivityName">
            <summary>
            This activity register the customer order to dms so it will be uploaded to the parent server.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.OrderProcess.CustomerToPayData">
            <summary>
            Contains details of a DriveOff or Unpaid customer.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.OrderProcess.IClickAndCollectSearchCriteria">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.OrderProcess.IClickAndCollectSearchCriteria.AssignedPickerUserName">
            <summary>
            Gets or sets the assign user name to search by
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.OrderProcess.IClickAndCollectSearchCriteria.BusinessUnitId">
            <summary>
            Gets or sets the business unit id to search by
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.OrderProcess.IClickAndCollectSearchCriteria.TypesToSearch">
            <summary>
            Gets the process type to search by
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.OrderProcess.IClickAndCollectSearchCriteria.PickupTimeFrom">
            <summary>
            Gets or sets order pick up time from, to search by
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.OrderProcess.IClickAndCollectSearchCriteria.PickupTimeTo">
            <summary>
            Gets or sets order pick up time to, to search by
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.OrderProcess.IClickAndCollectSearchCriteria.Status">
            <summary>
            Gets or sets process status to search by
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.OrderProcess.IClickAndCollectSearchCriteria.TrackingNumber">
            <summary>
            Gets or sets tracking number to search by
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.OrderProcess.IClickAndCollectSearchCriteria.CustomerId">
            <summary>
            Gets or sets customer Id to search by
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.OrderProcess.IClickAndCollectSearchCriteria.PagingInfo">
            <summary>
            GEets or sets the results paging details
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.OrderProcess.IClickAndCollectSearchCriteria.AssociatedTransactionId">
            <summary>
            Gets or sets associated transaction id to search by. 
            Conform with ICustomerOrder.AssociatedRetailTransactionId.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.OrderProcess.Vehicle">
            <summary>
            Contains vehicle information for a DriveOff or Unpaid customer.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.FuelItemCannotBeReturnedException">
            <summary>
            Represents exception thrown on fuel item return.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.FuelItemCannotBeReturnedException.#ctor">
            <summary>
            Creates new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.FuelItemCannotBeReturnedException"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ProductCodeChangedSincePurchasedException">
            <summary>
            The exception is thrown when the returned product code
            changed since purchased in the original transaction.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyEndDateTimeInThePastException">
            <summary>
             Occurs when an attempt is made to change the end date time 
             for a return policy is already expired, i.e., it's end-date-time has already past.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.BottleDepositGroupNotFoundException">
            <summary>
             Represents the exception that is thrown when a bottle deposit product group is not found.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.BottleDepositGroupNotFoundException.#ctor">
            <summary>
             Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.BottleDepositGroupNotFoundException"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.DenyReturnedItemException">
            <summary>
             Represents the exception that is thrown when the product cannot be returned.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.DenyReturnedItemException.#ctor(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Message.IMessagePart})">
            <summary>
             Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.DenyReturnedItemException"/>.
            </summary>
            <param name="message">
             The dynamic message that describes the exception,
             in the form of multiple <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessagePart">IMessagePart</see> objects.
             </param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ForcedExchangeIsNotCompletedException">
            <summary>
             Represents the exception that is thrown when trying to complete a transaction 
             with an amount that is defined in a return policy as a forced exchange.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ForcedExchangeIsNotCompletedException.#ctor(Retalix.StoreServices.Model.Selling.Returns.ForceExchange.ForcedExchangeCalculationResult,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ForcedExchangeIsNotCompletedException"/>.
            </summary>
            <param name="forcedExchangeCalculationResult">The result that caused exception</param>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/> object that <paramref name="forcedExchangeCalculationResult"/> was calculated on it.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InsufficientCustomerDetailsException">
            <summary>
              Represents the exception that is thrown when no customer details were provided for a return transaction,
              or some details were missing.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InsufficientCustomerDetailsException.#ctor(Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy)">
            <summary>
             Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InsufficientCustomerDetailsException"/>.
            </summary>
            <param name="returnPolicy">The return policy that defines the required customer details.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InvalidReturnPolicyEndDateTimeException">
            <summary>
             Represents the exception that is thrown when an invalid end date time is set on a <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see>.
             This may occur when the end date time is before the policy's <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.StartDateTime">StartDateTime</see>, or
             the end date time is in the past in one of the store's Business units.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InvalidReturnPolicyEndDateTimeException.#ctor(System.DateTime)">
            <summary>
             Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InvalidReturnPolicyEndDateTimeException">InvalidReturnPolicyEndDateTimeException</see>.
            </summary>
            <param name="endDateTime">The end datetime that was provided for the policy.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InvalidReturnPolicyEndDateTimeException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InvalidReturnPolicyEndDateTimeException">InvalidReturnPolicyEndDateTimeException</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ManagerApprovalRequiredException">
            <summary>
             Represents the exception that is thrown when missing or wrong manager credentials are supplied.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ManagerApprovalRequiredException.#ctor(System.String)">
            <summary>
             Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ManagerApprovalRequiredException"/>.
            </summary>
            <param name="message">
             A message that describes the exception,
             </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ManagerApprovalRequiredException.#ctor(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Message.IMessagePart})">
            <summary>
             Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ManagerApprovalRequiredException"/>.
            </summary>
            <param name="message">
             The dynamic message that describes the exception,
             in the form of multiple <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessagePart">IMessagePart</see> objects.
             </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ManagerApprovalRequiredException.#ctor(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Message.IMessagePart},System.Exception)">
            <summary>
             Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ManagerApprovalRequiredException"/>.
             </summary>
             <remarks>
             Use the provided constructor when the <paramref name="innerException"/> is not
             an instance of the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException">BusinessException</see>.
            </remarks>
            <param name="message">
             The dynamic message that describes the exception,
             in the form of multiple <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessagePart">IMessagePart</see> objects.
             </param>
             <param name="innerException">The inner exception reference.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnNonBottleDepositProductNotAllowException">
            <summary>
             Represents the exception that is thrown during a bottle transaction,
             when trying to return a product that is not recognized as a bottle deposit.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnNonBottleDepositProductNotAllowException.#ctor">
            <summary>
             Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnNonBottleDepositProductNotAllowException">ReturnNonBottleDepositItemNotAllowException</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyCausedBusinessException">
            <summary>
             Represents the exception that is thrown when an error is caused by a return policy.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyCausedBusinessException.#ctor(Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy,System.String,System.String)">
            <summary>
             Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyCausedBusinessException">ReturnPolicyCausedBusinessException</see>.
            </summary>
            <param name="returnPolicy">The policy that caused the error.</param>
            <param name="message">The message that describes the error.</param>
            <param name="errorCode">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException">BusinessException</see>'s error code.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyStateException">
            <summary>
             Represents the exception that is thrown when trying to perform an operation
             which is not allowed in the current policy state.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyStateException.#ctor(System.String)">
            <summary>
             Initializes a new instance of a <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyStateException">ReturnPolicyStateException</see>.
            </summary>
            <param name="message">Describes the disallowed operation.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyStateException.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of a <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyStateException">ReturnPolicyStateException</see>.
             </summary>
            <param name="message">Describes the disallowed operation.</param>
             <param name="errorCode">The code to identify this error</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnReasonCodeNotProvidedException">
            <summary>
             Represents the exception that is thrown when no <see cref="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCode">IReasonCode</see>
             object was provided for a return action, but the associated return policy requires one.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnReasonCodeNotProvidedException.#ctor(Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy)">
            <summary>
             Initializes a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnReasonCodeNotProvidedException">ReturnReasonCodeNotProvidedException</see>.
            </summary>
            <param name="returnPolicy">The policy that caused the error.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnTransactionCannotBeClosedException">
            <summary>
             Represents the exception that is thrown when the return transaction cannot be closed.
             An inner exception contains the reason for this failure.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnTransactionCannotBeClosedException.#ctor(Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException)">
            <summary>
             Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnTransactionCannotBeClosedException">ReturnTransactionCannotBeClosedException</see>.
            </summary>
            <param name="innerException">The reason that causes the error.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ControlTransactionNotAllowedForReturnException">
            <summary>
            The exception that is thrown when attempting to start a return flow,
            and the original transaction is a control transaction.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ControlTransactionNotAllowedForReturnException.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ControlTransactionNotAllowedForReturnException"/> class.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.DuplicateSequenceException">
            <summary>
            The exception that is thrown when a return policy contains rules with duplicate
            sequence numbers.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.DuplicateSequenceException.#ctor">
            <summary> 
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.DuplicateSequenceException">DuplicateSequenceException</see> class.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InputRequiredException">
            <summary>
            The exception that is thrown when incorrect or partial input is supplied by the
            client. The expected input is defined in the Return Policy.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InputRequiredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InputRequiredException"/> class
            with the required input.
            </summary>
            <param name="inputRequiredErrorCode">
            Defines the required input. Generally, the error string is retrieved from
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessExceptionErrorCodes">BusinessExceptionErrorCodes</see>.
            </param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.MessageNotExistsException">
            <summary>
            The exception that is thrown when the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">IMessage</see> object
            for a specific message name is not defined in the repository.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.MessageNotExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.MessageNotExistsException">MessageNotExistsException</see> class
            with a specified message.
            </summary>
            <param name="messageName">
            The name of the message that does not have a corresponding
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">IMessage</see> object.
            </param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.NonNegativeTransactionException">
            <summary>
            The exception that is thrown when an illegal operation is performed in a 
            non-negative transaction (a transaction that must have a non-negative balance).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.NonNegativeTransactionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.NonNegativeTransactionException"/>
            class.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.NoProductsLeftToReturnInOriginalTransactionException">
            <summary>
            The exception that is thrown during a return transaction when all the products in
            the original sales transaction have already been returned.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.NoProductsLeftToReturnInOriginalTransactionException.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.NoProductsLeftToReturnInOriginalTransactionException"/> class.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.NoPurchasedProductsFoundInOriginalTransactionException">
            <summary>
            The exception that is thrown during a return transaction when the original
            transaction does not contain purchased products.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.NoPurchasedProductsFoundInOriginalTransactionException.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.NoPurchasedProductsFoundInOriginalTransactionException"/> class.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.NotAllLinesReturnedException">
            <summary>
            The exception that is thrown during a return transaction if all purchase lines
            from the original transaction were not returned as part of an
            ICustomerOrder.ReturnAllProducts action.
            <para>
            A possible example may be prepaid products that are being returned, and must be
            authorized first by a third-party system.
            </para>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.NotAllLinesReturnedException.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.NotAllLinesReturnedException">NotAllLinesReturnedException</see> class.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.RetailTransactionLogNotFoundException">
            <summary>
            The exception that is thrown when the Retail Transaction Log is not found.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.RetailTransactionLogNotFoundException.#ctor(System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.RetailTransactionLogNotFoundException"/>
            class with information for identifying the transaction in the log.
            </summary>
            <param name="storeId">The store ID.</param>
            <param name="posId">The POS ID.</param>
            <param name="transactionSequenceNumber">The transaction's sequence number.</param>
            <param name="trxDate">The TRX date.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyAlreadySubmittedException">
            <summary>
            The exception that is thrown when attempting to submit a return policy that has
            already been submitted.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyAlreadySubmittedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyAlreadySubmittedException">ReturnPolicyAlreadySubmittedException</see>
            class.
            </summary>
            <param name="returnPolicyId">The Return Policy's ID.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyNotFoundException">
            <summary>
            The exception that is thrown when a return policy is not found for a customer order.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyNotFoundException"/>
            class.
            </summary>
            <param name="policyId">The Id of the required policy.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyNotFoundException.#ctor(System.String,System.DateTime,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyNotFoundException"/>
            class.
            </summary>
            <param name="policyState">The state of the required policy.</param>
            <param name="dateTime">The date and time at which the system searched for the
                Return Policy.</param>
            <param name="businessUnit"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyStartDateInPastException">
            <summary>
            The exception that is thrown when trying to submit a Return Policy in which the
            start datetime has already occurred.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyStartDateInPastException.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyStartDateInPastException">ReturnPolicyStartDateInPastException</see>
            class.
            </summary>
            <param name="startDateTime">The policy's start date and time.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyStartDateInPastException.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyStartDateInPastException">ReturnPolicyStartDateInPastException</see>
            class.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnQuantityGreaterThanPurchasedException">
            <summary>
            The exception that is thrown when the return quantity for a product is greater
            than the quantity that was purchased in the original transaction, i.e. when the
            purchased quantity of the product has already been returned in a previous
            transaction, or in the current one.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnQuantityGreaterThanPurchasedException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnQuantityGreaterThanPurchasedException">ReturnQuantityGreaterThanPurchaseException</see>
            class with information regarding the returned product's quantity (in whole
            numbers).
            </summary>
            <param name="productId">Returned product's ID.</param>
            <param name="originalQuantity">The original quantity of the product that was
            purchased.</param>
            <param name="quantityReturnedInPreviousTransactions">The quantity of the
            product that was already returned in previous transactions.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnQuantityGreaterThanPurchasedException.#ctor(System.String,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnQuantityGreaterThanPurchasedException">ReturnQuantityGreaterThanPurchaseException</see>
            class with information regarding the returned product's quantity
            (in <see langword="decimal"/> values).
            </summary>
            <param name="productId">Returned product's ID.</param>
            <param name="originalQuantity">The original quantity of the product that was
            purchased.</param>
            <param name="quantityReturnedInPreviousTransactions">The quantity of the
            product that was already returned in a previous transactions.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnWeightGreaterThanPurchasedException">
            <summary>
            The exception that is thrown when the returned product weight is greater
            than the original purchased weight, i.e. when the total weight
            of the product has already been returned in a previous transaction or in the
            current one.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnWeightGreaterThanPurchasedException.#ctor(System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnWeightGreaterThanPurchasedException">ReturnWeightGreaterThanPurchasedException</see>
            class with information regarding the returned product's weight and the weight
            returned in the current transaction.
            </summary>
            <param name="productId">Returned product's ID.</param>
            <param name="originalWeight">The original weight of the product that was
            purchased.</param>
            <param name="attemptedCurrentReturnWeight">The weight of the product
            currently being returned.</param>
            <param name="weightReturnedInCurrentTransaction">The weight of the product
            that was already returned in a current transaction.</param>
            <param name="weightReturnedInPreviousTransactions">The weight of the product
            that was already returned in previous transactions.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnWeightGreaterThanPurchasedException.#ctor(System.String,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnWeightGreaterThanPurchasedException">ReturnUnitsGreaterThanPurchaseException</see>
            class with information regarding the returned product's weight.
            </summary>
            <param name="productId">Returned product's ID.</param>
            <param name="originalWeight">The original weight of the product that was
            purchased.</param>
            <param name="attemptedCurrentReturnWeight">The weight of the product
            currently being returned.</param>
            <param name="weightReturnedInPreviousTransactions">The weight of the product
            that was already returned in previous transactions.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnWeightGreaterThanPurchasedException.#ctor(System.String,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnWeightGreaterThanPurchasedException">ReturnWeightGreaterThanPurchasedException</see>
            class with information regarding the returned product's weight and the weight
            returned in the current transaction.
            </summary>
            <param name="productId">Returned product's ID.</param>
            <param name="originalWeight">The original weight of the product that was
            purchased.</param>              
            <param name="weightReturnedInPreviousTransactions">The weight of the product
            that was already returned in previous transactions.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.SomeTransactionLinesReturnedException">
            <summary>
            The exception that is thrown when some transaction lines have been returned.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.SomeTransactionLinesReturnedException.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.SomeTransactionLinesReturnedException">SomeTransactionLinesReturnedException</see>
            class.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.StoreNotFoundException">
            <summary>
            The exception that is thrown when a store cannot be found.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.StoreNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.StoreNotFoundException"/> class
            with the store's ID.
            </summary>
            <param name="id">The store's ID.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.TransactionLogLineNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.TransactionLogLineVoidedException">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Exceptions.TransactionLogLineVoidedException.ItemId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.TransactionLogLineVoidedException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.TransactionStatusIsSuspendedCannotReturnItemsException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.TransactionStatusIsSuspendedCannotReturnItemsException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.TransactionStatusIsVoidedCannotReturnItemsException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Exceptions.TransactionStatusIsVoidedCannotReturnItemsException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IBulkItemUnitLineLogWithPriceAdjusments">
            <summary>
            Represents an <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">IUnitLineLog</see> object and an associated
            adjustments to the weighable unit line's <see cref="P:Retalix.StoreServices.Model.Price.IPricedQuantity.Price">Price</see>.
            </summary>
            <remarks>
            After execution of all <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnUnitsPriceVisitor">IReturnUnitsPriceVisitor</see>
            implementations, the returns domain updates all unit line prices by adding 
            the final value of <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IBulkItemUnitLineLogWithPriceAdjusments.PriceAdjustments">PriceAdjusments</see> to the unit line's
            <see cref="P:Retalix.StoreServices.Model.Price.IPricedQuantity.Price">Price</see>.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IBulkItemUnitLineLogWithPriceAdjusments.AddPriceAdjustment(Retalix.StoreServices.Model.Selling.Returns.BulkItemPriceAdjustment)">
            <summary>
            Validates that the total quantity of price adjustments does not exceed the quantity of the unit line.
            If acceptable, adds a price adjustment to the price adjustments property.
            </summary>
            <param name="bulkItemPriceAdjustment"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IBulkItemUnitLineLogWithPriceAdjusments.UnitLine">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">IUnitLineLog</see> object whose price can be
            modified by changing the value of <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IBulkItemUnitLineLogWithPriceAdjusments.PriceAdjustments">PriceAdjusments</see>.
            </summary>
            <remarks>
            Within the context of an <see cref="M:Retalix.StoreServices.Model.Selling.Returns.IReturnUnitsPriceVisitor.AdjustPrices(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPromotionPriceAdjusment})">AdjustPrices</see>
            invocation, the <see cref="P:Retalix.StoreServices.Model.Price.IPricedQuantity.Price">Price</see> of <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IBulkItemUnitLineLogWithPriceAdjusments.UnitLine">UnitLine</see>
            will remain unchanged and reflect the original value read by the return engine from the TLog.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IBulkItemUnitLineLogWithPriceAdjusments.PriceAdjustments">
            <summary>
            Gets the adjustments that should be applied to <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IBulkItemUnitLineLogWithPriceAdjusments.UnitLine">UnitLine's</see>
            <see cref="P:Retalix.StoreServices.Model.Price.IPricedQuantity.Price">Price</see>.
            </summary>
            <remarks>
            <para>
            Generally, the adjust applied to this unit should reflect price adjustments 
            that were made when this unit was originally sold.
            </para><para>
            If, for example, the porsion of weighable item received a discount when it was originally purchased,
            the <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IBulkItemUnitLineLogWithPriceAdjusments.PriceAdjustments">PriceAdjusments</see> should be reduced here by the same amount.
            </para>
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IBulkItemUnitLineLogWithPriceAdjusments.GetAdjustedBulkUnitLineLogs">
            <summary>
            Returns a sequence of <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">IUnitLineLog</see> objects representing 
            <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IBulkItemUnitLineLogWithPriceAdjusments.UnitLine"/> after being split according to the existing <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IBulkItemUnitLineLogWithPriceAdjusments.PriceAdjustments"/>,
            such that each returned unit line will have a different price.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IPromotionAdjustmentDetails.RewardSplitAmount">
            <summary>
            Gets or sets the unit line Reward Split Amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IPromotionAdjustmentDetails.TenderId">
            <summary>
            TenderId of Promotion applied as Reward As Tender
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IPromotionAdjustmentDetails.PromotionId">
            <summary>
            Gets or sets the unit line Promotion description
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IPromotionAdjustmentDetails.Description">
            <summary>
            Gets or sets the unit line Promotion Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IPromotionAdjustmentDetails.ApportionmentAdjustmentDetails">
            <summary>
            Gets or sets the unit line Apportionment Id.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReceiptedReturnStrategy">
            <summary>
            Represents the strategy used for creating <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">IReturnOrderLine</see> objects,
            given a set of selected units from the purchase TLog, during a transaction based return.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReceiptedReturnStrategy.GetReturnOrderLines(System.Collections.Generic.IList{Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog},Retalix.StoreServices.Model.Selling.Returns.IReturnContext)">
            <summary>
            Creates a sequence of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">IReturnOrderLine</see> objects representing 
            the return lines in their final state, including their adjusted prices, that will be added to the customer order, 
            based on the data in <paramref name="returnContext"/> and a set of selected units from the original purchase TLog.
            </summary>
            <remarks>
            <paramref name="unitsToReturn">UnitsToReturn</paramref> represents the units from the TLog of the original purchase
            order that have been selected to be returned. Selected unit-logs do not need to belong to the same parent 
            <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog">ISaleLineLog</see> representation.
            </remarks>
            <param name="returnContext">
            An <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnContext">IReturnContext</see> instance representing returns-related
            data relevant for the current transaction and product return.
            </param>
            <param name="unitsToReturn">
            The units from the TLog of the original purchase order that have been chosen to be returned and according to which
            the return order lines will be created.
            </param>
            <returns>
            A sequence of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">IReturnOrderLine</see> objects representing 
            the return lines in their final state, including their adjusted prices, that will be added to the customer order, 
            based on the data in <paramref name="returnContext"/>, and matching the quantities in <paramref name="unitsToReturn"/>.
            <remarks>
            Created return order lines do not necessarily reflect the structure of the provided <paramref name="unitsToReturn"/>.
            Lines may be grouped and separated according to various criteria, e.g., the parent log lines of the provided unit lines and
            the prices of the units being returned.
            </remarks>
            </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogPrioritizationStrategy">
            <summary>
             Represents the strategy that prioritizes original purchase <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">IUnitLineLog</see> objects for return.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogPrioritizationStrategy.Sort(System.Collections.Generic.IList{Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog},Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy)">
            <summary>
            Arranges <paramref name="originalUnits"/> according to the definitions of <paramref name="returnPolicy"/>.
            </summary>
            <remarks>
            Generally, if the return policy is configured as <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.IsBestForGuest"/> as true, the strategy will order <param name="originalUnits"/>
            from highest to lowest prices. Otherwise they will be ordered from lowest to highest.
            </remarks>
            <param name="originalUnits"><see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">IUnitLineLog</see> objects from the original purchase transaction log
            that should be prioritized according to the definitions of <paramref name="returnPolicy"/>.</param>
            <param name="returnPolicy">
            The <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see> instance whose definitions may be used to prioritize <paramref name="originalUnits"/>.
            </param>
            <returns><paramref name="originalUnits"/> ordered according to the given <paramref name="returnPolicy"/>.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReturnUnitsPriceVisitor">
            <summary>
            Defines the interface that must be implemented by a business or domain in order
            to contribute to the calculation of the original purchase price of a unit of a product
            for the purpose of returning one or more units of that product.
            Visitor implementers are chained, i.e., the result of one visitor is passed on to the next. 
            Only the final result is incorporated by the return engine
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnUnitsPriceVisitor.AdjustPrices(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPromotionPriceAdjusment})">
            <summary>
            Modifies the <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPriceAdjusment.PriceAdjusment">PriceAdjusment</see> of each
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPriceAdjusment">IUnitLineLogWithPriceAdjusment</see> object 
            so that it reflects price adjustments made when that unit was originally sold.
            </summary>
            <remarks>
            <para>
            After execution of all <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnUnitsPriceVisitor">IReturnUnitsPriceVisitor</see>
            implementations, the returns domain updates all unit line prices by adding 
            the final value of <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPriceAdjusment.PriceAdjusment">PriceAdjusment</see> 
            to the unit line's <see cref="P:Retalix.StoreServices.Model.Price.IPricedQuantity.Price">Price</see>.
            </para><para>
            Therefore, in order to apply a reduction to the return price, reduce the price adjustment,
            and in order to increase the returned price of a unit, increase the price adjustment.
            </para><para>
            If, for example, the unit received a discount when it was originally purchased,
            the matching unit's <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPriceAdjusment.PriceAdjusment">PriceAdjusment</see>
            should be reduced in this method by the same amount.
            </para>
            </remarks>
            <param name="unitLines">The unit lines representing all units in the original</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnUnitsPriceVisitor.AdjustBulkPrices(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.Returns.IBulkItemUnitLineLogWithPriceAdjusments})">
            <summary>
            Implementers may provide price adjustment information about unit lines whose unit of measure is not "Each" 
            and therefore represent items sold in bulk (by weight, volume, etc). Price adjustments are incorporated 
            into the final return price by the return engine, as well as into the strategy for selecting the correct 
            unit(s) to return.
            </summary>
            <param name="priceAdjustments"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPriceAdjusment">
            <summary>
            Represents an <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">IUnitLineLog</see> object and an associated
            adjustment to the unit line's <see cref="P:Retalix.StoreServices.Model.Price.IPricedQuantity.Price">Price</see>.
            </summary>
            <remarks>
            After execution of all <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnUnitsPriceVisitor">IReturnUnitsPriceVisitor</see>
            implementations, the returns domain updates all unit line prices by adding 
            the final value of <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPriceAdjusment.PriceAdjusment">PriceAdjusment</see> to the unit line's
            <see cref="P:Retalix.StoreServices.Model.Price.IPricedQuantity.Price">Price</see>.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPriceAdjusment.UnitLine">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">IUnitLineLog</see> object whose price can be
            modified by changing the value of <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPriceAdjusment.PriceAdjusment">PriceAdjusment</see>.
            </summary>
            <remarks>
            Within the context of an <see cref="M:Retalix.StoreServices.Model.Selling.Returns.IReturnUnitsPriceVisitor.AdjustPrices(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPromotionPriceAdjusment})">AdjustPrices</see>
            invocation, the <see cref="P:Retalix.StoreServices.Model.Price.IPricedQuantity.Price">Price</see> of <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPriceAdjusment.UnitLine">UnitLine</see>
            will remain unchanged and reflect the original value read by the return engine from the TLog.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPriceAdjusment.PriceAdjusment">
            <summary>
            Gets or sets the adjustment that should be applied to <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPriceAdjusment.UnitLine">UnitLine's</see>
            <see cref="P:Retalix.StoreServices.Model.Price.IPricedQuantity.Price">Price</see>.
            </summary>
            <remarks>
            <para>
            Generally, the adjust applied to this unit should reflect price adjustments 
            that were made when this unit was originally sold.
            </para><para>
            If, for example, the unit received a discount when it was originally purchased,
            the <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPriceAdjusment.PriceAdjusment">PriceAdjusment</see> should be reduced here by the same amount.
            </para>
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPromotionPriceAdjusment">
            <summary>
            extends  IUnitLineLogWithPriceAdjusment and add new property for adjustment
            of the promotion data according to the original log
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogWithPromotionPriceAdjusment.PromotionAdjustmentDetails">
            <summary>
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IPromotionAdjustmentDetails"/> to be  adjusted
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Queries.ReturnPolicyReasonCodeIdSpecification">
            <summary>
            Filters <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see> entites by their 
            associated <see cref="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCode">IReasonCode</see> Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Queries.ReturnPolicyReasonCodeIdSpecification.Id">
            <summary>
            The Id of the <see cref="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCode">IReasonCode</see> entity according to which to 
            filter <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see> entities.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.TBRPriceAdjustmentInfo.RewardSplitUnitAmount">
            <summary>
            Reward Split Unit Amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.TBRPriceAdjustmentInfo.TenderId">
            <summary>
            Tender Id included in Retail Price Modifier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.TBRPriceAdjustmentInfo.PromotionId">
            <summary>
            Promotion Id included in Retail Price Modifier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.TBRPriceAdjustmentInfo.Description">
            <summary>
            Promotion description for included in Retail Price Modifier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.TBRPriceAdjustmentInfo.PriceModifierSequenceNumber">
            <summary>
            Price Modifier Sequence number in Return TLog
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.TBRPriceAdjustmentInfo.LineSequenceNumber">
            <summary>
            Correlation number between LineItem and Retail Price Modifiers for returned items while building Return TLog
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.TBRPriceAdjustmentInfo.ApportionmentPriceAdjustmentInfos">
            <summary>
            Apportionment Amount adjustment data per LineItem
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Validators.IReturnPolicyBeforeUpdateEndDateTimeValidator">
            <summary>
             Represents an object that is called to validate a return policy's <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.EndDateTime">EndDateTime</see> before it is set.
             <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyEndDateTimeInThePastException">Occurs when an attempt is made to change the end date time 
             for a return policy is already expired, i.e., it's end-date-time has already past.</exception>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Validators.IReturnPolicyDeleteValidator">
            <summary>
             Represents an object that is called to validate a <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">return policy</see> before it is deleted.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Validators.IReturnPolicySaveValidator">
            <summary>
             Represents an object that is called to validate a <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">return policy</see> before it is saved.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Validators.IReturnPolicySubmitValidator">
            <summary>
             Represents an object that is called to validate a <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">return policy</see> before it is submitted.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Validators.IReturnPolicyUpdateEndDateTimeValidator">
            <summary>
             Represents an object that is called to validate a <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">return policy</see> before it's end date time is updated.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Validators.IReturnPolicyValidator">
            <summary>
             Represents an object that is called to validate a <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">return policy</see> before it is saved,
             deleted or submitted. Only the interfaces inheriting from this interface are included in validation flows.
             <seealso cref="T:Retalix.StoreServices.Model.Selling.Returns.Validators.IReturnPolicySubmitValidator"/>
             <seealso cref="T:Retalix.StoreServices.Model.Selling.Returns.Validators.IReturnPolicySaveValidator"/>
             <seealso cref="T:Retalix.StoreServices.Model.Selling.Returns.Validators.IReturnPolicyDeleteValidator"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Validators.IReturnPolicyValidator.Validate(Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy)">
            <summary>
            Validates the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">return policy</see>.
            </summary>
            <param name="returnPolicy">The return policy to be validated</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.ILinesByReturnContextFilter">
            <summary>
             Represents the line filtering mechanism by ReturnContext.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.ILinesByReturnContextFilter.FilterLogLinesByCurrentProduct(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog},Retalix.StoreServices.Model.Selling.Returns.IReturnContext)">
            <summary>
            Filter log lines by current product and ProductReturnInfo
            </summary>
            <param name="saleLines">represent lines from transaction log</param>
             <param name="returnContext">Return data required for the filtering</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog">Log lines</see> that match filtering criteria.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.ILinesByReturnContextFilter.FilterReturnOrderLinesByCurrentProduct(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine},Retalix.StoreServices.Model.Selling.Returns.IReturnContext)">
            <summary>
            Filter return order lines by current product and ProductReturnInfo
            </summary>
            <param name="returnOrderLines">represent return order line from current customer order</param>
             <param name="returnContext">Return data required for the filtering</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">Return order lines</see> that match filtering criteria.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.ITransactionBasedReturnValidator">
            <summary>
            Represents an interface used to validate a transaction for Transaction based return.<br/>
            The validators run <b>after</b> core validations while using the <see cref="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrderFactory.CreateForReturn(Retalix.StoreServices.Model.Selling.CustomerOrder.CustomerOrderCreationArgs,Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderCreationInfo)">ICustomerOrderFactory.CreateForReturn</see>
            and during the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.TransactionFinishingEvent">TransactionFinishingEvent</see> event.<br/>
            The implementation is expected to throw validation exception on failure.
            </summary>
            <remarks>
            Registrations must be named.
            </remarks>
            <exception cref="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException">Any business exception defined by extension developers.</exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.ITransactionBasedReturnValidator.Validate(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog)">
            <summary>
            Validates the specified retail transaction log.
            </summary>
            <param name="retailTransactionLog">The retail transaction log.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroup">
            <summary>
             Represents the group used for bottle deposits.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroup.RelatedGroup">
            <summary>
            Gets the related group <see cref="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroup.BusinessUnits">
            <summary>
            Gets the associated business unit<see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>s.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroup.UpdateBusinessUnits(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit})">
            <summary>
            Updates associated business units.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroupDao">
            <summary>
             <see cref="T:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroup"/> dao.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroupDao.Save(Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroup)">
            <summary>
            Saves the received instance.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroupDao.Get(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup[])">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroup"/> related to <param name="groups"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroupDao.Get(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Get <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>s by <paramref name="businessUnit"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroupDao.GetAll">
            <summary>
            Get all.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroupDao.GetAll(Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroup)">
            <summary>
            Get all starting <paramref name="startingPosition"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroupDao.Delete(Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroup)">
            <summary>
             Deletes only the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroup"/>.
             Does not delete the <see cref="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroupDao.DeleteAll">
            <summary>
            Deletes all.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroupFactory">
            <summary>
            Represents the factory for bottle deposit group.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroupFactory.Create(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit})">
            <summary>
            </summary>
            <param name="group"></param>
            <param name="businessUnits"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroupLocator">
            <summary>
             Represents how to Locate the Bottle Depost Group <see cref="T:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroup"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.BottleDeposit.IBottleDepositGroupLocator.GetBottleDepositGroups(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            </summary>
            <param name="businessUnit"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.ForcedExchangeCalculationResult">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.ForcedExchangeCalculationResult.IsManagerOverridable">
            <summary>
             Gets or sets a boolean value indicating that the manager can  not be overridden.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.ForcedExchangeCalculationResult.ThresholdMinAmount">
            <summary>
             Gets or sets the defined min amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.ForcedExchangeCalculationResult.Items">
            <summary>
             Gets or sets the items that need to be exchanged.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.ForcedExchangeCalculationResult.AmountToExchange">
            <summary>
             Gets or sets the amount to exchange.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.ForcedExchangeCalculationResultItemData">
            <summary>
             Represents the ForcedExchangeCalculationResult ItemData.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.ForcedExchangeCalculationResultItemData.Id">
            <summary>
             Gets or sets the Item's ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.ForcedExchangeCalculationResultItemData.Quantity">
            <summary>
             Gets or sets the returned quantity.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.ForcedExchangeCalculationResultItemData.Amount">
            <summary>
             Gets or sets the amount of returned items with the same ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.ForcedExchangeCalculationResultItemData.IsManagerOverrideble">
            <summary>
             Gets or sets the boolean value indicating the Item that can be Overridden by the manager.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.ForcedExchangeCalculationResultItemData.Sequence">
            <summary>
             Gets or sets the line sequence ID.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.IForcedExchangeCalculator">
            <summary>
             Reresents the calculated totals for a forced exchange. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.IForcedExchangeCalculator.Calculate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
             Calculate the amounts needed to be exchanged.
            </summary>
             <returns>The complate force exchange information.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.ForceExchange.IForcedExchangeCalculator.CalculateAmount(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
             Calculate the amount needed to be purchased.
            </summary>
             <returns>The amount need to be purchased.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IApprovalData">
            <summary>
             Represents the data required for approval.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IApprovalData.Roles">
            <summary>
             Gets the roles that can be approved.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IApprovalData.Message">
            <summary>
             Gets the message that are displayed on approval.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IDisposalMethod">
            <summary>
            Represents the Alert Group.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IDisposalMethod.Id">
            <summary>
            Gets the Disposal Method that is identified. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IDisposalMethod.Descriptions">
            <summary>
            Gets the DisposalMethod's description in different languages.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IDisposalMethodFactory">
            <summary>
             Represents the interface used to create a disposal method.
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IDisposalMethodFactory.Create(System.String,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Globalization.LocalizedDescription})">
            <summary>
             The method used to create a disposal method.
            </summary>
            <param name="id"></param>
            <param name="localizedDescriptions"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IPriceCalculationStrategy">
             <summary>
             A strategy for calculating the return price. During the product return process,
             this strategy will be used to calculate the return price of the product to be
             retuned to the customer.
             </summary>
             <example> 
             <code lang="cs" description="Calculating return price of a product during Transaction Base Return">
             <![CDATA[
             if (isItemWithDiscount)
             {
                 Money priceToReturn = _priceCalculationStrategy.CalculatePrice(saleLineLogToReturn, null, null, null);
                 var returnPriceModifier = new PriceModifierInfo(PriceModifierAction.Price, priceToReturn)
                                             {
                                                 ReasonCode = PriceOverrideReasonCode,
                                                 MethodCode = PriceOverrideMethodCode
                                             };
            }]]>
             </code> 
             </example>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IPriceCalculationStrategy.CalculatePrice(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity,System.Decimal,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Calculates the return price of a product based on the price which was paid
            and the quantity to be returned and the quantity which was already returned during
            the current return transaction.
            The calculated return price is used to create a single return line of the product.
            </summary>
            <param name="purchasedLineLog">The transaction log line in the TLog, documenting
                the purchase of the product.</param>
            <param name="returnQuantity">The quantity of the product to be returned.</param>
            <param name="alreadyReturnedQuantity">The quantity of the product that was already returned in the current return transaction.</param>
            <param name="currentReturnCustomerOrder">The return transaction's customer order.</param>
            <returns>The return price of the product.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReasonAssociations">
            <summary>
             Use this interface to access the returns <see cref="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReason">IReason</see> and the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IDisposalMethod">IDisposalMethod</see>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IRetailTransactionFiltersFactory">
            <summary>
            Represents the interface responsible for the creation of <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLogSaleLineFilter">ITransactionLogSaleLineFilter</see>s used in return logic.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IRetailTransactionFiltersFactory.CreateSpecialTreatmentRequiredLinesFilter(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Creates an instance of the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLogSaleLineFilter">ITransactionLogSaleLineFilter</see> 
            that is responsible for filtering the lines that were not returned 
            in the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>'s original transaction.
            These lines are valid for return, but require special treatment 
            (for example: lines which contain prepaid product).
            </summary>
            <remarks>
            According to current business, the term "special treatment" here refers to online items in a return-all transaction
            that have not yet been returned or whose was not rejected by the responsible 3rd party provider.
            </remarks>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/> containing <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"> original transaction</see>.</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLogSaleLineFilter">ITransactionLogSaleLineFilter</see> that can perform the relevant filtering.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IRetailTransactionFiltersFactory.CreateFailedToReturnLinesFilter(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Creates an instance of the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLogSaleLineFilter">ITransactionLogSaleLineFilter</see> 
            responsible to filter the lines from the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>'s original transaction
            that failed to be returned in a specified <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>. 
            </summary>
            <remarks>
            According to current business, the term "failed" here refers to online items whose return was declined by the responsible 3rd party provider.
            </remarks>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/> containing the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"> original transaction</see>.</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLogSaleLineFilter">ITransactionLogSaleLineFilter</see> that can perform the relevant filtering.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IRetailTransactionFiltersFactory.CreateAvailableForReturnLinesFilter(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Creates an instance of the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLogSaleLineFilter">ITransactionLogSaleLineFilter</see> 
            responsible to filter the lines from the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>'s original transaction
            that is returned.
            </summary>
            <remarks>
            In practice this filter filters out lines that cannot be returned, such as voided or return lines.
            </remarks>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/> containing <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"> original transaction</see>.</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLogSaleLineFilter">ITransactionLogSaleLineFilter</see> that can perform the relevant filtering.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IRetailTransactionFiltersFactory.CreateAutomaticallyReturnableLinesFilter(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Creates an instance of a <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLogSaleLineFilter">ITransactionLogSaleLineFilter</see> that is
            responsible for filtering those lines in <paramref name="customerOrder"/>'s linked original transaction that can be 
            returned automatically (i.e., without user intervention) via a return-all transaction.
            </summary>
            <remarks>
            In practice this filter filters out lines that cannot be returned, such as voided or return lines, 
            using the business defined by the filter provided by <see cref="M:Retalix.StoreServices.Model.Selling.Returns.IRetailTransactionFiltersFactory.CreateAvailableForReturnLinesFilter(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)"/>, and afterwards also filters out 
            lines that must be returned manually by a user, such as electronic and online items.
            </remarks>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/> containing <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"> original transaction</see>.</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ITransactionLogSaleLineFilter">ITransactionLogSaleLineFilter</see> that can perform the relevant filtering.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReturnContext">
            <summary>
            Encapsulates the core data required for the processing of returns.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.CurrentCustomerOrder">
            <summary>
            Gets the relevant <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder.</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.ReturnInformationForCustomerOrder">
            <summary>
             Gets the return information for the current customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.OriginalTransactionLog">
            <summary>
            Gets the return of the original <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> in which the item being returned was purchased, 
            or null when no original retail-transaction-log is relevant or found for the current return.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.Product">
            <summary>
            Gets the product being returned.
            Optional value. Exists only when <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.ProductReturnInfo">IReturnContext.ProductReturnInfo</see> is specified.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.LinkedProducts">
            <summary>
            Gets enumeration of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> instances, 
            specified by <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.ProductReturnInfo">IReturnContext.ProductReturnInfo.LinkedProducts</see>.
            Optional value. Exists only when <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.ProductReturnInfo">IReturnContext.ProductReturnInfo</see> is specified.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.Department">
            <summary>
            Gets the department being returned.
            Optional value. Exists only when <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.ProductReturnInfo">IReturnContext.ProductReturnInfo</see> is specified.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.Location">
            <summary>
            Gets the location of the item being returned.
            Optional value. Exists only when <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.ProductReturnInfo">IReturnContext.ProductReturnInfo</see> is specified.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.InputData">
            <summary>
            Gets any input data received from the client in response to return-rule demands.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.ProductReturnInfo">
            <summary>
             Gets the information used to execute the return action. 
             Optional value. Specified only if the rule enforcing is executed while return product. 
             Contains null when the rule is enforced on customer order finish.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.PendingReturnLines">
            <summary>
            Gets the return lines that are going to be added to the current customer order as result of return action.
            Optional value. Exists only when <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.ProductReturnInfo">IReturnContext.ProductReturnInfo</see> is specified.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.ReturnPolicy">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy"/> associated with the current return context.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.ValidLines">
            <summary>
            Gets the lines which can be used as return lines
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnContext.MarkLineAsInvalid(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog)">
            <summary>
            Removes the line from the valid lines list
            </summary>
            <param name="line">The line to be removed</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo">
            <summary>
             Represents return information in the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            </summary>
             <example>
             <code lang="cs" description="This example shows how to retrieve return info from customer order.">
             <![CDATA[
             public class ReturnCustomerOrderInfoParser
             {
                 private readonly IStoreApplication _storeApplication;
             
                 public ReturnCustomerOrderInfoParser(IStoreApplication storeApplication)
                 {
                     _storeApplication = storeApplication;
                 }
             
                 public void Parse(ICustomerOrder customerOrder)
                 {
                     var returnCustomerOrderInfoProvider = _storeApplication.Resolver.Resolve<IReturnCustomerOrderInfoProvider>();
                     
                     var returnCustomerOrderInfo = returnCustomerOrderInfoProvider.Fetch(customerOrder);
                     
                     //TODO: Do the parsing logic
                 }
             }]]>
             </code>
              </example>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.ReturnType">
            <summary>
            Gets or sets if return is based on the transaction and specifies the return type.
            When null, means Not based on transaction return (NRR).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.OriginalTransactionLog">
            <summary>
             Gets the original <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">IRetailTransactionLog</see> that contains the purchased products.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.LinkedReturnTransactionLogs">
            <summary>
            Gets the return <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">IRetailTransactionLog</see> which are linked to the Original Transaction Log.
            Theses are the transaction logs of the return transactions which accrued previously based on the original transaction.
            </summary>
            <value>
            The linked return transaction logs.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.CustomerDetails">
            <summary>
            Gets the customer's details supplied for the relevant <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.ApprovalHistory">
            <summary>
            Gets the manager approvals received for the relevant <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.ReasonId">
            <summary>
            Gets the reason ID that was chosen by the client for the relevant <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.UpdateCustomerDetails(Retalix.StoreServices.Model.Selling.Returns.CustomerDetails,Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy)">
            <summary>
            Updates the <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.CustomerDetails"/>.
            </summary>
            <param name="customerDetails">The <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.CustomerDetails"/> to update.</param>
            <param name="returnPolicy">Defines the required <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.CustomerDetails"/>.</param>
            <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InsufficientCustomerDetailsException">Specified invalid customer details.</exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.UpdateCustomerDetailsWithoutValidation(Retalix.StoreServices.Model.Selling.Returns.CustomerDetails)">
            <summary>
            Updates the <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.CustomerDetails"/>.
            </summary>
            <param name="customerDetails">The <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.CustomerDetails"/> to update.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.UpdateReason(System.String,Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy)">
            <summary>
            Updates the <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.ReasonId"/>.
            </summary>
            <param name="reasonId">The reason ID to update with.</param>
            <param name="returnPolicy">The <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see> that defines valid <paramref name="reasonId"/> values.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.ExchangeWithOverrideRequiredLines">
            <summary>
            Gets or sets lines which require manager approval that allows for an exchange.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.ThresholdState">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdState">IThresholdState</see> for relevant <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo.InputData">
            <summary>
             Gets or sets <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnInputData">IReturnInputData</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfoProvider">
            <summary>
            Represents the interface that provides <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo">IReturnCustomerOrderInfo</see> based on returned <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfoProvider.Fetch(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo">IReturnCustomerOrderInfo</see> of current <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>
            </summary>
            <param name="customerOrder"><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> to serach for <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo">IReturnState</see></param>
            <returns><see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo">IReturnCustomerOrderInfo</see> of given <param name="customerOrder"></param></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfoProvider.Update(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo)">
            <summary>
             Updates <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo">IReturnCustomerOrderInfo</see> instance for specified <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/>.
            </summary>
             <param name="customerOrder">Customer order to update.</param>
             <param name="returnCustomerOrderInfo">Return information to update.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReturnEngine">
            <summary>
             Encapsulates a return logic of the product.
             As default implementation, enforces <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see>.
             <para>
             The full return action including adding of lines into transaction can be done using,
             <see cref="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.Return(Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo)">ICustomerOrder.Return</see> or
             <see cref="M:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder.ReturnAllProducts">ICustomerOrder.ReturnAllProducts</see>.
             </para>
            </summary>
             <example>
             <code lang="cs" description="This example shows how to obtain a return flow enforcer object and how to use it.">
             <![CDATA[
             public class ReturnSomeProduct
             {
                 private readonly IStoreApplication _storeApplication;
             
                 public ReturnSomeProduct(IStoreApplication storeApplication)
                 {
                     _storeApplication = storeApplication;
                 }
             
                 public IEnumerable<IReturnOrderLine> PerformProductReturn(ProductReturnInfo productReturnInfo, ICustomerOrder customerOrder)
                 {
                     var returnEngine = _storeApplication.Resolver.Resolve<IReturnEngine>();
                     
                     var lines = returnEngine.ReturnProduct(productReturnInfo, customerOrder);
                     
                     return lines;
                 }
             }]]>
             </code>
             </example>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnEngine.EnforceReturnPolicy(Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Executes a return action in context of provided customer order.
            Determines the appropriate return policy and enforces it with the returned product information.
            </summary>
            <param name="productReturnInfo">The product information for return.</param>
            <param name="customerOrder">The context of the return action.</param>
            <returns>Information regarding the return policy decision.</returns>
            <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.DenyReturnedItemException">Product cannot be returned.</exception>
            <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InputRequiredException">
            Some predefined required input is not specified in <see cref="P:Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo.ReturnInputData"/>.
            </exception>
            <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ManagerApprovalRequiredException">
            Manager approval is required in order to satisfy the return policy.
            </exception>
            <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyNotFoundException">
            Return policy for <paramref name="customerOrder"/> was not found.
            </exception>
            <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnQuantityGreaterThanPurchasedException">
            The quantity specified in <paramref name="productReturnInfo"/>
            is greater than the quantity of that product left for return in the original transaction.
            </exception>
            <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnWeightGreaterThanPurchasedException">
            The units specified in <paramref name="productReturnInfo"/>
            are greater than units of that product left for return in the original transaction.
            </exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnEngine.CalculateProductReturnPrice(Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Calculates the price of a single unit of the returning product. The calculation is according to the selling quantity.
            When returning more than 1 quantity of the product, calculation will return the price of a single unit of the product.
            </summary>
            <param name="customerOrder">The customer order.</param>
            <param name="productReturnInfo">Information of the returning product.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnEngine.Return(Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Return the product specified by <see cref="T:Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo"/> and return the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">return order lines</see>
            </summary>
            <param name="productReturnInfo"></param>
            <param name="customerOrder"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">
            <summary>
            Represents an interface used for return policies that enforces return roles for refunding an item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.Id">
            <summary>
            Gets the Policy external ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.State">
            <summary>
             Gets or sets the state the policy will be applied on.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.Name">
            <summary>
            Gets or Sets the name of the policy.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.StartDateTime">
            <summary>
            Gets or sets the time the policy will be active.
            </summary>
            <returns>
            and instance of <cref>NominalDateTime</cref>
            </returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.EndDateTime">
            <summary>
             Gets or sets the time the policy will stop being active.
            </summary>
             <returns>
             an instance of <cref>NominalDateTime</cref> that represents the time the policy will stop being active, or null if none was found
             </returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.IsSubmitted">
            <summary>
             Gets a a Boolean value indicating the policy has been submitted.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.PriceVerificationRequired">
            <summary>
            Gets a Boolean value indicating whether the return policy for the current transaction requires clients
            to verify default prices for items being returned.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.ReceiptLookupPeriod">
            <summary>
            Gets or sets the number of days allowed for searching for transactions the policy was applied on.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.SetPriceVerficationRequired(System.Nullable{System.Boolean})">
            <summary>
            Assigns the correct price-verification-required value based on the requested value (if any)
            and the policy's state.
            </summary>
            <param name="priceVerificationRequired">
            The requested price-verification-required value or null to let the policy determine the correct default value based on the state.
            </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.Submit">
            <summary>
             Submits the return policy and locks it to prevent any data being written.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.BusinessUnits">
            <summary>
             Gets or sets the business units that the policy was applied on.
            </summary>
             <return>
             a collection of <cref>IBusinessUnit</cref>
             </return>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.IsBestForGuest">
            <summary>
            Gets or sets a value indicating in what order original purchase <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">IUnitLineLog</see> objects are chosen when a product is returned in a receipted return scenario.
            </summary>
            <remarks>
            By default, when true, original purchase <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">IUnitLineLog</see> objects are chosen according to the highest-valued <see cref="P:Retalix.StoreServices.Model.Price.IPricedQuantity.Price">Price</see>, in order to maximize the customer's return value.
            By default, when false, the order is reversed and the customer will get the lowest-valued <see cref="P:Retalix.StoreServices.Model.Price.IPricedQuantity.Price">Price</see> first.
            In practice, the final decision about which original <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IUnitLineLog">IUnitLineLog</see> objects to choose for a return is done by the registered 
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogPrioritizationStrategy">IUnitLineLogPrioritizationStrategy</see> instance.
            </remarks>
            <seealso cref="T:Retalix.StoreServices.Model.Selling.Returns.IUnitLineLogPrioritizationStrategy"/>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.ReturnRules">
            <summary>
             Gets the returns for the container of the policy return rules.
            </summary>
            <return>
            <cref>Gets the rules the policy executes.</cref>
             </return>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.Reimbursement">
            <summary>
             Gets the returns for the policy reimbursement. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.ReasonConfiguration">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnReasonConfiguration">IReturnReasonRule</see> object defining reason code prompting behavior for this policy.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.RequiredCustomerDetails">
            <summary>
            Gets or sets the customer details that are required in order to perform a return, or null if the customer details are not required.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.Enforce(Retalix.StoreServices.Model.Selling.Returns.IReturnContext)">
            <summary>
            Applies the return policy to the sellable instance defined in the current return-context, and based on the data in the return-context,
            </summary>
            <param name="returnContext"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.Save">
            <summary>
            Save return policy to data source.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.Delete">
            <summary>
            Delete return policy from data source.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.UpdateEndDateTime(Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Enforce checks before <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.EndDateTime">EndDateTime</see> is updated, via the 
            <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Validators.IReturnPolicyBeforeUpdateEndDateTimeValidator">IReturnPolicyBeforeUpdateEndDateTimeValidator</see> implementation, and 
            after value is updated via the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Validators.IReturnPolicyUpdateEndDateTimeValidator">IReturnPolicyUpdateEndDateTimeValidator</see> implementation,
            and saves the new value of <paramref name="endDateTime">endDateTime</paramref> for the policy.
            <param name="endDateTime">The new value for the policy's end date time, 
            or null to remove the policy's end date time, indicating that it will remain effective until replaced.</param>
            <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyEndDateTimeInThePastException">Occurs when an attempt is made to change the end date time 
            for a return policy is already expired, i.e., it's end-date-time has already past.</exception>
            <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.InvalidReturnPolicyEndDateTimeException">Occurs when <paramref name="endDateTime"/> is invalid.</exception>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.SuggestRefundTenders(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Tender.ISellableTenderLocator,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
             <summary>
             Returns the suggested refund amount for the return amount of the current transaction.
             </summary>
            <param name="refundCustomerOrder">the current return transaction</param>
            <param name="sellableTenderLocator">the sellable tender locator</param>
            <param name="businessUnit">the business unit the tenders are taken from</param>
            <param name="retailSegment">the retail segment the tenders are taken from</param>
             <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.NonNegativeTransactionException">When the transaction has non-negative balance.</exception>.
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.EnforceThresholdRules(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderInfo,Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnInputData)">
            <summary>
            Enforces threshold rules configured for the policy.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy.EnforceThresholdRules(Retalix.StoreServices.Model.Selling.Returns.IReturnContext)">
            <summary>
            Enforces threshold rules configured for the policy.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyDao">
            <summary>
            Represents the DAO for the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyDao.GetById(System.String)">
            <summary>
            Gets <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy"/> by ID
            </summary>
            <param name="id">Policy id</param>
            <returns>The matching instance</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyDao.CountSubmittedWithSameBusinessUnitAndStartDateTime(Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy)">
            <summary>
            Gets policies that have a specified start date (working with dates from specified date times).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyDao.Save(Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy)">
            <summary>
            Saves <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy"/>
            </summary>
            <param name="policy">The instance to save.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyDao.GetAllPolicy">
            <summary>
             Returns all the policy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyDao.GetSubmitted(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.String,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Gets the policy that has a submitted status for a supplied <paramref name="businessUnit"/>, <paramref name="state"/> and <paramref name="nominalDateTime"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyDao.GenerateNextReturnPolicyId">
            <summary>
             Generates the next ReturnPolicyId.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyDao.Delete(Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy)">
            <summary>
            Deletes the specified ReturnPolicyId.<see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy"/>
            </summary>
            <param name="policy"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyDao.Find``1(Retalix.StoreServices.Infrastructure.DataAccess.IQuery{Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy,Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy,``0})">
            <summary>
            Returns all <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see> instances that match <paramref name="query"/>.
            </summary>
            <param name="query">
            An <see cref="T:Retalix.StoreServices.Infrastructure.DataAccess.IQuery`3">IQuery{TEntity,TReturnType,TRole}</see> instance
            that defines how to retrieve and filter <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see> entities.
            </param>
            <returns>All <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see> instances that match <paramref name="query"/>.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyFactory">
            <summary>
            Represents the factory for a return policy definition.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyFactory.Create(System.String,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Creates <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy"/>.
            </summary>
            <param name="name">Policy name</param>
            <param name="start">The nominal time policy became active</param>
            <returns>New <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy"/> instance with generated id.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyLocator">
            <summary>
             Encapsulates the logic of locating the appropriate <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see>
             that is associated with a given context, e.g. a return transaction.
            </summary>
             <example>
             <code lang="cs" description ="This example shows how to locate a return policy for current customer order.">
             <![CDATA[    
             class ReturnPolicyLocateHelper
             {
                 public IReturnPolicy LocateByCustomerOrder(ICustomerOrder customerOrder, IResolver resolver)
                 {
                     IReturnPolicyLocator returnPolicyLocator = resolver.Resolve<IReturnPolicyLocator>();
                     var returnPolicy = returnPolicyLocator.FindAssociatedPolicy(customerOrder);
                     return returnPolicy;
                 }
             }
            ]]>
             </code>
             </example>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyLocator.FindAssociatedPolicy(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
             Finds the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see> associated with an
             <see name="ICustomerOrder">ICustomerOrder</see> object.
            </summary>
             <param name="customerOrder">The order for which an associated policy should be retrieved.</param>
             <returns>The return policy associated with the provided customer order.</returns>
             <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyNotFoundException">
             No return policy found for <paramref name="customerOrder"/>.
             </exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyLocator.FindAssociatedPolicy(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
             Finds the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see> associated with an
             <see name="IRetailTransaction">IRetailTransaction</see> object.
            </summary>
             <param name="retailTransaction">
             The current transaction, for which an associated policy should be retrieved.
             </param>
             <returns>The return policy associated with the provided retail transaction.</returns>
             <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyNotFoundException">
             No return policy found for <paramref name="retailTransaction"/>.
             </exception>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicyLocator.FindAssociatedPolicy(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.String,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
             Finds the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see> associated with
             an <see name="IBusinessUnit">IBusinessUnit</see> object, filtered by the
             policy's state and the policy's activity period.
            </summary>
             <param name="businessUnit">The business unit for which an associated policy should be retrieved.</param>
             <param name="policyState">
             Filters policies by their state. Valid states are defined by the
             <see cref="T:Retalix.StoreServices.Model.Selling.Returns.ReturnType">ReturnType</see> enum.
             </param>
             <param name="nominalDateTime">Filters policies by their active period.</param>
             <returns>The return policy associated with the provided filters.</returns>
             <exception cref="T:Retalix.StoreServices.Model.Selling.Returns.Exceptions.ReturnPolicyNotFoundException">
             No return policy matches the provided filters.
             </exception>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReturnReasonConfiguration">
            <summary>
            Encapsulates the data and logic relating to return reasons in a given parent <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see> object.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnReasonConfiguration.ReasonCodePromtingMethod">
            <summary>
            Gets the method by which reason codes are prompted for returns.
            </summary>
            <remarks>
            See <see cref="P:Retalix.StoreServices.Model.Selling.Returns.IReturnReasonConfiguration.ReasonCodePromtingMethod"/> enumeration.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnReasonConfiguration.ReasonAssociations">
            <summary>
            Gets a list of reason codes that are available to choose from for performing a return.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnReasonConfiguration.GetReturnReasonsForProduct(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Returns all possible return reasons configured for <paramref name="product"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnReasonConfiguration.GetReturnReasonsForCategory(Retalix.StoreServices.Model.Product.Hierarchy.IMerchandiseCategory)">
            <summary>
            Returns all possible return reasons configured for <paramref name="category"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnReasonConfiguration.SetReasonCodePromtingMethod(System.String)">
            <summary>
             Assigns the correct Reason Code for the Prompting method based on the requested value (if any)
             and the policy's state.
            </summary>
            <param name="reasonCodePromptingMethod">The method by which reason codes are prompted for returns</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnReasonConfiguration.AddOrUpdateReasonAssociations(Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReason,Retalix.StoreServices.Model.Selling.Returns.IDisposalMethod,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Add or update s reason associations to this configuration.
             When a return transaction begins, or an item is returned (depends on the configuration), a reason code will pop up (also depends on the configuration).
            </summary>
            <param name="reasonCode">the reason code that is added</param>
            <param name="disposalMethod">The intended destination for a product returned with this <paramref name="reasonCode"/>.</param>
            <param name="productIds">The IDs of the products for which <paramref name="reasonCode"/> is viable.</param>
            <param name="categoryIds">The IDs of the categories for which <paramref name="reasonCode"/> is viable.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnReasonConfiguration.GetDisposalMethod(System.String)">
            <summary>
             Returns the disposal method ID according to reason code ID.
            </summary>
            <param name="reasonCodeId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReturnRules">
            <summary>
             Represents the container for policy return rules.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnRules.ExpressionRules">
            <summary>
            Gets the Expression-based rules defined for a <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnRules.ThresholdRules">
            <summary>
            Gets the Threshold-based rules defined for a <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnRules.Add(Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule)">
            <summary>
            Adds a rule to the return rules.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnRules.CreateRule">
            <summary>
            OnCreate a new rule and add it to the policy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnRules.CreateStaticRule(System.String)">
            <summary>
            OnCreate a new static rule without adding it to the policy (like: switch tender).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnRules.RuleExists(System.Int32)">
            <summary>
            The boolean rule indicates if the rule exists in the Policy.
            </summary>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnRules.GetRuleById(System.Int32)">
            <summary>
            Get Rule By ID.
            </summary>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IReturnRules.Remove(Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule)">
            <summary>
            Remove the rule from the return policy.
            </summary>
            <param name="rule"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Refunds.IRefund">
            <summary>
             Represents the suggested results as how to reimburseme the client by tender and amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Refunds.IRefund.RefundTender">
            <summary>
            Gets the tender of the refund.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Refunds.IRefund.Amount">
            <summary>
            Gets the amount that is refunded in RefundTender.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Refunds.ITenderRefundCalculator.CalculateRefunds(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy)">
            <summary>
            return the suggested list of <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Refunds.IRefund">IRefund</see> according to  IReturnPolicy <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy"/> based on return Customer order <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Refunds.IRefundByAmount">
            <summary>
             Represents how to define reimbursement on return transaction when there is no base transaction to refer and referring only to amount of transaction
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Refunds.IRefundByAmount.RefundTender">
            <summary>
            the tender to reimburse the customer on refund
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Refunds.IRefundByAmount.UpToAmount">
            <summary>
            maximum amount for refund
            null == infinity 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Refunds.IRefundByPayment">
            <summary>
             Represents the how to define reimbursement on return transaction depend on payment tender from base transaction   
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Refunds.IRefundByPayment.Priority">
            <summary>
            Priority between tenders in case of several tender is paid in the same transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Refunds.IRefundByPayment.PaidTender">
            <summary>
            paid tender in the origenal transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Refunds.IRefundByPayment.RefundByAmounts">
            <summary>
            list of reimbursed tender definnition for paid tender
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Refunds.IRefundByPayment.CreateRefundByAmount">
            <summary>
            create Refund By Amount Definition and add to RefundByPayment
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Refunds.IReimbursement">
            <summary>
            Represents reimbursement information. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Refunds.IReimbursement.RefundByPayments">
            <summary>
            Gets or sets the reimbursement amount defined by a paid tender in the original transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Refunds.IReimbursement.RefundByAmounts">
            <summary>
            Gets or sets the reimbursement amount defined by the amount of the return transaction.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Refunds.IReimbursement.CreateRefundByPayment">
            <summary>
            Creates a reimbursement for a paid tender.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Refunds.IReimbursement.CreateRefundByAmount">
            <summary>
            Creates reimbursement amount of the original transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Refunds.IReimbursement.Roles">
            <summary>
             Gets or sets the roles which can be approved.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.ConditionProperties">
            <summary>
            Supported properties for condition of return policy rule.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IAllowAction">
            <summary>
            Represents a markup interface, used to identify <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction">IRuleAction</see> for the required action.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.ICredentialsApprover">
            <summary>
            Represents the manager approval credentials.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.ICredentialsApprover.Approve(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole},Retalix.StoreServices.Model.Selling.Returns.Rules.IManagerCredentials,Retalix.StoreServices.Model.Infrastructure.Message.IMessage)">
            <summary>
            Performs an approval for action roles using the provided manager credentials.
            </summary>
            <param name="actionRoles">collection of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole">IApplicationRole</see> for current <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.ICredentialsApprover">ICredentialsApprover</see>.</param>
            <param name="managerCredentials"><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IManagerCredentials">Manager Credentials</see> of currently available manager.</param>
            <param name="errorMessageTitle">The message to include in the error in case approve fails</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.ICredentialsApprover.GenerateManagerApprovalException(System.Int32,Retalix.StoreServices.Model.Infrastructure.Message.IMessage)">
            <summary>
            Throws the manager approval required exception, based on the approved actions amount.
            </summary>
            <param name="approvedActionsCount">Number of approved actions.</param>
            <param name="message">Message to display.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IDenyAction">
            <summary>
            Represents the markup interface, and is used to identify <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction">IRuleAction</see> used to Deny action.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IForcedExchangeAction">
            <summary>
             Represents how the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction">IRuleAction</see> identifies the forced exchange action.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IForcedExchangeAction.AppliedOn">
            <summary>
            Gets the the scope of the action.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IManagerApprovalAction">
            <summary>
            Represents how the the  <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction">IRuleAction</see> identifies manager approval action.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IManagerApprovalAction.Scope">
            <summary>
            Gets or sets the scope of the provided approval, i.e., whether it pertains only to the request or to the entire transaction.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IManagerApprovalAction.ApproveCredentials(Retalix.StoreServices.Model.Infrastructure.Message.IExpressionContext)">
            <summary>
            Creates manager approval credentials. 
            </summary>
            <param name="context"><see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IExpressionContext">IExpressionContext</see> to create approval credentials</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRequiresApproval">
            <summary>
             Describes the required roles for manager approval.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IRequiresApproval.Roles">
            <summary>
            Gets or sets a list of the possible <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole">user roles</see> for authorizing this action.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IRequiresApproval.Message">
            <summary>
             Gets or sets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessage">Message</see> that is displayed on the client.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule">
            <summary>
             Return Rule define the <see cref="T:Retalix.StoreServices.Model.Selling.BRM.Condition.ICondition">condition</see> and the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction">action</see> in case the condition is evaluated and the rule should be applied
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule.Id">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule">IReturnRule</see> external ID managed by the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">IReturnPolicy</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule.Name">
            <summary>
            Gets or sets the return rule name. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule.Sequence">
            <summary>
            Gets or sets the return rule sequence order
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule.Condition">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Selling.BRM.Condition.ICondition">condition</see> that determines whether or not this rule will be enforced.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule.Action">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction">action</see> that is executed when the rule is enforced, and the (<see cref="T:Retalix.StoreServices.Model.Selling.BRM.Condition.ICondition">Condition</see> is returned as true).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule.Enforce(Retalix.StoreServices.Model.Selling.Returns.IReturnContext)">
            <summary>
            Enforces the rule with a boolean value that indicates the data for the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo">Product return info </see> and <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            </summary>
            <param name="returnContext">The context to be used.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction">
            <summary>
            Encapsulates an action defined for an <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction.Rule">
            <summary>
            Gets or sets the parent rule to which this action belongs.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction.ActionStrategy">
            <summary>
            Gerts or sets the action type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction.Message">
            <summary>
            Gets or sets the message linked to this action.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction.CreateExecuteStrategy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleActionFactory">
            <summary>
             Represents the factory responsible for the creation of the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction">rule action</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleActionFactory.CreateDenyAction(Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction,System.String,System.String)">
            <summary>
            Creates the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IDenyAction">deny action</see> by actionType.
            </summary>
            <param name="existingAction"><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction">existing action</see></param>
            <param name="executionStrategyName">rule execution strategy name</param>
            <param name="messageName">message name</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IDenyAction">deny action</see> based on given parameters</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleActionFactory.CreateManagerApprovalAction(Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction,System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creates the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IManagerApprovalAction">Manager approval action</see> by actionType
            </summary>
            <param name="existingAction"><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction">existing action</see></param>
            <param name="executionStrategyName">rule execution strategy name</param>
            <param name="messageName">message name</param>
            <param name="authorizedRoleNames">Role names that are authorized to approve  <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IManagerApprovalAction">Manager approval action</see></param>
            <param name="scope">action scope</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IManagerApprovalAction">manager approval action</see> based on given parameters</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleActionFactory.CreateAllowAction(Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction,System.String)">
            <summary>
             Creates the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IAllowAction">allowed action</see> according the actionType.
            </summary>
             <param name="existingAction"><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction">existing action</see></param>
             <param name="executionStrategyName">rule execution strategy name</param>
             <returns><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IAllowAction">allow action</see> based on given parameters</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleActionFactory.CreateForcedExchangeAction(Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction,System.String,System.String)">
            <summary>
            Creates the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IForcedExchangeAction">forced exchange override action</see>.
            </summary>
            <param name="existingAction"><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction">existing action</see></param>
            <param name="executionStrategyName">rule execution strategy name</param>
            <param name="appliedOn">defines cope this rule applied on</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IForcedExchangeAction">forced exchange action</see> based on given parameters</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleActionFactory.CreateForcedExchangeOverrideAction(Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction,System.String,System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
             Creates the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IForcedExchangeAction">forced exchange override action</see>.
            </summary>
             <param name="existingAction"><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleAction">existing action</see></param>
             <param name="executionStrategyName">rule execution strategy name</param>
             <param name="appliedOn">defines cope this rule applied on</param>
             <param name="messageName">message name</param>
             <param name="authorizedRoleNames">Role names that are authorized to approve  <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IManagerApprovalAction">Manager approval action</see></param>
             <returns><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IForcedExchangeAction">forced exchange action</see> based on given parameters</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleExecuteStrategy">
            <summary>
            Represents the rule execution strategy - to decouple between data and the action implementation by core / extension.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IRuleExecuteStrategy.Execute(Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule,Retalix.StoreServices.Model.Infrastructure.Message.IExpressionContext)">
            <summary>
            Executes the action.
            </summary>
            <param name="context"><see cref="T:Retalix.StoreServices.Model.Infrastructure.Message.IExpressionContext">request context</see></param>
            <param name="rule"><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule"> return rule</see></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdCondition">
            <summary>
             Represents how the <see cref="T:Retalix.StoreServices.Model.Selling.BRM.Condition.ICondition">ICondition</see> is extended with the addition of threshold conditions to data members.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdCondition.MinValue">
            <summary>
             Gets or sets a minimum threshold value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdCondition.MaxValue">
            <summary>
             Gets or sets the maximum threshold value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdCondition.IsOffline">
            <summary>
             Gets or sets the boolean value that indicates if the original transaction can not be reached. 
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdRuleFactory">
            <summary>
             Represents the factory responsible for the creation and validation of the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdCondition">IThresholdCondition.</see> 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdRuleFactory.CreateTresholdCondition(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean})">
            <summary>
             Creates the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdCondition">IThresholdCondition</see> based on given parameters
            </summary>
            <param name="minValue"><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdCondition">IThresholdCondition</see>'s minimal value</param>
            <param name="maxValue"><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdCondition">IThresholdCondition</see>'s maximal value</param>
            <param name="isOffline">if <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdCondition">IThresholdCondition</see>'s original transaction can be reached</param>
            <returns>newly created <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdCondition">IThresholdCondition</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdRuleFactory.IsTresholdConditionValid(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             Validates values for the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdCondition">IThresholdCondition</see> creation.
            </summary>
            <param name="minValue">minimal value</param>
            <param name="maxValue">maximal value</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdState">
            <summary>
            Represents how the threshold rules data are managed for a  returned <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order.</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdState.HasRuleChanged">
            <summary>
            Gets a boolean value that indicates if the current threshold rule has changed during the current request. True in the case of rule changed, otherwise it is false.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdState.ClearThresholdChangedFlag">
            <summary>
            Makes HasRuleChanged return false;
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdState.ClearCurrentRule">
            <summary>
            Removes the current threshold rule applied on the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer order.</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdState.GetCurrentThresholdRule(Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy)">
            <summary>
            Represents the currently applied <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule">rule</see> if it exists.
            </summary>
            <param name="returnPolicyLocator"><see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">return policy</see> currently applied</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule">Threshold return rule</see> based on given <see cref="T:Retalix.StoreServices.Model.Selling.Returns.IReturnPolicy">return policy</see> </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdState.UpdateCurrentRule(Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnRule)">
            <summary>
            Saves the applied rules as current if possible.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IThresholdState.SetCurrentActionApproved">
            <summary>
            Clears the current applied action and moves approved to history.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.ManagerApprovalDataForItemForceExchange">
            <summary>
            Represents how the data is handled according to an exchange with an override attached to a line sequence ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.ManagerApprovalDataForItemForceExchange.ActionRoles">
            <summary>
            Gets the roles that required for approve.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.ManagerApprovalDataForItemForceExchange.LineSequenceNumber">
            <summary>
            Gets line sequence number of the relevant line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.ManagerApprovalDataForItemForceExchange.Message">
            <summary>
            Gets the message that is configured to be displayed.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IApprovalHistory">
            <summary>
            Represents the history of all <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnApproval">manager-approvals</see> received in the current ICustomerOrder for returns.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IApprovalHistory.ReturnApprovals">
            <summary>
            Gets the collection of all <see cref="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnApproval">manager-approvals</see> received in the current ICustomerOrder for returns.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IManagerCredentials">
            <summary>
             Represents the manager credentials sent as the approval response from the client.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IManagerCredentials.Username">
            <summary>
             Gets the approving manager's user name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IManagerCredentials.Password">
            <summary>
            Gets the approving manager's password.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnApproval">
            <summary>
            Represents a single item that was approved by a manager.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnApproval.RuleId">
            <summary>
            Gets the approved rule ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnApproval.ItemId">
            <summary>
            Gets the item ID that was approved.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnApproval.Approver">
            <summary>
            Gets the user that approved the rule.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnInputData">
            <summary>
             Represents the information that was received from the client for return.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnInputData.ManagerCredentials">
            <summary>
             Gets the credentials of the manager who approved the return action.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.Rules.IReturnInputData.GetInput(System.String)">
            <summary>
            Returns a user-input value based on a user-input key, or an empty string if no input exists with the given input-key.
            </summary>
            <param name="inputKey">The key of the input to get.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderCreationInfo">
            <summary>
             Represents the information required for the customer orders that are used for returns. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderCreationInfo.RetailTransactionLink">
            <summary>
             Gets or sets a link to the original transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderCreationInfo.ReasonId">
            <summary>
            Gets or sets the ID of the reason used for starting the return transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderCreationInfo.CustomerDetails">
            <summary>
             Gets or sets customer details entered for starting the customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderCreationInfo.ReturnInputData">
            <summary>
             Gets or sets the input data that was entered for starting the customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnCustomerOrderCreationInfo.TransactionBarcode">
            <summary>
            Gets or sets barcode of the original transaction.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine">
            <summary>
             Represents a result of a return action in the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine.ReturnPolicyId">
            <summary>
             Gets the ID of the return policy, which allowed the return action, represented by the current line.
            </summary>
             <value>Id of return policy as it know in the system.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine.ReasonId">
            <summary>
             Gets the ID of the Reason, that describes the return action, represented by the current line.
            </summary>
             <value>ID of the reason as it known in the system.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine.ExchangeRequired">
            <summary>
             Gets or sets the indication if the current line is exchanged.
            </summary>
             <value>
             True - at least an amount of the current line should be purchased, in order to finish the return transaction.
             False -  no limitation on the exchange exists.
             </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine.OriginalPurchasedLine">
            <summary>
             Gets the reference to the line from the original retail transaction log.
             Current return line represents the result of a return action based on the original purchased line.
            </summary>
             <value>The key of the original transaction with indication of original line's sequence number.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.IReturnOrderLine.DisposalMethod">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo">
            <summary>
            Encapsulates the arguments required when returning a product within customer order.
            </summary>
            <remarks>Can be createde without product identifier, but only with ReturnInputData value.</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo.RetailTransactionLink">
            <summary>
             Gets or sets a Link to the original transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo.ReturnReason">
            <summary>
             Gets or sets the reason that was chosen for the return.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo.DisposalMethod">
            <summary>
             Gets or sets the disposal method that was chosen for the return reason.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo.ReturnInputData">
            <summary>
             Gets or sets the input data entered by client.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo.EntryMethod">
            <summary>
             TODO SDK
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo.EntryMode">
            <summary>
             TODO SDK
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo.LinkedPriceModifiers">
            <summary>
            Gets or sets price modification info for linked products.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.ProductReturnInfo.ExternalId">
            <summary>
            Gets or sets the authorization external id for the product.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.CustomerDetails">
            <summary>
            Represents the customer's details supplied by the client.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.CustomerDetails.FirstName">
             <summary>
            Gets or sets the customer's first name.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.CustomerDetails.LastName">
             <summary>
            Gets or sets the customer's last name.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.CustomerDetails.Address">
             <summary>
            Gets or sets the customer's address.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.CustomerDetails.City">
             <summary>
            Gets or sets the city in which the customer resides.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.CustomerDetails.Province">
             <summary>
            Gets or sets the province in which the customer resides.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.CustomerDetails.PostalCode">
             <summary>
            Gets or sets the customer's postal code.
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.IDisposalMethodDao">
            <summary>
            Represents the interface that handles all DisposalMethod objects DAO functionality.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IDisposalMethodDao.SaveOrUpdate``1(``0)">
             <summary>
            Saves / Updates an Object to the DB.
             </summary>
             <param name="obj">the Object to Save / Update</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IDisposalMethodDao.Get``1">
            <summary>
            Returns all objects from the DB of the type specified.
            </summary>
            <typeparam name="TModel">the type to search.</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IDisposalMethodDao.Delete``1(``0)">
            <summary>
            Deletes a model Object from the DB.
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="obj">object to delete.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IDisposalMethodDao.Get``1(System.Object)">
            <summary>
            Gets a Model from the DB with the given identifier.
            </summary>
            <typeparam name="TModel">the Model to get</typeparam>
            <param name="id">Identifier</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Returns.IDisposalMethodDao.IsExist``1(System.Object)">
             <summary>
            Gets a boolean value to check if a Model exists in the DB according to a given identifier.
             </summary>
             <typeparam name="TModel">the Model to look for</typeparam>
             <param name="id">the Identifier of the TModel.</param>
             <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.ReasonCodePromptingMethod">
            <summary>
            Represents the way the system notifies the user that they should provide a reason code.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Returns.ReasonCodePromptingMethod.None">
            <summary>
            A reason code is not required.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Returns.ReasonCodePromptingMethod.PerTransaction">
            <summary>
            The user will be required to enter the reason code at the beginning of a transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Returns.ReasonCodePromptingMethod.PerItem">
            <summary>
            The user will be required to enter the reason code every time they are asked to
            return an item.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.RequiredCustomerDetails">
            <summary>
            Represents the <see cref="T:Retalix.StoreServices.Model.Selling.Returns.CustomerDetails">customer details</see>  that should be specified for return customer orders.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.RequiredCustomerDetails.CustomerDetailsRequired">
            <summary>
            Gets or sets the need to capture customer details.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.RequiredCustomerDetails.FirstNameRequired">
            <summary>
             Gets or sets the customer's first name (mandatory).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.RequiredCustomerDetails.LastNameRequired">
            <summary>
             Gets or sets the customer's last name (mandatory).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.RequiredCustomerDetails.AddressRequired">
            <summary>
             Gets or sets the Customer's address (mandatory).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.RequiredCustomerDetails.CityRequired">
            <summary>
            Gets or sets the the city in whch the customer resides (mandatory).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.RequiredCustomerDetails.ProvinceRequired">
            <summary>
            Gets or sets the province in which the customer resides (mandatory).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Returns.RequiredCustomerDetails.PostalCodeRequired">
            <summary>
            Gets or sets the customer's Postal Code (mandatory).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Returns.ReturnType">
            <summary>
             Represents all possible return types.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Returns.ReturnType.None">
            <summary>
            Not set.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Returns.ReturnType.ReceiptedReturn">
            <summary>
             Regular transaction based return.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Returns.ReturnType.NoneReceiptedReturn">
            <summary>
             Non receipt return.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Returns.ReturnType.ReturnAll">
            <summary>
            All items in receipt return.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Returns.ReturnType.GiftReceiptedReturn">
            <summary>
            Gift receipt redemption.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Returns.ReturnType.BottleDepositReturn">
            <summary>
             Bottle Deposit return
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Scale.ISecurityScaleDataBuilder.Build(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Build securityScaleData Attributes
            </summary>
            <param name="orderLine"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Scale.ProductScaleInfo.ProductSaleInfo">
            <summary>
             <see cref="P:Retalix.StoreServices.Model.Selling.Scale.ProductScaleInfo.ProductSaleInfo">ProductSaleInfo</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitGroupMemberSorter.SortMembers(System.Collections.Generic.List{Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient},System.Collections.Generic.IDictionary{System.String,Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitIngredientLayout})">
            <summary>
            Sort kit members
            </summary>
            <param name="memberTypes"></param>
            <param name="ingredientLayoutByProductId"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitCalculator">
            <summary>
            Kit Calculator
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitCalculator.GetKitIngredients(Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell)">
            <summary>
            Gets all kit ingredients including ones with portion = 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitCalculator.GetKitIngredientsDefault(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Gets the default kit ingredients excluding ones with default portion = 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitCalculator.GetAllKitIngredients(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Gets All kit ingredients
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitCalculator.GetKitGroups(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Gets all the <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">groups</see> defined for <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> relevant for kit
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitCalculator.GetKitGroups(Retalix.StoreServices.Model.Product.IProduct[])">
            <summary>
            Gets all the <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">groups</see> defined for <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> relevant for kit
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitCalculator.IsKitGroup(Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup)">
            <summary>
            Check if <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">linkGroup</see> is kit group
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient">
            <summary>
            Represents a single ingredient product that takes part in kit sell.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.Id">
            <summary>
            Gets or Sets the unique id of the ingredient.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.ProductGroup">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup">Link Group</see> object in of the Sellkit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.Product">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> object in of the Sellkit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.Portion">
            <summary>
             Gets or Sets the portion of the ingredient.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.Excluded">
            <summary>
            Gets the indicator whether this Ingredient is excluded. 
            This means that the default portion of the Ingredient is GT 0 but the actual Portion is 0.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.Price">
            <summary>
            The Price of this Ingredient. 
            Use as an additional price to the original price of the main product of the kit.  
            It will be different from the Price in the Link in case of price override   
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.PayedPortion">
            <summary>
            The number of the portion to be payable
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.UpdatedDateTime">
            <summary>
            Gets the <see cref="T:System.DateTime">Date Time</see> which the Ingredient was updated.
            It can be the time it was added, Excluded or portion updated
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.GetIngredientLink">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILink">Link</see> of the Ingredient.
            The <see cref="T:Retalix.StoreServices.Model.Product.Associations.Links.ILink">Link</see> holds static data for the Ingredient.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.KitSellReferences">
            <summary>
            Get all <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell">kits</see> from the AdditionalKits under <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKits">kits</see> for this Ingredient
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.Prices">
            <summary>
            Get list of prices for all the portions. for the free portions it will be zero, 
            for the others it will be the price in the Link unless price override change this price.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.IsAvailable">
            <summary>
            Gets or Sets indication whether this ingredient is available.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.ChangeSinglePrice(System.Decimal,System.Decimal)">
            <summary>
            Modify price of single portion
            </summary>
            <param name="newPrice"></param>
            <param name="oldPrice"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.ChangePrice(System.Decimal)">
            <summary>
            Change the price of all the payed portions
            </summary>
            <param name="newPrice"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient.RemovePrice(System.Decimal)">
            <summary>
            Remove specific price of payed portion
            </summary>
            <param name="price"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell">
            <summary>
            Represents a collection of ingredient products and quantities that are priced and sold as a single product, 
            but which is exploded into  its constituent products  for the purposes of tracking
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.Id">
            <summary>
            Get the Id of the current kit
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.KitIngredients">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient">ingredients</see> order for current kit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.KitInstructions">
            <summary>
             Gets the KitInsructions order for current kit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.Product">
            <summary>
            Gets the  <see cref="T:Retalix.StoreServices.Model.Product.IProduct">product</see> this current kit
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.AddedDateTime">
            <summary>
            Gets the <see cref="T:System.DateTime">Date Time</see> which the kit was added on
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.Add(Retalix.StoreServices.Model.Product.Associations.Links.ILinkGroup,Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Add <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient">Ingredient</see> to the kit 
            </summary>
            <param name="linkGroup"></param>
            <param name="product"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.Reduce(Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient)">
            <summary>
            Reduce portion of <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient">kitIngredient</see> 
            </summary>
            <param name="kitIngredient"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.Reduce(Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient,System.Decimal)">
            <summary>
            Reduce portion of <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient">kitIngredient</see> 
            </summary>
            <param name="kitIngredient"></param>
            <param name="price">specific price of payed portion</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.Reduce(Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient,Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell)">
            <summary>
            Reduce portion of <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient">kitIngredient</see> which is <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell">kit</see> itself
            </summary>
            <param name="kitIngredient"></param>
            <param name="referencekitSell"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.Exclude(Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient)">
            <summary>
            Exclude <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient">kitIngredient</see>. Set its portion to 0
            </summary>
            <param name="kitIngredient"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.Include(Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient)">
            <summary>
            Include <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient">kitIngredient</see>. Set its portion to default
            </summary>
            <param name="kitIngredient"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.Update(Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.KitMemberPriceModifierInfo)">
            <summary>
            Update <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitIngredient">kitIngredient</see>
            </summary>
            <param name="kitIngredient"></param>
            <param name="priceModifier"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.ClearInstructions">
            <summary>
            Delete all Instructions of current kit. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSell.AddInstruction(System.String)">
            <summary>
            Add Instruction for current kit. 
            </summary>
            <param name="instruction"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSellFactory">
            <summary>
            Order Line Extension factory
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Kit.IKitSellFactory.CreateKitSell(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Create KitSell
            </summary>
            <param name="orderLine">The order line.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.IOnlineItemProviderConfiguration">
            <summary>
            This class represents the configuration of the external online item provider
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.IOnlineItemProviderConfiguration.Url">
            <summary>
            The URL of the online item provider
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.IOnlineItemProviderConfiguration.RetryInterval">
            <summary>
            The time interval between retries to re-send a failed request
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.IOnlineItemProviderConfiguration.NumberOfRetries">
            <summary>
            The number of retries to perform in order to re-send a failed request (in case of provider down)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.IOnlineItemProviderConfiguration.Timeout">
            <summary>
            Configuring the time to wait for a response from the provider
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.ProductItemIdentificationInfo.SequenceNumber">
            <summary>
             Sequence number of searched item, if any
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.ProductItemIdentificationInfo.ItemId">
            <summary>
             Id of searched item is any
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemVoidInfo">
            <summary>
            This class represents the data that will be sent to the client upon online item void business error
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemVoidInfo.ItemId">
            <summary>
            Item'd id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemVoidInfo.ReferenceNumber">
            <summary>
            Item's session id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemVoidInfo.AuthorizationCode">
            <summary>
            authorization code
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemVoidInfo.ProviderKey">
            <summary>
            Third-Party Provider key 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemVoidInfo.OrderLine">
            <summary>
            The item's order line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemVoidInfo.TargetModule">
            <summary>
            Target module 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemVoidInfo.ScanData">
            <summary>
            Scan data
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServicesAuthorizations">
            <summary>
            A collection of authorizations received from the OnlineServices, which are stored per Transaction.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServicesAuthorization">
            <summary>
            Authorization from the OnlineServices, which provides a cancellation token if the item is voided.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServicesAuthorization.CombinedReferenceNumber">
            <summary>
            A unique combination of the ProviderKey and ReferenceNumber received from the same provider to identify a transaction from the Provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServicesAuthorization.CancellationToken">
            <summary>
            The cancellation token used to void an OnlineServices operation.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServicesAuthorization.#ctor(System.String,Retalix.StoreServices.Model.Product.Activation.IProductActivationAuthorizationCancellation)">
            <summary>
            A constructor for the authorization entity.
            </summary>
            <param name="combinedReferenceNumber">A unique combination of the ProviderKey and ReferenceNumber received from the same provider to identify a transaction from the Provider.</param>
            <param name="cancellationToken">A cancellation token used to void an OnlineServices operation.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServicesAuthorization.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization helper
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.IOLSProfileDao">
            <summary>
            Represents an entity which responsible to persist <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile">OLSProfile</see> in the system.
            This entity can:
            <list type="bullet">
            <item>
            <description>Save an <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile">OLSProfile</see></description>
            </item>
            <item>
            <description>Delete an <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile">OLSProfile</see></description>
            </item>
            </list>
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.IOLSProfileDao.Save(Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile)">
            <summary>
             Saves a new <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile">OLSProfile</see>, or updates an existing <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile">OLSProfile</see>.
            </summary>
            <param name="olsProfile">The <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile">OLSProfile</see> that is saved or updated.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.IOLSProfileDao.Delete(Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile)">
            <summary>
             Deletes an existing <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile">OLSProfile</see>.
            </summary>
            <param name="olsProfile">The <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile">OLSProfile</see> that has been deleted.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.IOLSProfileDao.GetOLSProfile(System.String)">
            <summary>
            Gets an <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile">OLSProfile</see> by the Profile ID.
            </summary>
            <param name="profileId">The specific OnlineServices Profile ID.</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile">OLSProfile</see> with the profile ID.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.IOLSProfileDao.GetAllOLSProfiles">
            <summary>
             Returns all the <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile">OLSProfile</see>s defined in the system.
            </summary>
            <returns>All the <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile">OLSProfile</see>s defined in the system.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile">
            <summary>
            Represents an entity, which defines an operation in the store for which online authorization is required. 
            </summary>
            <remarks>
            <para>For example, gift card purchases, mobile phone plan, or phone card ticket purchases. 
            Authorization is received by the online services provider.
            </para>
            </remarks>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile.EntityName">
            <summary>
            Gets the name of the entity used by the DMS.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile.#ctor(System.String,System.String)">
            <summary>
            The constructor used to create a profile.
            </summary>
            <param name="id">The ID of the profile created. This must be unique</param>
            <param name="providerKey">The key that the OnlineServices system will use to authorize a request related to this profile.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile.Ik">
            <summary>
            The Internal Key for persistence.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile.Id">
            <summary>
            Gets or sets the Identification of the OLSProfile.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineServices.Maintenance.OLSProfile.ProviderKey">
            <summary>
            Gets or sets the key that the OnlineServices system uses to authorize a request related to this profile.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineGroupAuthorizationTrigger">
            <summary>
             Represents an entity, which indicates when online authorization is performed, for example, after the item is sold, after the transaction is totalled, or after the transaction is completed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineGroupAuthorizationTrigger.ItemSale">
            <summary>
             Indicates that online authorization is performed after the item is sold.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineGroupAuthorizationTrigger.Total">
            <summary>
             Indicates that online authorization is performed after the transaction is totalled.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineGroupAuthorizationTrigger.TransactionComplete">
            <summary>
             Indicates that online authorization is performed after the transaction is completed.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemExternalUniqueIdentifier">
            <summary>
            An enumeration of the different types used to identify the External Identifier (also known as the serial number)
            of the Online item.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemExternalUniqueIdentifier.SecondBarcode">
            <summary>
             The identifier is a combination of two barcodes. The second one is the External Identifier.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemExternalUniqueIdentifier.Card">
            <summary>
             The identifier is retrieved from the Magnetic Strip of a card.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemExternalUniqueIdentifier.InBarcode">
            <summary>
             The identifier is embedded in one barcode. The external identifier is extracted from the barcode based on the Data Pattern set up in the system.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Behavior.OnlineItem.OnlineItemExternalUniqueIdentifier.External">
            <summary>
            The identifier is defined for the Online item. This type is mainly used for e-vouchers and mobile / phone cards.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.Electronic.ElectronicProductSaleInfo">
            <summary>
             Decorator on a <see cref="P:Retalix.StoreServices.Model.Selling.Behavior.Electronic.ElectronicProductSaleInfo.ProductSaleInfo">ProductSaleInfo</see> 
             for an electronic product sale information.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Electronic.ElectronicProductSaleInfo.ProductSaleInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.Electronic.ElectronicProductSaleInfo.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Behavior.Electronic.ElectronicProductSaleInfo.Properties.SerialNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Electronic.ElectronicProductSaleInfo.SerialNumber">
            <summary>
             Gets or sets serial number of the electronic product.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Electronic.ElectronicProductSaleInfo.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo)">
            <summary>
             Initializes new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.Electronic.ElectronicProductSaleInfo">ElectronicProductSaleInfo</see>.
            </summary>
            <param name="productSaleInfo">General sale information.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.Mobile.MobileProductSaleInfo">
            <summary>
             Represents mobile info used in selling of a product.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Mobile.MobileProductSaleInfo.ProductSaleInfo">
            <summary>
             <see cref="P:Retalix.StoreServices.Model.Selling.Behavior.Mobile.MobileProductSaleInfo.ProductSaleInfo">ProductSaleInfo</see> the mobile information is relevant for.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.Mobile.MobileProductSaleInfo.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo)">
            <summary>
             Initializes new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.Mobile.MobileProductSaleInfo">MobileProductSaleInfo</see>.
            </summary>
            <param name="productSaleInfo">Sale information the mobile information is used for.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.Mobile.MobileProductSaleInfo.IMEI">
            <summary>
             Gets or sets International Mobile Equipment Identity.
            </summary>
             <value>
             Null - if not found.
             </value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.IBehaviorDaoExtension">
            <summary>
            Extends the core <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.IBehaviorDao">IBehaviorDao</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.IBehaviorDaoExtension.IsApplicable(Retalix.StoreServices.Model.Selling.Behavior.ISellingBehavior)">
            <summary>
            Determines whether dao extension is applicable for the specified behavior.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.IBehaviorDaoExtension.TruncateTableNames">
            <summary>
            Gets the table names to be truncated along with core tables during the DeleteAll method call on the <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.IBehaviorDao">IBehaviorDao</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.IBehaviorDaoExtension.Update(Retalix.StoreServices.Model.Selling.Behavior.ISellingBehavior,Retalix.StoreServices.Model.Selling.Behavior.ISellingBehavior)">
             <summary>
             Updates properties that extend the original <see cref="T:Retalix.StoreServices.Model.Selling.Behavior.ISellingBehavior">ISellingBehavior</see>.
             </summary>
            <remarks>
             Implementors should downcast both existing and @new, to specific types.
             </remarks>
             <param name="existing">The existing.</param>
             <param name="new">The new.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.ISellingBehaviourEventBroker`1">
            <summary>
            Implement this interface to route additional Domain Events to selling behaviours.
            The implementation should intercepts a dispatched event, locate the relevant order lines
            and dipatch the events to selling behaviours on these lines.
            The implementation must be registered in IOC for this interfac with the concrete event type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.IBehaviorDao">
            <summary>
            Interface IBehaviorDao
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.IBehaviorDao.GetBehaviors(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Gets the behaviors.
            </summary>
            <param name="product">The product.</param>
            <param name="businessUnit">The business unit.</param>
            <returns>ISellingBehavior.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.IBehaviorDao.GetBehavior(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup)">
            <summary>
            Gets the behavior.
            </summary>
            <param name="group">The group.</param>
            <returns>ISellingBehavior.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.IBehaviorDao.Save(Retalix.StoreServices.Model.Selling.Behavior.ISellingBehavior)">
            <summary>
            Saves the specified group.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.IBehaviorDao.Remove(Retalix.StoreServices.Model.Selling.Behavior.ISellingBehavior)">
            <summary>
            Removes the specified group.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.IBehaviorDao.GetAll``1">
            <summary>
            Gets all.
            </summary>
            <returns>IEnumerable{ISellingBehavior}.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.IBehaviorDao.DeleteAll(Retalix.StoreServices.Model.Infrastructure.DataMovement.DeleteAllProviders.ITruncateHelperDao)">
            <summary>
            Deletes all.
            </summary>
            <param name="truncateHelperDao">The truncate helper DAO.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.ISellingBehavior">
            <summary>
            Interface ISellingBehavior
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.ISellingBehavior.Group">
            <summary>
            Gets or sets the group of items to apply behavior on
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.ISellingBehavior.Id">
            <summary>
            Required for persistency. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.ISellingBehavior`1">
            <summary>
            Interface for handling events on selling behaviour.
            Events are routed to the behaviour by ISellingBehaviourEventBroker registered for the event type specified in T."/>
            There is no need to register this interface with IOC. It is located through the order lines with the behaviour.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineAccount.IOnlineAccountSellingBehavior">
            <summary>
            Represents a group of online items which are referred as offered online services (e.g.:customer deposit)
            </summary> 
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineAccount.IOnlineAccountSellingBehavior.IsBalanceInquiry">
            <summary>
            Gets a value indicating whether an account balance can be inquiry 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineAccount.IOnlineAccountSellingBehavior.Descriptions">
            <summary>
             Localized Descriptions 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior">
            <summary>
            Interface IOnlineProductSellingBehavior
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.ProviderKey">
            <summary>
            Authorization provider key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.TargetModule">
            <summary>
            module aka StoreLine targeted application name 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.DisableBalancePromptOnBalanceInquiry">
            <summary>
            disable yes/no showing the balance inquiry on POS 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.AuthorizationTrigger">
            <summary>
            Trigger for performing online authorization
            Value can be one of the following:
            1. ItemSale
            2. Total
            3.TransactionComplete
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.ConfirmationRequestRequired">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.BulkConfirmationRequest">
            <summary>
            In case confirmation required, allows multiple items confirmation on a single request.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.RefundRequestRequired">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.VoidRequestRequired">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.AuthorizationExternalIdType">
            <summary>
            value can be one of the following:
            SecondBarcode
            InBarcode
            card
            External
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.OnlineAuthorizationReceiptName">
            <summary>
            Online Authorization Receipt Name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.OnlineAuthorizationSaparateSlip">
            <summary>
            Online Authorization Separate Slip
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.MessageIdOnReceipt">
            <summary>
            This message would be displayed on receipt, only when no other message is received from the external provider on runtime
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.OfflineAuthorizationReceiptName">
            <summary>
            Offline Authorization Receipt Name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.OfflineAuthorizationSaparateSlip">
            <summary>
            Offline Authorization Separate Slip
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.DeclineAuthorizationReceiptName">
            <summary>
             Decline Authorization Receipt Name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.DeclineAuthorizationSaparateSlip">
            <summary>
             Decline Authorization Separate Slip
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.BusinessUnits">
            <summary>
            This collection represents the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnits</see> 
            which the OnlineProductSellingBehavior applies for.<br></br>
            For example: The OnlineProductSellingBehavior configured for business units "Brooklyn"<br></br>
            Means, that this OnlineProductSellingBehavior won't be recognized at business unit "New-Jersey".<br></br>
            The OnlineProductSellingBehavior are inherited, means that if none is configured on the wanted business unit it will inherit it from its <see cref="P:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit.ParentUnit">Parent</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.RetailSegments">
            <summary>
            This collection represents the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegments</see> 
            which the OnlineProductSellingBehavior applies for.<br></br>
            For example: The OnlineProductSellingBehavior configured for retail segment "Self CheckOut". <br></br>
            Means, that this OnlineProductSellingBehavior won't be recognized at retail segment of "Fuel Pos".
            The OnlineProductSellingBehavior can be inherited, means that if none is configured on the wanted retail segment it can get it (if configured) on all of the retail segments.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Behavior.OnlineProduct.IOnlineProductSellingBehavior.UpdateOnlineProductSaleInfo(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.OnlineProductSaleInfo)">
            <summary>
            Updates the online product sale info.
            </summary>
            <param name="orderLine"> </param>
            <param name="onlineProductSaleInfo">The online product sale info.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs">
            <summary>
             arguments used upon calling of services that are involved with opening of a drawer in a till
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.StoreName">
            <summary>
             store name for till 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.StoreId">
            <summary>
             unique store code
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.TerminalId">
            <summary>
             terminal name associated with the till
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.OperatorId">
            <summary>
             operator id at specific till
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.OperatorName">
            <summary>
             operator name at specific till
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.OperationDateTime">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.MessageId">
            <summary>
             timestamp for requesting an open drawer service
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.ReasonCode">
            <summary>
             reason of open drawer request
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.LiftNumber">
            <summary>
             lift
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.PrinterName">
            <summary>
             printer name associated with the till
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.TransactionSequeceNumber">
            <summary>
             unique sequence number for transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.Barcode">
            <summary>
             barcode
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.TransactionExternalId">
            <summary>
            unique string for transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs.IsTrainingMode">
            <summary>
            Does the drawer works in training mode
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenResult">
            <summary>
             provides result information upon calling an open drawer request
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenResult.ReceiptImage">
            <summary>
             a list of OPOS receipt images
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenResult.TransactionSequnceNumber">
            <summary>
             unique sequence number of transaction
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Drawer.IDrawer.Open(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IStoreNetRequest,Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs)">
            <summary>
            Opens the drawer.
            </summary>
            <param name="session">The session.</param>
            <param name="drawerOpenArgs">The drawer open args.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Drawer.IOpenDrawerSpecification">
            <summary>
             Interface for defining specification that maintain whether to open the till's drawer upon specific conditions during retail transaction.<br/>
             If one of the implementations returns <c>true</c> on execution the till drawer will open.<br/>
            </summary>
             <remarks>
             The specification pattern defined by Eric Evans and Martin Fowler.<br/>
             See http://en.wikipedia.org/wiki/Specification_pattern.
             </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Drawer.IOpenDrawerSpecification.Visit(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            </summary>
            <param name="retailTransaction"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.Configuration.BaseForcedRescanConfiguration.DefaultRescanType">
            <summary>
            Default rescan type to be used if forced by SelfSubscription rescan type is not configured for this policy
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.Configuration.ForcedExplicitlyRescanConfiguration">
            <summary>
            Specifies basic capability of enforcing rescan by explicit POS request
            Probably, it should be the highest priority stategy allowing overriding
            system's decision by cashier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.Configuration.BaseConfigurationElement.Name">
            <summary>
            Strategy name as should be used in logs 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.Configuration.BaseConfigurationElement.Priority">
            <summary>
            Startegy prioeitet
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.Configuration.BaseConfigurationElement.IsEnabled">
            <summary>
            Specifies if the strategy is disabled or enabled
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.Configuration.BaseConfigurationElement.RelatedTrustLevelId">
            <summary>
            Applying particular strategy instance configuration on specific trust level
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.PredictiveRescan.IPredictiveRescanData.Score">
            <summary>
            get or set the transaction score which calculated in prediction module
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.PredictiveRescan.IPredictiveRescanData.IsRandomRescan">
            <summary>
            get or set indication if transaction is randomaly have to rescanned
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.PredictiveRescan.IPredictiveRescanData.PredictiveActivation">
            <summary>
            get or set the predictive activation reason
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.PredictiveRescan.IPredictiveRescanData.Reason">
            <summary>
            get or set the reason which lead to predictive activation 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.IProductRescanMatcher">
             <summary>
             Will be used to match rescan items to customer order items
             <code lang="cs">
             <![CDATA[
             public class ProductRescanMatcher : IProductRescanMatcher
            {
                public long Id { get; set; }
                public DateTime LastModified { get; set; }
                public object OptimisticLockVersion { get; set; }
                public bool RescanSucceeded(ICustomerOrder customerOrder, IProduct product, SellQuantity quantity)
                {
                    foreach (var orderLine in customerOrder.OrderLines)
                    {
                        if (orderLine.Product.MerchandiseCategory == product.MerchandiseCategory)
                            return true;
                    }
                    return false;
                }
            }
             ]]>
             </code>
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.IProductRescanMatcher.RescanSucceeded(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity)">
            <summary>
            return true or false according to the the mathcing algorithm
            </summary>
            <param name="customerOrder">The relevent customer order </param>
            <param name="product">Product chosen for rescan</param>
            <param name="quantity">Sell quantity that can be used to compare</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.IRescanFactory.Create``1(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.Rescan.IRescanCreationContext,Retalix.StoreServices.Model.Selling.Rescan.Configuration.ForcedExplicitlyRescanConfiguration)">
            <summary>
            Should be used just by rescan decision strategies (IRescanDecisionStrategy implementations)  participating in Evaluate().
            </summary>
            <typeparam name="T">Specific type (INoRescam IPartialRescan, IFullRescan) of rescan ty be created</typeparam>
            <param name="order">Order the rescan should by applied for</param>
            <param name="creationContext">Rescan creation context</param>
            <param name="creationData">Rescan creation additional data</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.IRescanSummary">
            <summary>
            Summarize rescan process information
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.IRescanSummary.RescanType">
            <summary>
            Performed rescan name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.IRescanSummary.RescanResult">
            <summary>
            Performed rescan result (success/fail/unknown)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.IRescanSummary.ScannedByCustomerLinesCount">
            <summary>
            Order lines count as it was declared to cachier before rescan
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.IRescanSummary.ScannedByCustomerLinesTotal">
            <summary>
            Order lines total as it was declared to cachier before rescan
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.IRescanSummary.RescannedLinesCount">
            <summary>
            Number of order lines rescanned during verification process;
            may cover whole order in case of full rescan and just number of 
            items for partial
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.IRescanSummary.RescannedLinesTotal">
            <summary>
            Total of order lines rescanned during verification process;
            may cover whole order in case of full rescan and just number of 
            items for partial
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.IRescanSummary.FailedLinesCount">
            <summary>
            Number of order lines failed during verification process,
            i.e. lines which was not scanned by customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.IRescanSummary.FailedLinesTotal">
            <summary>
            Total of order lines failed during verification process,
            i.e. lines which was not scanned by customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.IRescanSummary.SelfscanTransactionLinesCount">
            <summary>
            Number of selfscanned lines in order, does not include 
            lines added as problematic item by cachier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.IRescanSummary.SelfscanTransactionLinesTotal">
            <summary>
            Total of selfscanned lines in order, does not include 
            lines added as problematic item by cachier
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.Enums.OperatorsEnum">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.Enums.TrustLevelRuleCalculationBasedOnEnum">
            <summary>
            choose the parameter which the rules based on.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.Enums.TrustLevelRuleCalculationUnitEnum">
            <summary>
            The unit for the calculation.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelFactory">
            <summary>
            Trust level factory create trust level related entities
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelFactory.Create(System.String,System.String)">
            <summary>
            OnCreate a new instance of TrustLevel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelFactory.CreateDefaultTrustLevel(System.String)">
            <summary>
            Creating default trust level - for unidentified shopper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelFactory.CreateOfflineDefaultTrustLevel(System.String)">
            <summary>
            Creating default trust level - for offline shopper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelFactory.CreateRule(Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevel)">
            <summary>
             OnCreate postFailed navigation rule
             </summary>
             <param name="levelFrom">the trust level that the rule attached to</param>
             <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelNavigationRule">
            <summary>
             Navigation mathematical rule for trust level navigation
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelNavigationRule.LevelTo">
            <summary />
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelNavigationRule.Operator">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelNavigationRule.Value1">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelNavigationRule.Value2">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelNavigationRules">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelNavigationRules.TrustLevelPostSuccessfulRescan">
            <summary>
            The trust levels that the user should move to by rescan type, in case of successful rescan.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelNavigationRulesProvider">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelNavigationStrategy">
            <summary>
             
             Extrension point for Replace
             
             TODO - remodel
             
             
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelRepository">
            <summary>
            provides interface for dealing with trust level objects.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelRepository.Delete(Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevel)">
            <summary>
            Delete a trust level and it configurations
            </summary>
            <param name="trustLevel"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelRepository.SaveOrUpdate(Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevel)">
            <summary>
            Create new persistence of trust level
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelRepository.GetAll">
            <summary>
            Get all the trust levels in the system
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevelRepository.Load(System.String)">
            <summary>
            Load specific trust level by its id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevel">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevel.Id">
            <summary>
            External unique key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevel.Description">
            <summary>
            Trust level unique Name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.TrustLevel.ITrustLevel.NavigationRules">
            <summary>
             A set of of navigation rules that should be applied after rescan failure.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescanCreationContext.CurrentTouchPoint">
            <summary>
            Current touch point
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescanCreationContext.PreferedTouchPoint">
            <summary>
            Prefered touch point to be used for rescan procedure
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescanCreationContext.RequestedEnforcedRescan">
            <summary>
            If set, explicitly specified expected rescan type to be created
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.INoRescan">
            <summary>
            Represents decision to skip any kind of customer check
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.IRescanFailure">
            <summary>
            Data of rescan failure item
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.IFullRescan">
            <summary>
            Represents full rescan process, i.e. when all items of customer order are rechecked
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.IPartialRescan">
            <summary>
            Represents a partial customer check process
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Rescan.IRescan">
            <summary>
            Represents base interface of Rescanning process
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescan.IsForced">
            <summary>
            Indicates whether the rescan process was requested manually by operator or chosen by the system
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescan.TouchPointId">
            <summary>
            The touch point ID of this rescan process
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescan.Reason">
            <summary>
            Verbose description of the rescan reason
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescan.Status">
            <summary>
            Rescan process status, i.e. waiting to start, running or terminated
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescan.Result">
            <summary>
            Rescan process result - failed or succeeded for completed process
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescan.Order">
            <summary>
            Customer order this rescan process is applied on
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescan.OriginalOrderLines">
            <summary>
            Customer order lines as declared to check
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescan.RescannedLines">
            <summary>
            Customer order lines already rescanned by the process
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescan.RescanFailures">
            <summary>
            Desccrption of failed rescans, entry for each failed line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescan.InitiationTimestamp">
            <summary>
            Timestamp when this rescan process was initiated
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.IRescan.Initialize">
            <summary>
            Initalize selected rescan state
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.IRescan.StartRescan">
            <summary>
            Start Rescan process before the start
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.IRescan.CompleteRescan">
            <summary>
              Rescan process may be requested to complete rescanning process. The rescan may decide if the attempt will be respected
            </summary>
            <returns> True if rescan supports forced termination and agree to fullfil it, false otherwise</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.IRescan.RescanProduct(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
               Notify the Rescan process that rescan action has been called
            </summary>
            <param name="product">rescanned product</param>
            <param name="quantity">rescanned product quantity</param>
            <param name="inputParametersInfo">additional input paremeters</param>
            <returns>rescan success</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.IRescan.CancelRescan(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
               Notify the Rescan process that rescan action has been cancelled
            </summary>
            <param name="product">rescanned product</param>
            <param name="quantity">rescanned product quantity</param>
            <param name="inputParametersInfo">additional input paremeters</param>
            <returns>rescan success</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IRescan.VoidAllItems">
            <summary>
            When set to true will void all items in transaction
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.IRescan.AddRescanFailure(Retalix.StoreServices.Model.Selling.Rescan.IRescanFailure)">
            <summary>
            Allow the option to add external failure 
            </summary>
            <param name="failure"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Rescan.IRescan.IsRescannable(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
                Determine if an order line is to be counted as rescannable
            </summary>
            <param name="line">The order line to examine</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Rescan.IStrategyBasedRescanPolicy.DecisionStrategyFactories">
            <summary>
              <para>
                 Strategies used to evaluate required rescan. Strategies ordered in natural order of priorities, i.e. from most important to least one,
              </para>
            </summary>
            <param name="strategies"></param>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Rescan.RescanStatus.Suggested">
            <summary>
            Specifies that the rescan is being considered but is not decided to be used
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Rescan.RescanStatus.NotStarted">
            <summary>
            Specifies that the the final decision to select particular rescan was done, but the rescxanning process is not started yet
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Rescan.RescanStatus.InProcess">
            <summary>
            Specifies that rescan process is still being performed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Rescan.RescanStatus.Completed">
            <summary>
            Specifies that rescan process is terminated
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.HierarchyDependencyTypes">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.ILockedForSaleProductSellingRestriction">
            <summary>
            Represents selling restrictions that prohibit adding specific <see cref="T:Retalix.StoreServices.Model.Product.IProduct">products</see> to the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">order.</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Selling.ILockedForSaleProductSellingRestriction.IsLocked">
            <summary>
            Gets a value of the <see cref="T:System.Boolean">bool</see> type that indicates if the selling operation should be prohibited or permitted.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Selling.ILockedForSaleProductSellingRestriction.ReasonCode">
            <summary>
            Gets the <see cref="T:System.String">string</see>reason code for applying this restriction.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.IManualQuantityProductSellingRestriction">
            <summary>
             Represents if the customer should be forced to enter the quantity in self checkout mode.
            </summary>
             <remarks>
            While selling a product at the self checkout, and a product quantity is not inserted, the system may perform a check on this property, and if a quantity is mandatory,
             then the product cannot be sold.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestriction">
            <summary>
            Represents the default selling restriction based on <see cref="T:Retalix.StoreServices.Model.Product.IProduct"/><see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.ISellingRestriction"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestriction.Id">
            <summary>
            Gets or sets a value of the <see cref="T:System.String">string</see> type that represents the restriction ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestriction.Starting">
            <summary>
            Gets or sets a value of the <see cref="T:System.DateTime">DateTime</see> type that represents the starting business date from which the restriction is active. 
            Null for instant activation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestriction.Entity">
            <summary>
             IProduct for which this data is relevant.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestriction.BusinessUnit">
            <summary>
             Location for which this Restriction is relevant.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestriction.HierarchyDependency">
            <summary>
             The manner in which the restriction data will be resolved across a hierarchal structure.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao">
            <summary>
            Represents how the storage of a specific location is handled based on an <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestriction"/> for <see cref="T:Retalix.StoreServices.Model.Product.IProduct"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.LoadAll(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Loads location based data for all types of IProductSellingRestriction (e.g. all Tender related restrictions)
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.LoadSpecific``1(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Loads location based data of specific type, that inherits from IProductSellingRestriction (e.g. only DenyTenderRestriction)
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.LoadSpecific``1(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Queries all selling restrictions of given type applied to specific business unit
            </summary>
            <typeparam name="TSpecificData">type of restriction to query</typeparam>
            <param name="businessUnit">business unit to query</param>
            <returns>all the restrictions of given type existing in given business unit</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.LoadSpecific``1(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct},System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit})">
            <summary>
            Loads all the restrictions for specified products in specified business units for specific restriction type that inherits from IProductSellingRestriction. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.LoadSpecific``1(Retalix.StoreServices.Model.Product.IProduct,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit})">
            <summary>
            Loads location based data of specific type for specific locations, that inherits from IProductSellingRestriction (e.g. only DenyTenderRestriction)
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.ClearSpecific``1(Retalix.StoreServices.Model.Product.IProduct,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit})">
            <summary>
            Clear all related hierarchy data of TSpecificData type for entity in specific locations
            (e.g. delete all DenyTenderRestriction hierarchy data for TenderType '123')
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.ClearAllRelatedTo``1(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Clear all related hierarchy data of TSpecificData type for entity
            (e.g. delete all DenyTenderRestriction hierarchy data for TenderType '123')
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.AddOverrideNode(Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestriction)">
            <summary>
            Marks specific data node on business unit to merge data with parent's data when retrieved.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.AddMergeNode(Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestriction)">
            <summary>
            Marks specific data node on business unit to merge data with parent's data when retrieved.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.FindById(System.String)">
            <summary>
            Gets a restriction by an Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.FindSameAs(Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestriction)">
            <summary>
            
            </summary>
            <param name="productSellingRestriction"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.Remove(Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestriction)">
            <summary>
            Removes the specific Restriction
            </summary>
            <param name="dataToDelete"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.DeleteBy(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Deletes all product selling restrictions by a specific business unit and product.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.DeleteBy(System.Collections.Generic.KeyValuePair{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.String}[])">
            <summary>
            Deletes all products related to all business units passed to the method
            </summary>
            <param name="businessUnitsToProducts">Key value pairs of business unit and products for which restrictions should be deleted</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionDao.GetAll">
            <summary>
            Retrieves all existing ProductSellingRestrictions
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionFactory">
            <summary>
            Represents the factory for different product's <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestriction">selling restrictions.</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.IProductSellingRestrictionFactory.CreateLockedForSaleProductRestriction(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Product.IProduct,System.Boolean,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,System.String)">
            <summary>
            Creates new <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.ILockedForSaleProductSellingRestriction">locked for sale restrictions.</see>
            </summary>
            <param name="businessUnit">Organizational <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">business unit</see> where this restriction applies.</param>
            <param name="product"><see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> to which this restriction applies.</param>
            <param name="isLocked">Flag indicating if the restriction is applied.</param>
            <param name="startingDate"><see cref="T:System.DateTime">Date</see> from which this restriction is activated. Null for instant activation.</param>
            <param name="reasonCode">The code indicating the <see cref="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCode">reason</see> describing why such a restriction was applied. Null for no reason.</param>
            <returns>Created an instance of <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.ILockedForSaleProductSellingRestriction"/></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.ISellingRestriction">
             <summary>
             Represents the restriction applicable to selling operations. Used to allow/deny adding of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">products</see> to <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">a customer order</see>
              /// <para>
             The ISellingRestriction provides the following service:
             <list type="bullet">
             <item>
             <description>Allows to restrict or approve product add to customer order, in specific location and date time</description>
             </item>
             </list>
             </para>
             </summary>
             <example>
             <code lang="cs">      
            public class RistrictProductQuanity : ISellingRestriction
                {
                    public SellingRestrictionResult AppliesFor(SellingEnvironment sellingEnvironment, ICustomerOrder customerOrder, IOrderLine orderLine)
                    {
                        const int inhibitQuantity = 2;
                        var productQuantity = orderLine.Quantity.Value;
                       if (productQuantity > inhibitQuantity)
                        {
                            return new SellingRestrictionResult {IsRestrictionApplies = true};
                        }
            
                        return new SellingRestrictionResult {IsRestrictionApplies = false};
                    }
                }
             </code>
             </example>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.ISellingRestriction.AppliesFor(Retalix.StoreServices.Model.Selling.Restriction.Selling.SellingEnvironment,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Evaluates the restriction in the current <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.SellingEnvironment">environment</see>, <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">order</see> for a specific <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">order line.</see>
            </summary>
            <param name="sellingEnvironment">Current selling environment</param>
            <param name="customerOrder">Current order being processed</param>
            <param name="orderLine">Current line in order being processed</param>
            <returns>Restriction evaluation <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.SellingRestrictionResult">result</see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.ISellingRestrictionProvider">
            <summary>
            Represents a list of <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.ISellingRestriction">restrictions</see> that can be applied to various selling operations.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.ISellingRestrictionProvider.FindFor(Retalix.StoreServices.Model.Selling.Restriction.Selling.SellingEnvironment,Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Returns list of <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.ISellingRestriction">restrictions</see>, applicable to current <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.SellingEnvironment">environment</see> and provided <see cref="T:Retalix.StoreServices.Model.Product.IProduct">product</see>
            </summary>
            <param name="sellingEnvironment">Current selling environment</param>
            <param name="product">Product to check restrictions for</param>
            <returns>List of applicable selling restrictions</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.ISellingRestrictionProvider.FindFor(Retalix.StoreServices.Model.Selling.Restriction.Selling.SellingEnvironment,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct})">
            <summary>
            Returns dictionary of products and their applicable the <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.ISellingRestriction">ISellingRestriction</see>, for the passed <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.SellingEnvironment">environment</see> and provided <see cref="T:Retalix.StoreServices.Model.Product.IProduct">product</see>
            </summary>
            <param name="sellingEnvironment">Current selling environment</param>
            <param name="products">Products to check restrictions for</param>
            <returns>List of products and their applicable restrictions of type ISellingRestriction</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Selling.ISellingRestrictionProvider.FindFor``1(Retalix.StoreServices.Model.Selling.Restriction.Selling.SellingEnvironment,Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Returns list of restrictions of type <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.ISellingRestriction">ISellingRestriction</see>, applicable to current <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.SellingEnvironment">environment</see> and provided <see cref="T:Retalix.StoreServices.Model.Product.IProduct">product</see>
            </summary>
            <param name="sellingEnvironment">Current selling environment</param>
            <param name="product">Product to check restrictions for</param>
            <returns>List of applicable restrictions of type ISellingRestriction</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.SellingEnvironment">
            <summary>
            Encapsulates general environment data for the selling operations.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Selling.SellingEnvironment.BusinessUnit">
            <summary>
            Gets or sets a value of the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> 
            type that represents the Organizational business unit where a selling operation is performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Selling.SellingEnvironment.Date">
            <summary>
            Gets or sets a value of the <see cref="T:System.DateTime">DateTime</see> type that represents the current selling operation business date.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Selling.SellingRestrictionResult">
            <summary>
            Represents the <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.RestrictionResult">RestrictionResult</see> for selling restrictions.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.ItemLockedForSaleException">
            <summary>
            Business Exception for trying to sale an item that is locked for sale
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.PriceEntryRequiredException">
            <summary>
            Business Exception for sale the item without provide price entry amount by request
            ErrorCode : PriceEntryRequired
            This Class is obsolete since version 10.4.0. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.PriceEntryRequiredException.ItemId">
            <summary>
             Item id appearing in the message
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.PriceEntryRequiredException.ItemDescription">
            <summary>
             Item description appearing in the message
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.PriceEntryRequiredException.#ctor(System.String,System.String,System.String)">
            <summary>
             Constructor
            </summary>
            <param name="itemId"></param>
            <param name="itemDescription"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.PriceEntryRequiredException.#ctor(System.String,System.Exception)">
            <summary>
             Constructor
            </summary>
            <param name="itemId"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.PriceEntryRequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.PriceVerifyRequiredException">
            <summary>
            Business Exception for verify the item's price with the price in the system
            ErrorCode : PriceVerifyRequired
            This Class is obsolete since version 10.4.0. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.PriceVerifyRequiredException.Id">
            <summary>
             Item id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.PriceVerifyRequiredException.ShortName">
            <summary>
             Item short name
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.PriceVerifyRequiredException.#ctor(System.String,System.String)">
            <summary>
             Constructor
            </summary>
            <param name="id"></param>
            <param name="shortName"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.MultipleRestrictionsForEnvironmentException">
            <summary>
             Represents an exception recorded when more than one restriction matches the environment parameters during an attempt
             to determine the restriction status, for a specific Restriction implementation in a specific environment.
             
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.MultipleRestrictionsForEnvironmentException.#ctor">
            <summary>
             Constructor
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Restriction.Exceptions.MultipleRestrictionsForEnvironmentException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.IRestriction">
            <summary>
            The base <see cref="T:Retalix.StoreServices.Model.Selling.Restriction.IRestriction">IRestriction</see> interface. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.Payment.PaymentRestrictionResult">
            <summary>
            Represents the IPaymentRestriction results.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.Payment.PaymentRestrictionResult.RestrictionApplies">
            <summary>
            Gets or sets a boolean value that determines if the restriction applies to the current state.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Restriction.RestrictionResult">
            <summary>
            Represents the general results for all restrictions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Restriction.RestrictionResult.IsRestrictionApplies">
            <summary>
            Gets or sets a value of type <see cref="T:System.Boolean">boolean</see> indicating that the evaluated restriction applies.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SelfScan.IAutoLoadConfigurationLookupStrategy">
            <summary>
            Strategy to resolve a most suitable Auto Load configuration based on a Touchpoint
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.IAutoLoadConfigurationLookupStrategy.Get(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            Gets configurations suitable for current touchpoint
            </summary>
            <param name="touchPoint"></param>
            <returns>Auto Load Configurations</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SelfScan.IEndOfTripSuspendStrategy">
            <summary>
            Strategy added in order to let extensions to allow partial rescan on POS
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus">
            <summary>
            upload entity for the self scan status
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.Id">
            <summary>
             Generic SelfScanStatus identifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.TouchPointId">
            <summary>
            link to touch point entity
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.ComputerName">
            <summary>
            the domain name where the device exist
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.Status">
             <summary>
            1.	In use - Device is in use by a customer.
            2.	Ready - device is in the cradle and fully charged.
            3.	Charging - device is in the cradle and charging.
            4.	Un Known - initial status of the device in case there is a touch point but no heartbeat information has been provided
            5.	Not available - device is marked by a store personal as not available since it is damaged.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.HeartBitDate">
            <summary>
            the date the status got heart bit
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.BatteryLevel">
            <summary>
            the battery level of the device
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.CradleRackId">
            <summary>
             Rack Id the device put in
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.LastStatusChangedDate">
            <summary>
            the last date the status has changed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.StoreId">
            <summary>
             store id the device is defined
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.CradleId">
            <summary>
             cradle the device put in
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.ShopperId">
            <summary>
            the current shopper id using the device
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.TransactionId">
            <summary>
            replcae/remove/add the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.TransactionLocation">
            <summary>
            location of the current transasction 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.BalanceDue">
            <summary>
            transaction total
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.ServerName">
            <summary>
            server name
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.CalculateStatus(Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner,System.DateTime,System.TimeSpan)">
            <summary>
            calculate the status by given scanner
            </summary>
            <param name="selfScanner"></param>
            <param name="statusTime"></param>
            <param name="unKnownInterval">if status hasn't changed from that last interval
            not update will be done for the status</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.Merge(Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus)">
            <summary>
            merge status
            </summary>
            <param name="selfScanStatuse"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.IsUnkown(System.DateTime,System.TimeSpan)">
            <summary>
            is the status is unkonw due to time pass since last update
            </summary>
            <param name="now"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus.ChangeToNotAvailable">
            <summary>
            change the status to not available
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusDao">
            <summary>
            save of status entity of self scanner
            this is an upload entity related to self s
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusDao.Find(System.String,System.String)">
            <summary>
            find self scan status by specific status and store id
            </summary>
            <param name="deviceStatus"></param>
            <param name="storeId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusDao.GetMissingStatusDeviceId(System.String)">
            <summary>
            get device id defined as touch point but the status was never updated for them
            </summary>
            <param name="storeId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusDao.SaveOrUpdate(Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus)">
            <summary>
            save status
            </summary>
            <param name="selfScannerStatusToSave"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusDao.Get(System.String,System.String)">
            <summary>
            get existing status
            </summary>
            <param name="deviceId"></param>
            <param name="storeId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusDao.Delete(Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatus)">
            <summary>
            delete status instance
            </summary>
            <param name="selfScanStatuse"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusDao.All">
            <summary>
            all self scan status
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusDao.ByStore(System.String)">
            <summary>
            get devices by store
            </summary>
            <param name="storeId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusDao.GetByComputerId(System.String,System.String)">
            <summary>
            get exusting status by scanner computer id
            </summary>
            <param name="computerId"></param>
            <param name="storeId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusDao.ActiveShopper(System.String)">
            <summary>
            get all active shopper status
            if empty or null return all status
            </summary>
            <param name="storeId"></param>
            <returns>map between the customer to the relevant status</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusDao.GetUnKnownDeviceInterval(System.String)">
            <summary>
            get unknown interval of the scanner
            </summary>
            <param name="storeId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusDao.IsShopperActive(System.String,System.String)">
            <summary>
            indicate if the shopper active at the store
            </summary>
            <param name="customerid"></param>
            <param name="storeId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusFactory">
            <summary>
            create self scanner status
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusFactory.CreateOrCalcualteStatus(Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Decimal})">
            <summary>
            create new status,or calculate new one if instance of
            status already exist and persist it
            </summary>
            <param name="selfScanner"></param>
            <param name="storeId"></param>
            <param name="transactionId"></param>
            <param name="customerId"></param>
            <param name="balanceDue"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusFactory.CreateOrCalcualteStatus(Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner,System.String,System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
            create new status,or calculate new one if instance of
            status already exist and persist it
            </summary>
            <param name="selfScanner"></param>
            <param name="storeId"></param>
            <param name="transactionId"></param>
            <param name="customerId"></param>
            <param name="balanceDue"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanStatusFactory.Create(Retalix.StoreServices.Model.Selling.SelfScan.SelfScanDataDto)">
            <summary>
            create status by given dto
            </summary>
            <param name="selfScanDataDto"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SelfScan.SelfScanDataDto">
            <summary>
            dto for status conversion from contract to model
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanDao">
            <summary>
            Represents the self scanner DAO object
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanDao.FindBy(System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Gets all the devices from the specific cradle rack that property isReleased is equal to the passed <paramref name="isReleased"/> parameter.
            </summary>
            <param name="cradleRackId">id of the specific cradle rack to search scanners from</param>
            <param name="isReleased"><see cref="T:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner"/> property - if FALSE indicates that device is NOT in cradle, use NULL to ignore this criteria</param>
            <param name="pendingAction"><see cref="T:Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner"/> property - , use NULL to ignore this criteria</param>
            <param name="isActive">property - if TRUE indicates that device is on-line and available, use NULL to ignore this criteria </param>
            <param name="isAvialable">device as un-available in case it is not available to use in cases such as broken device or stolen device </param>
            <returns>a list of devices that are currently in/out the specified cradle rack</returns>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanDao.GetByDeviceId(System.String)">
            <summary>
            Get the scanner by device id
            </summary>
            <param name="deviceId">Self Scanner id</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanDao.Save(Retalix.StoreServices.Model.Organization.Device.SelfScanner.ISelfScanner)">
            <summary>
            Update or create self scanner record.
            </summary>
            <param name="selfScanner"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanDao.AllRacks">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanTransactionEvaluator.IsJunk(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            Current transaction is junk and should be removed/closed
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SelfScan.ISelfScanTransactionEvaluator.IsSelfScan(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
             Current transaction is self-scan transaction
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Tab.ITabInfo">
            <summary>
            The arguments required when creating a Tab.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tab.ITabInfo.IsTrainingMode">
            <summary>
            True when the order was created in training mode.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Tab.ITabInfoDao">
            <summary>
            Represents a generic Data Access Object for ITabInfo
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Tab.ITabInfoDao.Save(Retalix.StoreServices.Model.Selling.Tab.ITabInfo)">
            <summary>
            Save a new ITabInfo
            </summary>
            <param name="tabInfo">The specified tab info.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Tab.ITabInfoDao.GetByCustomerOrderId(System.String)">
            <summary>
            Returns a TabInfo related to the given Customer Order Id
            </summary>
            <param name="id">The id of the specified customer order.</param>
            <returns>ITabInfo</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Tab.ITabInfoDao.FindByCriteria(Retalix.StoreServices.Model.Selling.Tab.TabInfoQuery)">
             <summary>
             Finds tabs info according to criteria,
             </summary>
            <param name="query">query criteria sort</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Tab.ITabInfoDao.Update(Retalix.StoreServices.Model.Selling.Tab.TabsInfoExchangeRequest)">
            <summary>
            Updates TabInfos and returns updated synchronized tabs
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Tab.ITabInfoDao.LockTab(Retalix.StoreServices.Model.Selling.Tab.ITabInfo,System.Boolean)">
            <summary>
            Try to lock tab and returns LockTabStatus
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Tab.ITabInfoDao.GetLatestUpdatedTabs(System.DateTime)">
             <summary>
             Return list of ItabInfo that were updated after start time.
             </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Tab.LockTabFailureReason">
            <summary>
            Represents the Reason of the failer when try to lock Tab.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tab.LockTabFailureReason.None">
            <summary>
            Represent that lock tab was not failed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tab.LockTabFailureReason.Locked">
            <summary>
            Represent that tab was alrady lock by another user.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tab.LockTabFailureReason.Finished">
            <summary>
            Represent that tab was alrady Finished.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tab.LockTabFailureReason.Voided">
            <summary>
            Represent that tab was alrady Voided.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tab.LockTabFailureReason.InTransit">
            <summary>
            Represent that customerOrder and businessProcess were not update on store yet.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tab.LockTabFailureReason.NotInCurrentVenue">
            <summary>
            Represent that tab is not in current venue.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Tab.LockTabResult">
            <summary>
            Represents the result of locking Tab.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tab.LockTabResult.Failure">
            <summary>
            Represent that lock tab was failed
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tab.LockTabResult.Success">
            <summary>
            Represent that lock tab was Success
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Tab.IUpdateTabStatusService.LockTab(Retalix.StoreServices.Model.Selling.Tab.ITabInfo,System.String,System.Guid,System.String,System.Boolean)">
            <summary>
            Try to lock the selected tab
            </summary>
            <param name="localTabInfo">Requesting local tabInfo</param>
            <param name="touchpointId">Requesting touchpoint id</param>
            <param name="posId">Requesting pos id</param>
            /// <param name="venueId">Requesting venue Id</param>
            <param name="forceLock">indicate if lock tab anyway</param>
            <returns>Lock Tab status result</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Tab.TabStatus">
            <summary>
            Status of a Tab
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tab.ITabsConfiguration.QSRTabsEnabled">
            <summary>
            Indicated if Tabs feature is disabled
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tab.ITabsConfiguration.PreAuthorizationMode">
            <summary>
            Indicated if PreAuthorizatio is part of the tabs creation flow (None/Optional/Mandatory ).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tab.ITabsConfiguration.LoyaltyCardMode">
            <summary>
            Indicated if LoyaltyCardMode is part of the tabs creation flow (None/Optional/Mandatory ).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tab.ITabsConfiguration.CustomerNameMode">
            <summary>
            Indicated if CustomerNameMode is part of the tabs creation flow (None/Optional/Mandatory ).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tab.ITabsConfiguration.TableNumberMode">
            <summary>
            Indicated if TableNumberMode is part of the tabs creation flow (None/Optional/Mandatory ).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ICardTender">
            <summary>
            Represents a means of payment related to Electronic payment Cards with a uniquely identifying key, 
            on which a <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">IProductPaymentRestriction</see> entity may be applied.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ICardTender.CardType">
            <summary>
            Gets or sets the unique CardId with which this card tender is associated.
            </summary>
            <remarks>
            For example "Arval" , "Sonol" 
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender">
            <summary>
            Represents a means of payment with a uniquely identifying key, 
            on which a <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">IProductPaymentRestriction</see> entity may be applied.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender.Key">
            <summary>
            Gets the uniquely identifying key of the tender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender.TenderType">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see> entity with which this tender is associated.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.IEligibilityEnvironment">
            <summary>
            Represents one combination of an <see cref="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender">ITender</see> object, 
            an <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see> entity, 
            and the ID of an <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> entity, 
            that define where and for which tender an 
            <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">IProductPaymentRestriction</see> entity is relevant for.
            A product payment restriction may have multiple such environments.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.EligibilityPolicy.IEligibilityEnvironment.RetailSegment">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see> the <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestriction</see> is relevant for.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.EligibilityPolicy.IEligibilityEnvironment.Tender">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see> the <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestriction</see> is relevant for.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ILimitTenders">
            <summary>
             Represents an entity that is responsible for checking the tender limitations on a <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see>
             (according to IConditionalRestrictionRuleDefinitions).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ILimitTenders.Limited(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
             Specifies the boolean value to check if the <paramref name="transaction"/> is limited for payment by any contained <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see>, 
             according to any existing ConditionalRestrictionRuleDefinitions.
            </summary>
            <param name="transaction"><see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see>.</param>
            <returns>True if the transaction is limited, false if it is not.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ILimitTenders.LimitedToTenders(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
             Retrieves the limited <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see>s for the <paramref name="transaction"/>.
            </summary>
            <param name="transaction">The <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see> on which to perform the validation.</param>
            <returns>A collection of limited <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see>s.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.GiftReceipt.IIssuingGiftReceiptValidator">
            <summary>
            An interface needed for impl. of validator whether to issue gift receipt
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.GiftReceipt.IIssuingGiftReceiptValidator.Validate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.String[])">
            <summary>
            Validator method requires customer order for the payment and item details
            </summary>
            <param name="customerOrder"></param>
            <param name="itemIDs"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.GiftReceipt.IGiftReceiptLinesFilter">
            <summary>
            Defines an extensible filter to allow filtering out sale lines based on a transaction log sale lines that a gift receipt cannot be issued to.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.GiftReceipt.IGiftReceiptLinesFilter.FilterLines(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog})">
            <summary>
            Filters out sale lines that a gift receipt cannot be issued to, and returns a collection of lines valid for gift receipt only.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.GiftReceipt.IGiftReceiptBuilder">
            <summary>
            Represents 
            Handles the creating of an <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.GiftReceipt.IGiftReceiptBuilder.GetOrCreateGiftReceiptLine(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Int32,System.Int64)">
            <summary>
            In sale mode - retrieves an existing <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> from the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> if it exists.
            If an <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> does not exist creates a new one and adds it to the  <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            Before creating the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> performs validation that the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the 
            IGiftReceiptLine refers contains a refundable product. Throws an <see cref="T:Retalix.StoreServices.Model.Selling.GiftReceipt.Exceptions.GiftReceiptCannnotBeIssuedException">GiftReceiptCannnotBeIssuedException</see> if the 
            product is non refundable.
            </summary>
            <param name="customerOrder"> The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> that the IGiftReceiptLine will be added to. </param>
            <param name="giftReceiptQuantity"> The number of items that the gift receipt contains</param>
            <param name="transactionLineSequance">The link to the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see> and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.</param>
            <returns>The IGiftReceiptLine that was created and added to the ICustomerOrder </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.GiftReceipt.IGiftReceiptBuilder.CreateGiftReceiptFromLog(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.ISaleLineLog,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Int32)">
            <summary>
            In no sale mode - creates a new <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see>  and adds it to the  <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            Before creating the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IGiftReceiptLine">IGiftReceiptLine</see> performs validation that the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the 
            IGiftReceiptLine refers contains a refundable product. Throws an <see cref="T:Retalix.StoreServices.Model.Selling.GiftReceipt.Exceptions.GiftReceiptCannnotBeIssuedException">GiftReceiptCannnotBeIssuedException</see> if the 
            product is non refundable.
            </summary>
            <param name="retailTransactionLog"></param>
            <param name="saleLineLog"></param>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> that the IGiftReceiptLine will be added to. </param>
            <param name="giftReceiptQuantity">The link to the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see> and the
              <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that the gift receipt refers to.</param>
            <returns>The IGiftReceiptLine that was created and added to the ICustomerOrder</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.GiftReceipt.Exceptions.GiftReceiptCannnotBeIssuedException">
            <summary>
            This exception is thrown when trying to add a gift receipt on an item that is not refundable.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.GiftReceipt.Exceptions.GiftReceiptCannnotBeIssuedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.GiftReceipt.Exceptions.GiftReceiptCannnotBeIssuedException">GiftReceiptCannnotBeIssuedException</see> class.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.GiftReceipt.Exceptions.RetailTransactionLogMoreThanOneFound">
            <summary>
            Form the RetailTransactionLogMoreThanOneFound <see cref="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException">BusinessException</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.GiftReceipt.Exceptions.RetailTransactionLogMoreThanOneFound.#ctor(System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="storeRetailerId"></param>
            <param name="touchpointId"></param>
            <param name="transactionSequence"></param>
            <param name="transactionEndDateTime"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.GiftReceipt.IGiftReceiptSelectionPriorityHandler">
            <summary>
            Use this interface to get the the list of <see cref="T:Retalix.StoreServices.Model.Selling.GiftReceipt.PriorityEntry">PriorityEntry</see>s.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.GiftReceipt.IGiftReceiptSelectionPriorityHandler.GetPriorityEntries">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.GiftReceipt.IGiftReceiptSelectionPriorityHandlerFactory">
            <summary>
            Represents the interface responsible for creating the GiftReceiptSelectionPriorityHandler.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.GiftReceipt.IGiftReceiptSelectionPriorityHandlerFactory.CreateRetailTransactionHandler(System.String)">
            <summary>
            Represents the interface responsible for creating the RetailTransactionHandler based on defined parameters.
            </summary>
            <param name="retailTransactionId">retail transaction Id</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.GiftReceipt.IGiftReceiptSelectionPriorityHandlerFactory.CreateRetailTransactionLogHandler(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Represents the interface responsible for creating the RetailTransactionLogHandler based on defined parameters.
            </summary>
            <param name="retailTransactionId">Tlog Transaction ID</param>
            <param name="businessUnitId">Business Unit ID</param>
            <param name="touchPointId">Touch Point ID</param>
            <param name="endDateTime">End Date Time</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.GiftReceipt.PriorityEntry">
            <summary>
            Encapsulates a priority entry 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.GiftReceipt.PriorityEntry.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="lineLink"></param>
            <param name="priority"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.GiftReceipt.PriorityEntry.Priority">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.GiftReceipt.PriorityEntry.LineLink">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao">
            <summary>
            Represents an entity responsible for persistency to manage
            <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> object classification to an
            <see cref="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup">ILocalProductSelectionGroup</see> object.
            <para>
            The product grouping DAO provides the following services:
            <list type="bullet">
            <item><description>
            Adding a product to a local product selection group.
            </description></item>
            <item><description>
            Excluding a product from a local product selection group.
            </description></item>
            <item><description>
            Checking whether a product is in the specified local product selection group.
            </description></item>
            <item><description>
            Checking whether a product was excluded from a local product selection group.
            </description></item>
            <item><description>
            Deleting all the local product selection group configurations for a specific
            product.
            </description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao.AddProductToGroup(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup,Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Adds a product to a local product selection group.
            </summary>
            <param name="localProductSelectionGroup">The local product selection group
            the product is added to.</param>
            <param name="product">The product to be added to the local product selection
            group.</param>
            <param name="businessUnit">The business unit belonging to the association.
            </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao.ExcludeProductFromGroup(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup,Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Specifies that for a specific business unit, a certain product should be
            excluded from a local product selection group.
            </summary>
            <param name="localProductSelectionGroup">
            The local product selection group from which the product is excluded.
            </param>
            <param name="product">The product that should be excluded from the local
            product selection group.</param>
            <param name="businessUnit">The location to which the association belongs.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao.RemoveProductFromGroup(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct},Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Specifies that for a specific business unit, a certain product should be
            removed from a local product selection group.
            </summary>
            <param name="localProductSelectionGroup">
            The local product selection group from which the product is removed from it.
            </param>
            <param name="product">The product that should be excluded from the local
            product selection group.</param>
            <param name="businessUnit">The location to which the association belongs.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao.RemoveConfiguration(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup,Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Removes all definitions for the local product selection group and product
            in a specific location.
            </summary>
            <param name="localProductSelectionGroup">The local product selection group
            from which all definitions of the specific product per location is removed.</param>
            <param name="product">The product that is removed from the local product
            selection group for a specific location.</param>
            <param name="businessUnit">The location for which all definitions of the
            product are removed.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao.GetProductGroups(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao.GetProductExcludedGroups(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao.GetAllProductsInGroup(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit})">
            <summary>
            Get for the group all products which linked to the group  in business unit and if the product include/exclude in this business unit. 
            </summary>
            <param name="localProductSelectionGroup">The local product selection group for
            which all member products are required.</param>
            <param name="locations">The location for which the product should be members
            of the local product selection group.</param>
            <returns>A Dictionary with key of tuple which contains IProduct and Ibusiness unit and the value is bollean:
             true - if the product include in business unit, and false if it exlude</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao.GetProductsInGroup(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit})">
            <summary>
            Returns all the products which are members of the local product selection
            group in the specified locations.
            </summary>
            <param name="localProductSelectionGroup">The local product selection group for
            which all member products are required.</param>
            <param name="locations">The location for which the product should be members
            of the local product selection group.</param>
            <returns>A collection of all the products members in the local product
            selection group.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao.GetProductsInGroup(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Returns all the products which are members of the local product selection
            group in the specified locations if the product not found on the specified location will lookup on parent until the root
            if it does exists on parent it will return this product.
            </summary>
            <param name="localProductSelectionGroup">The local product selection group for
            which all member products are required.</param>
            <param name="businessUnit">The location for which the product should be members
            of the local product selection group.</param>
            <returns>A collection of all the products members in the local product
            selection group.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao.GetExcludedProductsInGroup(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit})">
             <summary>
             Return all the productps which are specifically excluded from the local
             product selection group for the specified location.
             </summary>
             <param name="localProductSelectionGroup">The local product selection group
             for which all specifically excluded products are required.</param>
            <param name="locations">The locations for which the product should be
             specifically excluded from the local product selection group.</param>
            <returns>A collection of all the products specifically excluded from the local
             product selection group.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao.RemoveAllProductsFromGroup(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit})">
            <summary>
            Removes all the products which are members of the local product selection
            group for the location.
            </summary>
            <param name="localProductSelectionGroup">The local product selection group
            for which all member products are required.</param>
            <param name="locations">The location for which the products are members in
            the local product selection group.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao.Find(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ProductGroupingCriteria)">
            <summary>
            Returns a list of local product selection groups that a product is assigned to
            in provided business units.
            </summary>
            <param name="criteria">The filtering criteria used for selecting the relevant
            local product selection groups.</param>
            <returns>A collection of List of local product selection groups for the the
            provided business unit and product.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductGroupingDao.IsProductInGroup(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Returns if the product is contained in the location goroup for the business unit. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup">
            <summary>
            Represents a group of products.
            </summary>  
            <remarks>
            The association of the products to the group can be controlled by location.
            <para>
            The Group provides the following services:
            <list type="bullet">
            <item>
            <description>Adding a product to the local product selection group.</description>
            </item>
            <item><description>
            Excluding a product from the group.
            </description></item>
            <item><description>
            Checking whether a product is in the group.
            </description></item>
            <item><description>
            Checking whether a product was excluded from a local product selection group.
            </description></item>
            <item><description>
            Deleting all the local product selection group configurations for a specific
            product.
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup.Id">
            <summary>
            Gets or sets the unique identifier of the group.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup.Description">
            <summary>
            Gets or sets the description of the group.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup.IsMemeberOf(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Checks whether a product is a member of a group at a given location.
            </summary>
            <param name="product">The product queried.</param>
            <param name="location">The required location.</param>       
            <returns><see langword="true"/> if the product is a member of the specified
            group in the specified location; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup.AddProductToGroup(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Adds the assigned product to the group at the specified location.
            </summary>
            <param name="product">The product added to the group.</param>
            <param name="location">the location where the product should be added to the
            group.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup.ExcludeProductFromGroup(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Excludes the assigned product from the group at a specified location.
            </summary>
            <param name="product">The product excluded from the group</param>
            <param name="location">The location from which the product should be
            excluded.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup.RemoveProductCofigurationFromGroup(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Removes the configuration of the assigned product from the group at a
            specific location.
            </summary>
            <param name="product">The product for which configuration is removed from the
            group.</param>
            <param name="location">The location in which the configuration should be
            removed from the group.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroupDao">
            <summary>
            Represents an entity which persists the local product selection group in the
            system, saves groups, updates them and retrieves them.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroupDao.Get(System.String)">
            <summary>
            Looks for and returns a local product selection group by its ID.
            </summary>
            <param name="id">The local product selection group's ID.</param>
            <returns>An instance of a local product selection group. If no group has this
            ID, returns <see langword="null"/>.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroupDao.Get(System.String[])">
            <summary>
            Looks for and returns a number of local product selection groups by IDs.
            </summary>
            <param name="ids">The local product selection group IDs.</param>
            <returns>An collection of local product selection group matching the IDs requested. </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroupDao.GetByType(System.String)">
            <summary>
            Looks for and returns a local product selection group by type.
            </summary>
            <param name="type">The local product selection group type.</param>
            <returns>A local product selection group matching the type requested. </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroupDao.GetAll">
            <summary>
            Retrieves all the local product selection groups defined in the system.
            </summary>
            <returns>A collection containing all the local product selection groups
            defined in the system.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroupDao.Save(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup)">
            <summary>
            Saves a new local product selection group, or updates an existing one.
            </summary>
            <param name="group">The new local product selection group to be saved or
            updated.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroupDao.GetAllPaged(System.Int32)">
            <summary>
            Gets all the local product selection groups paged.
            </summary>
            <param name="pageSize">The Page size.</param>
            <returns>A collection of local product selection group types.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroupDao.GetAllPaged(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup,System.Int32)">
            <summary>
            Gets all the local product selection groups paged from a starting position.
            </summary>
            <param name="localProductSelectionGroup">Starting local product selection
            group.</param>
            <param name="pageSize">The Page size.</param>
            <returns>A collection of local product selection groups.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroupDao.Delete(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup)">
            <summary>
            Deletes a local product selection group.
            </summary>
            <param name="localProductSelectionGroup">the local product selection group
            that should be deleted.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroupFactory">
            <summary>
            Represents a factory which creates instances of product <see cref="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup">Group</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroupFactory.Create(System.String,System.String)">
            <summary>
             Creates a local product selection group.
            </summary>
            <param name="groupId">The ID of the selection group.</param>
            <param name="groupTypeName">The name of the <see cref="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup">Group</see>.</param>
            <returns>A new instance of an <see cref="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup">Group</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroupFactory.GetGroupTypeName(Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup)">
            <summary>
            Retrieves the name of the provided <see cref="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup">Group</see>.
            </summary>
            <param name="group"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ProductGroupingCriteria">
            <summary>
            Criteria used in local product grouping DAO
            to find a local product selection groups.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ProductGroupingCriteria.BusinessUnit">
            <summary>
            Gets or sets the business unit that the local product selection group should be
            configured for.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ProductGroupingCriteria.Product">
            <summary>
            Gets or sets the product that the local product selection group should be
            configured for.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ProductGroupingCriteria.#ctor(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Initializes a new instance of the ProductGroupingCriteria class for the
            specified product and business unit.
            </summary>
            <param name="product">The product that the local product selection group
            should be configured for. Specify <see langword="null"/> to indicate...</param>
            <param name="businessUnit">The business unit that the local product selection
            group should be configured for. Specify <see langword="null"/> to indicate...</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.Exceptions.ProductPaymentRestrictionRequestIsNotValidException">
            <summary>
            Thrown when required contract element is missing
            during service maintenance attempt.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.Exceptions.InvalidEligibilityEnvironmentException">
            <summary>
            Thrown when required business data that is necessary  
            for successful ProductPaymentRestirction maintenance is missing. 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.Exceptions.MissingProductOrGroupSelectionException">
            <summary>
            Thrown when Products or Groups of Products are missing during ProductPaymentRestriction maintenance attempt.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.ITenderMapper">
            <summary>
            Helps map between selling domain <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">payment</see>
            and <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender</see> abstractions 
            and the <see cref="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender">tender eligibilities</see> domain abstraction.
            In general, its purpose is for internal use by adaptor components that provide the selling domain convenient access to information produced by the tender eligibilities domain.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionSelectionStrategy">
            <summary>
            Represents a strategy that allows implementations to participate in filtering of 
            <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">IProductPaymentRestriction</see> entities which are configured for the same
            <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">IRetailSegment</see> entity, the same <seealso cref="P:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender.Key">ITender.Key</seealso>,
            and are all on the same <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> ancestry tree.
            </summary>
            <remarks>
            Implementers should decide how to resolve situations in which more than one restriction is applicable for same environment.
            For example, merge between them or choose one.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionSelectionStrategy.Filter(System.String,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction})">
            <summary>
            Returns <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestrictions</see> that are relevant for asked <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see>
            </summary>
            <param name="businessUnitId">The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see> ID on which the <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestrictions</see> are applied</param>
            <param name="productPaymentRestrictions">The list of <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestrictions</see> to be filtered</param>
            <returns>Filtered <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestrictions</see> </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap">
            <summary>
            Captures the configuration of Product Payment Restrictions in the context of a specific 
            <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">CustomerOrder</see>, <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see> and <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see>.
            The key of the elements is the TenderId.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap.GetRestrictions">
            <summary>
            Returns a mapping between <see cref="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender">ITender</see> objects and the <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestriction</see>
            entity that is applicable for that tender, in the context of <see cref="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap.RetailSegment"/> and the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> entity 
            represented by <see cref="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap.BusinessUnitId"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap.GetCoveringTenders(Retalix.StoreServices.Model.Product.IProduct,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</see> entities which have associated <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestriction</see>
            entities and which, according to these restrictions, are eligible to pay for <paramref name="product"/>, in the context of <see cref="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap.RetailSegment"/> 
            and the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> entity represented by <see cref="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap.BusinessUnitId"/>.
            </summary>
            <remarks>
            Some restrictions may require data within a particular customer order (e.g., payment terms) in order to check for eligibility.
            If <paramref name="customerOrder"/> is null, eligibility is checked against static product payment restriction configurations.
            </remarks>
            <param name="product">the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">product</see> to check tenders coverage over</param>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> entity, if any, in the context of which to check for the eligibility of
            tenders.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap.GetCoveringTenders(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</see> entities which have associated <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestriction</see>
            entities and which, according to these restrictions, are eligible to pay for <paramref name="orderLine"/>, in the context of <see cref="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap.RetailSegment"/> 
            and the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> entity represented by <see cref="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap.BusinessUnitId"/>.
            </summary>
            <param name="orderLine">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">line</see> to check tenders coverage over</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap.Find(Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">IProductPaymentRestriction</see> entity that is applicable according to the data 
            in <paramref name="paymentTerm"/>.
            </summary>
            <param name="paymentTerm">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">IPaymentTerm</see> object according to which to search for a matching restriction.</param>
            <returns>A matching <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">IProductPaymentRestriction</see> entity or null if no matching restriction is found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap.Find(Retalix.StoreServices.Model.Tender.TenderType.ITenderType)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">IProductPaymentRestriction</see> entity that is applicable according to the data 
            in <paramref name="tenderType"/>.
            </summary>
            <param name="tenderType">The <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</see> entity according to which to search for a matching restriction.</param>
            <returns>A matching <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">IProductPaymentRestriction</see> entity or null if no matching restriction is found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap.Find(Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">IProductPaymentRestriction</see> entity that is applicable according to the data 
            in <paramref name="tender"/>.
            </summary>
            <param name="tender">The <see cref="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender">ITender</see> object according to which to search for a matching restriction.</param>
            <returns>A matching <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">IProductPaymentRestriction</see> entity or null if no matching restriction is found.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IFSAPaymentRestriction">
            <summary>
            The IFSAPaymentRestriction represents the Payment Restriction of an FSA Card.  The FSA Card is issued in the 
            United States to allow for "tax favored spending accounts".  The IFSAPaymentRestriction captures the restrictions
            on products that can be paid for using the FSA cards.  The products are divided into sub categories.  These sub 
            categories may be: Rx, Non-Rx, Vision, Dental, or other.  These sub categories have a priority between them and 
            Eligibility of products must be satisfied based on this priority.<br/>
            The IFSAPaymentRestriction should be deployed as a regional extension only in the US.<br/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IFSAPaymentRestriction.EligibilityProfile">
            <summary>
            Each instance of the IFSAPaymentRestriction defines the permitted products permitted for the related
            Tenders, divided into sub categories.  This set of sub categories is a Profile of a Payment Restriction.
            The EligibilityProfile specified the relevant Profile this instance of IFSAPaymentRestriction should use.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IFSAPaymentRestriction.GetPrioritrizedGroupNames">
            <summary>
            The prioritrized group names under the EligibiltyProfile of the current instance of the IFSPaymentRestriction
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">
            <summary>
            The IProductPaymentRestriction represents a the validity of using a particular Payment Method (Tender or 
            Payment Card), to pay for specific products in the CustomerOrder.
            </summary>
            <remarks>
            The IProductPaymentRestriction is used during the selling interaction.  It captures the metadata of a 
            single Payment Restriction.  The instances are persisted in the database and are retrieved during selling
            processing.  The retrieved instances are used in order to determine the lines that are eligible for payment 
            by a particular Payment Method.<br />
            The IProductPaymentRestriction is defined per combinations of BusinessUnit, RetailSegment and TenderType.  Each such 
            combination is captured in an <see cref="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.IEligibilityEnvironment"/> instance.  For a RetailTransaction and 
            CustomerOrder that happen at a particular BusinessUnit and RetailSegment, of all the IProductPaymentRestriction instances 
            defined for the same ITenderType, the one defined for the BusinessUnit closest to the BusinessUnit of the CustomerOrder
            takes precedence over all others.<br/>
            This entity is maintained by the ProductPaymentRestrictionMaintenanceService.<br/>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction.Name">
            <summary>
            The name of the ProductPaymentRestriction.  This name is used for display purposes and also functions as the 
            key for the particular instance in the database.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction.EligibilityEnvironments">
            <summary>
            Captures the set of <see cref="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.IEligibilityEnvironment"/>s this Product Payment Restriction is valid for.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction.TenderBalanceDisplayMode">
            <summary>
            Indicates at which cases the result of the Eligibility Calculation based on this Restriction should be 
            displayed on the client.  The validity of the Payments based on the IProductPaymentRestriction is always enforced.
            However, the remaining eligibility amount is calculated, and reported with the CustomerOrder state, only when it 
            is needed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction.ReturnItemsReduceEligibility">
            <summary>
            Determines whether return products should be considered in the eligibility calculation.
            </summary>
            <remarks>
            When this flag is set to True, the value of Returned Products will reduce the Eligible Amount
            of the Tenders covered by this IProductPaymentRestriction.  Otherwise, the value of the Returned 
            Products will only reduce the Balance Due.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction.IsItemCovered(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Product.IProduct,System.String)">
            <summary>
            Determines if the specified  <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">order line</see> is eligible to the specified  <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">Tender</see>>.
            <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">Tender's</see> id is passed.
            </summary>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">Customer Order</see> to check the eligibility of the specified Tender over this order </param>
            <param name="product">The <see cref="T:Retalix.StoreServices.Model.Product.IProduct">Product</see> to check the eligibility of the specified Tender over it </param>
            <param name="tenderId">The id of the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">Tender Type</see> to check Eligibility for.  If the 
            tenderId that is passed in is null, the check will be preformed on all the Tenders in the EligibilityEnvironments</param>
            <returns>
             True if the  <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">Order Line</see> is eligible to the specified tender and False otherwise.
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction.IsLineCovered(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine,System.String)">
            <summary>
            Determines if the specified  <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">order line</see> is eligible to the specified  <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">Tender</see>>.
            </summary>
            <param name="orderLine">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">order line</see> to check the eligibility of the specified Tender over it</param>
            <param name="tenderId">The id of the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">Tender Type</see> to check Eligibility for.  If the 
            tenderId that is passed in is null, the check will be preformed on all the Tenders in the EligibilityEnvironments</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction.GetEligibleLines(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.String)">
            <summary>
            Retrieves the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">Order Lines</see> that the specified tenderId is Eligible
            for.  If the IProductPaymentRestriction implements a priority between the covered Order Lines, 
            each of the prioritized groups contained in the result will have a Name.  However, if IProductPaymentRestriction
            does not implement a priority, all the covered lines will be in one Group, and the Group's name is the empty string.
            </summary>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">Customer Order</see> to calculate Eligibility of the 
            specified Tender over its Order Lines.</param>
            <param name="tenderId">The id of the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">Tender Type</see> to calculate Eligibility for.  If the 
            tenderId that is passed in is null, the calculation will be carried out for all Tenders in the EligibilityEnvironments</param>
            <returns>An instance of <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.GroupedPrioritizedLines" />.  This instance represents a prioritized list
            of Groups of Order Lines that the specified Tender is Eligible for.  Each such Group has a Name and a 
            set of Order Lines.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionDao">
            <summary>
            Represents a data access object for <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">IProductPaymentRestriction</see> 
            responsible for saving and retrieving ProductPaymentRestrictions from the database.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction})">
            <summary>
            Saves the instances of the <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestrictions</see> to the database.
            </summary>
            <param name="productPaymentRestrictions">The <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestrictions</see> to save</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionDao.FindAll">
            <summary>
            Retrieves all the instances of <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestrictions</see> from the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionDao.Get(System.String)">
            <summary>
            Retrieves a specific instance of<see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestriction</see>
            by its unique name. the name is the key in the database.
            </summary>
            <param name="name">the name of the restriction to retrieve from the database.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionDao.GetBy(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
            Retrieves instances of <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestrictions</see> by specified environment.
            only the instances that were configured for the specified <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see>
            and the specified <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see>
            </summary>
            <param name="businessUnit">the  <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see> to get <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestrictions</see> for.</param>
            <param name="retailSegment">the  <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see> to get <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestrictions</see> for.</param>
            <returns>Restrictions that relevant to the provided  <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see> and <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionDao.GetBy(System.String,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
            Retrieves instances of <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestrictions</see> by specified environment.
            only the instances that were configured for the specified <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see>ID
            and the specified <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see>
            </summary>
            <param name="businessUnitId">the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see> ID of <see cref="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.IEligibilityEnvironment">IEligibilityEnvironment</see></param>
            <param name="retailSegment">the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see> of <see cref="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.IEligibilityEnvironment">IEligibilityEnvironment</see></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionDao.GetRestrictionsMap(System.String,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
            Prepare and cache a new instance of <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap">IProductPaymentRestrictionsMap</see>, 
            based on provided <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see> ID and <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see>
            </summary>
            <param name="businessUnitId"><see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see> ID for the required map</param>
            <param name="retailSegment"><see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see> for the required map</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction})">
            <summary>
            Deletes the specified instances of  <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestrictions</see> from the database.
            </summary>
            <param name="productPaymentRestrictions">The <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction">ProductPaymentRestrictions</see> to delete</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IRestrictedCardPaymentRestriction">
            <summary>
            The IRestrictedCardPaymentRestriction captures Payment Restrictions based on categories stored on
            the Payment Card itself.  The categories stored on the Payment Card are defined by the card issuer.  The 
            IRestrictedCardPaymentRestriction implementation is responsible for the mapping of the categories stored on
            the Payment Card to products in the current retailer's system.  The IRestrictedCardPaymentRestriction determines 
            the Payment Card Eligibility based on the categories stored on the card and the mapping to products configured 
            in the system.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IRestrictedCardPaymentRestriction.GetCustomerOrderProductCategories(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.String)">
            <summary>
            Returns the mapping of the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> entities in the <paramref name="customerOrder"/>
            to the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">ICategory</see> entities they belong to, within the context of 
            <see cref="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IRestrictedCardPaymentRestriction.ParentRestrictionCategory">ParentRestrictionCategory</see>. 
            </summary>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> instance that contains the relevant products.</param>
            <param name="restrictedCardParentCategoryName">
            The name of the <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICategory">ICategory</see> entity, in the "RestrictedCard" custom category hierarchy, 
            to use for looking up the product-to-category relationships, or null to use <see cref="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IRestrictedCardPaymentRestriction.ParentRestrictionCategory"/>.
            <remarks>
            Send <paramref name="restrictedCardParentCategoryName"/> when calling this method on a non-persisted 
            <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IRestrictedCardPaymentRestriction">IRestrictedCardPaymentRestriction</see> instance, for which 
            <see cref="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IRestrictedCardPaymentRestriction.ParentRestrictionCategory"/> is null.
            </remarks>
            </param>
            <exception cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.Exceptions.ConflictingRestrictedCardParentCategoryNameException">
            Thrown when <paramref name="restrictedCardParentCategoryName"/> is passed on a persisted 
            <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IRestrictedCardPaymentRestriction">IRestrictedCardPaymentRestriction</see> instance that has a configured
            <see cref="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IRestrictedCardPaymentRestriction.ParentRestrictionCategory">ParentRestrictionCategory</see>.
            </exception>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IRestrictedCardPaymentRestriction.GetProductsCoveredByCategoryNames(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the list of the <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> entities that are eligible for coverage by by the specified <param name="categoryNames"></param>.
            This method is used by client, in case the PaymentRestriction rule is violated, to determine eligible products.
            </summary>
            <param name="customerOrder">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> entity to retrieve products eligible to the
            specified <param name="categoryNames"/></param>
            <param name="categoryNames">The list of categoryNames the Payment Card is eligible for.  The category names are as 
            defined by the card issuer.  In order to know which products belong to these categories we must use the mappings that is
            specific to the Payment Card.</param>
            <returns>The list of <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> objects eligible for coverage by the specified categoryNames,
            within the context of this ParentRestrictionCategory.</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IRestrictedCardPaymentRestriction.FallbackRestrictionCategories">
            <summary>
            This collection represents the default restriction categories in case of fallback.
            Assuming the card has been fall-backed (in case the card that embeddes the categories, could not be read from the primary entry method (i.e. MSR), 
            will be fall-backed to Keyed), <br></br>
            these configured restrictions categories will be used as a default behavior.<br></br>
            These restrictions represent the custom hierarchies which represent the eligible products for the restricted card.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IRestrictedCardPaymentRestriction.ParentRestrictionCategory">
            <summary>
            Restriction category that defined for the Eps <see cref="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ICardTender">ICardTender</see> object, and 
            represents the relevant <see cref="T:Retalix.StoreServices.Model.Product.Hierarchy.ICustomCategory">ICustomCategory</see> list that configured for Card and 
            contains the Eligible categories.       
            </summary>
            <remarks>
            The restriction category will be retrieved by this Id from Custom Categories Configuration.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleAvgWeightCalculationAlgorithm">
            <summary>
            Calculate the avarage weight of an item
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleAvgWeightCalculationAlgorithm.Calculate(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement},Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightCalcultionState)">
            <summary>
            Calculte the avarage weight of an item based on previous measurments.
            </summary>
            <param name="measurements"></param>
            <param name="state"></param>
            <returns>SecurityScaleAvgWeightCalculationResult</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightCalcultionState">
            <summary>
            Represents the types of security scale weight calcultion state.
            These types are related to the product and used during the security scale learning Process
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleValidationResult">
            <summary>
            Represents the validation result of a Security Scale Validator ISecurityScaleWeightValidator. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleValidationResult.ResultCode">
            <summary>
            Gets or sets the result of the validation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleValidationResult.ProductId">
            <summary>
            Gets or sets the product id that involve in the validation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleValidationResult.Weight">
            <summary>
            Gets or sets the Wight that was sent for validation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleValidationResult.ValidatorName">
            <summary>
            Gets or sets name of the validator that return the result.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleAvgWeightCalculationResult">
            <summary>
            Represents the avarage weight calculation result. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleAvgWeightCalculationResult.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleAvgWeightCalculationResult.Avg">
            <summary>
            The avarage weight of the item
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleAvgWeightCalculationResult.Std">
            <summary>
            The std of the avareage calcultion
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleAvgWeightCalculationResult.MeasurmentsCounter">
            <summary>
            Number of measurments used for calcultion
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider">
            <summary>
            Security scale parameters
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.UnattendedWeightTimeout">
            <summary>
            Unattended weight timeout
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.BagWeightTolerance">
            <summary>
            Bag weight tolerance
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.ScaleDigression">
            <summary>
            Scale digression tolerance
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.ItemNotPlacedInBagTimeout">
            <summary>
            Item not placed in bag timeout
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.NotAllQtySaleItemsPlacedInBagTimeout">
            <summary>
            This parameter is used only on SCO, when quantity sale is performed and QTY > 1
            Parameter triggering point in the flow:  qty sale was performed => item is placed on bagging area => 
            weight validation was performed => Result: ‘underweight’ => New parameter is triggered
            Parameter is counting the time till one of the below is happening: 
            The time that defined  in the parameter is reached – Stop counting
            OR
            Another item is placed on bagging area. Stop counting and check weight on security scale. 
            If weight validation result is  ‘underweight’ than new parameter is reinitialized
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.LearnWeightThreshold">
            <summary>
            How many security scale measurements needed to calculate average weight and deviation and finish learning mode 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.LearnWeightSecondThreshold">
            <summary>
            How many security scale measurements needed to Recalculate average weight and deviation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.WeightMismatchThreshold">
            <summary>
            After how many weight mismatches item returns to learning mode
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.ZeroWeightThreshold">
            <summary>
            After this amount of zero or zero-like weight samples, the item weight type is set to expect no weight.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.ZeroWeightTolerance">
            <summary>
            The maximum weight that is still considered zero weight.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.LearnZeroWeightWeightedPercentage">
            <summary>
            Zero weight percentage – Up to how many weighted samples are allowed in order for an item to be considered as Expect no weight.
            The percentage is calculated from the number of samples that are actually considered for the learning.
            Rounding will be down.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.NumberOfSTDs">
            <summary>
            Factor by which standard deviation is multiplied to define valid weight range
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.DataCalculationInterval">
            <summary>
            Interval time by seconds to repeat the security scale scheduler that will calculate the measurement Data
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleParametersProvider.NumberOfOwnBagThershold">
            <summary>
            Number of own bag threshold
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData">
            <summary>
             Encapsulates average weight of the product and standard deviation of the product's average weight.
             This parameters is updated by the <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleWeightLearningHandler">ISecurityScaleWeightLearningHandler</see>.
             While selling a weight product, a check is performed to verify if the product's weight is within the average weight and standard deviation limits.
             If the weight is not within these limits, the product cannot be sold.       
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData.Product">
            <summary>
             Gets or sets an <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see> that the security scale data( average, STD,...) is linked to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData.ProductId">
            <summary>
             Gets or sets a <see cref="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData.ProductId">ProductId</see> that the security scale data( average, STD,...) is linked to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData.SecurityWeightType">
            <summary>
             Gets or sets a <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTypeEnum">SecurityWeightTypeEnum</see> that represents
             the type of security scale weight validation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData.SecurityWeightAverage">
            <summary>
             Gets or sets a SecurityWeightAverage that represents the average security weight, 
             calculated after several measurements in learning mode.
             <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleWeightLearningHandler">ISecurityScaleWeightLearningHandler</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData.SecurityWeightSTD">
            <summary>
             Gets or sets a SecurityWeightSTD that represents a standard deviation of a security scale weight,
             calculated after several measurements in learning mode.
             <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleWeightLearningHandler">Security ScaleWeight Learning Handler</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData.InLearningMode">
            <summary>
             Gets or sets a boolean value indicating that InLearningMode represents true when item is in security scale weight learning mode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData.LearnWeightCounter">
            <summary>
             Gets or sets a LearnWeightCounter that represents the
             number of security scale weight measurements performed since item was set to learning mode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData.WeightMismatchCounter">
            <summary>
            Gets or sets an WeightMismatchCounter that represents number of security scale weight mismatch counter.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData.ZeroWeightCounter">
            <summary>
            Gets or sets a ZeroWeightCounter that represent the number of consecutive times a zero
            or zero-like weight had been approved.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData.LastUpdated">
            <summary>
            Gets or sets a LastUpdated that represent the Last update date
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleDataDao">
            <summary>
            Represents the data access object responsible for saving and retrieving <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData">Security Scale Data</see> from the database.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleDataDao.GetByProductId(System.String)">
            <summary>
            Retrieves <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData">ISecurityScaleData</see> by the productId.
            </summary>
            <param name="productId"> </param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleDataDao.Save(Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData)">
            <summary>
            Saves <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData">ISecurityScaleData</see> to the database.
            </summary>
            <param name="securityScaleData"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleDataDao.Delete(Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData)">
            <summary>
            Deletes <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData">ISecurityScaleData</see>.
            </summary>
            <param name="securityScaleData"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleDataFactory">
            <summary>
            Represents a factory that creates an <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData">ISecurityScaleData.</see> 
            the ISecurityScaleData is a structure that Encapsulates average weight of the product and standard deviation of the product's average weight.
            These parameters are updated by the <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleWeightLearningHandler">ISecurityScaleWeightLearningHandler</see>.
            While selling a weight product, a check is performed to verify if the product's weight is within the average weight and standard deviation limits.
            If the weight is not within these limits, the product cannot be sold.    
            </summary>
            TODO: add see cref to  ISecurityScaleData and give more details on this data structure
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleDataFactory.Create(Retalix.StoreServices.Model.Product.IProduct)">
            <summary>
            Creates a new Security Scale Data.
            </summary>
            <param name="product"></param>
            <returns>
            An implementation of the <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData">ISecurityScaleData</see>.
            This ISecurityScaleData has a link to <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>,
            and all its parameters are refered to the IProduct.
            </returns>  
            TODO: more details about the need of IProduct.
            TODO: add see cref tag to IProduct.
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleDataFactory.Create(Retalix.StoreServices.Model.Product.ProductId)">
            <summary>
            Creates a new Security Scale Data.
            </summary>
            <param name="productId"></param>
            <returns>
            An implementation of the <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData">ISecurityScaleData</see>.
            This ISecurityScaleData has a link to <see cref="T:Retalix.StoreServices.Model.Product.ProductId">ProductId</see>.
            </returns>  
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleValidator">
            <summary>
            Represents the Interface for Security Scale Validators, which are
            used to determine whether specified order lines has valid weight.
            </summary>
            TODO : start with "Represents ..."
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleValidator.Execute(Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationInfo)">
            <summary>
            Run a logic that gets the information of the measurement 
            <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationInfo">SecurityScaleWeightValidationInfo</see> 
            and the product that had been scaled
            and returned to the SecurityScaleWeightValidationResult.
            </summary>
            <param name="securityScaleWeightValidationInfo"></param>
            <returns>a <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationResult">SecurityScaleWeightValidationResult</see> </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleWeightLearningHandler">
            <summary>
             Represents an interface of Process security scale measurements for weight learning
             The weight learning is a processes of collecting information of the weight of product,
             which been used for the security scale validate in the process of selling.
             The weight learning updates the parameters in <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData">ISecurityScaleData</see>. 
            </summary>
             TODO: start with "Represents"
             TODO: check spelling 
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleWeightLearningHandler.ProcessMeasurement(Retalix.StoreServices.Model.Product.IProduct,System.Decimal,System.DateTime,Retalix.StoreServices.Model.Organization.User.IUser,Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData)">
            <summary>
             Process of the new security scale measurement for the Security Scale Weight Learning.
             <see cref="T:Retalix.StoreServices.Model.Product.IProduct">IProduct</see>
             <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IApplicationUser</see> 
            </summary>
            <param name="product"></param>
            <param name="weight"></param>
            <param name="time"></param>
            <param name="approvingOperator"></param>
             <param name="securityScaleData"></param>
             TODO: add the see cref to the input arguments IProduct for example
              
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleWeightLearningHandler.ProcessMeasurement(Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement)">
            <summary>
             Process of the <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement">ISecurityScaleMeasurement</see> for the Security Scale Weight Learning, 
             received from the DMS.
            </summary>
            <param name="securityScaleMeasurement"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleWeightLearningHandler.DataCalculation">
            <summary>
             Calculation of the <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData">ISecurityScaleData</see> for the Security Scale Weight Learning.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleWeightLearningHandler.LearningModeStarting">
            <summary>
            Occurs when a mismatch is scanned and this scan violates a configured threshold for WeightMismatchCounter  
            and learning mode is turned back to true.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleWeightValidator">
            <summary>
             Represents an interface that validates product security scale weight to prevent frauds related to 
             product / barcode replacements to prevent profit loss.
             While selling a product, a check is performed to verify if the product's weight is valid.
             If the weight is not valid, the product cannot be sold.
            </summary>
             TODO: Start interface description with  "Represents .."
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleWeightValidator.Execute(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine,System.Decimal,Retalix.StoreServices.Model.Organization.User.IUser)">
            <summary>
            Executes the <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleValidator">ISecurityScaleValidator</see> 
            to determine whether the specified order line has a valid weight.
            <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> 
            <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IApplicationUser</see> 
            </summary>
            <param name="orderLine">The order line.</param>
            <param name="weight">The weight.</param>
            <param name="approvingOperator">The approving operator.</param>
            TODO: add relevant see cref for input arguments.
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationInfo">
            <summary>
            Represents a Security Scale Weight Validation Args.
            Parameters that are used by<see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleValidator">ISecurityScaleValidator</see>,
            to determine whether a specified order line has valid weight. 
            </summary>
            TODO: start with "Represents .."
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationInfo.SecurityScaleData">
            <summary>
            Gets or sets an <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleData">ISecurityScaleData</see> that represents
            an average weight of the product and standard deviation of the product's average weight. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationInfo.Weight">
            <summary>
            Gets or sets the weight that represents the actual weight received from the security scale.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationInfo.QuantityOfWeightedItem">
            <summary>
            Gets or sets a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.SellQuantity">SellQuantity</see> that represents
            the quantity of the product that received from the security scale. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationInfo.ApprovingOperator">
            <summary>
            Gets or sets an <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IApplicationUser</see> that represents
            an operator which approved the product in case of weight mismatch.
            A mismatch occured when the actual weight that received from the security scale is not in
            the tolerance of the average weight of the product and the operator who approve it. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationInfo.SecurityWeightTolerance">
            <summary>
            Gets or sets an <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightTolerance">ISecurityWeightTolerance</see> that represents
            security scale weight tolerance configuration in the form of weight percents up to specific weights. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationInfo.ScaleDigression">
            <summary>
            Gets or sets a ScaleDigression that represents the scale digression tolerance. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationInfo.NumberOfSTDs">
            <summary>
            Gets or sets a NumberOfSTDs that represents which standard deviation
            is multiplied to define valid weight range. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationInfo.IsPriceEmbeddedBarcode">
            <summary>
            Gets or sets a boolean that represents if the scan data of the product Is PriceEmbeddedBarcode. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationInfo.ZeroWeightTolerance">
            <summary>
            The maximum weight that is still considered zero weight.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightTolerance">
            <summary>
            Represents the interface that contains the security scale weight tolerance configuration in form of weight percents up to specific weights
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightTolerance.StoreHierarchyNode">
            <summary>
            Gets or sets the Item weight range that is configured by a store hierarchy location.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightTolerance.Lines">
            <summary>
            Gets or sets the allowable weight percent tolerance according to item weight.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightToleranceDao">
            <summary>
            Represents the interface that defines all the configurations regarding item weight range.
            Usually used for security scale in Self Check Out.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightToleranceDao.Get(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Get single item weight range according to store hierarchy node.
            The search will be from current store hierarchy node untill the Root.
            </summary>
            <param name="businessUnit">Search from this node to root</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightToleranceDao.GetByStoreLocation(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Get single item weight range according to store hierarchy node.
            The search will be only for input store hierarchy node.
            For searching untill Root please refer to Get(IHierarchyLevelNode businessUnit).
            </summary>
            <param name="IBusinessUnit">Search only for this specific node</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightToleranceDao.GetAll">
            <summary>
            Get all item weight range in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightToleranceDao.GetAllFromPosition(Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightTolerance)">
            <summary>
            Get all item weight range from Position.
            </summary>
            <param name="fromPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightToleranceDao.Save(Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightTolerance)">
            <summary>
            Save a new item weight range or update an existing one.
            </summary>
            <param name="securityWeightTolerance"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightToleranceDao.Delete(Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightTolerance)">
            <summary>
            Delete an existing item weight range.
            </summary>
            <param name="securityWeightTolerance"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightToleranceFactory">
            <summary>
             Represents the Item weight range factory, used with a security scale.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightToleranceFactory.CreateSecurityWeightTolerance(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
             OnCreate item weight range and assign to business unit
            </summary>
            <param name="storeHierarchyNode"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightToleranceFactory.CreateSecurityWeightTolerancePercent">
            <summary>
             OnCreate item weight tolerance percent
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightToleranceLine">
            <summary>
            Represents the the maximum allowable weight percent digression from the actual item weight.
            The percent is defined according to the item weight (Item weight up to...)
            Usually used for security scale in Self Check Out.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightToleranceLine.UpToWeight">
            <summary>
            Gets or sets up to weight.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTolerance.ISecurityWeightToleranceLine.Percent">
            <summary>
            Gets or sets percent.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleInfo">
            <summary>
            Represents the security scale information of the measurement that was performed, as part of the IOrderLine
            <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see>.
            Commonly used by the security scale validation system triggered from the self checkout touch point.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleInfo.Weight">
            <summary>
             Gets a weight that represent actual weight received from the security scale.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleInfo.ApprovingOperator">
            <summary>
            Gets or sets an <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IApplicationUser</see> that represents
            the  operator which approved the product in case of weight mismatch.
            A mismatch occurs when the actual weight that received from the security scale is not in
            the tolerance of the average weight of the product and operator had to approve it.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleInfo.Time">
            <summary>
            Gets the time that represents when the measurement was performed.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement">
            <summary>
             Represents a data structure that holds data that is used to save the data in the process of Security Scale Weight Learning. 
             ISecurityScaleWeightLearningHandler
            </summary>
             TODO: use "Represents" .. instead of object
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement.ProductId">
            <summary>
             Gets or sets a ProductId that represents the product identifier
             to be validated by the security mechanism. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement.Weight">
            <summary>
             Gets or sets a Weight that represents the actual weight received from the security scale.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement.Time">
            <summary>
             Gets or sets a <see cref="T:System.DateTime">DateTime</see> that represents the Time when a measurement was performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement.BusinessUnitId">
            <summary>
             Gets or sets a BusinessUnitId that represents the Store ID at which the selling was performed.
             IBusinessUnit 
            </summary>
             TODO : dont we have IBusinessUnit interface ? 
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement.TouchPointId">
            <summary>
             Gets or sets a TouchPointId that represents the Touch point ID on which the selling was performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement.IsWeightMismatch">
            <summary>
             Gets or sets a boolean value indicating whether an IsWeightMismatch that represents Weight mismatch
             occurs. This is considered when the actual weight that was received from the security scale is not in
             the tolerance of the average weight of the product and the operator had to approve it.
             True when measurement was rejected and the operator had to approve it, otherwise false.
            </summary>
             TODO: add see cref IsWeightMismatch
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement.ProcessState">
            <summary>
             Indicating the Data Calculation Process State of the SecurityScaleMeasurement record.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurementDao">
            <summary>
            Represents a data access responsible for saving and retrieving an
            <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement">ISecurityScaleMeasurement</see> from the database.
            </summary>
            TODO : ISecurityScaleMeasurement insted of "Security Scale Measurement"
            TODO: start with "Represents ..."
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurementDao.Save(Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement)">
            <summary>
            Saves the <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement">ISecurityScaleMeasurement</see> to the database.
            </summary>
            <param name="securityScaleMeasurement"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurementDao.Delete(Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement)">
            <summary>
            Delete the <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement">ISecurityScaleMeasurement</see> from the database.
            </summary>
            <param name="securityScaleMeasurement"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurementDao.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete all the <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement">ISecurityScaleMeasurement</see>  
            of a given items from the database.
            </summary>
            <param name="consumableId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurementDao.FindAllLearnWeightMeasurements(System.String)">
            <summary>
             Retrieves the enumerable of the <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement">ISecurityScaleMeasurement</see>
             of a given item.
            </summary>
            <param name="consumableId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurementDao.GetAllUnprocessedMeasurements">
            <summary>
             Retrieves the enumerable of the <see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement">ISecurityScaleMeasurement</see>
             that were not processed by the Data calculation handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurementDao.GetAll">
            <summary>
              Retrieves all enumerables of the<see cref="T:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurement">ISecurityScaleMeasurement</see>
             used by the DMS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.ISecurityScaleMeasurementDao.DequeuePendingMeasurements">
            <summary>
            Retreive pending measurments for data calculation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationResult">
            <summary>
            Represents the validation result of a Security Scale Validator ISecurityScaleValidator. 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationResult.Match">
            <summary>
            Validation succeeded, don't execute the next validators.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationResult.RejectWithUnderweight">
            <summary>
            Validation failed With Underweight.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationResult.RejectWithOverweight">
            <summary>
            Validation failed With Overweight.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityScaleWeightValidationResult.Indecisive">
            <summary>
            can not decided, move to next validators.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTypeEnum">
            <summary>
             Represents the types of security scale weight validations.
             These types are related to the product and Security Scale Data
             and are checked in the validation process.
             ISecurityScaleWeightValidator
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTypeEnum.ExpectNoWeight">
            <summary>
             Security scale weight validation is not performed, for example microwaves, TVs, gift cards, etc.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTypeEnum.ValidateWeight">
            <summary>
             Security scale weight validation is performed.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTypeEnum.AcceptAnyWeight">
            <summary>
             Security scale weight validation is performed, but any weight is accepted.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTypeEnum.WeightBagOptional">
            <summary>
             Security scale weight validation is performed, if any weight is put on the scale or else it is not performed
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTypeEnumExtension">
            <summary>
             Represents the utility class for item SecurityWeightType. 
             </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTypeEnumExtension.RetalixExtSecurityScaleRequired">
            <summary>
             Represents the "SecurityScaleRequired" constant.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTypeEnumExtension.IsSecurityWeightRequired(Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTypeEnum)">
            <summary>
             Specifies the boolean value indicating if the POS client needs to perform a security scale measurement.
            </summary>
            <param name="securityWeightType"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.SecurityScale.SecurityWeightTypeEnumExtension.Parse(System.String)">
            <summary>
             Represents the string converted to SecurityWeightTypeEnum.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.BusinessRuleRef.BehaviorType">
            <summary>
            Gets or sets the Behavior Type of the Business Rule that created the intervention.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.BusinessRuleRef.ActionType">
            <summary>
            Gets or sets the Action Type of the Business Rule that created the intervention.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.Ignore">
            <summary>
             Intervention property defines per location
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.Ignore.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.Ignore.#ctor(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Boolean)">
            <summary>
            </summary>
            <param name="location"></param>
            <param name="value"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.Ignore.Value">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.Ignores">
            <summary>
             Collection of properties stored by type Ignore and specific location
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.Ignores.#ctor(Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IInterventionLocationParamPersister)">
            <summary>
            </summary>
            <param name="persister"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IInterventionLocationParam`1">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IInterventionLocationParamPersister">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.InterventionLocationParam">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfiguration">
            <summary>
             Define properties and behaviour of Self Checkout intervention
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfiguration.ErrorCode">
            <summary>
             Unique Id of ScoIntervention event
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfiguration.Name">
            <summary>
             Display name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfiguration.BusinessUnits">
            <summary>
             Collection of BusinessUnits that current intervention has definition 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfiguration.AttendantRequiredIsEditable">
            <summary>
             Define if AttendantRequired property is allowed for configuration
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfiguration.DelayInterventionIsEditable">
            <summary>
             Define if DelayIntervention property is allowed for configuration
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfiguration.IgnoreIsEditable">
            <summary>
             Define if Ignore property is allowed for configuration
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfiguration.AttendantRequireds">
            <summary>
            Location related collection of AttendantRequired properties 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfiguration.DelayInterventions">
            <summary>
            Location related collection of DelayIntervention properties 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfiguration.Ignores">
            <summary>
            Location related collection of Ignore properties 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfigurationDao">
            <summary>
             ScoInterventionConfiguration Dao
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfigurationDao.GetByCode(System.String)">
            <summary>
             Return ScoInterventionConfiguration by ErrorCode. 
            </summary>
            <param name="code">ErrorCode used as Unique id</param>
            <returns>ScoInterventionConfiguration</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfigurationDao.GetAll">
            <summary>
             return all defind ScoInterventionConfigurations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfigurationDao.SaveOrUpdate(Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfiguration)">
            <summary>
             Save or update ScoInterventionConfiguration
            </summary>
            <param name="scoInterventionConfiguration"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfigurationDao.Delete(Retalix.StoreServices.Model.Selling.ScoIntervention.Configuration.IScoInterventionConfiguration)">
            <summary>
            Delete ScoInterventionConfiguration
            </summary>
            <param name="scoInterventionConfiguration"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.IInterventionParam`1">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.IScoInterventionBasicDefinition">
            <summary>
            Describes an entity of Type ScoInterventionDataObjectIScoInterventionBasicDefinition
            Defined by code(hardcoded) or by extended interface 
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.IScoInterventionBasicDefinition.Name">
            <summary>
            Name of the intervention BasicDefinition
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.IScoInterventionBasicDefinition.ErrorCode">
            <summary>
            ErrorCode of the intervention BasicDefinition
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.ReleaseMethod">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.ReleaseMethod.Acknowledge">
            <summary>
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.ReleaseMethod.ContinueFlow">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.IScoInterventionBasicDefinitionDao">
            <summary>
            Self Chekout Interventions Repository.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.IScoInterventionBasicDefinitionDao.GetAll">
            <summary>
            Get all interventions.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.IScoInterventionBasicDefinitionDao.GetByCode(System.String)">
            <returns>Get intervention by error code</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.IScoInterventionBasicDefinitionStrategy">
            <summary>
             
             Extension point.
             
             
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.IScoInterventionBasicDefinitionStrategy.GetAllScoInterventionBasicDefinitions">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.RestrictionRuleAspectDefinition">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.Definition.RestrictionRuleAspectDefinition.RuleId">
            <summary>
            Restriction rule ID which ownes the aspect.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Exceptions.ConfigurationNotExistForRequestedErrorCodeException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Exceptions.InterventionConfigurationChangeNotAllowedException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.Exceptions.InterventionConfigurationWrongPropertyValueException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IInterventionInfo.Amount">
            <summary>
            Line Amount calculated by the catalog price and quantity.The Amount returns CatalogAmount - all price modifiers.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IInterventionInfo.InterventionId">
            <summary>
            Intervention Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IInterventionInfo.OperationName">
            <summary>
            Describes durring what operation (ex:item add,etc...) intervention occured.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IInterventionInfo.Type">
            <summary>
            Type of the intervention (Delayed)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IInterventionInfo.ItemId">
            <summary>
            The item id that the intervention was associated with.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IInterventionInfo.ItemSequenceNumber">
            <summary>
            The items' line sequence number, that the intervention was associated with.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IInterventionInfo.Message">
            <summary>
            Intervention event message.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IInterventionInfo.IsDelayed">
            <summary>
            Is intervention was delayed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IInterventionInfo.TransactionSequence">
            <summary>
            Transaction Unique Id per TouchPoint.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IInterventionInfo.TransactionExternalId">
            <summary>
            Transaction Unique Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IInterventionInfo.RetailTransaction">
            <summary>
            Gets or sets the retail transaction.
            </summary>
            <value>The retail transaction.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IInterventionInfo.CreatedByBusinessRule">
            <summary>
            Gets or sets the Business Rule that creates this interention.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoHardwareIntervention">
            <summary>
            SCO Hardware intervention
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoHardwareIntervention.Ik">
            <summary>
            Internal key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoHardwareIntervention.TouchPoint">
            <summary>
            TouchPoint to which intervention belongs
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoHardwareIntervention.Device">
            <summary>
            Failured device
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoHardwareIntervention.Message">
            <summary>
            Message received from device
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoHardwareIntervention.HandlingType">
            <summary>
            Handling type - should this intervention occur immediately or after current transaction complete or handling can be delayed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoHardwareIntervention.Model">
            <summary>
            Model
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoHardwareIntervention.SubModel">
            <summary>
            SubModel
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoHardwareIntervention.ErrorCode">
            <summary>
            ErrorCode
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoHardwareIntervention.ExtendedErrorCode">
            <summary>
            ExtendedErrorCode
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention">
            <summary>
            Describes an entity of Type ScoInterventionDataObject
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention.Ik">
            <summary>
            Internal key.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention.RetailTransactionId">
            <summary>
            Retail transaction ID
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention.RetailTransactionSequenceNumber">
            <summary>
            Retail transaction sequence ID
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention.OperationName">
            <summary>
            Describes durring what operation (ex:item add,etc...) intervention occured.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention.Type">
            <summary>
            Type of the intervention (Delayed)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention.ItemId">
            <summary>
            The item id that the intervention was associated with.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention.ItemSequenceNumber">
            <summary>
            The items' line sequence number in the transaction, that the intervention was associated with.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention.Message">
            <summary>
            Intervention event message.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention.RetailTransaction">
            <summary>
            Describes durring what retail transaction intervention occured.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention.IsDelayed">
            <summary>
            Is intervention was delayed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention.CreatedByBusinessRule">
            <summary>
            Gets or sets the Business Rule that creates this interention.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoInterventionRepository">
            <summary>
            Self Chekout Interventions Repository.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoInterventionRepository.GetById(System.Int32)">
            <summary>
            Get intervention by id.
            </summary>
            <param name="id">intervention id</param>
            <returns>Self checkout intervention</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoInterventionRepository.Find(Retalix.StoreServices.Model.Selling.ScoIntervention.ScoInterventionLookupCriteria)">
            <summary>
            Find interventions by lookup criteria.
            </summary>
            <param name="scoInterventionLookupCriteria">Lookup criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoInterventionRepository.GetAllByTransactionSequenceNumber(System.Int32)">
            <summary>
            Get all interventions that was associated with given transaction.
            This method is obsolete as it may get the wrong results if we have transactions with the same sequence form another pos
            </summary>
            <param name="transactionSequenceNumber">Retail transaction sequence number</param>
            <returns>Self checkout intervention</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoInterventionRepository.GetAllByTransactionId(System.String)">
            <summary>
            Get all interventions that was associated with given transaction.
            </summary>
            <param name="transactionId">Retail transaction id</param>
            <returns>Self checkout intervention</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoInterventionRepository.CreateObject">
            <summary>
            Used to create a new detached object of type ScoInterventionDataObject. (Use it if you want to create a new object.)
            </summary>
            <returns>ScoInterventionDataObject detached object that was associated with the mapping.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoInterventionRepository.SaveOrUpdate(Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention)">
            <summary>
            Used to save ScoIntervention DataObject(entity) to data storage.
            </summary>
            <param name="scoIntervention">ScoInterventionDataObject</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoInterventionRepository.Delete(Retalix.StoreServices.Model.Selling.ScoIntervention.IScoIntervention)">
            <summary>
            Used to delete ScoIntervention DataObject(entity) from data storage.
            </summary>
            <param name="scoIntervention">ScoInterventionDataObject</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoInterventionRepository.SaveOrUpdate(Retalix.StoreServices.Model.Selling.ScoIntervention.IScoHardwareIntervention)">
            <summary>
            Save or update SCO hardware intervention
            </summary>
            <param name="scoHardwareIntervention"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoInterventionRepository.Delete(Retalix.StoreServices.Model.Selling.ScoIntervention.IScoHardwareIntervention)">
            <summary>
            Delete SCO hardware intervention
            </summary>
            <param name="scoHardwareIntervention"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.ScoIntervention.IScoInterventionRepository.GetAllHardwareInterventionsForTouchPoint(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            Get all SCO hardware interventions for given touch point
            </summary>
            <param name="touchPoint"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ThirdParty.ThirdPartySession">
            <summary>
            Captures state of the Client Application stored on the RetailTransaction so that the client can recover from a crash.
            An example of this usage is when the POS Touchpoint calls the EPS in order to get Payment Authorization, 
            it can store the state of the EPS Session on the R10 RetailTransaction, 
            allowing it to recover failure even if a crash happens during the EPS Session.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ThirdParty.ThirdPartySession.SessionStatus">
            <summary>
            <para><b>Note: This class is non stable and could be removed in future versions</b></para> 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ThirdParty.ThirdPartySession.Actions">
            <summary>
            <para><b>Note: This class is non stable and could be removed in future versions</b></para> 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ThirdParty.ThirdPartySessionActivityContent">
            <summary>
            Provides ability for client to store any third-party session activity data.
            Not restricted to EPS system activities.
            <para><b>Note: This class is non stable and could be removed in future versions</b></para> 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.ThirdParty.ThirdPartySessionActivityContent.ActivityType">
            <summary>
            <para><b>Note: This class is non stable and could be removed in future versions</b></para> 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BRM.Condition.ICondition">
            <summary>
            Interface for BRM conditions.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.BRM.Condition.ICondition.Evaluate(Retalix.StoreServices.Model.Infrastructure.Message.IExpressionContext)">
            <summary>
            Evaluates the condition in a given context.
            </summary>
            <param name="ruleContext">The rule context in which this condition should be evaluated.</param>
            <returns>True if the condition is logically true in the given context, false otherwise.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BRM.Condition.IConditionExecuter">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BRM.Condition.IExpressionCondition">
            <summary>
             Expression condition
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.Condition.IExpressionCondition.Expression">
            <summary>
             Expression  to evaluate
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.Condition.IExpressionCondition.ExpressionTags">
            <summary>
             available tags from expression 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BRM.IBRMInputDataCollection">
            <summary>
            Represents the map between the action ID and the return input data.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BRM.IRuleEnvironment">
            <summary>
            Represents an interface for that is used for rule environments, providing access to the store hierarchy and  
            touchpoint group for which the rule is activated.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.IRuleEnvironment.Location">
            <summary>
            The environment's node in the store hierarchy.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.IRuleEnvironment.RetailSegment">
            <summary>
            Retail segment for which this environment is defined
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.BRM.IRuleEnvironment.ComplyWith(Retalix.StoreServices.Model.Selling.BRM.IRuleEnvironment)">
            <summary>
            Checks whether the provided environment is contained in this environment, both hierarchy- and touchpoint group-wise.
            </summary>
            <param name="ruleEnvironment">An environment with which to check compliance.</param>
            <returns>True if this environment complies with ruleEnvironment, false otherwise.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BRM.IRuleFactory">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BRM.Expression.Descriptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.BRM.Expression.Descriptor.#ctor(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.Expression.Descriptor.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.Expression.Descriptor.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.Expression.Descriptor.AvailableValues">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.BRM.Expression.Descriptor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.BRM.Expression.Descriptor.Equals(Retalix.StoreServices.Model.Selling.BRM.Expression.Descriptor)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BRM.Expression.IRuleExpressionAdaptor">
            <summary>
            Interface for getting rule expressions
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.Expression.IRuleExpressionAdaptor.EntityName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.BRM.Expression.IRuleExpressionAdaptor.GetDescriptors">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.BRM.Expression.IRuleExpressionAdaptor.GetBusinessContexts">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.BRM.Expression.IRuleExpressionAdaptor.GetBusinessActivities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BRM.Expression.ParameterDescriptor">
            <summary>
            Represent a parameter descriptor
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.BRM.Expression.ParameterDescriptor.#ctor(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BRM.Expression.PropertyDescriptor">
            <summary>
             Represents the property used in the
             <see cref="T:Retalix.StoreServices.Model.Selling.BRM.Expression.IRuleExpressionAdaptor">IRuleExpressionAdaptor</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.Expression.PropertyDescriptor.Group">
            <summary>
             Gets or sets the Group name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.Expression.PropertyDescriptor.Parameter">
            <summary>
             Gets or sets the Parameter descriptor if requires by the property.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.Expression.PropertyDescriptor.Tag">
            <summary>
             Gets or sets the Tag the property for any usage of filtering or usage 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.BRM.Expression.PropertyDescriptor.#ctor(System.String,System.Type,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             class constructor 
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="group"></param>
            <param name="businessContexts"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.BRM.Expression.PropertyDescriptor.GetBusinessContexts">
            <summary>
             Represents a list of Business Contexts.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BRM.Expression.PropertyDescriptor`1">
            <summary>
             Represents the PropertyDescriptor by type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.BRM.Expression.PropertyDescriptor`1.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="group"></param>
            <param name="businessContexts"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.BRM.IInputData">
            <summary>
            Represents the name and value of the input.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.IInputData.RuleId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.IInputData.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.BRM.IInputData.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.Audit.TipApprovedAuditLogData.TenderId">
            <summary>
            Tip tender id 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.Audit.TipApprovedAuditLogData.TenderTypeName">
            <summary>
            Type name of tip tender
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.Audit.TipApprovedAuditLogData.RequestedAmount">
            <summary>
            Requested tip amount
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Tips.Audit.TipInNotAllowedAuditLogData">
            <summary>
            Audit data of failure during adding a tip
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.Audit.TipInNotAllowedAuditLogData.TenderId">
            <summary>
            Tip tender id 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.Audit.TipInNotAllowedAuditLogData.TenderTypeName">
            <summary>
            Type name of tip tender
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.Audit.TipInNotAllowedAuditLogData.RequestedAmount">
            <summary>
            Requested tip amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.Audit.TipInNotAllowedAuditLogData.ReasonCode">
            <summary>
            Failure reason code
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.ITipsConfiguration.DefaultWalkOff">
            <summary>
            The Default Suggested Tip Amount for WalkOff transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.ITipsConfiguration.SuggestedTipAmounts">
            <summary>
            List of Suggested Tip Amounts That was Defined by the retailer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.ITipsConfiguration.TipPercentageLimit">
            <summary>
            The Tip Percentage Limit when defined will make to an exception to be thrown if the Tip Amount is above the defined percent of tip from Order Amount.
            If this configuration is not defined, a default fallback in code will take an action
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLogDao.RemotableSearchDisplayHeader(Retalix.StoreServices.Model.Document.TDM.IDocumentSearchCriteria,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Document.TDM.SearchExtensibility.IExtensionDataSearchCriteria})">
            <summary>
            Search for the document display header according to the specified search criteria.
            this method is used in order to improve performance.
            </summary>
            <param name="coreCriteria">The search criteria.</param>
            <param name="extensionCriteria">The extensions search criteria.</param>
            <returns>IEnumerable{DocumentDisplayHeader}, a list of the specific fields needed for display</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLog.TransactionExternalId">
            <summary>
            Transaction External Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLog.TransactionSequenceNumber">
            <summary>
            Sequence number assigned to the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLog.TransactionType">
            <summary>
            a string that represents the transaction type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLog.TouchPointId">
            <summary>
            Id belonging to the TouchPoint at which the transaction took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLog.TouchPointType">
            <summary>
            Gets the type of the touch point (For example: POS, SelfScanDevice, SelfCheckOut etc.).
            </summary>
            <value>
            The type of the touch point.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLog.WorkstationGroupId">
            <summary>
            Gets the touch point group.
            </summary>
            <value>
            The touch point group.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLog.BusinessDayDate">
            <summary>
            DateTime representing the transaction's business date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLog.VenueId">
            <summary>
            Id belonging to the venue at which the transaction took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLog.StoreName">
            <summary>
            Name of the Store at which the transaction took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLog.OperatorName">
            <summary>
            Name belonging to the Operator which handled the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLog.OperatorId">
            <summary>
            Id belonging to the Operator which handled the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLog.IsTrainingMode">
            <summary>
            Flag indicating whether the transaction was performed in training mode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLog.TipIn">
            <summary>
            Represent the Tips data from the current transaction
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLogReader">
            <summary>
            Methods for manipulations IRetailTransactionLog
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.ITipTransactionLogReader.Create(System.String)">
            <summary>
            Create an instance of ITipTransactionLog from the given document
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.TipTransactionLogSearchCriteria">
             <summary>
            Represents a set of arguments used to search for tip transaction logs.    
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.TipTransactionLogSearchCriteria.VenueId">
            <summary>
            The id of the venue of the requested tip transactions
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.TipTransactionLogSearchCriteria.AuthorizationId">
            <summary>
            The authorization number of an EFT payment
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.TipTransactionLogSearchCriteria.TenderId">
            <summary>
            The Tender type of the tip that was given
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.TipTransactionLogSearchCriteria.Owner">
            <summary>
            The user for which the tip is associated with
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.TipTransactionLogSearchCriteria.UpdatedBy">
            <summary>
            The user that last updated the tip
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.TipTransactionLogSearchCriteria.IsOnlyLastUpdated">
            <summary>
            Return all tip history or just the update
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Tips.TipTransactionLog.TipTransactionLogSearchCriteria.TipTypes">
            <summary>
            The Types of the tip that was given: InTransaction, EFTSlip, Collective, Personal, PinPad, None
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Tips.TipType">
            <summary>
            Type of tip based on the way the tip was added
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tips.TipType.InTransaction">
            <summary>
            During sale transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tips.TipType.EFTSlip">
            <summary>
            By Eft Slip
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tips.TipType.Collective">
            <summary>
            From collectiveTip screen
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tips.TipType.Personal">
            <summary>
            From PersonalTip screen
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tips.TipType.PinPad">
            <summary>
            From pinpad
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tips.TipType.None">
            <summary>
            No tip added for eft payment
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tips.TipType.WalkOff">
            <summary>
            From walkoff transaction
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Selling.Tips.TipType.NotAllowed">
            <summary>
             From eft tip screen , when tip failed during validation.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.IEventsHistoryDao">
            <summary>
            Represents an object that loads and saves <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> objects.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IEventsHistoryDao.GetRetailTransactionEvents(System.String)">
            <summary>
            Returns a list of <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> objects associated with an <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see> object.
            </summary>
            <param name="retailTransactionId">The id of the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see> object.</param>
            <returns>A  list of <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> objects.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IEventsHistoryDao.SaveNewRetailTransactionEvents(System.Collections.Generic.IList{Retalix.StoreServices.Model.Selling.IRtiEvent})">
            <summary>
            Saves newly added <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> objects in the database.
            </summary>
            <param name="rtiEvents">The <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> objects to save.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">
            <summary>
            Represents a single customer session of interaction with the retailer for handling one or more value added transactions. 
            Customer Information is captured during a retail transaction that is shared between value generating transactions. 
            A termination of a retail transaction will usually trigger the reporting and logging of all the involved value generating transactions.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.IRetailTransaction.TransactionVoiding">
            <summary>
            Occurs before voiding a transaction.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.IRetailTransaction.TransactionVoided">
            <summary>
            Occurs when a transaction is voided.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.IRetailTransaction.PaymentAdded">
            <summary>
            Occurs after the <see cref="N:Retalix.StoreServices.Model.Tender"/> has been added to <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction"/>
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.IRetailTransaction.CustomerOrderAssociating">
            <summary>
            Occurs before associating the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/> to <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction"/> 
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.IRetailTransaction.CustomerOrderAssociated">
            <summary>
            Occurs after associating the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/> to <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction"/> 
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.IRetailTransaction.TransactionFinishing">
            <summary>
            Occurs when a FinishTransaction called.<br/>
            Last chance before transaction is closed.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.IRetailTransaction.TransactionFinished">
            <summary>
            Occurs when a transaction is finished.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Selling.IRetailTransaction.TransactionTotaling">
            <summary>
            Occurs before a TotalTransaction called.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.GetCustomerOrder(System.String)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/> associated with the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction"/> by it's ID.
            </summary>
            <param name="orderId">value of type <see cref="T:System.String">string</see>of order ID</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.CustomerPaymentLines">
            <summary>
            Gets the container of tenders related to the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.CustomerOrders">
            <summary>
            Gets a list of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">customer orders</see> associated to the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.AddCustomerServiceLine(Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.ServiceLineBase)">
            <summary>
            Adds the customer service line.
            </summary>
            <remarks>
            Retalix.StoreServices.Model.Selling.RetailTransaction.CustomerServices.CustomerServiceLineAddedEvent 
            </remarks>
            <param name="serviceLine">The service line.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.CustomerServices">
            <summary>
            Gets the customer services.
            </summary>
            <value>The customer services.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.Id">
            <summary>
            Gets the unique ID (GUID) returned to the client applications after the transaction is created. Client applications use it
            to specify a transaction to lookup or make changes to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.SequenceNumber">
            <summary>
            Gets a sequence number of current retail transactions.
            </summary>
            <remarks>
            This number is set when the retail transaction is created.<br/>
            It's uniqueness and cyclic qualities may be retailer specific.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.StartTime">
            <summary>
            Get the very time when the transaction was created.<br/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.EndTime">
            <summary>
            Get the very last time when the transaction was modified.<br/>
            This occurs when the <see cref="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.FinishTransaction"/> method is called for this transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.TransactionContext">
            <summary>
            Get the current context of the transaction
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.Pay(Retalix.StoreServices.Model.Selling.CustomerPayment.Tender,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
            Associates the full or partial monetary value of a payment transaction with the retail transaction.
            </summary>
            <param name="tender">The tender added to the transaction</param>
            <param name="inputParametersInfo">The input parameters that were used in the payment process</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.Refund(Retalix.StoreServices.Model.Selling.CustomerPayment.Tender,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
            Associates the full or partial monetary value of a refund payment transaction with the retail transaction.
            </summary>
            <param name="tender">The tender refunded in the transaction</param>
            <param name="inputParametersInfo">The input parameters that were used in the refund process</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.VoidPayment(Retalix.StoreServices.Model.Selling.CustomerPayment.VoidPaymentInfo,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
            Void payment associated with customer order.
            </summary>
            <param name="paymentInfo">Arguments required for adding payment to retail transaction</param>
            <param name="inputParametersInfo">The input parameters that were used in the void process</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.AddRoundingPayment(Retalix.StoreServices.Model.Selling.CustomerPayment.Tender,Retalix.StoreServices.Model.Selling.InputParametersInfo)">
            <summary>
             Associates the monetary value of a rounding payment transaction with the retail transaction.
             Used to balance retail transaction when balance due is illegal in relation to currency.
            </summary>
            <param name="tender">The tender added to the transaction</param>
            <param name="inputParametersInfo">The input parameters that were used in the process</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.AssociateCustomerOrder(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Assign a new customer order to a retail transaction.
            Only one customer order supported at the same time.
            </summary>
            <param name="customerOrder"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.BalanceDue">
            <summary>
            Gets the total amount required to cover the remaining transaction balance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.Status">
            <summary>
            Gets a container for all the retail transaction statuses such as suspended.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.RoundingInfo">
            <summary>
            Gets or Sets a tender rounding information.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.FinishTransaction">
            <summary>
            Performs final actions (e.g. calculating change, generating receipt etc.) and closes transacitons.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.AddNecessaryChange">
            <summary>
            Calculate change depends on current Transaction's state, add necessary change tenders
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.TotalTransaction">
            <summary>
            Called when calculating a total for a transaction.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.TenderExchange(Retalix.StoreServices.Model.Selling.CustomerPayment.TenderExchangePaymentInfo)">
            <summary>
            Enables the exchange of two tenders (one is the tender the customer pays with, the other is the tender that the customer receives).
            </summary>
            <param name="paymentInfo">Arguments required for the exchange action, including the exchange definition, and the data 
            regarding both payment means (the paid tender and the received tender)</param>.
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.VoidTransaction(Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCode)">
            <summary>
            Voids the current transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.IsTrainingMode">
            <summary>
            True when the transaction was created in training mode.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.PaymentTokenStorage">
            <summary>
            Return the container of Payment Token records related to the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction">IRetailTransaction</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.IsReadyToClose">
            <summary>
            Return whether the retail transaction is ready to close.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.ReportingState">
            <summary>
            Gets or sets the state of the reporting.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.PaymentTermsCoverage">
            <summary>
            Describs the coverage of Payment Terms by Customer Payments in a Retail Transaction.
            <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.IPaymentTermsCoverage"/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.StoreCode">
            <summary>
            Get store Code
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransaction.Tips">
            <summary>
            Gets a list of <see cref="T:Retalix.StoreServices.Model.Selling.Tips.Tip">Tip</see> associated to the <see cref="T:Retalix.StoreServices.Model.Selling.IRetailTransaction"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRetailTransaction.AddTip(Retalix.StoreServices.Model.Selling.Tips.Tip)">
            <summary>
            Add tip  to this transaction.
            </summary>
            <param name="tip"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo">
            <summary>
            Encapsulates the additional arguments required when adding a fuel product to a customer order.
            </summary>    
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.#ctor(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.ProductSaleInfo)">
            <summary>
             Initializes new instance of <see cref="T:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo">FuelProductSaleInfo</see>.
            </summary>
            <param name="productSaleInfo">Sale info.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.ProductSaleInfo">
            <summary>
             <see cref="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.ProductSaleInfo">ProductSaleInfo</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.FuellingPointId">
            <summary>
            Gets or sets <see cref="T:System.String">string</see> the ID of the Fuelling Point of the fuel order line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.NozzleId">
            <summary>
            Gets or sets the <see cref="T:System.String">string</see> of the ID of the Nozzle of the fuel order line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.TankId">
            <summary>
            Gets or sets the <see cref="T:System.String">string</see> collection that represents the Tank ID of the fuel order line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.ControllerSequenceNumber">
            <summary>
            Gets or sets the <see cref="T:System.String">string</see> of the Controller sequence number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.AmountValue">
            <summary>
            Gets or sets the value of the actual Amount of the Fuel Sale as reported by the FullingPoint.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.AmountCurrencySymbol">
            <summary>
            Gets or sets the currency of the actual Amount of the Fuel Sale as reported by the FullingPoint.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.ActualSalesUnitPriceValue">
            <summary>
            Gets or sets value the unit price of the Fuel Sale as reported by the FullingPoint.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.ActualSalesUnitPriceCurrencySymbol">
            <summary>
            Gets or sets currency the unit price of the Fuel Sale as reported by the FullingPoint.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.IsFuelProduct">
            <summary>
             Gets or sets indication whether the info is about fuel product selling.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.StartFuelingTime">
            <summary>
            Gets or sets value the time the FullingPoint started fuelling.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.EndFuelingTime">
            <summary>
            Gets or sets value the time the FullingPoint ended fuelling.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.Fuel.FuelProductSaleInfo.FlowRate">
            <summary>
            Gets or sets value the flow rate of the FullingPoint.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.InputParametersInfo">
            <summary>
            Encapsulates information describing the entered data in the client.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.InputParametersInfo.Default">
            <summary>
             Provides a value to use with actions that requires input information, 
             but the usage has no relevant information.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.InputParametersInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Selling.InputParametersInfo">InputParametersInfo</see> class.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.InputParametersInfo.EntryMethod">
            <summary>
            Gets or sets the way the code was entered.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.InputParametersInfo.EntryCode">
            <summary>
            Gets or sets the code that was entered by client.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.InputParametersInfo.EntryMode">
            <summary>
            Gets or sets the client mode when the code was entered.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.InputParametersInfo.ScanDataType">
            <summary>
            Gets or sets the data type in case of a scanned data. for example GTIN.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.InputParametersInfo.EntryQuantity">
            <summary>
            Gets or sets the quantity that was entered by client.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.IRtiEvent">
            <summary>
            Mapping between RTI response and retail transaction line id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRtiEvent.RtiSequenceNumber">
            <summary>
            Gets the Rti protocol sequence number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRtiEvent.ModelLineSequenceNumber">
            <summary>
            Gets the sequence number of the model line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRtiEvent.RtiTransactionLineItem">
            <summary>
            Gets the Rti protocol line item
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRtiEvent.RetailTransactionId">
            <summary>
            Gets the retail transaction id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRtiEvent.CustomerOrderId">
            <summary>
            Gets the CustomerOrder id.
            </summary>
            <remarks>
            Returns null when the model line is not part of a customer order (e.g. CustomerPaymentLine).
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.IRtiEventsHistory">
            <summary>
            Represents the history of RTI responses.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRtiEventsHistory.GetEventByRtiId(System.UInt64)">
            <summary>
            Gets an <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> object by Rti Id.
            </summary>
            <param name="id">The Rti id.</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRtiEventsHistory.ContainsEvent(System.UInt64)">
            <summary>
            Returns whether there is an <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> object with the given Rti Id.
            </summary>
            <param name="id">The Rti Id.</param>
            <returns>True if there is an <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> object with the given Rti Id; otherwise, false.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRtiEventsHistory.GetMaxEventSequenceNumber">
            <summary>
            Returns the max event sequence number.
            </summary>
            <returns>The max event sequence number.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRtiEventsHistory.GetLastEventByRetailTransactionLine(System.Int64)">
            <summary>
            Returns the last <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> object with the given retail transaction line sequence number.
            </summary>
            <param name="sequenceNumber">The retail transaction sequence number.</param>
            <returns>The last <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> object with the given retail transaction line sequence number.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRtiEventsHistory.GetAllEvents">
            <summary>
            Returns a list of <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> objects contains all events.
            </summary>
            <returns>A list of <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> objects contains all events.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRtiEventsHistory.Save">
            <summary>
            Saves the events in database.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRtiEventsHistory.AddEvent(System.UInt64,System.Int64,System.Object)">
            <summary>
            
            </summary>
            <param name="sequenceNumber"></param>
            <param name="modelLineSeqNumber"></param>
            <param name="rtiLine"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Selling.IRtiEventsHistory.AddEvent(System.UInt64,System.Int64,System.Object,System.String)">
            <summary>
            Adds a new <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> object.
            </summary>
            <param name="sequenceNumber">The Rti sequence number.</param>
            <param name="retailTransactionLineSeqNumber">The model line sequence number.</param>
            <param name="rtiLine">The Rti line object.</param>
            <param name="customerOrderId"></param>
            <returns>The new add <see cref="T:Retalix.StoreServices.Model.Selling.IRtiEvent">IRtiEvent</see> object.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Selling.IRetailTransactionStatus">
            <summary>
            Encapsulates the retail transaction statuses.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransactionStatus.IsSuspended">
            <summary>
            Gets a value indicating whether this instance is suspended.
            </summary>
            <value><c>true</c> if this instance is suspended; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransactionStatus.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
            <value><c>true</c> if this instance is closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Selling.IRetailTransactionStatus.IsVoided">
            <summary>
            Gets a value indicating whether this instance is voided.
            </summary>
            <value><c>true</c> if this instance is voided; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.ITieredTaxCalculationMethod">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">ITaxRate</see> Calculation Method. 
            Defines the tiers with the limits for the amount that should be taken in account.
            Has different implementations which defines the algorithm for taking the taxable amount
            (e.g: Top, Multiple).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.ITieredTaxCalculationMethod.TieredLevels">
            <summary>
            Gets collection of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITieredLevel">TieredLevel</see>s.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.ITopTieredTaxCalculationMethod">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">TaxRate</see> Calculation Method is by percentage of the taxable entity amount that depended on a tiered values.
            The top matching tier will be activated.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.IMultiTieredTaxCalculationMethod">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">TaxRate</see> Calculation Method is by percentage of the taxable entity amount that depended on a tiered values.
            The taxable amount is devided between the tiers accordingly the tier limitations.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.IFixedAmountTaxCalculationMethod">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">TaxRate</see> Calculation Method is by fixed amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.IFixedAmountTaxCalculationMethod.Amount">
            <summary>
            The amount to use for the calculateion.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.IPercentBasedTaxCalculationMethod">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">TaxRate</see> Calculation Method is by percentage of the taxable entity amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.IPercentBasedTaxCalculationMethod.Percents">
            <summary>
            The percentage to use for the calculation.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.IPercentBasedTaxCalculationMethod.GetTaxAmountFor(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Tax.Engine.ITaxable)">
            <summary>
            
            </summary>
            <param name="totalNetAmount"></param>
            <param name="taxable"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.IPercentBasedTaxCalculationMethod.GetTaxableAmount(Retalix.StoreServices.Model.Tax.Engine.ITaxable)">
            <summary>
            
            </summary>
            <param name="taxable"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.IPercentBasedTaxCalculationMethod.GetTaxRate(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Tax.Engine.ITaxable)">
            <summary>
            
            </summary>
            <param name="totalNetAmount"></param>
            <param name="taxable"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.ITaxCalculationMethod">
            <summary>
            Represents method use for calculate the tax
            example: percentage Method -the tax is calculated as a percentage of the item price
            example: Fixed Fee Method – the tax is calculated as a fixed amount, and is not dependent on the item price.
            example: Brackets  Method - the tax is calculated as a progressive percentage rates change according to item price.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.ITaxCalculationMethod.MethodId">
            <summary>
            Gets or sets the calculation method's unique IDL.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.ITaxCalculationMethod.Calculate(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Engine.ITaxable})">
            <summary>
            
            </summary>
            <param name="taxables"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.ITaxCalculationMethod.FormattedRate">
            <summary>
            Gets formatted rate for <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.ITaxCalculationMethod"/>.
            Examples: 10%, 3.5$.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.ITaxCalculationMethod.Name">
            <summary>
            Gets name for the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.ITaxCalculationMethod"/>.
            Usualy used for reports.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.IFixedTaxCalculator">
            <summary>
            Represnts tax calculator for fixed tax.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.IFixedTaxCalculator.GetFixedAmount(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Tax.Engine.ITaxable)">
            <summary>
             Gwt the tax fixed amount by the given configured amount and taxable.
            </summary>
            <param name="configuredFixedAmount">
            The fixed tax rate configured amount.
            </param>
            <param name="taxable"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxableAmountRoundingStrategy">
            <summary>
            This is the strategy that is used to round taxable amounts to 2 places after the decimal point.
            A taxable rounding strategy is an optional extension point that can be used in order to change the taxable amount
            that the tax calculation refers to, without changing the actual taxable amount logged.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxableAmountRoundingStrategy.Round(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Tax.Definitions.TaxableAmountRoundingContext)">
            <summary>
            Rounds the taxable amount in a specific implementation
            </summary>
            <param name="taxableAmount">The amount to be rounded</param>
            <param name="ctx">a context holding the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate"/> and <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine"/> to help 
            decided to proper way to round the taxable amount</param>
            <returns>The amount after rounding</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxZoneDao">
            <summary>
            Represents a data access object for <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxZone">ITaxZone</see> 
            responsible for saving and retrieving ITaxZone from the database.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxZoneDao.Add(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Definitions.ITaxZone})">
            <summary>
            Persists new instances of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxZone">ITaxZone</see> to the database.
            </summary>
            <param name="zones">the new instances to persist</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxZoneDao.Update(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Definitions.ITaxZone})">
            <summary>
            Update existing instances of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxZone">ITaxZone</see> in the database.
            </summary>
            <param name="zones">the existing instances to update</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxZoneDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Definitions.ZoneId})">
            <summary>
            Delete existing instances of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxZone">ITaxZone</see> by  <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ZoneId">TaxZone Ids</see>
            </summary>
            <param name="zoneIds">the ids to delete <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxZone">ITaxZones</see> by</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxZoneDao.DeleteBusinessUnits(Retalix.StoreServices.Model.Tax.Definitions.ZoneId,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete the association to the given business units from given tax zone identifier
            </summary>
            <param name="zoneId"></param>
            <param name="businessUnitIds"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ZoneId">
            <summary>
            Represents Id of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxZone"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRateDao">
            <summary>
            Represents a data access object for <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">ITaxRate</see> 
            responsible for saving and retrieving ITaxRate from the database.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxRateDao.Add(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Definitions.ITaxRate})">
            <summary>
            Persists new instances of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">ITaxRate</see> to the database.
            </summary>
            <param name="rates">the new instances to persist</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxRateDao.Update(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Definitions.ITaxRate})">
            <summary>
            Update existing instances of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">ITaxRate</see> in the database.
            </summary>
            <param name="rates">the existing instances to update</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxRateDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Definitions.RateId})">
            <summary>
            Delete existing instances of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">ITaxRate</see> by  <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.RateId">TaxRate Ids</see>
            </summary>
            <param name="rates">the ids to delete <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">ITaxRates</see> by</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxRateDao.DeleteByTaxZones(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Definitions.ZoneId})">
            <summary>
            Delete existing instances of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">ITaxRate</see> that have <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.ITaxZoneCondition">ITaxZoneCondition</see> with one of the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ZoneId">ITaxZone Ids</see>
            TaxRates deleted by this method are only deleted locally and are not broadcast to DMS.
            </summary>
            <param name="zoneIds">the ids of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxZone">ITaxZones</see> by which the 
            <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">TaxRates</see> will be deleted</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ISupportImposition">
            <summary>
            Represents entities that can be imposed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ISupportImposition.Imposition">
            <summary>
            Gets or sets <see cref="T:Retalix.StoreServices.Model.Tax.ImpositionId">ImpositionId</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ISupportImposition.Indicator">
            <summary>
            Gets or sets <see cref="T:Retalix.StoreServices.Model.Tax.IndicatorKey">IndicatorKey</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ProductCategoryOrGroupSearchCriteria">
            <summary>
            Search criteria that enables to search tax rate by product categories or by product selection groups.
            The relation between values is OR.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ProductCategoryOrGroupSearchCriteria.ProductGroupsId">
            <summary>
            product group id's to search by.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ProductCategoryOrGroupSearchCriteria.Categories">
            <summary>
            product categories to search by.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.RateId">
            <summary>
            Represents Id of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.CustomerOrderEvaluationContext">
            <summary>
            Evaluation context for the entire customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.CustomerOrderEvaluationContext.CustomerOrder">
            <summary>
            The customer order for which the current context belong to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.CustomerOrderEvaluationContext.NetAmount">
            <summary>
            The total net amount of the customer order
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.ITaxCondition`1">
            <summary>
            Condition to evaluate if tax is applicable for a specific evaluation context.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.ITaxCondition`1.IsMet(`0)">
            <summary>
            Evaluate the the context to see if the condition is met. 
            </summary>
            <param name="evaluationContext">The specific <see cref="T:Retalix.StoreServices.Model.Tax.Engine.ITaxCalculationEvaluationContext">ITaxCalculationEvaluationContext</see>.
            </param>
            <returns>True if the condition match the evaluationContext.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IRateCondition">
            <summary>
            Represents a condition definition of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">ITaxRate</see>.
            When implemented, must implement relevant <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.ITaxCondition`1">ITaxCondition{T}</see> as well,
            to supply the condition functionality.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IRateCondition.TaxRate">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">ITaxRate</see> to which this condition applies.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IRateCondition.ConditionId">
            <summary>
            Gets or sets the condition's unique ID.
            Used for persistency.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.TransactionBasedReturnLineEvaluationContext">
            <summary>
            Evaluation context for the transaction based return line.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.ITaxZoneCondition">
            <summary>
            Qualify a tax to be in a defined <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxZone">TaxZone</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.ITaxZoneCondition.Zone">
            <summary>
            The tax zone id to match
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IMinimumTaxableAmountCondition">
            <summary>
            Represents the minimum taxable condition for the calculation of a tax rate 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IMinimumTaxableAmountCondition.Value">
            <summary>
             Gets or sets the minimum value of the condition.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IEatInCondition">
            <summary>
            Represents the eat in condition for the tax rate (this condition will be met only when the transaction is in "EatIn" mode).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IProductSelectCondition">
            <summary>
            Represents the product condition for the tax rate qualify.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IProductSelectCondition.ProductGroupIdMatch">
            <summary>
             gets or sets the <see cref="T:Retalix.StoreServices.Model.Product.Group.IProductGroup">productGroup</see> value of the condition.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.IDataValidator`1">
            <summary>
            Responsible to mark the class which is used to activate validation rules.
            Use this interface to register your validator. 
            The system is ready to work with multiple <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.IDataValidator`1"/> registered instances.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ITieredLevel">
            <summary>
            Represents the tiered level data
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITieredLevel.Bottom">
            <summary>
            Gets or sets the bottom value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITieredLevel.Top">
            <summary>
            Gets or sets the Top value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITieredLevel.Value">
            <summary>
            Gets or sets the value of the tax in the tiered level.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.IPersistedEntityLoader`2">
            <summary>
            Represents deep loader for implementations of <typeparam name="TEntity">TEntity</typeparam>.
            </summary>
            <typeparam name="TEntity">The base type of the persistent entity. Needed for IOC registration coordination.</typeparam>
            <typeparam name="TCriterion">Search criterion that </typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.IPersistedEntityLoader`2.Load(`1)">
            <summary>
            Load the implementations of <typeparam name="TCriterion">TCriterion</typeparam> into session.
            All parts of the entities should be loaded (including childs).
            </summary>
            <param name="criterion"> The criterion to filter with</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ExemptionConditions.IRateMatchingCondition">
            <summary>
            Represents exemption condition with match for <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate"/>.
            The default imlementation matches no rate.
            In order to change it, set the relevant value in <see cref="P:Retalix.StoreServices.Model.Tax.Definitions.ExemptionConditions.IRateMatchingCondition.RateId"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ExemptionConditions.IRateMatchingCondition.RateId">
            <summary>
            Gets or sets the matching <see cref="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.ExternalId"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ExemptionConditions.ITenderExemptionCondition">
            <summary>
            Represents the tender exemption condition for the tax exemption
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ExemptionConditions.IExemptionCondition">
            <summary>
            Represents a condition of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemption</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ExemptionConditions.IExemptionCondition.ConditionId">
            <summary>
            Gets or sets the condition's unique ID.
            Used for persistency.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ExemptionConditions.IExemptionCondition.TaxExemption">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemption</see> to which this condition applies.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ExemptionConditions.IExemptionCondition.IsMet(Retalix.StoreServices.Model.Tax.Engine.TaxExemptionEvaluationContext)">
            <summary>
            Evaluate the evaluation context.
             Returns True when condition is met for the given <see cref="T:Retalix.StoreServices.Model.Tax.Engine.TaxExemptionEvaluationContext">TaxExemptionEvaluationContext</see>.
            </summary>
            <param name="evaluationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ExemptionConditions.IExemptionCondition.IsTenderConditionType">
            <summary>
            Returns true in case the condition is tender type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ExemptionConditions.IExemptionAuthorityCondition">
            <summary>
            Represents the authority condition for the tax exemption (meaning that rates of the authority chosen will be exempt).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ExemptionMethods.ITaxDiscountMethod">
            <summary>
            Represents the discount (partial exemption) method.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ExemptionMethods.ITaxDiscountMethod.Percentage">
            <summary>
            Gets or Sets the percentage value that should be applied INSTEAD of the original percentage value defined on <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ExemptionMethods.ITaxExemptionMethod">
            <summary>
            Represents method use for calculate the tax exemption
            example: percentage Method -the Exemption is calculated as a percentage of the calculate tax amount
            example: Fixed Fee Method – the tax is calculated as a fixed amount, and is not dependent on calculate tax amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ExemptionMethods.ITaxExemptionMethod.TaxExemption">
            <summary>
            Gets or sets the owner <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemption</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ExemptionMethods.ITaxExemptionMethod.MethodId">
            <summary>
            Gets or sets the calculation method's unique ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ExemptionMethods.ITaxExemptionMethod.Imposition">
            <summary>
            Get or sets imposition assigned to the exemption method. 
            In case when imposition set it affects tax result by imposition of tax exemption instead of imposition of tax rate.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ExemptionMethods.ITaxExemptionMethod.Apply(Retalix.StoreServices.Model.Tax.TaxPerLine)">
            <summary>
            Applies exemption method on provided <see cref="T:Retalix.StoreServices.Model.Tax.TaxPerLine">ITax</see>.
            </summary>
            <param name="taxPerLine">The calculated tax.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.TaxAuthorityFetchingSpecifications">
            <summary>
            Specifications of retrieving the details of the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">ITaxAuthority</see> from the data-source.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.TaxAuthorityFetchingSpecifications.GetEntireDataTree">
            <summary>
            Indicate usage of fetching strategy that will get as much as the data as possible immediately.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.TaxType.#ctor">
            <summary>
            Serialization contractor
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tax.Definitions.TaxType.Tax">
            <summary>
            A standard tax type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tax.Definitions.TaxType.ItemFee">
            <summary>
            A ItemFee tax type
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tax.Definitions.TaxType.TransactionFee">
            <summary>
            A TransactionFee tax type
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.DateTimeRange">
            <summary>
            Represents the Date search criteria.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.DateTimeRange.StartDateTime">
            <summary>
            The start date-time.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.DateTimeRange.EndDateTime">
            <summary>
            The end date-time.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">
            <summary>
            Represents group of tax calculation rates defined by specific regulation and/or Juristriction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority.UniqueId">
            <summary>
            Gets the <see cref="T:System.String">string</see> value of the unique ID number
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority.TaxAuthorityDescriptions">
            <summary>
            Gets or Sets a list of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.TaxDescription">TaxDescription</see>s that are assigned to the TaxAuthority.        
            </summary>
            <value>A <see cref="T:System.Collections.Generic.List`1"><![CDATA[List<T>]]></see> that contains elements of type <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.TaxDescription">TaxDescription</see>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority.TaxRates">
            <summary>
            Collection of taxes rate defined by Tax authority
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority.TaxExemptions">
            <summary>
            Collection od tax exemptions defined by tax authority.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao">
            <summary>
            Represents the data access for Tax data.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.GetAllAuthorities">
            <summary>
            Gets all the authorities
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.GetAuthorityById(System.String)">
            <summary>
            Gets <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">authority</see> by id, throw exception if id was not found
            </summary>
            <returns>An instance of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority"/> without deep loading.</returns>
            <remarks>If you need deep loading, use <see cref="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.FindAuthorityById(System.String,System.Boolean)"/></remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.FindAuthorityById(System.String,System.Boolean)">
            <summary>
            Finds authority by id, return null in case it wasn't found
            </summary>
            <param name="authorityId">the id of the authority to search for</param>
            <param name="deepLoad">determines whether authority's TaxRates and Exemptions should be fetched eagerly. by default they shouldn't be loaded </param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.Save(Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority)">
            <summary>
            Saves the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">authority</see>.
            </summary>
            <param name="authority"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.Save(Retalix.StoreServices.Model.Tax.Definitions.ITaxRate)">
            <summary>
            Saves the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">tax rate</see>.
            </summary>
            <param name="rate"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.Save(Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption)">
            <summary>
            Saves the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">tax exemption</see>.
            </summary>
            <param name="exemption"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.Save(Retalix.StoreServices.Model.Tax.Definitions.ITaxZone[])">
            <summary>
            Add one or more tax zone to the underlined persistence framework
            </summary>
            <param name="taxZones">A list of valid tax zones</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.Delete(Retalix.StoreServices.Model.Tax.Definitions.ITaxRate[])">
            <summary>
            Delete <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">Tax Rate</see>/s.
            </summary>
            <param name="rates">Rate/s to delete.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.DeleteAllAuthorityRates(Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority)">
            <summary>
            Delete All <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">tax rates</see> of the specific authority
            </summary>        
            <param name="taxAuthority"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.Delete(Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption)">
            <summary>
            Deletes the specified tax exemption.
            </summary>
            <param name="taxExemption">The tax exemption.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Definitions.ITaxZone})">
            <summary>
            Delete one or more tax zone to the underlined persistence framework
            </summary>
            <param name="taxZones">A list of tax zones to delete</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.FindRates(Retalix.StoreServices.Model.Tax.Definitions.TaxRateSearchCriteria)">
            <summary>
            Returns all <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">tax rates</see> that meet the <param name="criteria">criteria</param>.
            </summary>
            <param name="criteria">Criteria including option to limit the result set</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">Tax rates</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.CountRates(Retalix.StoreServices.Model.Tax.Definitions.TaxRateSearchCriteria)">
            <summary>
            Counts the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">tax rates</see> that meet the <param name="criteria">criteria</param>.
            </summary>
            <param name="criteria">Criteria</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">Tax rates</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthorityDao.CountExemptions(Retalix.StoreServices.Model.Tax.Definitions.TaxExemptionSearchCriteria)">
            <summary>
            Counts the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemption</see> that meet the <param name="criteria">criteria</param>.
            </summary>
            <param name="criteria">Criteria</param>
            <returns>The exemptions count.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">
            <summary>
            Represents full or partial discount applied on a single tax rate.
            Tax exempt status may provide a potential taxpayer complete relief from tax,
            tax at a reduced rate, or tax on only a portion of the items subject to tax
            each tax exempt have a collection of rule conditions for evaluate this exemption for specific context. 
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption.ExemptionId">
            <summary>
            Gets or sets the value of the unique ID number
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption.TaxAuthority">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">TaxAuthority</see>, which this exemption belongs to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption.Descriptions">
            <summary>
            Gets or Sets a list of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.TaxDescription">TaxDescription</see>s that are assigned to the exemption.        
            </summary>
            <value>A <see cref="T:System.Collections.Generic.List`1"><![CDATA[List<T>]]></see> that contains elements of type <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.TaxDescription">TaxDescription</see>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption.ExemptionConditions">
            <summary>
            Collection of conditions that are used in order to evaluate the Tax Exemption.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption.AddCondition(Retalix.StoreServices.Model.Tax.Definitions.ExemptionConditions.IExemptionCondition)">
            <summary>
            Adds <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ExemptionConditions.IExemptionCondition">IExemptionCondition</see>.
            </summary>
            <param name="condition">Condition to add.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption.ClearConditions">
            <summary>
            Removes all conditions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption.TaxExemptionMethod">
            <summary>
            Represents method use for calculate the Exemption
            example: percentage Method -the Exemption is calculated as a percentage of tax amount.
            example: Fixed Fee Method – the Exemption is calculated as a fixed amount, and is not dependent on the tax calculated amount.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption.EvaluateExemptionFor(Retalix.StoreServices.Model.Tax.Engine.TaxExemptionEvaluationContext)">
            <summary>
            Evaluate Exemption for specified context.
            </summary>
            <returns>Boolean for evaluation Exemption</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption.IsTenderExemptionType">
            <summary>
            Returns true in case the exemption is tender type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">
             <summary>
             Represents the parameters that specify which data must be collected when a tax exemption is performed in a specific <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">location</see>.
             </summary>         
             <remarks>   
             <para>
             The data required can be mandated for collection by the government by law, or data that the store operator wants to collect and record for informational purposes.
             </para>
             <para>
             <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">Business unit</see> is a required field for this interface. If this field is set as the root of the Business Unit tree,
             all the stores in the system will inherit these parameters.
             These parameters determine which type of data is prompted, and received from the customer. It is possible that all or none of the parameters are set to true.
             </para>
             </remarks>
             <example> 
             <code lang="cs" description="This example shows how to retrieve exemption parameters for a specific store in the context of a service">
             <![CDATA[
             public class LookupTaxExemptionService
             {
                private readonly IStoreApplication _storeApplication;
            
                public LookupTaxExemptionService(IStoreApplication storeApplication)
                {
                    _storeApplication = storeApplication;
                }
                public ITaxExemptionParameters GetSpecificStoreTaxExemptionParameters(string storeNumber)
                {
                    ITaxExemptionParametersDao taxExemptionParametersDao = _storeApplication.Resolver.Resolve<ITaxExemptionParametersDao>();
                    IBusinessUnitDao businessUnitDao = _storeApplication.Resolver.Resolve<IBusinessUnitDao>();
                    IBusinessUnit locationNode = businessUnitDao.Get(storeNumber);
            
                    ITaxExemptionParameters taxExemptionParameters;
                    if (false == taxExemptionParametersDao.TryGetParameters(locationNode, out taxExemptionParameters))
                        throw new Exception("Could not find relevant tax exemption parameters");
            
                    return taxExemptionParameters;
                }
            }]]>
             </code> 
             </example>
             <seealso cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParametersDao">ITaxExemptionParametersDao</seealso>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters.BusinessUnit">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> to which the tax exemption parameters are relevant
            </summary>
            <remarks>
            This field is the key for this interface, it cannot be <c>null</c>. The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> can be set to the root
            of the business unit tree to apply to all stores.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters.CustomerExemptionIdRequired">
            <summary>
            Gets or sets the boolean value indicating if the customer has to provide a government issued exemption ID to receive a tax exemption.
            </summary>
            <value>
            <c>true</c> if customer exemption cannot be executed without a customer ID, otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters.ExemptionCustomerNameRequired">
            <summary>
            Gets or sets the boolean value indicating if customer has to provide his/her name to receive a tax exemption.
            </summary>
            <value>
            <c>true</c> if an exemption ; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParametersDao">
            <summary>
            Represents a data access object for parameters that specify which data must be collected when performing a tax exemption.
            </summary>
            <example> 
            <code lang="cs" description="This example shows how to create and use the tax exemption parameters dao.">
            <![CDATA[
            public class GetAllTaxExemptionParametersService 
            {
                private readonly IStoreApplication _storeApplication;
            
                public GetAllTaxExemptionParametersService(IStoreApplication storeApplication)
                {
                    _storeApplication = storeApplication;
                }
            
                public IEnumerable<ITaxParameters> GetAllParameters()
                {
                    ITaxParametersDao taxParametersDao = _storeApplication.Resolver.Resolve<ITaxParametersDao>();
                   var = taxParametersDao.GetAll();
                    return allParameters;
                }
            }]]>
            </code> 
            </example>
            <remarks>   
            <para>
            This data access class handles data for <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see> that are relevant for a specific <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see>.
            This data needs to be collected from the customer or entered by the cashier when performing a tax exemption. Some data is mandated by law and some data is collected only for 
            informational purposes. The set of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see> is relevant if it's defined directly on a specific <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see>
            or defined for any of the parents in the business unit hierarchy tree. The data of the closest parent overrides data of any of the other parents higher up in the hierarchy.
            </para>
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxParametersDao.FindForLocationNode(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Gets an instance of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see> defined for a specific <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> only.
            </summary>
            <remarks>        
            This method does not iterate up the business unit hierarchy tree to see if there is a relevant set of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see> available.
            </remarks>
            <param name="businessUnit">The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> for which the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see> are defined</param>.
            <returns>The <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see> that are returned if the find request is successful.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxParametersDao.FindFor(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
             <summary>
             Searches the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">Business Unit</see> hierarchy tree and retrieves an instance of <b>relevant</b> <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see>
             for the specified <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see>.
             </summary>
             <remarks>        
             The method finds the relevant <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see> by first checking if they are defined directly for the specified <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see>.
             If not found, the algorithm goes up the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">Business Unit</see> hierarchy through all the parent nodes and looks for the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see>.
             The first set that is found is returned, if none are found when the root is reached, <c>false</c> is returned. This means that a parent node closer to the relevant <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">business unit</see>
             overrides the settings of the parent higher up in the tree. A <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> property in <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see> will indicate which 
             node had the parameter definitions.
             </remarks>
             <param name="businessUnit">The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> for which a relevant set of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see> needs to be found</param>
             <returns><c>true</c> if relevant <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see> were found, <c>false</c> if not found</returns>.
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxParametersDao.GetAll">
            <summary>
            Retrieves all <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see> regardless of which <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">business unit</see> they were created for.
            </summary>       
            <returns>A collection of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see> or an empty collection of parameters.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxParametersDao.SaveParameters(Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters)">
            <summary>
            Add or update <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">ITaxParameters</see> in the system.
            </summary>
            <param name="parameters"><see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxParameters">parameters to be added or updated</see></param>.
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">
            <summary>
             Represents burden ratio at which a business or person is taxed.
             There are several methods used to present a tax rate like: fixed, percentage, brackets.
             These rates can also be presented using different definitions applied to a tax : inclusive and exclusive
             each tax rate have a collection of rule conditions for evaluate this rate for specific context. 
             </summary>
            <summary>
            Represents the tax rate details as part of the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">ITaxAuthority</see> entity.
            </summary>     
            <remarks>
            <para>
            There can be multiple tax rates under a single <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">ITaxAuthority</see>. Each tax rate has a matching rule which determines to which taxable entities
            it will apply. Example: there can be a single <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">ITaxAuthority</see> for the whole country, but in every store or group of stores a different
            rate is applied to different item types.
            </para>
            </remarks>  
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.TaxAuthority">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">TaxAuthority</see>, which this rate belongs to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.ExternalId">
            <summary>
            Gets the <see cref="T:System.String">string</see> value of the unique ID number
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.Indicator">
            <summary>
            Gets or sets the sign, printed per item on the receipt (and in the T-Log), identifying the rate of the tax
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.Type">
            <summary>
            Gets or sets the tax type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.Descriptions">
            <summary>
            Gets or Sets a list of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.TaxDescription">TaxDescription</see>s that are assigned to the TaxRate.        
            </summary>
            <value>A <see cref="T:System.Collections.Generic.List`1"><![CDATA[List<T>]]></see> that contains elements of type <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.TaxDescription">TaxDescription</see>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.IsIncluded">
            <summary>
            Gets an indicator specifying if the tax amount is included or excluded from item price.
            </summary>
            <remarks>An excluded tax is added to the price of the item to get the item's full price and therefore excluded taxes increase the
            ticket total. Included taxes are already added to the item price and do not add to the ticket total. Included taxes are calculated
            for tax reporting purposes.</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.StartDateTime">
            <summary>
            The date and time the tax rate is active from.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.EndDateTime">
            <summary>
            The date and time the rate will expire.
            Setting this value to null indicate no expiration date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.Conditions">
            <summary>
            collection of conditions that use for evaluate the rate rule.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.AddCondition(Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IRateCondition)">
            <summary>
            Adds <paramref name="condition">condition</paramref> into the current <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">ITaxRate</see>.
            </summary>
            <param name="condition">The condition to add.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.ClearConditions">
            <summary>
            Clears the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IRateCondition">ICondition</see>s from the current <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">ITaxRate</see>.  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.TaxCalculationMethod">
            <summary>
            Represents method used to calculate the tax.
            example: percentage Method -the tax is calculated as a percentage of the item price
            example: Fixed Fee Method – the tax is calculated as a fixed amount, and is not dependent on the item price.
            example: Brackets  Method - the tax is calculated as a progressive percentage rates change according to item price.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.IsMatch``1(``0)">
            <summary>
            Evaluates rate for specific orderLine in customer order.
            </summary>
            <param name="context">The specific order line</param>
            <returns>True if this rate should be calculated for the specific context</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.DependenceRates">
            <summary>
            Collection of dependency rates that specific rate dependent on.
            A dependence rate will be part of the net amount the dependent rate (a.k.a. compound)
            calculation method applies to.
            Example: If rate of 10% (exclusive) depends of fixed 1$ rate, the fixed rate will be
            in the DependenceRates list, and the calculation will be: (Product-Net-Amount + 1$) * 10%.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.RoundingMethod">
            <summary>
            Represents method use for rounding the tax value.
            The rounding is done for 2 decimal places.
            example: Standard - arithmetical rounding (meaning that if it's less than 0.5 it will be rounded to 0, and equal or larger than 0.5 will be rounded to 1)
            example: Up – always round up
            example: Down - always round down
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.IsCouponReduceTaxationAmount">
            <summary>
            Indicates whether Tax Engine should be called also after coupon is applied and consider its' amount.
            For example is Yes, then the amount should be reduced and then the Tax should be recalculated based on the new price. 
            otherwise, tax stays the same.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.TaxableAmountRoundingStrategyKey">
            <summary>
            Defines the TaxableAmount rounding strategy key that affects the taxable amount prior to tax calculation
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRoundingStrategy">
            <summary>
            This is the strategy that is used to round tax amounts to 2 places after the decimal point.
            A rounding strategy is mandated by the tax authority. Most common examples include rounding up and arithmetic rounding 
            (meaning that if it's less than 0.5 it will be rounded to 0, and equal or larger than 0.5 will be rounded to 1).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.ITaxRoundingStrategy.Round(Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Rounds the tax amount to 2 places after the decimal point (i.e. "Up" strategy will always round the amount up)
            </summary>
            <param name="taxAmount">The amount to be rounded</param>
            <returns>The amount after rounding (2 places after the decimal point)</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.SearchCriteria">
            <summary>
            Basic SearchCriteria that can be used for lookup.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.SearchCriteria.StartingFromEntityId">
            <summary>
            Gets or sets entity id the results sequence should continue from.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.SearchCriteria.EntityIdStartsWith">
            <summary>
            Gets or sets string that entity id starts with.
            Like '%'
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxZone">
            <summary>
            The Tax Jurisdiction area 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxZone.Id">
            <summary>
            The Tax Zone Unique Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxZone.BusinessUnits">
            <summary>
            The business units that belong to this Tax Zone
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxZone.BusinessUnitsIDs">
            <summary>
            The business units IDs that belong to this Tax Zone
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.TaxDescription">
            <summary>
             Represents the TaxRate description.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.TaxDescription.Culture">
             <summary>
            Gets or sets the culture name in the format "lnguagecode2-country/regioncode2", ex: en-US, fr-CA.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.TaxDescription.Value">
            <summary>
            Gets or sets the localized name of the TaxRate.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.TaxDescription.GetTaxRateDefaultDescription(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Definitions.TaxDescription})">
             <summary>
            Gets or sets the localized value of the description for the default (en-US) culture. If it doesn't exist, the system takes the first one. 
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.TaxDescription.GetTaxRateLocalizedDescription(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Definitions.TaxDescription},System.String)">
            <summary>
            The localized value of the description for the provided culture. If it doesn't exist, it takes the first one.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.TaxExemptionSearchCriteria">
            <summary>
            Search criteria for <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption"/>s.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.TaxExemptionSearchCriteria.TaxAuthorityIds">
            <summary>
            Gets or sets <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority"/> ids.
            The relation between values is OR
            The results should match at least one of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority"/> id.
            <value>Null</value> represents that no filtering by <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority"/> ids is required.        
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.TaxRateSearchCriteria">
            <summary>
            Search criteria for <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate"/>s.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.TaxRateSearchCriteria.ProductSelect">
            <summary>
            Gets or sets <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IProductSelectCondition"/> instances.
            The relation between values is OR. 
            The results should match at least one of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IProductSelectCondition"/>.
            <value>Null</value> represents that no filtering by <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IProductSelectCondition"/> is required.
            <value>EmptyArray</value> represents that matching rates should not have <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.IProductSelectCondition"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.TaxRateSearchCriteria.ProductCategoryOrGroupSelect">
            <summary>
            Gets or sets <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ProductCategoryOrGroupSearchCriteria"/> instance.
            Enables to search tax rate by product categories or by product selection groups.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Definitions.TaxRateSearchCriteria.Date">
            <summary>
            Gets or sets <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.DateTimeRange"/> that specifies limits for filtering.
            The search should be done on <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate"/>s which date range is inside the specified limits.
            For example: 
            if the first <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate"/> has date range  
            with <see cref="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.StartDateTime"/> 10.12.2012 and <see cref="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.EndDateTime"/> 12.12.2012.
            And the second <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate"/> has date range
            with <see cref="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.StartDateTime"/> 31.11.2012 and <see cref="P:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate.EndDateTime"/> 31.12.2012.
            On <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.TaxRateSearchCriteria"/> with <see cref="P:Retalix.StoreServices.Model.Tax.Definitions.TaxRateSearchCriteria.Date"/> 
            with <see cref="P:Retalix.StoreServices.Model.Tax.Definitions.DateTimeRange.StartDateTime"/> 01.12.2012 and <see cref="P:Retalix.StoreServices.Model.Tax.Definitions.DateTimeRange.EndDateTime"/> 20.12.2012,
            only the first  <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate"/> should be found.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Definitions.TaxRoundingMethod">
            <summary>
            Types of rounding for the tax amount
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.TaxRoundingMethod.#ctor(System.String)">
            <summary>
            Represents the sorting method Constructor .
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Definitions.TaxRoundingMethod.#ctor">
            <summary>
            Serialization contractor
            </summary>
            <param name="roundingMethod"></param>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tax.Definitions.TaxRoundingMethod.Standard">
            <summary>
            Arithmetical rounding - meaning that if it's less than 0.5 it will be rounded to 0, and equal or larger than 0.5 will be rounded to 1
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tax.Definitions.TaxRoundingMethod.Up">
            <summary>
            Always round up
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tax.Definitions.TaxRoundingMethod.Down">
            <summary>
            Always round down
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tax.Definitions.TaxRoundingMethod.None">
            <summary>
            No round at all
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tax.Definitions.TaxRoundingMethod.Default">
            <summary>
            The default rounding method
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Engine.ITenderTaxExemptionRoundingHandler">
            <summary>
            Rounds the tax exemptions if needed.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Engine.ITenderTaxExemptionRoundingHandler.Round(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.ITax})">
            <summary>
            Rounds the tax exemptions
            </summary>
            <param name="taxes">Taxes before rounding</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Engine.ITaxRoundingHandler">
            <summary>
            Rounds the tax results and handles remainder if needed.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Engine.ITaxRoundingHandler.Round(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.ITax})">
            <summary>
            Rounds the tax results and handles remainder if needed.
            </summary>
            <param name="taxes">Taxes before rounding</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Engine.OrderLineEvaluationContext">
            <summary>
            Evaluation for specific order line context in a customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.OrderLineEvaluationContext.CustomerOrder">
            <summary>
            The customer order for which the current context belong to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.OrderLineEvaluationContext.OrderLine">
            <summary>
            The order line for which the current context belongs to.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Engine.ITaxableAmountExtractor">
            <summary>
            Represents extension point for extracting the taxable amount (the amount the tax should be calculated on).
            </summary>
            <remarks>
            In order to get the Core Implementation, 
            use resolving by key "Core" additional on <see cref="T:Retalix.StoreServices.Model.Tax.Engine.ITaxableAmountExtractor">ITaxableAmountExtractor</see> type.
            Assumption regarding the registration: single implementation is resolved by type in the executing code.
            In order to override the default Core implementation, use ConfigOverrides inside the Server executing folder.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Engine.ITaxableAmountExtractor.Extract(Retalix.StoreServices.Model.Tax.Definitions.ITaxRate,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Extracts the taxable amount.
            </summary>
            <param name="taxRate">The relevant <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate">ITaxRate</see> for extracting.  The implementation might consider the TaxRate details in determining how calculate the return value.</param>
            <param name="orderLine">The relevant <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">IOrderLine</see> that should be considered.</param>
            <returns>The amount tax should be calculated on.</returns>
            <remarks>Compound tax calculation will be done on the result returned by the <see cref="T:Retalix.StoreServices.Model.Tax.Engine.ITaxableAmountExtractor">ITaxableAmountExtractor</see>.</remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Engine.TaxCalculationMethodResult">
            <summary>
            The result of the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.ITaxCalculationMethod"/> Calculate method, for a given <see cref="T:Retalix.StoreServices.Model.Tax.Engine.ITaxable"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.TaxCalculationMethodResult.Tax">
            <summary>
            The tax to impose for the <see cref="T:Retalix.StoreServices.Model.Tax.Engine.ITaxable"/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.TaxCalculationMethodResult.Taxable">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Tax.Engine.ITaxable"/> Taxable value part used to calculate the Tax.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.TaxCalculationMethodResult.OrderLine">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine"/> the original <see cref="T:Retalix.StoreServices.Model.Tax.Engine.ITaxable"/> was associated with.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.TaxCalculationMethodResult.TaxRate">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxRate"/> that the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.CalculationMethods.ITaxCalculationMethod"/> Calculate method was associated with.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.TaxCalculationMethodResult.TaxRateValue">
            <summary>
            The <see cref="P:Retalix.StoreServices.Model.Tax.Engine.TaxCalculationMethodResult.TaxRateValue"/> calculated for this <see cref="T:Retalix.StoreServices.Model.Tax.Engine.ITaxable"/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.TaxCalculationMethodResult.Imposition">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Tax.ImpositionId"/> that is associated with this result.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.TaxCalculationMethodResult.Indicator">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Tax.IndicatorKey"/> that is associated with this result.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Engine.ITaxPerLineBeforeRounding">
            <summary>
            Represents tax per <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine"/> values before rounding.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.ITaxPerLineBeforeRounding.BeforeRounding">
            <summary>
            The tax value before rounding
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Engine.ITaxCalculationEvaluationContext">
            <summary>
            Evaluation context for <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.ITaxCondition`1">ITaxCondition{T}</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.ITaxCalculationEvaluationContext.CustomerOrder">
            <summary>
            The customer order for which the current context belong to.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Engine.ITenderExemption">
            <summary>
            Represents Tax tender calculation exemption details
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.ITenderExemption.TenderId">
            <summary>
            Related Tender Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.ITenderExemption.TaxExemptionRate">
            <summary>
            Gets or sets the exemption rate.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.ITenderExemption.TaxType">
            <summary>
            Percentage / Fixed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Engine.ITenderExemption.TaxRate">
            <summary>
            The tax rate that would be exempted by this exemption.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Engine.ITenderExemption.Apply(System.Decimal)">
            <summary>
            Notifies the amount used as an active exemption
            </summary>
            <param name="usageAmount">The exemption value used by this exemption</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Engine.ITaxEngine">
            <summary>
            Represents the main orchestration that drive the Tax calculation
            by evaluates the Tax rates per authority for customer order.
            </summary>
             <remarks>
             <para>
             Taxation and exemption are both done via this interface. 
             </para>
             <para>This interface is also used by extensions.</para>    
             </remarks>
             <example> 
             <para>This example shows how to calculate taxation result.
             </para>    
             <code lang="cs">
             <![CDATA[
             public class TaxationCalculatorService
             {
                private read-only IStoreApplication _storeApplication;
                public TaxationCalculatorService(IStoreApplication storeApplication)
                {
                    _storeApplication = storeApplication;
                }
                public ICalculatedTaxResults GetTaxationResult(IEnumerable<ITaxable> taxationTaxables)
                {
                    ITaxEngine taxEngine = _storeApplication.Resolver.Resolve<ITaxEngine>();
                    var computationResult = taxEngine.Calculate(taxationTaxables);
                    return computationResult;
                }]]>
             </code> 
             </example>     
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Engine.ITaxEngine.Calculate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Returns a collection of Tax calculation results for customer order
            each calculate Tax in the collection represents unique tax for specific authority. 
            </summary>
            <param name="customerOrder"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Engine.ITaxEngine.GetOrCreateTaxModifier(Retalix.StoreServices.Model.Tax.Engine.TaxModifierContext)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Tax.ITaxModifier"/> instance associated with ICustomerOrder.
            </summary>
            <param name="context">The context.</param>
            <returns>The relevant existing or new <see cref="T:Retalix.StoreServices.Model.Tax.ITaxModifier"/> instance.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Engine.ITaxEngine.ApplyExemptions(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlan)">
            <summary>
            Applies the calculation of tender tax exemptions
            </summary>
            <param name="customerOrder">the customer order</param>
            <param name="paymentPlan">the payment plan</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Events.EatInApplyEvent">
            <summary>
            Raised before Eat-In is applied.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Events.EatInAppliedEvent">
            <summary>
            Raised after Eat-In was applied.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Events.TaxesCalculatedEvent">
            <summary>
            Raised by the <exception cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</exception> right after it called the <exception cref="T:Retalix.StoreServices.Model.Tax.Engine.ITaxEngine">ITaxEngine</exception> 
            calculation method, and before it is set to the CalculatedTaxResults property.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Events.TaxesCalculatedEvent.CalculatedTax">
            <summary>
            The final calculated tax result .
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Events.TaxExemptedEvent">
            <summary>
            Raised after Tax Exempted
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Events.TaxReversedEvent">
            <summary>
            Raised after Tax Reversed
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.IExemptibleTenderRecognizer">
            <summary>
            Determines if a tender is tax exempting for the given authorities
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.ITaxExemptionDao">
            <summary>
            Represents a data access object for <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemption</see> 
            responsible for saving and retrieving ITaxExemption from the database.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.ITaxExemptionDao.Add(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption})">
            <summary>
            Persists new instances of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemption</see> to the database.
            </summary>
            <param name="taxExemptions">the new instances to persist</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.ITaxExemptionDao.Update(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption})">
            <summary>
            Update existing instances of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemption</see> in the database.
            </summary>
            <param name="taxExemptions">the existing instances to update</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.ITaxExemptionDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.TaxExemptionId})">
            <summary>
            Delete existing instances of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemption</see> by  <see cref="T:Retalix.StoreServices.Model.Tax.TaxExemptionId">TaxExemption Ids</see>
            </summary>
            <param name="taxExemptions">the ids to delete <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemptions</see> by</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.ITaxExemptionDao.DeleteByAuthorities(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.TaxAuthorityId})">
            <summary>
            Delete existing instances of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemption</see> by  <see cref="T:Retalix.StoreServices.Model.Tax.TaxExemptionId">TaxExemption Ids</see>
            </summary>
            <param name="taxAuthorities">the ids of  <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxAuthority</see> to delete all the
            <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">Taxexemptions</see> related to this authority </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.ITaxExemptionDao.DeleteByTaxZones(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Definitions.ZoneId})">
            <summary>
            Delete existing instances of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemption</see> that have <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ExemptionConditions.IRateMatchingCondition">IRateMatchingCondition</see> for
            rate that have <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.RateConditions.ITaxZoneCondition">ITaxZoneCondition</see> with one of the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ZoneId">ITaxZone Ids</see>
            <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemptions</see> deleted by this method are only deleted locally and are not broadcast to DMS.
            </summary>
            <param name="zoneIds">the ids of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxZone">ITaxZones</see> by which the 
            <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemptions</see> will be deleted</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.ITaxPerLineAggregator.GetTaxPerCustomerOrder(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.TaxPerLine})">
            <summary>
            Perform aggregation of per line tax results on transaction level
            </summary>
            <param name="taxPerLines">Per line tax results</param>
            <returns>Aggregated per line tax results</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.QueryCriterions.MatchesProductGroupsCriterion.LocalProductSelectionGroupIds">
            <summary>
            Collection of identifiers of <see cref="T:Retalix.StoreServices.Model.Selling.LocalProductGrouping.ILocalProductSelectionGroup">local product selection groups</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Exceptions.SelfDependentTaxRateException">
            <summary>
            Gets thrown when tax rate configured to depend upon itself.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Exceptions.TaxRateCircularDependencyException">
            <summary>
            Gets thrown when tax rate configuration causing to circular dependency.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Exceptions.TaxRateNotFoundException.#ctor(System.String)">
            <summary>
            The tax rate a client requested to lookup is not found in the system
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Exceptions.TaxAuthorityNotFoundException">
            <summary>
            This exception is raised when attempting to retrieve a <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">ITaxAuthority</see> that was not found in the system.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Exceptions.TaxAuthorityNotFoundException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Exceptions.ExemptingNonExemptableTaxException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Exceptions.InvalidTaxNameException">
            <summary>
            This exception is raised when an <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">ITaxAuthority</see> is added or updated with a name that is not valid.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Exceptions.InvalidTaxNameException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Exceptions.InvalidTaxNameException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Exceptions.InvalidTaxSignException">
            <summary>
            This exception is raised when an <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">ITaxAuthority</see> is added or updated with a tax sign that exceeds 1 character.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Exceptions.InvalidTaxSignException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Tax.Exceptions.InvalidTaxSignException" /> class.
            </summary>
            <param name="sign">The sign of the invalid size that is used in the exception message.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Exceptions.InvalidTaxSignException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Exceptions.NoExemptableTaxesFoundException">
            <summary>
            This exception is raised when a service request to retrieve <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">taxes</see> can be exempted in the transaction.
            However, if there are no taxes that can be exempted, or none of the 
            taxes that exist have the property,then the tax exemptable is set to <c>true.</c> 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Exceptions.NoExemptableTaxesFoundException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Exceptions.NoTaxesToReverseFoundException">
            <summary>
            This exception is raised when a service request to retrieve <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">ITaxAuthority</see> can be reversed in the transaction, however, no taxes that can be reversed are found.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Exceptions.NoTaxesToReverseFoundException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Exceptions.TaxAlreadyExistsException">
            <summary>
            This exception is raised when a <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">ITaxAuthority</see> that is added already exists in the system.
            </summary>
            <remarks>Two <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">ITaxAuthority</see> are considered the same if their IDs and active start dates are the same.</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Exceptions.TaxAlreadyExistsException.#ctor(System.Int32,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Tax.Exceptions.TaxAlreadyExistsException" /> class.
            </summary>
            <param name="taxId">The ID of the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">ITaxAuthority</see> which is duplicated.</param>
            <param name="dateTime">The active start date of the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">ITaxAuthority</see> which is duplicated.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Exceptions.TaxAlreadyExistsException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Exceptions.TaxExemptionParameterRequiredException">
            <summary>
            This exception is raised during the tax exemption process if the cashier is required to input information, and it is not provided.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Exceptions.TaxExemptionParameterRequiredException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Tax.Exceptions.TaxExemptionParameterRequiredException" /> class.
            </summary>
            <param name="storeCode"></param>
            <param name="missingParameterName">The name of the missing parameter.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Exceptions.TaxExemptionParameterRequiredException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Exceptions.TaxLineWasNotAddedToTransactionException">
            <summary>
            This exception is raised when a taxation or exemption computation line failed to be written to the retail transaction.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Exceptions.TaxLineWasNotAddedToTransactionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Retalix.StoreServices.Model.Tax.Exceptions.TaxLineWasNotAddedToTransactionException" /> class.
            </summary>
            <param name="lineContentInfo">Information about the transaction line that the system attempted to add.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.Exceptions.TaxLineWasNotAddedToTransactionException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Exceptions.TaxNotFoundException">
            <summary>
            This exception is raised when attempting to retrieve a <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">ITaxAuthority</see> that was not found in the system.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Exceptions.TaxNotFoundException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.QueryRoles.TaxExemptionLookupQueryRole">
            <summary>
            TRole for <see cref="T:Retalix.StoreServices.Infrastructure.DataAccess.IQuery`3">IQuery{TEntity,TReturnType,TRole}</see> 
            activated from TaxExemptionLookupService.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.QueryRoles.TaxExemptionMaintenanceQueryRole">
            <summary>
             Role used to retrieve only the required data of <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">ITaxExemptions</see> in context of Maintenance.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.QueryRoles.TaxExemptionModificationQueryRole">
            <summary>
            TRole for <see cref="T:Retalix.StoreServices.Infrastructure.DataAccess.IQuery`3">IQuery{TEntity,TReturnType,TRole}</see> 
            activated from tax exemption modification during selling process.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.QueryRoles.TaxAuthorityLookupQueryRole">
            <summary>
            TRole for <see cref="T:Retalix.StoreServices.Infrastructure.DataAccess.IQuery`3">IQuery{TEntity,TReturnType,TRole}</see> 
            activated from tax authority lookup process.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.QueryRoles.TaxRateMaintenanceQueryRole">
            <summary>
            TRole for <see cref="T:Retalix.StoreServices.Infrastructure.DataAccess.IQuery`3">IQuery{TEntity,TReturnType,TRole}</see> 
            activated from tax rate maintenance process.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.QueryRoles.TaxZoneLookupQueryRole">
            <summary>
            TRole for <see cref="T:Retalix.StoreServices.Infrastructure.DataAccess.IQuery`3">IQuery{TEntity,TReturnType,TRole}</see> 
            activated from tax zone lookup process.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Reporting.ITaxReportingSummaryAggregator">
            <summary>
            Aggregates the tax reporting summary
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Reporting.ITaxReportingSummaryAggregator.GroupTaxes(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Reporting.TaxReportingSummary})">
            <summary>
            Aggregates the given tax reporting summary
            </summary>
            <param name="reports"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.Reporting.ITaxReportingSummaryAggregator.GroupExemptions(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tax.Reporting.TaxExemptionsReportingSummary})">
            <summary>
            Aggregates the given tax exemption reporting summary
            </summary>
            <param name="reports"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.Reporting.TaxExemptionsReportingSummary">
            <summary>
             Tax exemption reporting data for the receipt.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.ReversedTaxPerLine">
            <summary>
            Represents reversed tax per <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine"/>.
            This is the result of calculation made for one tax definition for one line in the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ReversedTaxPerLine.OrderLine">
            <summary>
            The order line this tax was calculated on.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ReversedTaxPerLine.TaxAuthority">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">TaxAuthority</see>, which this rate belongs to.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.TaxAuthorityId">
            <summary>
            Represent The unique id of the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">TaxAuthority</see> allowing other domain models to have loosely coupled association to  
            <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">TaxAuthority</see> without actually knowing the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxAuthority">TaxAuthority</see> model.
            </summary>
            
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.ImpositionId">
             <summary>
             Represents Imposition Id.
            
             Impositions are placeholders for sets of tax rates that are shared according to the
             type of tax and/or jurisdictional grouping. 
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.IndicatorKey">
            <summary>
            Represents Key of IIndicator for TaxRate indicators.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.TaxExemptionId">
            <summary>
            Represent The unique id of the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">TaxExemption</see> allowing other domain models to have loosely coupled association to  
            <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">TaxExemption</see> without actually knowing the <see cref="T:Retalix.StoreServices.Model.Tax.Definitions.ITaxExemption">TaxExemption</see> model.
            </summary>
            
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.TaxRateValue">
            <summary>
            Represent a calculated tax rate value, based on calculation method definition, and actual calculation context, like net-amount and quantity.
            It can be either fixed amount, or percentage.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.TaxRateValue.CreatePercentageRateValue(System.Decimal,System.Boolean)">
            <summary>
            Create instance of percentage rate value
            </summary>
            <param name="percentage">The percent value</param>
            <param name="included"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.TaxRateValue.CreateFixedRateValue(Retalix.StoreServices.Model.Finance.Money.Money,System.Boolean)">
            <summary>
            Create fixed amount rate value
            </summary>
            <param name="amount">The fixed amount rate</param>
            <param name="included"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxRateValue.Currency">
            <summary>
            Currency in case this rate value is fixed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxRateValue.Value">
            <summary>
            Value of the rate, wither the money value or the percentage, depend on the Type property value
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxRateValue.Type">
            <summary>
            Represent the type of the tax rate, like: Fixed, Percent.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tax.TaxRateValue.Empty">
            <summary>
            Represent undefined TaxRateValue.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.TaxRateValue.Equals(Retalix.StoreServices.Model.Tax.TaxRateValue)">
            <summary>
            Compares to another TaxRateValue instance, based on Type, value and currency.
            </summary>
            <param name="other">TaxRateValue instance for comparison</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.TaxRateValue.Equals(System.Object)">
            <summary>
            Compares to another object, include specific TaxRateValue comparison if relevant, based on Type, value and currency.
            </summary>
            <param name="obj">Object instance for comparison</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.TaxRateValue.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxRateValue.IsIncluded">
            <summary>
            Indicate if the value was originally portrayed within the taxable amount.
            </summary>
            <remarks>An excluded tax is added to the price of the item to get the item's full price and therefore excluded taxes increase the
            ticket total. Included taxes are already added to the item price and do not add to the ticket total. Included taxes are calculated
            for tax reporting purposes.</remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.ITax">
            <summary>
            Tax that is imposed on a customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITax.Imposition">
            <summary>
            The imposition, or tax identifier, that is enforced by the authority
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITax.TaxAuthority">
            <summary>
            The authority imposing the tax
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITax.IsIncluded">
            <summary>
            Indicate it the tax amount is part of the items' price
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITax.Full">
            <summary>
            Gets the tax amount before any modification (like discount or exemption) was applied.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITax.Amount">
            <summary>
            Gets the tax amount to impose after exempted amount. Calculated as: Full - Exempted
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITax.Taxable">
            <summary>
            Gets the base amount for the tax calculation. 
            In case of included tax, this will be the remainder of the item amount after extracting the tax from it.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITax.Exempted">
            <summary>
            Gets the exempted amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITax.TaxResults">
            <summary>
            The tax results per line that build up this tax entry.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.TaxPerLine">
            <summary>
            Represents tax per <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine"/>.
            This is the result of calculation made for one tax definition for one line in the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxPerLine.Result">
            <summary>
            The result of the tax calculation executing through the tax engine
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxPerLine.TaxRate">
            <summary>
            The tax rate used in the calculation of this line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxPerLine.TaxRateValue">
            <summary>
            The principle value of the this tax result.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxPerLine.TaxPerUnit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxPerLine.TaxExemptions">
            <summary>
            Exemptions that was applied on this result.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxPerLine.TaxTenderExemptions">
            <summary>
            Tender exemption to be applied by the Tender-Eligibility system on this result.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxPerLine.OrderLine">
            <summary>
            The order line this tax was calculated on.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxPerLine.Imposition">
            <summary>
            The imposition, or tax identifier, that is enforced by the authority
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxPerLine.Indicator">
            <summary>
            The indicator of this tax, for presentation purpose.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.TaxRateValueType">
            <summary>
            The type of the TaxRateValue
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tax.TaxRateValueType.#ctor(System.String)">
            <summary>
            Represents the TaxRateValueType constructor.
            </summary>
            <param name="taxRateMethod"></param>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tax.TaxRateValueType.Fixed">
            <summary>
            Indicates that the tax rate is of Fixed type.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tax.TaxRateValueType.Percent">
            <summary>
            Indicates that the tax rate is of Percent type.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.TaxValue">
            <summary>
            Represents calculated tax value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxValue.Full">
            <summary>
            Gets or sets the tax amount before any modification (like discount or exemption) was applied.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxValue.Amount">
            <summary>
            Gets the tax amount to impose after exempted amount. Calculated as: Full - Exempted
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxValue.Taxable">
            <summary>
            Gets or sets the base amount for the tax calculation. 
            In case of included tax, this will be the remainder of the item amount after extracting the tax from it.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.TaxValue.Exempted">
            <summary>
            Gets or sets the exempted amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.IExemptionCustomerDetails.CustomerId">
            <summary>
            Gets or sets the customer id.
            </summary>
            <value>The customer id.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.IExemptionCustomerDetails.CertificateHolderName">
            <summary>
            Gets or sets the name of the customer.
            </summary>
            <value>The name of the customer.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tax.ICalculatedTaxResults">
            <summary>
            Represents Tax calculation results.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ICalculatedTaxResults.ExemptionCustomerDetails">
            <summary>
            Gets information entered by user for the exemption action.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ICalculatedTaxResults.ReversedTaxesPerLine">
            <summary>
            Get information about the reversed taxes per <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine">orderline</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITaxModifier.AuthoritiesForExemptionPerCustomerOrder">
            <summary>
            Gets or sets the external id of the authorities to exempt for the whole customer order.
            </summary>
            <value>The authorities for exemption.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITaxModifier.AuthoritiesForExemptionPerLine">
            <summary>
            Gets or sets the authorities for exemption per line.
            </summary>
            <value>The authorities for exemption.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITaxModifier.AuthoritiesForDiscountPerCustomerOrder">
            <summary>
            Gets or sets the external id of the authorities to discount for the whole customer order.
            </summary>
            <value>The authorities for discount.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITaxModifier.AuthoritiesForReversePerLine">
            <summary>
            Gets or sets the external id of the authorities to reverse for order line.
            </summary>
            <value>The authorities for reverse.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITaxModifier.ExemptionCustomerDetails">
            <summary>
            Gets or sets the exemption reason.
            </summary>
            <value>The exemption reason.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tax.ITaxModifier.CustomerOrder">
            <summary>
            Gets or sets <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder">ICustomerOrder</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.TokenServer.IPaymentTokenStorage">
            <summary>
            Storing and retrieving retail transaction payment token records 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.TokenServer.IPaymentTokenStorage.AddTokenList(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Selling.CustomerPayment.IPaymentToken})">
            <summary>
            Add Payment token to retail transaction
            </summary>
            <param name="tokenList">Payment token list</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.TokenServer.IPaymentTokenStorage.Retireve(System.String)">
            <summary>
            Retrieve a payment token record by its short term token
            </summary>
            <param name="shortTermToken">Short term token</param>
            <returns>Payment token record if exists, or null otherwise</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.TokenServer.IPaymentTokenStorageProvider">
            <summary>
            Represents a provider for the <see cref="T:Retalix.StoreServices.Model.Tender.EPS.TokenServer.IPaymentTokenStorage">PaymentTokenStorage</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.TokenServer.IPaymentTokenStorageProvider.GetPaymentTokenStorage(Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataToken)">
            <summary>
            Providers the <see cref="T:Retalix.StoreServices.Model.Tender.EPS.TokenServer.IPaymentTokenStorage">PaymentTokenStorage</see> by getting the 
            <see cref="T:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataToken">CardDataToken</see> details.
            </summary>
            <param name="cardDataToken"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.TokenServer.ITokenServer">
            <summary>
            Token provider for payment cards
            </summary>
            <summary>Represents the token server service - allows to add card to save and retrieve it by the received token</summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.TokenServer.ITokenServer.AddCard(System.String)">
            <summary>
            Add card to the token server and return a new token that identifies the card
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.TokenServer.ITokenServer.GetPan(System.String)">
            <summary>
            Get card number by token received in AddCard
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.IdentifiedCardData">
            <summary>
            Represents the identified card data which returned by the <see cref="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean.Identify(Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity)">IPaymentMean</see>
            Note: This class is extensible so every extension can give any additional data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IdentifiedCardData.CardId">
            <summary>
            Represents the card unique identification (e.g. "VI"). This identification should be mapped in R10 to a tender via <see cref="P:Retalix.StoreServices.Model.Tender.TenderType.IElectronicTransferable.AdditionalIdentifiers"/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IdentifiedCardData.CardType">
            <summary>
            Represents the identified card's type (e.g. "VISA")
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IdentifiedCardData.IsCashbackEnabled">
            <summary>
            Indicates whether cash back with payment mean of this configuration is supported.
            </summary>
            <remarks>
            Cash back: when a customer wants to withdraw cash using the same payment mean (card) as the one used for payment.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IdentifiedCardData.IsManualEntryEnabled">
            <summary>
             Indicates whether manual entry of the identified card is allowed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IdentifiedCardData.LoyaltyAccountNumber">
            <summary>
            The loyalty account number linked to this card.
            </summary>
            <remarks>
            The identified card may be connected to a loyalty program, therefore such type of card used to refer as a 'Loyalty Combined'<br></br>
            means it can act either as a financial payment mean and either as a loyalty card. 
            For more information on loyalty program see <seealso href="http://en.wikipedia.org/wiki/Loyalty_program">Loyalty Program on Wikipedia</seealso>.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IdentifiedCardData.Key">
            <summary>
            Represents the identified card's key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IdentifiedCardData.Extensions">
            <summary>
            Extended data for the identified card additional information acquired by the <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean"/>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.AuthorizationResponseHeader">
            <summary>
            Response header contains the basic information regarding the response like result code, errors, etc...
            This header is part of <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">IAuthorization</see> interface.
            </summary>
            <remarks>
            This component is Serializable due to reason that it is part of the <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">IAuthorization</see> which is persisted into the Data Base.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.AuthorizationResponseHeader.ProviderKey">
            <summary>
            Unique provider key, identifying the provider the authorization request was intended to.
            Note that actual <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider">IEPSProvider</see> doesn't always participate in authorization flow.
            For example, <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean">IPaymentMean</see> might decide to perform local authorization, based on internal logic.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.AuthorizationResponseHeader.ProviderSessionId">
            <summary>
            Unique identification of the performed financial action
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.AuthorizationResponseHeader.AuthorizationType">
            <summary>
             Describes the way that the authorization was performed (Online, Offline, Local etc)
            </summary>
             <remarks>
             The electronic payment system's financial operation may be authorized in various ways.<br></br>
             Therefore the authorization may categorized into some types, for example:<br></br>
             <list type="bullet">
                 <item>
                     <description>Online - Authorization has been approved successfully.</description>
                 </item>
                 <item>
                     <description>Offline - Authorizer (a.k.a 'External Provider') was not accessible.
                     <seealso cref="M:Retalix.StoreServices.Model.Tender.EPS.IAuthorization.IsProviderAccessFailed">IAuthorization.IsProviderAccessFailed</seealso>
                     </description>
                 </item>
                 <item>
                     <description>Local - Authorization has been approved locally, means that has been approved by the <b>local</b> Electronic Payment System (R10)<br></br>
                     without any external provider's involvement. 
                     </description>
                 </item>
                 <item>
                     <description>SmartCard - Authorization has been approved by the smart card terminal device (Pin Pad, GPD, etc).</description>
                 </item>
                 <item>
                     <description>Offline Forced Acceptance (a.k.a 'OFA') - Authorization was not approved by the authorizer (a.k.a 'External Provider'),<br></br>
                     nor the device, but was approved by local Electronic Payment System (R10).
                     </description>
                 </item>
             </list>
             Note these are only default implementations, there may be other Authorization Types.
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.AuthorizationResponseHeader.ResultCode">
            <summary>
            Represents the external provider result code.
            </summary>
            <remarks>
            <seealso cref="P:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping.ProviderResultCode"/>
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.ExpirationDate">
            <summary>
            ExpirationDate
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.ExpirationDate.Month">
            <summary>
            Month
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.ExpirationDate.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataKeyed">
            <summary>
            Represent card that keyed by the cashier manually
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataKeyed.AccountNumber">
            <summary>
            card account number
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataKeyed.ExpiryDateMonth">
            <summary>
             Card expiry month. Public setter since manual entry does not have any expiry information when creating card data.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataKeyed.ExpiryDateYear">
            <summary>
             Card expiry year. Public setter since manual entry does not have any expiry information when creating card data.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataMSR">
            <summary>
            define card data of card data MSR
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataMSR.Track1">
            <summary>
            card track1
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataMSR.Track2">
            <summary>
            card track2
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataMSR.RestrictionCategories">
            <summary>
            The custom categories that defines the type eligible products hierarchy on the card
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataScanned">
            <summary>
            Represent card that scanned by the cashier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataScanned.Barcode">
            <summary>
            Card's barcode
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard">
            <summary>
             additional required data that supplied for the EMV device
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.ApplicationIdentifier">
            <summary>
            ApplicationIdentifier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.TerminalType">
            <summary>
            TerminalType
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.TerminalCountryCode">
            <summary>
            TerminalCountryCode
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.TransactionCurrencyCode">
            <summary>
            TransactionCurrencyCode
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.ReasonOnline">
            <summary>
            ReasonOnline
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.ApplicationInterchangeProfile">
            <summary>
            ApplicationInterchangeProfile
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.ApplicationTransactionCounter">
            <summary>
            ApplicationTransactionCounter
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.UnpredictableNumber">
            <summary>
            UnpredictableNumber
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.TerminalVerificationResults">
            <summary>
            TerminalVerificationResults
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.ApplicationCryptorgram">
            <summary>
            ApplicationCryptorgram
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.IssuerApplicationData">
            <summary>
            IssuerApplicationData
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.ApplicationVersionNumber">
            <summary>
            ApplicationVersionNumber
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.CryptogramInformationData">
            <summary>
            CryptogramInformationData
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.CardHolderVerificationMethod">
            <summary>
            CardHolderVerificationMethod
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.PanSequenceNumber">
            <summary>
            PanSequenceNumber
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.ApplicationLabel">
            <summary>
            ApplicationLabel
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.TransactionType">
            <summary>
            TransactionType
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.SignatureRequired">
            <summary>
            SignatureRequired
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard.VerifiedByPINFlag">
            <summary>
            VerifiedByPINFlag
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataToken">
            <summary>
            Represent card by mobile
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataToken.TransactionId">
            <summary>
             Transaction Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataToken.TokenId">
            <summary>
            EPS Token
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataToken.CustomerId">
            <summary>
            Customer Id
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.Exceptions.PaymentMeanInquiryRequiredException">
            <summary>
            Exception is thrown when EPS is missing required field
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.Exceptions.PaymentMeanInquiryRequiredException.FieldData">
            <summary>
            field data that is missing
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">
            <summary>
            Result received from the payment provider.
            </summary>
            <remarks>
            The result is for a request to authorize payment, refund, deposit, cash out, or reversal (void) of any of these.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorization.Header">
            <summary>
            Provider Data response
            </summary>
            <seealso cref="T:Retalix.StoreServices.Model.Tender.EPS.AuthorizationResponseHeader"/>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorization.AuthorizationCode">
            <summary>
            Authorization code from the provider to designate whether the request to authorize an action was approved or declined.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorization.RequestedAmount">
            <summary>
            Amount that the provider was requested to authorize.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorization.TotalGoodsAmount">
            <summary>
            Actual amount that was authorized by the payment provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorization.TotalCashBackAmount">
            <summary>
            Cash back amount that was authorized by the payment provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorization.TotalDepositAmount">
            <summary>
            Deposit amount that was authorized by the payment provider.
            </summary>
            <seealso cref="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean.Deposit"/>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorization.CurrentBalance">
            <summary>
            Balance on the card.
            </summary>
            <remarks>
            When performing gift card transactions, providers are likely to return the remaining card balance.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorization.ProviderData">
            <summary>
            Data from the provider.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorization.TransactionDate">
            <summary>
            Date and time of the R10 transaction (Not the same as the EPS transaction with the payment provider)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorization.FormatedMessage">
            <summary>
            An already formatted, printer friendly, message from the payment provider in context of the action performed. 
            This can be either an approval message or an error message in case of failure. 
            <b/>
            In any case, client is expected to display that message and include it in the receipt.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorization.IsSignatureRequired">
            <summary>
             Indicates for client whether or not the customer's signature is required.
            </summary>
             <remarks>
             This will affect the payment flow in the POS and indicate to the POS that a signature is required.
             Without this indication no signature slip will be printed.
             </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IAuthorization.IsProviderAccessFailed">
            <summary>
            Indicated if external provider's access failed.
            </summary>
            <remarks>
            This indication may be examined by the <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean">IPaymentMean</see> and it can act accordingly.<br></br>
            For example, the <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean">IPaymentMean</see> may decide to approve the authorize although the provider access has been failed.
            <seealso cref="P:Retalix.StoreServices.Model.Tender.EPS.AuthorizationResponseHeader.AuthorizationType">AuthorizationType</seealso>
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest">
            <summary>
            Represents the request to <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider">IEPSProvider</see>.
            Since the authorization logic is performed by external provider, all fields are passed, in order to provide maximum flexibility for provider's decision.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest.EntryMethod">
            <summary>
            Gets or sets the way to use the card, for example, keyed, swiped, scanned.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest.AuthorizationCardData">
             <summary>
            Gets or sets the card data that can be implemented on any type of card, such as MSR, SmartCard, Keyed, Scanned.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest.DepositAmounts">
            <summary>
            coupling of tenders and amounts to be deposited.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest.StoreId">
             <summary>
            Gets or sets the Store ID.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest.TerminalId">
             <summary>
            Gets or sets the Terminal ID.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest.TransactionExternalId">
             <summary>
            Gets or sets the external ID of the transaction object.
             It is set whenever the transaction was reported to an external system, such as the transaction log.
             Its' uniqueness and cyclic qualities may be retailer specific.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest.TransactionDate">
             <summary>
            Gets or sets the request date.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest.IsFallBack">
            <summary>
            Specifies the boolean value indicating if the process is a result of a fallback.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest.TotalAmount">
            <summary>
            Gets or sets the payemnt/refund total request amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest.TotalGoodsAmount">
             <summary>
            Gets or sets only the amount charged for the goods.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest.TotalCashbackAmount">
             <summary>
            Gets or sets only the amount reqested for cashback.
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider">
            <summary>
            Represents an electronic payments processor, 
            and provides electronic payments authorization services.
            </summary>
            <remarks>
            IEPSProvider implementations are intended to be used 
            by <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean">IPaymentMean</see> as an adapter to EPS authorization systems.
            Note that this not necessarily will be the case. <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean">IPaymentMean</see> could decide, for example, that authorization will be performed locally.
            <b/>
            For actions requiring third party authorization, an IEPSProvider implementation is used. The methods below 
            are the last logical step before a request reaches the payment host. They are responsible for interfacing with 
            the payment host. The actual method of communication is controlled by the payment host (bank or financial institution).
            <b/>
            A payment mean will use these methods to perform the last step of its own actions, communication to the payment authorizer.
            <b/>
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider.Pay(Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest)">
            <summary>
            Performs EFT payment.
            </summary>
            <remarks>
            Used to make the actual authorization request for payment.
            The authorization request has to include all parameters (although this is subject to change, according 
            to the specific payment host this is implemented for).
            <b/>
            The authorization object must contain all available data to describe the authorized payment.
            </remarks>
            <param name="payRequest">payRequest contains payment parameters.</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider.PreAuthorize(Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest)">
            added in 10.5
            <summary>
            Performs payment pre-authorization.
            </summary>
            <remarks>
            Validates a future payment is possible and reduces the obligo amount. 
            Pre-authorization requires completion to actually make that payment.
            </remarks>
            <param name="preAuthorizationRequest">Input parameters.</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider.Refund(Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest)">
            <summary>
            Performs EFT refund
            </summary>
            <param name="refundRequest">request contains void parameters</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider.TransactionLookup(Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest)">
            <summary>
            Lookup all transactions made with this specific payment mean (card).
            </summary>
            <remarks>
            Should return a list of all transactions that satisfy the lookup criteria. An empty list means 
            zero transactions were found. 
            <br/>
            The results supplied by transaction lookup will be later used to perform transaction based returns.
            </remarks>
            <param name="transactionLookupRequest">Data needed to identify the transaction.</param>
            <returns>A collection of <see cref="T:Retalix.StoreServices.Model.Tender.EPS.ExternalTransactionRecord">lookup result</see> objects</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider.Cashout(Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest)">
            <summary>
            Perform EPS cash out
            </summary>
            <remarks>
            Cashing a gift card out means exchanging whatever balance is left on the card, for cash.
            This is NOT cash back.
            </remarks>
            <param name="cashoutRequest">Data needed to request authorization from payment host.</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider.Deposit(Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest)">
            <summary>
            Perform an EFT deposit.
            </summary>
            <remarks>
            Deposit funds into an account, associated with a payment mean (card).
            </remarks>
            <param name="depositRequest">Data needed to request authorization from payment host.</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider.GenerateCustomProviderDataOnly(Retalix.StoreServices.Model.Tender.EPS.IAuthorizationRequest)">
            <summary>
            Note: This method should not perform any actual connection to the host.
            It could be called to get custom data in cases where no actual connection to the host is required (Local authorization, OFA authorization, SmartCard authorization etc).
            Returned custom data will be saved as ProviderData on externally created IAuthorization.
            Null value is supported.
            </summary>
            <param name="authorizationRequest"></param>
            <returns>Custom provider data to be saved on externally created IAuthorization</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider.ReverseAuthorization(Retalix.StoreServices.Model.Tender.EPS.IAuthorization)">
            <summary>
            Performs reversal of authorized payment (or pre-authorization).
            </summary>
            <remarks>
            Notifies the payment host that a reversal is required for a pre-authorized payment. <b/>
            Note that in the case of pre-authorization, no payment was ever made; what is being reversed is the 
            pre-authorization of a potential payment.
            </remarks>
            <param name="originalAuthorization">Input parameters.</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider.CompletePreAuthorization(Retalix.StoreServices.Model.Tender.EPS.IAuthorization,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Performs completion of previously authorized payment.
            </summary>
            <remarks>
            Notifies the payment host that a completion is required for a pre-authorized payment. <b/>
            </remarks>
            <param name="preAuthorization">Input parameters.</param>
            <param name="completionAmount">The amount that the pre-authorization should be complete for.</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider.IdentifyCard(Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity)">
            <summary>
            Performs card identification process.
            </summary>
            <param name="paymentMeanIdentity">Returns the card identification data <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IdentifiedCardData"/></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider.ValidateCard(System.String)">
            <summary>
            Performs card validation via the payment provider.
            </summary>
            <param name="cardNumber"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean">
            <summary>
            Holds the knowledge of performing the actual payment related operations.
            R10 Services call these methods directly to perform these actions.
            <br/>
            When any of them are called, a provider of type <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider">IEPSProvider</see> is resolved
            using the configured provider key.
            This key is a system parameter named 'EPSProviderKey'.
            
            Requests made to the payment provider are constructed using several input parameters, and potentially extension data.
            </summary>
            <remarks>
            TODO: add explanation of supported result codes in default implementation: Success, Decline, Offline, VoiceAuthorizationReferral
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean.InputParameters">
            <summary>
            Holds information acquired about the payment mean in use.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean.Pay">
            <summary>
            Charge the credit card
            </summary>
            <remarks>
            Performs the payment using <see cref="T:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInputParameters">input parameters</see>.
            Charges the <see cref="P:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInputParameters.Card">credit card</see> with specified <see cref="P:Retalix.StoreServices.Model.Tender.EPS.RequestParameters.TotalAmount">amount</see>
            Implementors should return IAuthorization object with the data returned from the provider
            </remarks>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean.Refund">
            <summary>
            Refund action on card
            </summary>
            <remarks>
            Performs the refund using <see cref="T:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInputParameters">input parameters</see>.
            Refunds the <see cref="P:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInputParameters.Card">credit card</see> with specified <see cref="P:Retalix.StoreServices.Model.Tender.EPS.RequestParameters.TotalAmount">amount</see>
            Implementors should return IAuthorization object with the data returned from the provider
            </remarks>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean.TransactionLookup">
            <summary>
            Find all transactions made with this specific payment mean (card).
            </summary>
            <remarks>
            Performs the lookup using <see cref="T:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInputParameters">input parameters</see>.
            This includes <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity">card data</see> as the search criteria.
            Implementors should return IEnumerable of <see cref="T:Retalix.StoreServices.Model.Tender.EPS.ExternalTransactionRecord">transaction records</see> returned from provider.
            </remarks>
            <returns>A collection of <see cref="T:Retalix.StoreServices.Model.Tender.EPS.ExternalTransactionRecord">lookup result</see> objects</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean.Cashout">
            <summary>
            Cash out all money in specified credit card.
            </summary>
            <remarks>
            This is NOT cash back.
            Cashing a gift card out means exchanging whatever balance is left on the card, for cash.
            Performs the cashout using <see cref="T:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInputParameters">input parameters</see>.
            Cashout is performed using <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity">card data</see>
            Implementors should return IAuthorization object with the data returned from the provider
            </remarks>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean.Deposit">
            <summary>
            EPS Deposit action
            </summary>
            <remarks>
            Chooses an appropriate deposit executer and performs a deposit to an associated account.
            The default payment mean implementation validates all parameters with the executer's validator 
            before actually performing the action.
            It performs the deposit using <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity">card data</see>.
            Implementors should return IAuthorization object with the data returned from the provider
            </remarks>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean.PreAuthorize">
            changed in 10.5
            <summary>
            Preauthorize payment mean
            </summary>
            <remarks>
            Performs pre-authorization with the requested amount (usually $1 or in the case of fuel purchase, the pump maximum amount). 
            This verifies with the issuer that this card is valid and reduces the obligo amount. The result of this process is 
            used in the completion stage when appropriate.
            Implementors should return IAuthorization object with the data returned from the provider
            </remarks>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean.ReverseAuthorization(Retalix.StoreServices.Model.Tender.EPS.IAuthorization)">
            added in 10.5
            <summary>
            Cancel previously authorized pre-authorization request.
            </summary>
            <remarks>
            Uses a previous request's authorization received from the payment provider, to send a reversal request.
            Implementors should return IAuthorization object with the data returned from the provider
            </remarks>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean.CompletePreAuthorization(Retalix.StoreServices.Model.Tender.EPS.IAuthorization,Retalix.StoreServices.Model.Finance.Money.Money)">
            added in 10.5
            <summary>
            Completes previously authorized pre-authorization request.
            </summary>
            <remarks>
            Uses a previous request's authorization received from the payment provider, to send a completion request.
            Implementors should return IAuthorization object with the data returned from the provider
            </remarks>
            <param name="preAuthorization"></param>
            <param name="completionAmount">The amount that the pre-authorization should be complete for.</param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IAuthorization">authorization</see> object.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean.Identify(Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity)">
            <summary>
            Performs card identification process. The identification can be made via the <see cref="M:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider.IdentifyCard(Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity)">external provider</see>
            </summary>
            <param name="paymentMeanIdentity">Returns the card identification data <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IdentifiedCardData"/></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean.ValidateCard(System.String)">
            <summary>
            Validates whether the given card is a valid card. The validation can be made via the <see cref="M:Retalix.StoreServices.Model.Tender.EPS.IEPSProvider.IdentifyCard(Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity)">external provider</see>
            </summary>
            <param name="cardNumber"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity">
             <summary>
             This interface represents a payment mean identity.
             </summary>
             <remarks>
             It holds various information regarding the inputted payment mean.<br></br>
             For example: It holds the payment mean's primary account number and its expiration date.<br></br>
             This information will participate in the <seealso cref="T:Retalix.StoreServices.Model.Tender.EPS.IPaymentMean">PaymentMean</seealso>'s financial operation,
             and will be composed as part of the <see cref="T:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInputParameters">PaymentMeanInputParameters</see>.<br></br>
             R10 Core supports various types of PaymentMeanIdentities:
             <list type="numeric">
                 <item>
                     <description><see cref="T:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataKeyed"/>CardDataKeyed</description>
                 </item>
                 <item>
                     <description><see cref="T:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataMSR"/>CardDataMSR</description>
                 </item>
                 <item>
                     <description><see cref="T:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataScanned"/>CardDataScanned</description>
                 </item>
                 <item>
                     <description><see cref="T:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataSmartCard"/>CardDataSmartCard</description>
                 </item>
                 <item>
                     <description><see cref="T:Retalix.StoreServices.Model.Tender.EPS.CardData.ICardDataToken"/>CardDataToken</description>
                 </item>
             </list>
             </remarks>
             <example>
             <code lang="cs" description="This example shows how to provide a new PaymentMeanIdentity, a.k.a MyPaymentMeanIdentity.">
             <![CDATA[
             
             public class MyPaymentMeanIdentity : IPaymentMeanIdentity
             {
               public string ConfigurationGroupId
                {
                    get { return "MyVisa"; }
                }
            
                public string PrimaryAccountNumber
                {
                    get { return "4522-2333-1255-7777"; }
                }
            
                public string LoyaltyAccountId
                {
                    get { return PrimaryAccountNumber.Substring(0, 4); }
                }
            
                public bool IsSmartCard
                {
                    get { return false; }
                }
            
                public ExpirationDate ExpirationDate
                {
                    get
                    {
                       return new ExpirationDate
                                  {
                                       Month = int.Parse(PrimaryAccountNumber.Substring(0, 1)),
                                       Year = int.Parse(PrimaryAccountNumber.Substring(2, 1))
                                   };
                    }
                }
            
                public bool IsManualEntry()
                {
                    return true;
                }
            
                public bool SupportsOfflineAuthorization()
                {
                    return false;
                }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity.ConfigurationGroupId">
            <summary>
            Represents the card identification.
            </summary>
            <remarks>
            Represents a set of behaviors for a specific card type.<br></br>
            For example, assuming that the PaymentMeanIdentity is a "VISA" card type, then it should inherit the VISA's behavior and restrictions.
            Therefore, if the VISA has a restriction that requires signature, then paying with this PaymentMeanIdentity 
            will forced to require a signature from the customer.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity.PrimaryAccountNumber">
            <summary>
            Primary Account Number is the number that identifies a credit card's linked bank account.
            </summary>
            <remarks>
            Sometimes mistakenly referred to as 'personal account number'.
            For more information on PANs see <seealso href="http://en.wikipedia.org/wiki/Primary_Account_Number">PAN on Wikipedia</seealso>.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity.LoyaltyAccountId">
            <summary>
            The loyalty account number linked to this card.
            </summary>
            <remarks>
            The PaymentMeanIdentity may be connected to a loyalty program, therefore such type of PaymentMeanIdentity used to refer as a 'Loyalty Combined',<br></br>
            means it can act either as a financial payment mean and either as a loyalty card. 
            For more information on loyalty program see <seealso href="http://en.wikipedia.org/wiki/Loyalty_program">Loyalty Program on Wikipedia</seealso>.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity.IsSmartCard">
            <summary>
            Indicates whether the PaymentMeanIdentity is a smart card.
            </summary>
            <remarks>
            A smart card, chip card, or integrated circuit card (ICC) is any pocket-sized card with embedded integrated circuits.
            R10 clients may examine this indicator in order to verify the card's correct entry method.<br></br> 
            For example, assuming the customer swiped her credit card and R10 identified this PaymentMeanIdentity as a smart card,<br></br>
            then R10 client may look at it as a mismatch and alert the customer that he should dip this card.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity.ExpirationDate">
            <summary>
            Represents the PaymentMeanIdentity's <see cref="P:Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity.ExpirationDate">Expiration Date</see>.
            </summary>
            <remarks>
            This expiration date holds the combination of the payment mean identity's expiry month and year (e.g: 06/22)
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity.IsManualEntry">
            <summary>
            Indicates whether the primary account number was entered manually.
            </summary>
            <remarks>
            If the PaymentMeanIdentity can never be used in manual entry scenarios, this method can return false.<br></br>
            On the other hand, a PaymentMeanIdentity that will be used exclusively for manual entry, can always return true.<br></br>
            </remarks>
            <returns>A Boolean value indicating whether the primary account number manually entered.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IPaymentMeanIdentity.SupportsOfflineAuthorization">
            <summary>
            Indicates whether offline authorization is supported for this PaymentMeanIdentity.
            </summary>
            <remarks>
            A good example for a PaymentMeanIdentity that supports offline authorization is Smart cards (ICC),
            where offline authorization can be provided by the onboard chip even without connectivity.
            </remarks>
            <returns>
            A Boolean value indicating whether offline authorization is supported for this card.
            </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.ExternalTransactionRecord">
            <summary>
            The result of performing EPS transaction lookup
            </summary>
            <remarks>
            All data is as reported to EPS and save at the provider's end. It is used to return the result of transaction lookup 
            as a list of transaction records, each representing a transaction that matches the lookup criteria. It is then used 
            to build the lookup service response.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.ExternalTransactionRecord.TransactionDate">
            <summary>
            Date and time the original transaction was performed 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.ExternalTransactionRecord.StoreId">
            <summary>
            The store ID in which the transaction was performed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.ExternalTransactionRecord.TerminalId">
            <summary>
            The terminal ID in which the transaction was performed
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.ExternalTransactionRecord.TotalAmount">
            <summary>
            Amount of the EPS transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.ExternalTransactionRecord.TransactionId">
            <summary>
            Unique transaction ID
            </summary>
            <remarks>
            Not to be confused with transaction sequence number, this is the external ID (an eight alpha numeric characters string).
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping">
            <summary>
            Entity which represents a mapping between a provider result code and an R10 EPS result code.
            </summary>
            <remarks>
            External providers provide various result codes that can be translated into business values result codes.<br></br>
            For example, an external provider may return a result code as '02' which may mapped to R10 EPS result code 'Success'.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping.ProviderKey">
            <summary>
            Represents the external provider's identifier.
            </summary>
            <remarks>The ProviderKey and the ProviderResultCode combination represents the entity's unique key</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping.ProviderResultCode">
            <summary>
            The external provider result code.
            </summary>
            <remarks>The ProviderKey and the ProviderResultCode combination represents the entity's unique key</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping.EPSResultCode">
            <summary>
            The R10 EPS result code which mapped to a provider result code.
            </summary>
            <remarks>A combination of ProviderKey and ProviderResultCode can be translated into this valuable EPS Result code.<br></br>
            For example: Success, Decline, Offline, etc..
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping.Message">
            <summary>
            The message associated with the occurrence of the combination between the ProviderKey and the ProviderResultCode.
            </summary>
            <remarks>
            This message may be displayed when the result code is received. <br></br>
            For example, assuming the external provider key is 'SOLVE' and its result after making a payment is '02',
            which may mapped to R10 EPS result code as 'Success'.
            This combination may be mapped to a message : "Payment succeeded, please take your receipt".
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping.IsRejected">
            <summary>
            Indicating whether the external provider's result code represents a declination. 
            </summary>
            <returns>The business indication for determine whether the provider rejected the operation.</returns>
            <remarks>The external provider may return a result code as '19' which may be translated into R10 EPS Result as 'Decline'.<br></br>
            This R10 EPS Result Code indicates that the external provider <b>rejected</b> the financial operation.<br></br>
            This indication may be used for additional business flows in R10, for example: Auditing the EPS rejected operations.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMappingDao">
            <summary>
            Represents a data access object for <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping">IProviderResultCodeMapping</see>.
            </summary>
            <remarks>
            The IProviderResultCodeMappingDao provides the following services:
            <list type="bullet">
            <item>
            <description>Saves a ProviderResultCodeMapping entity</description>
            </item>
            <item>
            <description>Deletes an <b>existing</b> ProviderResultCodeMapping entity</description>
            </item>
            <item>
            <description>Gets an <b>existing</b> ProviderResultCodeMapping entity by the <see cref="P:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping.ProviderKey">ProviderKey</see>
            and the <see cref="P:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping.ProviderResultCode">ProviderResultCode</see></description>
            </item>
            <item>
            <description>Load all the <b>existing</b> ProviderResultCodeMappings</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMappingDao.Save(Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping)">
            <summary>
            Saves a ProviderResultCodeMapping.
            </summary>
            <param name="providerResultCodeMapping">The <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping">IProviderResultCodeMapping</see> to save</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMappingDao.Delete(Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping)">
            <summary>
            Deletes a ProviderResultCodeMapping
            </summary>
            <param name="providerResultCodeMapping">The <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping">IProviderResultCodeMapping</see> to delete</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMappingDao.Get(System.String,System.String)">
            <summary>
            Gets a ProviderResultCodeMapping according to the provider key and the external providerResultCode.
            </summary>
            <param name="providerKey">A string identifying the external payment provider</param>
            <param name="providerResultCode">The external provider's result code.</param>
            <remarks>The combination between the ProviderKey and the ProviderResultCode is unique.</remarks>
            <returns>
            A <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping">ProviderResultCodeMapping</see> that matches a mapping between
            the external provider's result code and the EPS result code.
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMappingDao.LoadAll">
            <summary>
            Loads all ProviderResultCodeMappings
            </summary>
            <returns>A collection of <see cref="T:Retalix.StoreServices.Model.Tender.EPS.IProviderResultCodeMapping">ProviderResultCodeMappings</see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInputParameters">
            <summary>
            basic that for request action
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInputParameters.ContextParameters">
            <summary>
            Context Input Parameters
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInputParameters.RequestParameters">
            <summary>
            Request Input Parameters
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInputParameters.Card">
            <summary>
            The identified Card Data
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInquiryField">
            <summary>
            Represents an additional data regarding the payment mean which required to be filled by the user.
            </summary>
            <remarks>
            As part of the financial flow, the user will may required to fill an additional data regarding his payment mean.<br></br>
            It can be any type of data (e.g: AlphaNumeric, Yes/No, DateTime, Numeric, etc).<br></br>
            For example, the user needs to provide the last 4 digits of his VISA card.<br></br>
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInquiryField.Name">
            <summary>
            Represents the PaymentMeanInquiryField's name.
            </summary>
            <remarks>
            For example, assuming that the user will required to fill his payment mean's 4 last digits as part of the financial flow,<br></br>
            than this PaymentMeanInquiryField's name may be "4LastDigits".
            <b>This name must be unique</b>.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInquiryField.Value">
            <summary>
            Represents the value that was filled by the user.
            </summary>
            <remarks>
            This value may be used for any further validation regarding this PaymentMeanInquiryField.
            For example, assuming the user will required to fill his payment mean's 4 last digits as part of the financial flow, <br></br>
            and he filled this data as "2254", than the PaymentMeanInquiryField's value will be equal to "2254".
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInquiryField.Type">
            <summary>
            Represents the type of the value (for example: alpha numeric)
            </summary>
            <remarks>
            The queried data needs to be matched with R10 client's contract and with its capabilities.
            For example, assuming the Point of Sale's user interface may be filled with numeric characters only.<br></br> 
            Additionally, the user will required to fill his last name. This example shows a wrong use of PaymentMeanInquiryField,
            due to the fact that for technically reason the user won't be able to fill the required data.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInquiryField.Label">
            <summary>
            Represents the PaymentMeanInquiryField's label upon the R10 client's user interface.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInquiryField.Message">
            <summary>
            Represents an additional message to be presented on R10 client's user interface.
            </summary>
            <remarks>
            For example, assuming the user will required to fill his payment mean's 4 last digits as part of the financial flow, <br></br>
            and he filled an invalid data (i.e. "123"). As a result, the user will re-queried for this data again with an additional message<br></br>  
            which informs him that the input was invalid (i.e: "The number you filled does not contain 4 digits").
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.PaymentMeanInquiryField.ValidatorKey">
            <summary>
            Represents a key to (see cref="IPaymentMeanInquiryResponseValidator"/> to perform a validation on received value<br></br>
            when PaymentMeanInquiryField is provided by the user.
            </summary>
            <remarks>
            <b>The corresponding (see cref="IPaymentMeanInquiryResponseValidator"/> must be registered in the system.
            and will resolved by this ValidatorKey.</b>
            Please refer to (see cref="IPaymentMeanInquiryResponseValidator"/> for additional information.
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.RequestParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.RequestParameters.DeviceResult">
            <summary>
            data that reflects the smartcard device result of trying to pay with the card
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.RequestParameters.SetFields">
            <summary>
            additional payment information fields
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.RequestParameters.TotalGoodsAmount">
            <summary>
            Total amount of goods
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.RequestParameters.EntryMethod">
            <summary>
            Entry method like: MSR, smartCard etc.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.RequestParameters.TotalCashbackAmount">
            <summary>
            Total cash back amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.RequestParameters.TotalAmount">
            <summary>
            Total cash back amount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.RequestParameters.Currency">
            <summary>
            Currency used
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.RequestParameters.DepositTenderAmount">
            <summary>
            Tenders to deposit for the used payment Mean
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.SmartCardDeviceResult">
            <summary>
            data that reflects the smartcard device result of trying to pay with the card
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.SmartCardDeviceResult.IsApproved">
            <summary>
            is the device approved the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.SmartCardDeviceResult.ServerAuthorization">
            <summary>
             represent the provider authorization response that the device result was based on
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.SmartCardDeviceResult.AuthorizationCode">
            <summary>
            AuthorizationCode that supplied by the terminal
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.SmartCardDeviceResult.IsOnlineApprovalRequired">
            <summary>
            Device is asking for online approval
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.SmartCardDeviceResult.IsFallBack">
            <summary>
            Indicate that smart card didn't succeed to read the card and process moved to MSR flow.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.ContextParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.ContextParameters.StoreId">
            <summary>
            The StoreId on which payment is requested
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.ContextParameters.TerminalId">
            <summary>
             The TerminalId on which payment is requested 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.ContextParameters.TransactionExternalId">
            <summary>
            The external id of the transaction object.
            It is set whenever the transaction was reported to an external system, like the transaction log.
            Its' uniqueness and cyclic qualities may be retailer specific.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.ContextParameters.TransactionDate">
            <summary>
            Date and time of the R10 transaction (Not the same as the EPS transaction with the payment provider)
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EPS.AmountPerTender">
            <summary>
            Tenders to deposit
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.AmountPerTender.Amount">
            <summary>
            amount of the deposit
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EPS.AmountPerTender.TenderType">
             <summary>
            Tender type
             </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingMessageBuilder">
            <summary>
            Creates or Deletes relevant Tender Rounding Rule Message
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingMessageBuilder.Create(System.String)">
            <summary>
            Creates a simple Tender Rounding Rule Message with a type of Exception Message
            </summary>
            <param name="messageName"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingMessageBuilder.Delete(System.String)">
            <summary>
            Deletes a Tender Rounding Rule Message
            </summary>
            <param name="messageName"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingValidator">
            <summary>
            Validates the amount entered for rounding.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderRoundingRule.RoundingTransactionType">
            <summary>
            The Transaction type on which we are going to perform rounding
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderRoundingRule.IRoundingExecuter">
            <summary>
            Executes round to given retail transaction.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderRoundingRule.IRoundingExecuter.Execute(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Selling.IRetailTransaction,System.Boolean,System.Boolean)">
            <summary>
            Executes rounding on given retail transaction balance according to payment.
            </summary>
            <param name="retailTransaction">Current retail transaction</param>
            <param name="amount"></param>
            <param name="tenderType">Tender Type</param>
            <param name="businessUnit">Business Unit</param>
            <param name="isRefund">Check is refund</param>
            <param name="isPreTenderAdd">Is pre tender add</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderRoundingRule.IRoundingInfo">
            <summary>
            Tender rounding rule information 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderRoundingRule.RoundingDirection">
            <summary>
            Tender rounding direction
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderRoundingRule.IRoundingStrategy">
            <summary>
            Retail transaction rounding strategy 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderRoundingRule.IRoundingStrategy.Calculate(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule,Retalix.StoreServices.Model.Finance.Money.Money,System.Boolean)">
            <summary>
            Retail transaction rounding balance due calculation strategy 
            </summary>
            <param name="balanceDue"></param>
            <param name="amountPaid"></param>
            <param name="tenderRoundingRule"></param>
            /// <param name="isPreTenderAdd"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderRoundingRule.IRoundingStrategyFactory">
            <summary>
            Retail transaction tender rounding strategy factory
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderRoundingRule.IRoundingStrategyFactory.CreateRoundingStrategy(System.Boolean)">
            <summary>
             Creates rounding strategy according to parameters. 
            </summary>
            <param name="isRefund"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule.Id">
            <summary>
             Represents the <see cref="T:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule"/>s unique identifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule.RuleName">
            <summary>
            Gets an hard coded unique Name value that Represents a tender rounding rule type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule.RoundingTender">
            <summary>
            Gets or Sets the value  of the rounding type tender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule.LowestCurrencyDenominator">
            <summary>
            Gets or Sets the value  of the lowest currency denominator.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule.RoundDownThreshold">
            <summary>
            Gets or Sets the value  of the round down threshold.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule.DifferentForRefund">
            <summary>
            Gets or Sets the value  of the rules for refund.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule.RefundDenominator">
            <summary>
            Gets or Sets the value  of the refund denominator.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule.RefundThreshold">
            <summary>
            Gets or Sets the value  of the refund threshold.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule.EnforceValidationOnCashOfficeActivities">
            <summary>
            Whether to perform validations on CashOffice Activities
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule.EnforceValidationOnSaleTransactions">
            <summary>
            Whether to perform validations on Sale Transactions
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRuleDao">
            <summary>
            Represents repository for ITenderRoundingRuleDto
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRuleDao.AddOrUpdate(Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule)">
            <summary>
            Add or Update the tender rounding rule
            </summary>
            <param name="tenderRoundingRule">The venue day</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRuleDao.Delete(Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRule)">
            <summary>
            Delete the tender rounding rule
            </summary>
            <param name="tenderRoundingRule">The tender rounding rule</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRuleDao.Get(System.Guid)">
            <summary>
            Return tender rounding rule according to id
            </summary>
            <param name="id">The id of the tender rounding rule</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRuleDao.Find(System.String,System.Int32)">
            <summary>
            Return tender rounding rule according to id
            </summary>
            <summary>
            <param name="ruleName">The tender rounding rule name</param>
            <param name="roundingTender">The rounding tender type</param>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRuleDao.Find(System.Int32)">
            <summary>
            Return tender rounding rule data relayed to Id,Name and rounding tender type
            </summary>
            <summary>
            <param name="roundingTender">The rounding tender type</param>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRuleDao.GetAllRoundingRules">
            <summary>
            Return tender rounding rule according to id
            </summary>
            <summary>
            <param>The tender rounding rule name</param>
            <param>The rounding tender type
                <name>roundingTender</name>
            </param>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderRoundingRule.ITenderRoundingRuleValidator">
            <summary>
            Validates the Tender Rounding Rule configuration values
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderRoundingRule.TenderRoundingRuleAction">
            <summary>
            Supported actions for the Tender Rounding Rule
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.ICheck">
            <summary>
             Represents the configuration defined for tenders of type Check.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IPaymentInfoBuilder">
            <summary>
            Builder for IPaymentInfo
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.ChangeDefinition">
            <Summary>
            Defines the change definitions when giving change back to the customers.
             It holds the amount range for which the cashier can give back change, using the defined tender.
             This object exists for a Tender.
            </Summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.ChangeDefinition.TenderChange">
            <summary>
            Gets the Tender to return as change.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.ChangeDefinition.TenderChangeId">
            <summary>
            Gets or sets the TenderId to return as change.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.ChangeDefinition.UpToAmount">
            <summary>
            Gets or sets the range amount for returning change with the Tender.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.IChangeOptions">
            <summary>
             Represents a collection of change options available for <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.IChangeOptions.TenderType">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</see> these option should apply for.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.IChangeOptions.IsConsolidateOnChange">
            <summary>
            Gets or sets the boolean value indicating if changes were made on a transaction, which is consolidated with all the proper voided tenders.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.IChangeOptions.IsAutoVoidDisabled">
            <summary>
            Gets or sets the boolean value indicating whether this tender can be auto voided in order to fulfill change requirment.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.IChangeOptions.ChangePriority">
            <Summary>
             Gets a value which is the priority that the POS uses to issue change when there is more 				
             than one paid tender in a transaction, this is a location based attribute.
            </Summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.IChangeOptions.ChangeDefinitions">
            <Summary>
             Gets a value which displays the name of the tenders available when giving change back to the customers.
             It holds the amounts ranges for which the cashier can give back change, using the defined tender, this is a location based attribute.
            </Summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.IChangeOptionsDao">
            <summary>
            Component in charge of persisting the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.IChangeOptions">IChangeOptions</see> entity.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.IChangeOptionsDao.Get(Retalix.StoreServices.Model.Tender.TenderType.ITenderType)">
            <summary>
            Gets the change options available for the given <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</see>.
            </summary>
            <param name="tenderType"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.IChangeOptionsDao.Save(Retalix.StoreServices.Model.Tender.TenderType.ChangeOptions.IChangeOptions)">
            <summary>
            Saves the change options
            </summary>
            <param name="changeOptions"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderChangeCalculator">
            <summary>
            Will decide if change is needed in the transaction and will try to calculate the change tenders
            </summary>
            <exception cref="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException">This exception(Retalix.StoreServices.BusinessComponents.Selling.Payments.Change.Exceptions.TendersNotAllowedForChangeException) will be thrown if change is needed but the calculator couldn't decide on how to return it.
            for example - if the chage amount is bigger the the defined change tedner up to limit. </exception>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IPaymentInfoBuilderFactory">
            <summary>
            IPaymentInfo Builder Factory
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IPaymentInfoContractToModelAdapter`2">
            <summary>
            IPaymentInfo Contract To Model Adapter
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.Restrictions.IProhibitPaymentRuleEvaluator">
            <summary>
            Represents the functionality required to determine if a <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender</see> is allowed for payment in the environment.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.Restrictions.IProhibitPaymentRuleEvaluator.IsProhibitedForPayment(Retalix.StoreServices.Model.Tender.TenderType.ITenderType)">
            <summary>
             Specifies a boolean value indicating if the received <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender</see> is allowed for payment or not in the current environment 
             (based on whether a prohibit payment rule exists, and if it applies on the environment).
            </summary>
            <param name="tenderType">The <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender</see> for which prohibit payment rules are searched.</param>
            <returns>True if the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender</see> is prohibited for payment (a prohibit payment rule exists for it),
             False if the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender</see> isn't prohibited for payment (no prohibit payment rule exists for it)</returns>.
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderTypeComparer">
            <summary>
            Represents the comparer for <seealso cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</seealso> objects.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IMobileTender">
            <summary>
             Represents the configuration defined for tenders of type Mobile.
             This tender should be processed by ShopperGateway in order to be authorized. In most cases it should be <see langword="true"/> for mobile payment, and <see langword="false"/> for other tenders.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IPointsTender">
            <summary>
            Contains configuration viable for tenders of type Points Payment.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IRewardTender">
            <summary>
            Represents the configuration defined for tenders of type Reward Tender.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IRounding">
            <summary>
            Represents the configuration defined for tenders of type Rounding.
            Used to balance retail transaction when balance due is illegal in relation to currency.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderLocationAttribute`1">
            <summary>
             Represents an attribute of type T.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderLocationAttribute`1.Add(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment,`0)">
            <summary>
            Adds a value for a specific location.
            </summary>
            <param name="businessUnit"></param>
            <param name="segment"></param>
            <param name="value"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderLocationAttribute`1.Calculate(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
            Calculates the correct value for a specific location, i.e. the value defined for the specific location
            or for the closest <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">business unit</see> above the one sent. If there is no value matching the given
            parameters found, then a default value will be returned.
            </summary>
            <param name="businessUnit"></param>
            <param name="segment"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderLocationAttribute`1.GetAll">
            <summary>
            Gets all values.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderLocationAttribute`1.Clear">
            <summary>
            Clears all values from the definition.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderTypeDao">
            <summary>
             Represents a means for retrieving\adding\updating the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/> entity.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderTypeDao.Get(System.String)">
            <summary>
            Gets the ID to be retrieved.
            </summary>
            <param name="tenderTypeId">ID of the tender to retrieve.</param>
            <returns>The tender found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderTypeDao.Save(Retalix.StoreServices.Model.Tender.TenderType.ITenderType)">
            <summary>
            Used to Add\Update <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/>s.
            </summary>
            <param name="tenderType">The tender to add/update.</param>
            <returns>The added/updated tender.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderTypeDao.GetAll">
            <summary>
             Retrieves all <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/>s.
            </summary>
            <returns>All <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/>s stored in the system</returns>.
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderTypeDao.GetFromPosition(System.String)">
            <summary>
             Retrieves all <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/>s, using the given tender 
             type ID as a starting position.
            </summary>
            <returns>All <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/>s matching the criteria above.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderTypeDao.GetByIdentifier(System.String)">
            <summary>
             Retrieve the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender type</see> associated to the tenderIdentifier.
            </summary>
            <param name="tenderIdentifier">identifier from the tender's TenderAdditionalIdentifiers.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderTypeDao.GetByAny(System.String)">
            <summary>
            Retrieve the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender type</see> associated to the tenderIdentifier.
            First try to retrieve by the ID, if  that fails, try to retrieve by the identifier.
            </summary>
            <param name="tenderIdentifier">ID or additional identifier of the desired tender.</param>
            <returns>Tender with ID equals the tenderIdentifier, or with an additional identifiers list which
            includes the tenderIdentifier.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderTypeFactory">
            <summary>
            Represents an interface used to create new instances of <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/> derivations.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderTypeFactory.Create``1(System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/> derivation.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/></typeparam>.
            <param name="id">The entity's ID.</param>
            <exception cref="T:System.ArgumentException">A prompt thrown in case creation of the given type is not supported.</exception>
            <returns>The new entity.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderTypeFactory.Create(System.String,System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/> derivation.
            </summary>
            <param name="tenderType">The type of tender (e.g. "Cash").</param>
            <param name="tenderTypeId">The tender's ID.</param>
            <returns>The new tender.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderTypeFactory.EnumerateTypeNames">
            <summary>
            Retrieves the list of tender type names
            </summary>
            <returns>List of tender type names</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IVoucher">
            <summary>
             Represents the configuration defined for tenders of type voucher.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions">
            <summary>
             Represents a collection of payment options available for <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</see>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions.TenderType">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</see> these option should apply for.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions.AmountEntryOption">
            <summary>
            Gets the <see cref="P:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions.AmountEntryOption">value for AmountEntryRequired</see>; this is a location based attribute.
            The POS will force the user to enter a value in the amount to pay field.
            "YesWithoutDefault" - Present zero in the input field on the screen and allow the user to enter values.
            "YesWithDefault"- Present the value of the total transaction and allow the user to perform any changes to the value presented.
            "YesWithSuggestedAmounts"- Present the suggested amounts value for payment.
            "No" - Present no window at all and debit the entire transaction amount for the tender.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions.SuggestedAmounts">
            <summary>
            Gets or Indicates  the tender's suggested amounts to pay, this is a location based attribute.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions.GetCalculatedSuggestedAmounts(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Returns the calculated suggested amount for the current tender, commonly used by the POS client. 
            </summary>
            <param name="businessUnit"></param>
            <param name="retailSegment"></param>
            <param name="balanceDue"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions.IsAutoReconcile">
            <summary>
            Gets the boolean value which indicates if this tender is auto reconcile
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions.IsProcessedByAtm">
            <summary>
            Gets the boolean value which indicates if this tender is processed by ATM, this is a location based attribute.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions.SignatureVerificationPolicy">
            <summary>
            Gets a value which indicates signature verification behavior at the POS.
            Verification - Show cashier Yes/No screen Yes - customer signature verified, No - customer signature was not verified
            Acknowledgement - Show the cashier the information message that informs that a customer signature is required, this is a location based attribute.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions.OpenTillDrawerOption">
            <summary>
            Gets indication of timing to determine when the POS drawer opens.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions.IsByDenomination">
            <summary>
            Gets the boolean value which indicates if the tender can have denominations details, this is a location based attribute.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions.IsReduceRewardOnReturn">
            <summary>
            Gets the boolean value which indicates if the 'reward as tender' reward value with this , this is a location based attribute.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions.IsAuthorizeWithoutIdentification">
            <summary>
            Gets the boolean value which indicates if start with payment or with card expected (card identification), this is a location based attribute.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions.DisablePartialApprovalMessage">
            <summary>
            disable approval message for payment
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptionsDao">
            <summary>
            Component in charge of persisting the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions">IPaymentOptions</see> entity.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptionsDao.Get(Retalix.StoreServices.Model.Tender.TenderType.ITenderType)">
            <summary>
            Gets the payment options available for the given <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</see>.
            </summary>
            <param name="tenderType"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptionsDao.Save(Retalix.StoreServices.Model.Tender.TenderType.PaymentOptions.IPaymentOptions)">
            <summary>
            Saves the payment options
            </summary>
            <param name="paymentOptions"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.TenderDescription">
            <summary>
             Represents the tender description.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.TenderDescription.Culture">
             <summary>
            Gets or sets the culture name in the format "lnguagecode2-country/regioncode2", ex: en-US, fr-CA.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.TenderDescription.Value">
            <summary>
            Gets or sets the localized name of the tender.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.TenderDescription.GetTenderDefaultDescription(System.Collections.Generic.ICollection{Retalix.StoreServices.Model.Tender.TenderType.TenderDescription})">
             <summary>
            Gets or sets the localized value of the description for the default (en-US) culture. If it doesn't exist, the system takes the first one. 
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.TenderDescription.GetTenderLocalizedDescription(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tender.TenderType.TenderDescription},System.String)">
            <summary>
            The localized value of the description for the provided culture. If it doesn't exist, it takes the first one.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IAuthorization">
            <summary>
            Represents the authorization token, which is the output from an authorized call for a payment on a <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.IAuthorization.Amount">
            <summary>
            Gets the authorized amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.IAuthorization.Code">
            <summary>
            Gets the authorization Code.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.ICash">
            <summary>
            Represents the configuration defined for tenders of type Cash.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.ICheque">
            <summary>
             Represents the configuration defined for tenders of type Cheque.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.ICreditDebit">
            <summary>
             Represents the configuration defined for tenders of type credit/debit.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IElectronicTransferable">
            <summary>
             Represents the interface to provide the ability of a tender entity to be transferred electronically.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.IElectronicTransferable.ManualEntry">
            <summary>
            Gets or sets the boolean value which indicates if this form of payment is entered manually or in an automatic form (e.g.Scan\Swipe\Dip). Since non
            manual entry methods vary by card type, it is not possible to force an automatic entry method on any form of payment.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.IElectronicTransferable.AdditionalIdentifiers">
            <summary>
            Gets or Sets the list of Reference IDs that are mapped to a tender (e.g. EPS_AmexId->TenderId (3)).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IElectronicVoucher">
            <summary>
             Represents the configuration defined for tenders of type voucher which are also electronically transferable.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IIdentifiableTenderType">
            <summary>
            Represents the ability to uniquely identify a TenderType in the system (e.g. if the Tender has a barcode that uniquely identifies it).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.IIdentifiableTenderType.CanBeUniquelyIdentified">
            <summary>
            Gets or sets a boolean value indicating a flag that represents if the TenderType can be uniquely identified.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IRequiredPaymentParametersValidator">
            <summary>
            Represents the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</see>'s required payment parameters, which are validated.
            Its main purpose is to support extension validators so that each specific tender 
            (such as <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ICheque">ICheque</see>) with specific payment parameters could be configured with its 
            appropriate validators.
            After associating a tender to such a validation, any tender's authorization action will trigger a validation
            of those parameters validated.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.IRequiredPaymentParametersValidator.Name">
            <summary>
            Name of the validator.
            This name is also used for Castle injection.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.IRequiredPaymentParametersValidator.MissingParametersName">
            <summary>
            If the validator fails, it should contain the names of empty or null required payment parameters.
            Otherwise, should be empty or null.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.IRequiredPaymentParametersValidator.InvalidFormatParameters">
            <summary>
            If the validator fails, it should contain the IDictionary (parameter name, invalid format error message) 
            of the invalid format parameters values.
            Otherwise, should be empty or null.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.IRequiredPaymentParametersValidator.Validate(Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo)">
            <summary>
            Validates according to the paymentInfo.
            Throws an exception when validation fails.
            </summary>
            <param name="paymentInfo">Contains payment information such as tender payment parameters.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">
            <summary>
            Represents the means of transferring funds for the purpose of payment, exchange or account transfer.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.ITenderType.Id">
            <summary>
             Represents the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/>s unique identifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.ITenderType.Name">
            <summary>
            Gets an hard coded unique Name value that Represents a tender type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.ITenderType.Currency">
            <summary>
            Gets or Sets the <see cref="T:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo"/> of the tender.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.ITenderType.Authorize(Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo)">
            <summary>
             Authorizes a payment request passed on the <paramref name="paymentInfo"/> parameter.
            </summary>b
            <param name="paymentInfo">a <see cref="T:Retalix.StoreServices.Model.Selling.CustomerPayment.PaymentInfo">PaymentInfo</see> that contains the details of the payment request</param>
            <returns>an <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.IAuthorization">IAuthorization</see> that contains the authorization response</returns>.
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.ITenderType.TenderDescriptions">
            <summary>
            Gets or Sets a list of <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.TenderDescription">TenderDescription</see>s that are assigned to the tender.        
            </summary>
            <value>A <see cref="T:System.Collections.Generic.List`1"><![CDATA[List<T>]]></see> that contains elements of type <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.TenderDescription">TenderDescription</see>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderType.ITenderType.ParameterValidators">
            <summary>
            Gets or Sets a list of <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.IRequiredPaymentParametersValidator">IRequiredPaymentParametersValidator</see>, assigned to the tender.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.LocationAttribute.AmountEntryOption">
            <summary>
            Represents the different options available for the user to enter a value in the amount to pay field.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.TenderType.LocationAttribute.AmountEntryOption.YesWithoutDefault">
            <summary>
             Represents a zero in the input field on the screen and allows the user to enter values.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.TenderType.LocationAttribute.AmountEntryOption.YesWithDefault">
            <summary>
             Represents the value of the total transaction and allows the user to perform any changes to the value presented.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.TenderType.LocationAttribute.AmountEntryOption.YesWithSuggestedAmounts">
            <summary>
             Represents the suggested payment amount values.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.TenderType.LocationAttribute.AmountEntryOption.No">
            <summary>
             Represents no window at all and debits the entire transaction amount for the tender.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.LocationAttribute.OpenTillDrawerOption">
            <summary>
             Represents how the tender used in the transaction can affect the opening of the cash drawer at the end of the transaction.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.TenderType.LocationAttribute.OpenTillDrawerOption.DoNotOpen">
            <summary>
            0 - Don't open the drawer when this tender is used.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.TenderType.LocationAttribute.OpenTillDrawerOption.OpenOnSaleOnly">
            <summary>
            1 - Open the drawer if this tender is used during a sale (received from customer).
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.TenderType.LocationAttribute.OpenTillDrawerOption.OpenOnRefundOnly">
            <summary>
            2 - Open the drawer if this tender is used during a refund transaction (returned to customer).
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.TenderType.LocationAttribute.OpenTillDrawerOption.AlwaysOpen">
            <summary>
            3 - Open the drawer if this tender is used in both scenarios: sale and refund.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedLineData">
            <summary>
            class that combaine tax information for specific order line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedLineData.OrderLine">
            <summary>
            Gets or sets instance of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine"/> 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedLineData.LineTaxes">
            <summary>
            Gets or sets sequence of <see cref="T:Retalix.StoreServices.Model.Tax.TaxPerLine"/> instances relevant for <see cref="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedLineData.OrderLine"/>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedTenderData">
            <summary>
            class that contains all information for specific tender that relevant for eligibility calculation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedTenderData.Tender">
            <summary>
            Gets or sets instance of <see cref="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender"/> 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedTenderData.Restriction">
            <summary>
            Gets or sets instance of <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestriction"/> which is relevant for this <see cref="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedTenderData.Tender"/> 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedTenderData.PaymentTerms">
            <summary>
            Gets or sets sequence of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm"/> instances relevant for this <see cref="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedTenderData.Tender"/> and exists in current instanse of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedTenderData.EligibleLines">
            <summary>
            Gets or sets instance of <see cref="T:Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.GroupedPrioritizedLines"/> which represents lines in current instanse of <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder"/> that this <see cref="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedTenderData.Tender"/>
            is allowed to pay for them grouped by priority
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedTenderData.TotalPaidAmount">
            <summary>
            Gets or sets total amount that was paid by this <see cref="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedTenderData.Tender"/>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedTenderData.ExemptableTaxes">
            <summary>
            Gets or sets sequence of <see cref="T:Retalix.StoreServices.Model.Tax.Engine.ITenderExemption"/> instances that represents potential tax examption.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ICalculationContextFactory.CreatePaymentPlanCalculationContext(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,Retalix.StoreServices.Model.Selling.ProductPaymentRestriction.IProductPaymentRestrictionsMap,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tender.TenderType.ITenderType})">
            <summary>
            Creates instance of <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlanCalculationContext"/> filled with relevant data based on information from <paramref name="customerOrder"/>,
            <paramref name="restrictionsMap"/> and <paramref name="additionalTenderTypes"/>
            </summary>
            <param name="customerOrder"></param>
            <param name="restrictionsMap"></param>
            <param name="additionalTenderTypes">Sequence of <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/> objects that represets tenders that should take a part in 
            eligibility calculation but is not a part of transaction's payments.
            Currently used for tender item restrictions with running total.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlanCalculationContext">
            <summary>
            Contains all relevant information for payment plan calculation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlanCalculationContext.Item(System.String)">
            <summary>
            Returns required <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedTenderData"/> from <see cref="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlanCalculationContext.Tenders"/> by <see cref="P:Retalix.StoreServices.Model.Tender.TenderType.ITenderType.Id"/>
            </summary>
            <param name="tenderTypeId"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlanCalculationContext.Item(System.Int64)">
            <summary>
            Returns required <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedLineData"/> from <see cref="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlanCalculationContext.Lines"/> by <see cref="P:Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine.SequenceNumber"/>
            </summary>
            <param name="orderLineSequenceNumber"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlanCalculationContext.Tenders">
            <summary>
            Returns sequence of <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedTenderData"/> objects
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlanCalculationContext.Lines">
            <summary>
            Returns sequence of <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.AggregatedLineData"/> objects
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlanCalculator.Calculate(Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlanCalculationContext,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Returns a payment plan calculated for all tenders provided in <paramref name="tenders"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ICoverageGroup.TotalCoverage">
            <summary>
            Gets the total of all <see cref="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ILineCoverage.CoveredAmount">line coverages</see> covered by this coverage group in the customer order.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlan">
            <summary>
            Represents the result of eligibilty and coverage calculations provided by 
            the <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibilityCalculator">ITenderEligibilityCalculator</see> service.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlan.TenderEligibilities">
            <summary>
            Gets the collection of <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibility">ITenderEligibility</see> objects for the tenders for which eligibility was calculated
            by the <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibilityCalculator">ITenderEligibilityCalculator</see> service.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlan.TenderCoverages">
            <summary>
            Gets the collection of <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderCoverage">ITenderCoverage</see> objects for the tenders for which coverage was calculated
            by the <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibilityCalculator">ITenderEligibilityCalculator</see> service.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlan.FindEligibility(Retalix.StoreServices.Model.Tender.TenderType.ITenderType)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibility">ITenderEligibility</see> object that matching the data in <paramref name="tenderType"/>.
            </summary>
            <param name="tenderType">The <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</see> entity according to which to search for a matching tender eligibility.</param>
            <returns>A matching <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibility">ITenderEligibility</see> object or null if no matching tender eligibility is found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlan.FindEligibility(Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibility">ITenderEligibility</see> object that matching the data in <paramref name="tender"/>.
            </summary>
            <param name="tender">The <see cref="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender">ITender</see> object according to which to search for a matching tender eligibility.</param>
            <returns>A matching <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibility">ITenderEligibility</see> object or null if no matching tender eligibility is found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlan.FindEligibility(Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibility">ITenderEligibility</see> object that matching the data in <paramref name="paymentTerm"/>.
            </summary>
            <param name="paymentTerm">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">IPaymentTerm</see> object according to which to search for a matching tender eligibility.</param>
            <returns>A matching <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibility">ITenderEligibility</see> object or null if no matching tender eligibility is found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlan.FindCoverage(Retalix.StoreServices.Model.Tender.TenderType.ITenderType)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderCoverage">ITenderCoverage</see> object that matching the data in <paramref name="tenderType"/>.
            </summary>
            <param name="tenderType">The <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">ITenderType</see> entity according to which to search for a matching tender coverage.</param>
            <returns>A matching <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderCoverage">ITenderCoverage</see> object or null if no matching tender coverage is found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlan.FindCoverage(Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderCoverage">ITenderCoverage</see> object that matching the data in <paramref name="tender"/>.
            </summary>
            <param name="tender">The <see cref="T:Retalix.StoreServices.Model.Selling.EligibilityPolicy.ITender">ITender</see> object according to which to search for a matching tender coverage.</param>
            <returns>A matching <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderCoverage">ITenderCoverage</see> object or null if no matching tender coverage is found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IPaymentPlan.FindCoverage(Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderCoverage">ITenderCoverage</see> object that matching the data in <paramref name="paymentTerm"/>.
            </summary>
            <param name="paymentTerm">The <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">IPaymentTerm</see> object according to which to search for a matching tender coverage.</param>
            <returns>A matching <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderCoverage">ITenderCoverage</see> object or null if no matching tender coverage is found.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ILineCoverage">
            <summary>
            Represents the coverage of an order line by a tender payment, describing the covered line 
            and the amount that is covered from that line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ILineCoverage.OrderLineSequenceNumber">
            <summary>
            Gets or sets the sequence number of the covered order line.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ILineCoverage.CoveredAmount">
            <summary>
            Gets or sets the amount of the covered order line's net amount that is covered by the tender payment.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IFsaGroupAllocation">
            <summary>
            Represents the allocation of money within a payment term to a particular group of eligible products.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IFsaGroupAllocation.GroupName">
            <summary>
            Gets or sets of the name of the group of eligible products for which a coverage amount has been allocated.
            </summary>
            <remarks>
            Given an FSA restriction, the group name will be the name of the custom category below the FSA parent node
            whose items have been covered by the payment term.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IFsaGroupAllocation.Amount">
            <summary>
            The amount allocated from the total amount of the <see cref="T:Retalix.StoreServices.Model.Selling.CustomerOrder.PaymentTerms.IPaymentTerm">payment term</see> to the group 
            of eligible products represented by <see cref="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IFsaGroupAllocation.GroupName"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IFsaPaymentDistribution">
            <summary>
            Represents the way the amount of a payment term is divided into different groups of eligible products,
            where each such amount-per-group is represented by a <see cref="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.IFsaGroupAllocation">IPaymentGroupAllocation</see> object.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderCoverage">
            <summary>
            Represents the distribution of the coverage in groups and lines for a <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/> in a customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderCoverage.TotalCoverage">
            <summary>
            Gets the total of all <see cref="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ICoverageGroup.TotalCoverage">coverage groups</see> covered by <see cref="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderCoverage.Tender"/> in the customer order.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibilityCalculator">
            <summary>
             Calculates the tender eligibility state of the current customer order. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibilityCalculator.Calculate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Calculates the tender eligibility of all tender types of the payment terms in the current customer order. 
            </summary>
            <param name="customerOrder"></param>
            <returns>The maximum allowed payment, or null if the TenderType is not restricted.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibilityCalculator.Calculate(Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tender.TenderType.ITenderType})">
            <summary>
            Calculates the tender eligibility of the current customer order, according to the tenderTypes input. 
            </summary>
            <param name="customerOrder">The customer order that its tender eligibility is calculated.</param>
            <param name="tenderTypes">Tender types which should be used for the tender eligibility calculation.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibility">
            <summary>
            Holds the tender eligibility data for each tender in the customer order
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibility.RemainingEligibleAmount">
            <summary>
            Remaining amount which this tender type is eligible to pay.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITenderEligibility.EligibleLines">
            <summary>
            The order line sequense number on current CustomerOrder that are eligible to pay by the TenderType.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITendersEligibilities">
            <summary>
            Contains the tenders eligibility data of the customer order.
            It also provides the ability to update the items restrictions during the current customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITendersEligibilities.PaymentPlan">
            <summary>
            Gets an enumerable of the tender eligibility state of each tender type in the payment terms.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITendersEligibilities.ReversedEligibilities">
            <summary>
            Dictionary of item id to the tenders which are eligible to pay for the item.
            It only contains eligibilities which were reversed during the current customer order.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITendersEligibilities.DisplayedEligibilities">
            <summary>
            Gets the collection of tender types whose remaining eligibilities have been displayed (i.e., returned
            in a response) to the client.
            </summary>
            <remarks>
            Tender eligibilities that have previously been displayed must continue to be displayed even if they
            cease to be eligible for any items in the current order.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITendersEligibilities.GetReversibleTenders">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITendersEligibilities.GetReversibleEligibleTenders(System.Int64)">
            <summary>
            
            </summary>
            <param name="lineSequenceNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.EligibilityPolicy.ITendersEligibilities.UpdateEligibility(System.Int64,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tender.TenderType.ITenderType})">
            <summary>
            Provides the ability to update the tenders eligibility of current customer order.
            Only the eligibility of tenders which are configured as allowed to be reversed, will be updated.
            Tender which isn't allowed to be reversed, will be skipped.
            The update will be valid for the current customer order only!!!
            </summary>
            <param name="lineSequenceNumber"></param>
            <param name="eligibleTenders"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.EligibilityPolicy.EligibilityPolicyRelation">
            <summary>
            Represents the possible relations of an EligibilityPolicy.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.EligibilityPolicy.EligibilityPolicyRelation.ProhibitTenderFor">
            <summary>
            This policy relation refers to a TenderType that is prohibited for use with certain items.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.EligibilityPolicy.EligibilityPolicyRelation.AllowTendersForOnly">
            <summary>
            This policy relation refers to a TenderType that is only allowed for certain items, and prohibited for all others.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.IPaymentAmountCalculator">
            <summary>
            Payment amount calculator is calculationg equal payment by dividing the balance due to to equal payment amount
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.IPaymentAmountCalculator.Calculate(System.Decimal,System.Int32)">
            <summary>
            
            </summary>
            <param name="balanceDue">balance due</param>
            <param name="numberOfPayments">number of payments to divide</param>
            <returns>list of payments to pay</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.IPaymentPayHandler">
            <summary>
            May be implemented and registered by extension to be executed before adding tender to transaction
             <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentAddingEvent"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.IPaymentPayHandler.ChargeTender(Retalix.StoreServices.Model.Selling.CustomerPayment.Tender,Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            Payment callback
            </summary>
            <param name="tender">Tender to be added</param>
            <param name="retailTransaction">Tendered transaction</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderTypeMaintananceDto">
            <summary>
            Dto for validation, provides all available data in the maintanance service
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderExchange.ICurrencyConvertor">
            <summary>
            Represents the component responsible for converting <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money"/> in one <see cref="T:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo">currency</see>
            to another <see cref="T:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo">currency</see>, and determining the exchange rate.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.ICurrencyConvertor.Convert(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.CurrencyInfo,System.Nullable{System.DateTime})">
            <summary>
            Converts <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money"/> from one <see cref="T:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo">currency</see>  to another <see cref="T:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo">currency</see>.
            </summary>
            <param name="amount"></param>
            <param name="toCurrency"></param>
            <param name="exchangeDate"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.ICurrencyConvertor.Convert(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.CurrencyInfo,System.Nullable{System.DateTime},Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Converts <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money"/> from one <see cref="T:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo">currency</see>  to another <see cref="T:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo">currency</see>, based on a specific <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">business unit</see>.
            </summary>
            <param name="amount"></param>
            <param name="toCurrency"></param>
            <param name="exchangeDate"></param>
            <param name="businessUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.ICurrencyConvertor.CalculateExchangeRate(Retalix.StoreServices.Model.Finance.Money.CurrencyInfo,Retalix.StoreServices.Model.Finance.Money.CurrencyInfo,System.DateTime)">
            <summary>
            Calculates the exchange rate between currencies.
            </summary>
            <param name="fromCurrency"></param>
            <param name="toCurrency"></param>
            <param name="exchangeDate"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.ICurrencyConvertor.CalculateExchangeRate(Retalix.StoreServices.Model.Finance.Money.CurrencyInfo,Retalix.StoreServices.Model.Finance.Money.CurrencyInfo,System.DateTime,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Calculates the exchange rate between currencies, based on a specific <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">business unit</see>.
            </summary>
            <param name="fromCurrency"></param>
            <param name="toCurrency"></param>
            <param name="exchangeDate"></param>
            <param name="businessUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.ICurrencyConvertor.ConvertBack(Retalix.StoreServices.Model.Finance.Money.Money,Retalix.StoreServices.Model.Finance.Money.CurrencyInfo,System.Nullable{System.DateTime})">
            <summary>
            Converts <see cref="T:Retalix.StoreServices.Model.Finance.Money.Money">convertedAmount</see> back from one <see cref="T:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo">currency</see>  to another <see cref="T:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo">currency</see>, based on a specific <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">business unit</see>.
            This is the reverse of the "Convert" method, so the coverted currency is already knowen, and the base currency is the result of the calculation.
            </summary>
            <param name="convertedAmount">The knowen converted amount.</param>
            <param name="baseCurrency">The currency of the base amount used for convertion.</param>
            <param name="exchangeDate">The date of teh conversion. If null, current date will be used.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderExchange.ITenderExchangeDao">
            <summary>
            Represents a  means for retrieving\adding\updating the <see cref="T:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition"/> entity.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.ITenderExchangeDao.FindAllTendersExchangesDefinitions">
            <summary>
            Get sall <see cref="T:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition">tender exchange definitions</see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.ITenderExchangeDao.GetByExternalId(System.String)">
            <summary>
            Gets <see cref="T:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition">tender exchange definition</see>s by external ID.
            </summary>
            <param name="externalId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.ITenderExchangeDao.GetByExternalIds(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets <see cref="T:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition">tender exchange definitions</see> by external IDs.
            </summary>
            <param name="externalIds"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.ITenderExchangeDao.SaveOrUpdate(Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition)">
            <summary>
            Saves or updates a <see cref="T:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition">tender exchange definition</see>.
            </summary>
            <param name="tenderExchange"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.ITenderExchangeDao.DeleteByExternalId(System.String)">
            <summary>
            Deletes a <see cref="T:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition">tender exchange definition</see> based on its external ID.
            </summary>
            <param name="externalId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.ITenderExchangeDao.DeleteAll">
            <summary>
            Deletes all <see cref="T:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition">tender exchange definitions</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.ITenderExchangeDao.GetAllPaged(System.Int32)">
            <summary>
            Gets <see cref="T:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition">tender exchange definitions</see> by page size.
            </summary>
            <param name="pageSize">Page size.</param>
            <returns>IEnumerable of type TenderExchangeDefinition.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.ITenderExchangeDao.GetAllPaged(Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition,System.Int32)">
            <summary>
            Gets all <see cref="T:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition">tender exchange definitions</see> from the starting position.
            </summary>
            <param name="tenderExchangeDefinition"></param>
            <param name="pageSize">Page size.</param>
            <returns>IEnumerable of type TenderExchangeDefinition.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition">
            <summary>
            Represents the information required to perform a tender exchange operation.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition.#ctor">
            <summary>
            Defines the constructor.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition.Id">
            <summary>
            Gets or sets the definition internal identifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition.ExternalId">
            <summary>
            Gets or sets the definitions external identifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition.Name">
            <summary>
            Gets or sets the definitions name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition.MultiplesOf">
            <summary>
            Gets or set the multiple which determines a valid amount in the exchange.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition.MinAmount">
            <summary>
            Gets or sets the minimum amount for the exchange.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition.MaxAmount">
            <summary>
            Gets or sets the maximum amount for the exchange.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition.PayableTenders">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tenders</see> which are allowed for payment (in order to exchange for the received tenders).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition.ReceivableTenders">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tenders</see> which will be returned to the customer (paid for by the payable tenders).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition.IsCashout">
            <summary>
            Gets or sets a boolean value which indicates if the exchange definition is for a cash out activity.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.TenderExchange.TenderExchangeDefinition.EntityName">
            <summary>
            Gets the entity name for the definition.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.Validators.IGenericTenderTypeValidator">
            <summary>
            Specific (fine grain) validator for core tender types.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.Validators.IPaymentAddValidator">
            <summary>
            Tender validator may be implemented and registered by extension to participate in validation of added tender
             <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.Events.PaymentAddingEvent"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.Validators.IPaymentAddValidator.Validate(Retalix.StoreServices.Model.Selling.CustomerPayment.Tender,Retalix.StoreServices.Model.Selling.IRetailTransaction,Retalix.StoreServices.Model.Selling.InputParametersInfo,Retalix.StoreServices.Model.Infrastructure.IDataContainer)">
            <summary>
            Validation callback
            </summary>
            <param name="tender">Tender to be validated</param>
            <param name="retailTransaction">Tendered transaction</param>
            <param name="inputParametersInfo">Sale parameters</param>
            <param name="sharedValidationContext">Shared validation context, may be used by validators to share computed data</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.Validators.ITenderTypeValidator">
            <summary>
            Specific (course grain) validator for tender type . This will be called by TenderTypeMaintananceService.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.Exceptions.TenderInvalidRequiredParametersException">
            <summary>
            Defines the exception thrown when one or more tender parameters are missing during a payment attempt.
            The missing parameters collection holds the parameters that were missing, and the AdditionalData dictionary holds the parameters that had invalid format.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.Exceptions.TenderInvalidRequiredParametersException.#ctor(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,System.Collections.Generic.IEnumerable{System.String})">
             <summary>
            Defines the exception constructor receiving the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see> that was paid with and the missing parameters from the request.
             </summary>
             <param name="tender">The <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see> that was used in the payment attempt.</param>
             <param name="missingParameters">The parameters that were missing in the payment request.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.Exceptions.TenderInvalidRequiredParametersException.#ctor(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Defines the exception constructor receiving the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see> that was paid with, 
            the missing parameters from the request, and the required parameters that were sent, however, in the incorrect format.
            </summary>
            <param name="tender">The <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see> that was used in the payment attempt.</param>
            <param name="missingParameters">The parameters that were missing in the payment request.</param>
            <param name="invalidFormatParams">The parameters that were in the incorrect format during the payment request (for example, 
            if a parameter is supposed to have 6 digits but only 5 were sent in the request).</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.Exceptions.TenderInvalidRequiredParametersException.MissingParameters">
            <summary>
             Gets or sets the collection containing the missing parameters (for example, when paying with an <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ICheque">Cheque</see>,
             and if no ChequeNumber is sent, this exception will be thrown with "ChequeNumber" as a missing parameter).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.InputParameters.CashbackTenderPayInputParameters">
            <summary>
             Contains cash back information
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.InputParameters.CashbackTenderPayInputParameters.TenderId">
            <summary>
             cash tender id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.InputParameters.CashbackTenderPayInputParameters.Amount">
            <summary>
             Cash Amount
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods">
            <summary>
            The way a Line trans information was Acquired.
            Constants for ILineTransObject.EntryMethod.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Unknown">
            <summary>
            Entry source is unknown. Usually invalid.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Auto">
            <summary>
            Added internally.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Scanned">
            <summary>
            Electronically identified by Scanner
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Manual">
            <summary>
            Keyed in manually.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Menu">
            <summary>
            Entered through pre-defiened GUI menu.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.External">
            <summary>
            Entered based on external authorization referance.
            </summary>
            <value>5</value>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Repeat">
            <summary>
            Entered repeat command  - sale the last item with 1 qnt.
            </summary>
            <value>6</value>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.MSR">
            <summary>
            Identified by Magnetic Stripe Reader
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Micr">
            <summary>
            Identified through Magnetic Ink Character Recognition
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.SmartCard">
            <summary>
            Identified based on Smart-Card reading
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Voice">
            <summary>
            Identified through voice recognised command
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Electronic">
            <summary>
            Electronically identified by OLA server (Loyalty) 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Scale">
            <summary>
            Identified through Scale
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Implicit">
            <summary>
            Identified through Barcode
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Embedded">
            <summary>
            Identified through Barcode
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Tapped">
            <summary>
            Identified based on Smart-Card tapping (contactless)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.Token">
            <summary>
            Identified by Mobile App
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.WavedSmartCard">
            <summary>
            Identified by 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.WavedMSR">
            <summary>
            Identified by
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Tender.InputParameters.PaymentEntryMethods.ATM">
            <summary>
            Identified by ATM
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.InputParameters.TenderExchangeInputParameters">
             <summary>
            Defines the Tender exchange request arguments model.
             </summary>
             <remarks>
             The client arguments will be mapped into that arguments model. 
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.InputParameters.TenderExchangeInputParameters.ExchangeDefinition">
            <summary>
            The exchange definition of the exchange group (as it known at the client side)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.InputParameters.TenderExchangeInputParameters.ExchangeType">
            <summary>
            The exchange type - Refund/Purchase (as it known at the client side)
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.InputParameters.TenderLineVoidInputParameters">
            <summary>
             Input parameters class, used to void a tender line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.InputParameters.TenderLineVoidInputParameters.AuthorizationCode">
            <summary>
             Authorization code of EPS tender being cancelled
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.InputParameters.TenderLineVoidInputParameters.ReferenceNumber">
            <summary>
            EPS Session number that the void was done
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.InputParameters.TenderLineVoidInputParameters.CustomerReceipt">
            <summary>
            data for printing CustomerReceipt 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.InputParameters.TenderLineVoidInputParameters.DrawerReceipt">
            <summary>
            data for printing DrawerReceipt
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.InputParameters.TenderPayInputParameters">
            <summary>
            Tender pay request arguments model
            </summary>
            <remarks>
            The data of this class will be available to the line through the InputParameters
            The client service arguments will mapped into that arguments model 
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.InputParameters.TenderPayInputParameters.RequestedAmount">
            <summary>
            Amount that requested from the provider to authoraize
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.ISellableTenderLocator">
            <summary>
             This class locate a sellable Tender from a Tender with all the relevant fields data
             by a specific location and touch point group.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReimbursedTender">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReimbursedTender.UpToAmount">
            <summary>
            maximum amount for refund
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReimbursedTender.TenderExternalId">
            <summary>
            associated tender ID
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReimbursedTender.Position">
            <summary>
            For backward compatibility - existing position in Payback option table
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReimbursedTender.FromAmount">
            <summary>
            minimum amount for refund with this tender
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinition">
            <summary>
            An interface to tender return definition
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinition.Id">
            <summary>
            Identification of the return definition
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinition.Description">
            <summary>
            Description of the return definition
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinition.OverrideDefinitionAllowed">
            <summary>
            Overriding of this definition will be possible if set to TRUE
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinition.ReimbursedTenders">
            <summary>
            Tenders available for refund
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinition.ClearAllReimbursedTenders">
            <summary>
            remove all available tenders for return definition
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinition.AssignReimbursedTender(Retalix.StoreServices.Model.Tender.ReturnDefinition.IReimbursedTender)">
            <summary>
            assign active tender for refund
            </summary>
            <param name="reimbursedTender"><see cref="T:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReimbursedTender"/></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinitionRepository">
            <summary>
            An interface to return definition repository.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinitionRepository.CreateNewReturnDefinition(System.String)">
            <summary>
            OnCreate a new return definition with a given name in repository
            </summary>
            <param name="description"></param>
            <returns><see cref="T:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinition"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinitionRepository.CreateReimbursedTender(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,System.Nullable{System.Decimal})">
            <summary>
            OnCreate a new tender for refund and specify the maximum available amount
            </summary>
            <param name="tender"><see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/></param>
            <param name="upToAmount">The amout maximum to refund</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReimbursedTender"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinitionRepository.UpdateReturnDefinition(Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinition)">
            <summary>
            Update return definition with new tender or description etc...
            </summary>
            <param name="returnDefinition"><see cref="T:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinition"/></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinitionRepository.GetReturnDefinitionById(System.String)">
            <summary>
            retrieve a return definition by id
            </summary>
            <param name="id"></param>
            <returns><see cref="T:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinition"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinitionRepository.GetAllReturnDefinitions">
            <summary>
            retrieve all return definitions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinitionRepository.DeleteReturnDefinition(Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinition)">
            <summary>
            delete a given return definition from repository
            </summary>
            <param name="returnDefinition"><see cref="T:Retalix.StoreServices.Model.Tender.ReturnDefinition.IReturnDefinition"/></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria">
            <summary>
             Class-container for tender search parameters
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.ExternalId">
            <summary>
             Tender id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.BusinessUnit">
            <summary>
            Business unit
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.TouchPoint">
            <summary>
            TouchPoint - used to retrieve the Retail segment
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsRefundable">
            <summary>
             Tender refundable or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsAllowedForLoan">
            <summary>
             Tender allowed for load or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsAllowedForAddTip">
            <summary>
             Tender allowed for Tip
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsAllowedForDeclaration">
            <summary>
             Tender allowed for declaration or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsAllowedForTillDeclaration">
            <summary>
             Tender allowed for Till Declaration or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsAllowedForSafeDeclaration">
            <summary>
             Tender allowed for Safe Declaration or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsAllowedForPayIn">
            <summary>
             Tender allowed for pay in or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsAllowedForPayOut">
            <summary>
             Tender allowed for pay out or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsAllowedForPickup">
            <summary>
             Tender allowed for pickup
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsBankable">
            <summary>
             Tender bankable or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsAllowedForBankDeposit">
            <summary>
            Tender is allowed for BankDeposit or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsAllowedForBankReceipt">
            <summary>
            Tender is allowed for BankReceipt or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsAllowedForSafeTransfer">
            <summary>
             Tender allowed for safe transfer or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Tender.SellableTenderSearchCriteria.IsAllowedForTenderRoundingRule">
            <summary>
             Tender allowed for Tender rounding rule or not
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.SuggestedAmount.ISuggestedAmountsCalculator">
            <summary>
            Represents an interface that calculates the suggested amounts which should be provided upon payment with a certain <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender type</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.SuggestedAmount.ISuggestedAmountsCalculator.Calculate(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment,Retalix.StoreServices.Model.Finance.Money.Money)">
             <summary>
             Executes suggested amounts calculation strategy.
             </summary>
            <returns>A collection of suggested amounts.</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.ThirdPartyIntegration.Description.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.ThirdPartyIntegration.Description.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.ThirdPartyIntegration.Description.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="culture"></param>
            <param name="type"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.ThirdPartyIntegration.TLog.PagingCriteria">
             <summary>
            Represents paging search criteria of third party undelivered transaction logs.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.ThirdPartyIntegration.TLog.PagingCriteria.PageSize">
            <summary>
             Represents the maximum number of elements to retrieve.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.ThirdPartyIntegration.TLog.PagingCriteria.PageNumber">
            <summary>
             Represents the number of elements to skip out of the retrived collection of third party undelivered transaction logs.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.ThirdPartyIntegration.TLog.ThirdPartyUndeliveredTlogOrderBy">
            <summary>
            Order criteria for elements in the result set. Default order when no order criteria provided is by creation date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.ThirdPartyIntegration.TLog.ThirdPartyUndeliveredTlogOrderBy.CreationDate">
            <summary>
            Order by CreationDate
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.ThirdPartyIntegration.TLog.ThirdPartyUndeliveredTlogOrderBy.Entity">
            <summary>
            Order by Entity
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.ThirdPartyIntegration.TLog.ThirdPartyUndeliveredTlogSearchCriteria">
             <summary>
            Represents a set of arguments used to search for undelivered transaction logs.    
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.ThirdPartyIntegration.TLog.ThirdPartyUndeliveredTlogSearchCriteria.EntityType">
            <summary>
            Type of transactions included in the Token (Retail transaction, Control transaction, Fund transaction, etc.) in case there are more than one entity in the Token, all the type will appear with a separator
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.ThirdPartyIntegration.TLog.ThirdPartyUndeliveredTlogSearchCriteria.FromDate">
            <summary>
            Gets or sets the start date of the undelivered transaction log to search for.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.ThirdPartyIntegration.TLog.ThirdPartyUndeliveredTlogSearchCriteria.ToDate">
            <summary>
            Gets or sets the end date of the undelivered transaction log to search for.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.ICustomerDisplayLayout">
            <summary>
            Represents the Customer Screen configuration object.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.ICustomerDisplayLayout.State">
            <summary>
            Gets or sets the POS state in which the configuration is applied. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.ICustomerDisplayLayout.RetailSegment">
            <summary>
            Gets or sets the retail segment assigned to the configuration.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.ICustomerDisplayLayout.Configuration">
            <summary>
            Gets or sets the POS screen configuration.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.ICustomerDisplayLayoutDao">
            <summary>
            Represents persistency operations on the CustomerDisplayLayout object.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.ICustomerDisplayLayoutDao.Save(Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.ICustomerDisplayLayout)">
            <summary>
            Saves the defined configuration.
            </summary>
            <param name="customerDisplayLayout"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.ICustomerDisplayLayoutDao.Find(System.String,System.String)">
            <summary>
            Returns the Customer screen configuration defined for a specified touchpoint ID and state name.
            </summary>
            <param name="touchPointId"></param>
            <param name="stateName"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.ICustomerScreenConfigurationFactory">
            <summary>
            Represents an instance of the ICustomerDisplayLayout.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.ICustomerScreenConfigurationFactory.CreateConfiguration(System.String,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment,System.String)">
            <summary>
            Creates an instance of a specific state, retail segment names, and configuration.
            </summary>
            <param name="state"></param>
            <param name="retailSegment"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.IPosState">
            <summary>
            Represents the POS state, for example, No Sale mode, Sale mode..
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.IPosState.Name">
            <summary>
            GEts ot sets the name of the POS state.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.IPosStateDao">
            <summary>
            Respresents persistancy operations perfromed om the POS state object.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.IPosStateDao.DeleteState(System.String)">
            <summary>
            Removes the POS state.
            </summary>
            <param name="posState">pos state to remove</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.IPosStateDao.AddState(System.String)">
            <summary>
            Adds the POS state.
            </summary>
            <param name="posState">pos state to add</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.CustomerScreenConfiguration.IPosStateDao.GetAllStates">
            <summary>
            Returns all existing POS states.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTermValidator">
            <summary>
            Validates <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms"/> entity before performing change action
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTermValidator.Validate(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms,Retalix.StoreServices.Model.Infrastructure.Service.ChangeAction)">
            <summary>
            Performs a validation . If the validation fails, an exception is thrown
            </summary>
            <param name="menuDisplayTerms"></param>
            <param name="action"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuOpenCloseDayDeleteCriteria">
            <summary>
            Represents the delete criteria for the IMenuOpenCloseDay.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuOpenCloseDayDeleteCriteria.BusinessUnitId">
            <summary>
            Delete OpenCloseDay relayed to BusinessUnitId
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuOpenCloseDayDeleteCriteria.MenuOpenCloseDays">
            <summary>
            Delete OpenCloseDay
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuOpenCloseDayLookupCriteria">
            <summary>
            Represents the Lookup criteria for the IMenuOpenCloseDay.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuOpenCloseDayLookupCriteria.BusinessUnitId">
            <summary>
            Find OpenCloseDay relayed to BusinessUnitId
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuOpenCloseDayLookupCriteria.TouchPointType">
            <summary>
            Gets or sets the touch point type. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuOpenCloseDayLookupCriteria.TimeAvailabilityTermId">
            <summary>
            Gets or sets the TimeAvailabilityTerm identifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuOpenCloseDayLookupCriteria.WeekDay">
            <summary>
            Gets or sets the string representation of DayOfWeek.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint">
            <summary>
             Represents Accelerated fetching
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint.ShouldPrefetchHeadersOnly">
            <summary>
            Perform Accelerated retrieval of menu headers only.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint.ShouldPrefetchRecurse">
            <summary>
            Perform Accelerated retrieval recursive of menus.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint.ShouldPrefetchImages">
            <summary>
            Perform Accelerated retrieval of images.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint.ShouldPrefetchDescriptions">
            <summary>
            Perform Accelerated retrieval of Descriptions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint.ShouldPrefetchNames">
            <summary>
            Perform Accelerated retrieval of Names.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint.ShouldPrefetchRoles">
            <summary>
            Perform Accelerated retrieval of Roles.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDay.Id">
            <summary>
            Id used in NHibernate
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDay.BusinessUnit">
            <summary>
            The business unit of the menu day
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDay.TouchPointType">
            <summary>
            The TouchpointType of the menu day
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDay.Day">
            <summary>
            Days of week
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDay.OpenCloseTime">
            <summary>
            List of open time
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDay.TimeAvailabilityTermId">
            <summary>
            Time availability 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDayDao">
            <summary>
            Represents repository for IMenuOpenCloseDayDao
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDayDao.AddOrUpdate(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDay)">
            <summary>
            Add or Update the menu day
            </summary>
            <param name="openCloseDay">The menu day</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDayDao.Delete(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuOpenCloseDayDeleteCriteria)">
            <summary>
            Delete the menu days
            </summary>
            <param name="criteria">Delete the menu days according to MenuOpenCloseDayDeleteCriteria fields</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDayDao.Get(System.Guid)">
            <summary>
            Return menu day according to id
            </summary>
            <param name="id">The id of the venue</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDayDao.Get(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Return menu days according to id
            </summary>
            <param name="ids">The ids of the days</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDayDao.Find(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuOpenCloseDayLookupCriteria)">
            <summary>
            Return menu day according to MenuOpenCloseDayLookupCriteria fields
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseDayDao.Find(System.String)">
            <summary>
            Return OpenCloseDay data relayed to Store, specifed by businessUnitId
            In case of businessUnitId does not specified, all data will be retrieved
            </summary>
            <summary>
            <param name="businessUnitId">The businessUnit Id</param>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseTime.Id">
            <summary>
            Id used in NHibernate
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseTime.IsClosed">
            <summary>
            The menu open close status
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseTime.MenuOpenCloseDayId">
            <summary>
            Days of week that define on the MenuOpenCloseDay
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseTime.StartTime">
            <summary>
            Start time of the menu availability
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuOpenCloseTime.EndTime">
            <summary>
            End time of the menu availability
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ActionContext.CommandActionParameter">
            <summary>
            Represents a parameter used to define a command action.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ActionContext.CommandActionParameter.Container">
            <summary>
             Gets or sets the parent menu of the command parameter
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ActionContext.CommandActionParameter.Parameter">
            <summary>
            Gets or sets the command parameter.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ActionContext.CommandActionParameter.Value">
            <summary>
            Gets or sets the command parameter value.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.CommandContainerParameters">
            <summary>
             Represents the Command container parameters.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.CommandContainerParameters.State">
            <summary>
            Gets or sets the context allowed for the container.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuMultiVersionMapper">
            <summary>
            Represents the top level <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/> which contains information about where the menu 
            should be displayed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuMultiVersionMapper.MenuDisplayTermsId">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms"/> ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuMultiVersionMapper.MenuId">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu"/> ID in V.10.5.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuMultiVersionMapper.OldVersionMenuId">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu"/> ID in V.10.4.2.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.DMS.IMenuDisplayTermsMovableConverter.ConvertToOldVersion(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms)">
            <summary>
            Converter for menus
            </summary>
            <param name="menuItem"></param>
            <returns></returns>
            <remarks>Not implemented</remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ILocalMenuItemContainer">
            <summary>
            Represents a menu item container specified for a single business unit.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ILocalMenuItemContainer.ToDisplayedMenuFor(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemFilterCriteria)">
            <summary>
            Returns a read-only view of <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer"/> filtered for the assigned location,
            and set according to a specific menu's display parameters.
            </summary>
            <param name="menu"></param>
            <param name="filterCriteria"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu">
            <summary>
            Represents the top level <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/> which contains information about where the menu 
            should be displayed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu.RetailSegments">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment"/>s displaying the menu.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu.BusinessUnits">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>s displaysing the menu.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu.MenuLayouts">
            <summary>
            Gets the Layouts for all the items in the menu.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu.GetLayoutsForContainer(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer)">
            <summary>
            Returns a <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/> external ID to <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuLayout"/>s dictionary, each item may have displayed multiple times 
            within the same container.  
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu.RemoveLayouts(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem})">
            <summary>
            Removes all the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/>s from the container that were sent
            </summary>
            <param name="menuItemsToRemove"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu.ClearLayouts">
            <summary>
            Clear all layouts.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu.AddLayout(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemSortMethod,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Add a display layout for and Item contained within the menu, if the item's container is the menu itself then refer as such.
            </summary>
            <param name="container"></param>
            <param name="containedItem"></param>
            <param name="sortMethod"></param>
            <param name="ordinalIndex"></param>
            <param name="isDefault"></param>
            <param name="excludeItem"></param>
            <param name="containedItemRowCount"></param>
            <param name="containedItemColumnCount"></param>
            <param name="isQuickPick"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu.ToDisplayedMenuFor(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemFilterCriteria)">
            <summary>
            Returns a read-only representation of <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer"/> filtered for the given location.
            and set according to this menu's display parameters.
            </summary>
            <param name="filterCriteria"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuContextFormatter">
            <summary>
            Represents a set of methods used to retrieve/set a specific <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemType"/>'s context into/from a <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemLeaf`1"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuContextFormatter.SetContext(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem,System.Object)">
            <summary>
            Sets the context on the leaf after performing specific operation types.
            </summary>
            <param name="leaf"></param>
            <param name="context"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuContextFormatter.GetContext(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Gets the contract representating the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemLeaf`1"/>s context.
            </summary>
            <param name="leaf"></param>
            <param name="businessUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuContextFormatter.SetParameters(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer,System.Object)">
            <summary>
             Sets the parameters on the container after performing specific operation types.
            </summary>
            <param name="containerParametersType"></param>
            <param name="container"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuContextFormatter.GetParameters(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer)">
            <summary>
            Gets the parameters representing the container. 
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuContextFormatter.GetLeafType">
            <summary>
            Gets the real type of the  <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemLeaf`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuContextFormatter.GetFiterCriteria">
            <summary>
            Gets the instance of the FilterCriteria object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuContextFormatter.ValidateMaintenancePermissions(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem)">
            <summary>
            Enforces maintenance permissions based on the type of <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/>.
            </summary>
            <param name="menuItem"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTermsDao">
            <summary>
            Represents a repository for the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms"/> .
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTermsDao.Save(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms)">
            <summary>
            Saves\Updates the Menu Display Terms.
            </summary>
            <param name="menuDisplayTerms"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTermsDao.Delete(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms)">
            <summary>
            Delete the Menu Display Terms.
            </summary>
            <param name="menuDisplayTerms"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTermsDao.FindById(System.String)">
            <summary>
            Get the Menu Display Terms.
            </summary>
            <param name="menuDisplayTermsId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTermsDao.FindMenuDisplayTerms(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuDisplayTermsLookupCriteria,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint)">
            <summary>
            Find the Menu Display Terms.
            </summary>
            <param name="menuDisplayTermsLookupCriteria"></param>
            <param name="prefetchHint"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTermsDao.DeleteAllAssignmentsByMenu(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu)">
            <summary>
            Delete all assignments that's related to a specific menu.
            </summary>
            <param name="menu">the menu that the assignments will be delete from</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem">
            <summary>
            Represents the basic menu item definition. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.ExternalId">
            <summary>
            Gets the Items unique identifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.TimeStamp">
            <summary>
            Gets or sets the Items last change date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.Descriptions">
            <summary>
            Gets or sets the descriptions for the node.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.Names">
            <summary>
            Gets or sets the names for the node.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.ForegroundColor">
            <summary>
            Gets or sets the Foreground color associated with the item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.BackgroundColor">
            <summary>
            Gets or sets the Background color associated with the item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.Type">
            <summary>
            Gets the menu item's <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemType"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.ShouldBeDisplayedAt(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemFilterCriteria)">
            <summary>
            Gets a boolean value indicating whether the item should be displayed at a given location. 
            </summary>
            <param name="filterCriteria"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.ExcludeAllowed">
            <summary>
            Gets or sets a boolean value indicating whether an item can be excluded from a menu layout.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.Readonly">
            <summary>
            Gets or sets a boolean value indicating whether the items fields can be edited.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.DefaultDescription">
            <summary>
            Gets or sets a string diplaying the default item description.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.TouchPointType">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint"/> type the menu item is available for and can be dsplayed on.    /// </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.Roles">
            <summary>
            Gets or sets the User roles allowed to access to the menu item.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.PermittedForUser(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity)">
            <summary>
            Represents a method used to determine whether the specified user is permitted to use this menu item.
            </summary>
            <param name="identity">The identity whose permissions are checked. </param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.BusinessUnit">
            <summary>
            The business unit level this menu item is assigned to. The menu is available throughout the 
            tree and can be re-used, however the menu can be changed only by a user with sufficient privileges, i.e. a user that has
            the authority to edit menus on this <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/> or one of it's parent 
            <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>s.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.FrontImage">
            <summary>
            Gets or sets the Front Image associated with the item.
            <remarks> 
            Caution: MSDN states that classes within the System.Drawing namespace are not supported for use within a Windows or ASP.NET service. 
            Attempting to use these classes from within one of these application types may produce unexpected problems, 
            such as diminished service performance and run-time exceptions.  For a supported alternative, see Windows Imaging Components.
            </remarks>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.BackImage">
            <summary>
            Gets or sets the Back Image associated with the item.
            <remarks> 
            Caution: MSDN states that classes within the System.Drawing namespace are not supported for use within a Windows or ASP.NET service. 
            Attempting to use these classes from within one of these application types may produce unexpected problems, 
            such as diminished service performance and run-time exceptions.  For a supported alternative, see Windows Imaging Components.
            </remarks>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.FrontImageBytes">
            <summary>
            Gets or sets the Front Image associated with the item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.BackImageBytes">
            <summary>
            Gets or sets the Back Image associated with the item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.ImageFront">
            <summary>
            Gets the URL or Binary Data of FrontImage associated with the item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.ImageBack">
            <summary>
            Gets the URL or Binary Data of BackImage associated with the item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.TimeAvailabilityTerm">
            <summary>
            Gets the Time Avavilability term associated with the item
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem.SetMenuImage(Retalix.StoreServices.Model.Infrastructure.Image.MenuImage,Retalix.StoreServices.Model.Infrastructure.Image.MenuImage)">
            <summary>
            This function reguired for correct insert of MenuImage values
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer">
            <summary>
             Represents a <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/> type, which can contain other <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/>s.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer.Items">
            <summary>
             Gets the items contained within the item.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer.AddItem(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem,System.Boolean)">
            <summary>
            Adds a <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/> to the container.
            </summary>
            <param name="menuItem"></param>
            <param name="removable"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer.RemoveItems(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem})">
            <summary>
            Removes all the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/>s from the container that were sent, excluding non removable items.
            </summary>
            <param name="menuItems"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer.ClearItems">
            <summary>
            Removes all the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/>s from the container that were sent
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer.IsItemRemovable(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem)">
            <summary>
            Returns a boolean value indicating whether a sent item can be removed from the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer.Parameters">
            <summary>
            Gets or sets the MenuItemContainer parameters.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao">
            <summary>
            Represents a repository for the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/> and it's inheritors.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.GetAll">
            <summary>
            Retrieves all the defined <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/>s and their inheritors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.Get(System.String,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/> by the external ID.
            </summary>
            <param name="externalId"></param>
            <param name="prefetchHint"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.Save(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem)">
            <summary>
            Saves\Updates the menu item.
            </summary>
            <param name="menuItem"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.Delete(System.String)">
            <summary>
            Deletes a menu item (and its associations and layouts) by the external ID.
            </summary>
            <param name="externalId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.GetLocalMenuItemContainers(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemType,System.String,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemContainerParameters,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint,Retalix.StoreServices.Model.Document.VersionSelector)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer"/>s registered directly under the associated <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/> and touch point type.
            The collection may contain duplicate references (A contained container is displayed in the flat 
            enumeration as well as a contained item.)
            </summary>
            <param name="businessUnit"></param>
            <param name="menuItemType"></param>
            <param name="touchPointType"></param>
            <param name="menuItemContainerParameters"></param>
            <param name="versionSelector"></param>
            <param name="prefetcHint"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.GetLocalMenuItemContainers(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuLookupCriteria,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemContainerParameters,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint,Retalix.StoreServices.Model.Document.VersionSelector)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer"/>s registered directly under the associated <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/> and touch point type.
            The collection may contain duplicate references (A contained container is displayed in the flat 
            enumeration as well as a contained item.)
            </summary>
            <param name="lookupCriteria"></param>
            <param name="menuItemContainerParameters"></param>
            <param name="prefetchHint"></param>
            <param name="versionSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.GetMenuItemLeafs(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemType,System.String,Retalix.StoreServices.Model.Document.VersionSelector)">
            <summary>
            Gets all the leafActionContextType leafs.
            </summary>
            <param name="menuItemType"></param>
            <param name="touchPointType"></param>
            /// <param name="versionSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.GetMenus(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuLookupCriteria,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint)">
            <summary>
            Returns all the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu"/>s that match the sent criteria.
            </summary>
            <param name="lookupCriteria"></param>
            <param name="prefetchHint"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.RemoveRoleAssociations(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole)">
            <summary>
            Removes Role association to Menu.
            </summary>        
            <param name="role"><see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole"></see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.DeleteAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.GetMenus(System.String,Retalix.StoreServices.Model.Document.VersionSelector,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint)">
            <summary>
            Returns all the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu"/>s that match the sent criteria.
            </summary>
            <param name="childMenuItemId"></param>
            <param name="versionSelector"></param>
            <param name="prefetchhint"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.GetMenus(System.Collections.Generic.IEnumerable{System.String},Retalix.StoreServices.Model.Document.VersionSelector,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint)">
            <summary>
            Returns all the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu"/>s that match the menuItemExternalIds.
            </summary>
            <param name="menuItemExternalIds"></param>
            <param name="versionSelector"></param>
            <param name="prefetchhint"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.GetMenuItemsMinimalData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns minimal amount of <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu"/>s that match the menuItemExternalIds.
            </summary>
            <param name="menuItemExternalIds"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.GetRootMenusMinimalData(System.Collections.Generic.IEnumerable{System.String},Retalix.StoreServices.Model.Document.VersionSelector,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDaoPrefetchHint)">
            <summary>
            Returns minimal amount of <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu"/>s that match the menuItemExternalIds.
            </summary>
            <param name="menuItemExternalIds"></param>
            <param name="versionSelector"></param>
            <param name="prefetchHint"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemDao.GetMenuVersions(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemType)">
            <summary>
            Gets all Versions by MenuItem
            </summary>
            <param name="menuItemType"></param>
            <returns>List of versions</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemFactory">
            <summary>
            Represents a factory for specific concrete <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/> implementations.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemFactory.CreateMenuItem(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemType,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemLevel)">
            <summary>
            Creates a <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemFactory.CreateMenuItem(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemType,Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemLevel,System.String)">
            <summary>
            Creates a <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer"/> with the assigned external ID, for DMS purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemLeaf`1">
            <summary>
            Represents a Menu Item leaf, which is a menu item representing an action.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemLeaf`1.ActionContextId">
            <summary>
            Gets or sets a reference to the content in the <see cref="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemLeaf`1.ActionContext"/> property.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemLeaf`1.ActionContext">
            <summary>
            Gets or sets the information about a specific type's action.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemLeaf`1.ShortCode">
            <summary>
            Gets or sets the Short Code used to retrieve the leaf.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuLayout">
            <summary>
            Represents the Stores information used to determine all the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/>s layout in an <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuLayout.Container">
            <summary>
            Gets or sets the Container. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuLayout.ContainedItem">
            <summary>
            Gets or sets the Contained item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuLayout.SortMethod">
            <summary>
            Gets or sets the Sort mode used for the contained item.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuLayout.IsDefault">
            <summary>
            Gets or sets a boolean value indicating if the item is defined as a default item in it's contained state.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuLayout.OrdinalIndex">
            <summary>
            Gets or setst the Ordinal index set for the contained <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuLayout.IsQuickPick">
            <summary>
            Gets or setst the IsQuickPick which indicates if an item should be allowed as quick pick for FLSCO. <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuLayout.ContainedItemRowCount">
            <summary>
            Gets or sets the number of rows used when displaying the contained items sub items, if available.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuLayout.ContainedItemColumnCount">
            <summary>
            Gets or sets the number of columns used when displaying the contained items sub items, if available.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuLayout.ExcludeItem">
            <summary>
            Gets or sets a bollean value indicating if the item is excluded when displaying the containers sub items.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms">
            <summary>
             Represents the menu display terms.  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms.Id">
            <summary>
            Gets the object unique identifier .
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms.TouchPointGroups">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment"/> the menu is available for and can be displayed on.    
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms.BusinessUnits">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/> the menu is available for and can be displayed on.    
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms.ValidityPeriod">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Globalization.IDateRange"/> period, which defines display terms
             availability times  
             <remarks>Not implemented</remarks>
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms.TouchPointType">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint"/> type the menu is available for and can be displayed on.    
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms.Menu">
            <summary>
            Gets the menu.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms.MenuItemType">
            <summary>
            Gets the menu item type (ItemLookup/TenderType/Command)
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuDisplayTermsLookupCriteria">
            <summary>
            Represents the Lookup criteria for the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuDisplayTerms"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuDisplayTermsLookupCriteria.BusinessUnits">
            <summary>
            Represents the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>s the menu is assigned to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuDisplayTermsLookupCriteria.RetailSegments">
            <summary>
            Represents the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment"/>s the menu is assigned to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuDisplayTermsLookupCriteria.TouchPointType">
            <summary>
            Gets or sets the touch point type. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuDisplayTermsLookupCriteria.Menu">
            <summary>
            Gets or sets the menu. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuDisplayTermsLookupCriteria.MenuItemType">
            <summary>
            Gets or sets menu item type (ItemLookup/TenderType/Command)
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemContainerParameters">
            <summary>
             Represents the method used to mark various menu items the container state is implemented.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemFilterCriteria">
            <summary>
            Represents information regarding the display filter for menu items.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemFilterCriteria.BusinessUnit">
            <summary>
             Gets or sets the assigned <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemFilterCriteria.RetailSegment">
            <summary>
             Gets or sets the assigned <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemFilterCriteria.TouchPointType">
            <summary>
            Gets or sets the TouchPoint type.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemFilterCriteriaItemLookup">
            <summary>
            Represents information regarding menu item display filters used to look up items.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemFilterCriteriaItemLookup.IncludeProductId">
            <summary>
            ProductId to Filter PLU groups that contains this product Id.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemFilterCriteriaTender">
            <summary>
            Represents information regarding a menu items display filter used for the Tender type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemFilterCriteriaTender.TenderIds">
            <summary>
            Represents the displayed Tender IDs.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemLevel">
            <summary>
            Represents an enumeration of the different menu levels available.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemLevel.ItemLeaf">
            <summary>
            The lowest level of the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItem"/>.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemLevel.ItemContainer">
            <summary>
            The Container level of the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenuItemContainer"/>.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemLevel.ItemMenu">
            <summary>
            The highest level of the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemSortMethod">
            <summary>
             Represents the method used to sort the Menu items, and enforces the order the items are displayed. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemSortMethod.#ctor(System.String)">
            <summary>
            Represents the sorting method Constructor .
            </summary>
            <param name="sortMethod"></param>
        </member>
        <member name="F:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemSortMethod.None">
            <summary>
            Represents the menu item sorting method.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemSortMethod.Manual">
            <summary>
            Indicates that the menu items are manually sorted. 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemSortMethod.Alphabet">
            <summary>
            Indicates that the menu items are manually alphatbetically.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemType">
            <summary>
            Represents an enumeration of the different menu leaf types available.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemType.ItemLookup">
            <summary>
            The Item lookup type.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemType.Tender">
            <summary>
             The Tender type.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuItemType.Command">
            <summary>
             The Command type.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuLookupCriteria">
            <summary>
            Represents the Lookup criteria for the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.IMenu"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuLookupCriteria.BusinessUnits">
            <summary>
            Represents the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>s the menu is assigned to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuLookupCriteria.RetailSegments">
            <summary>
            Represents the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment"/>s the menu is assigned to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuLookupCriteria.TouchPointType">
            <summary>
            Gets or sets the touch point type. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuLookupCriteria.MenuItemType">
            <summary>
            Gets or sets the menu type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuLookupCriteria.Identifier">
            <summary>
            Gets or sets the menu identifier.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuLookupCriteria.Description">
            <summary>
            Gets or sets the description for the node.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuLookupCriteria.Name">
            <summary>
            Gets or sets the name for the node.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.MenuLookupCriteria.Version">
            <summary>
            Gets or sets the menu version
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroup">
            <summary>
            Represents a group of consumables
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroupDao">
            <summary>
             Represents the data access class for consumable groups.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroupDao.Save(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroup)">
            <summary>
             Saves the consumable group.
            </summary>
            <param name="consumableGroup"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroupDao.Delete(System.String)">
            <summary>
             Deletes the consumable group.
            </summary>
            <param name="entityIdentificationKey"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroupDao.GetConsumableGroupsByConsumableId(System.String)">
            <summary>
            Gets Consumable Groups by consumable IDs.
            </summary>
            <param name="consumableId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroupDao.GetAllPaged(System.Int32)">
            <summary>
            Gets all consumable groups paged. As Consumable groups have a large data set, the retrieval method is optimized by paging.
            </summary>
            <param name="pageSize">Page size.</param>
            <returns>IEnumerable of type IConsumableGroup.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroupDao.GetAllPaged(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroup,System.Int32)">
            <summary>
            Get all consumable groups paged from the starting position. As Consumable groups have a large data set, the retrieval method is optimized by paging.
            </summary>
            <param name="consumableGroup">Starting consumable group.</param>
            <param name="pageSize">Page size.</param>
            <returns>IEnumerable of type IConsumableGroup.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroupDao.DeleteAll">
            <summary>
            Deletes all Consumable Groups.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroupFactory">
            <summary>
            Use this  interface to create a <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroup">IConsumableGroup or a <see cref="M:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroupFactory.CreateConsumableItem(Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableGroup)">CreateConsumableItem</see></see>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.MenuConfiguration.ProductGroup.IConsumableItem">
            <summary>
            Represent a IConsumableItem 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfigurationDao.Get(System.String,System.String)">
            <summary>
             Gets the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration">IOwnBagConfiguration</see> corresponding to the given touchPointGroupId and touchPointType.
            </summary>
            <param name="retailSegmentId">The ID of the retail segment. </param>
             <param name="touchPointApplicationId">The ID of the touch point type.</param>
            <returns>the spcific IOwnBagConfiguration for these retailSegmentId and touchPointApplicationId</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfigurationDao.FindAll">
            <summary>
            Get all existing own bag configurations.
            </summary>
            <returns>All <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration"/>s that existing</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfigurationDao.Save(Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration)">
            <summary>
             Saves the given <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration">IOwnBagConfiguration</see>.
             If the configuration already exists, then an update is performed.
            </summary>
            <param name="ownBagConfiguration">The ownBagConfiguration that is saved.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfigurationDao.Delete(Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration)">
            <summary>
             Delete an existing <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration">IOwnBagConfiguration</see>.
            </summary>
            <param name="ownBagConfiguration">The ownBagConfiguration that should be deleted from the storage.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfigurationProvider.Find(System.String,System.String)">
            <summary>
             Gets the list of <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration">IOwnBagConfiguration</see> corresponding to the criteria.
            </summary>
            <param name="retailSegmentId">The ID of the retail segment. </param>
             <param name="touchPointApplicationId">The ID of the touch point type.</param>
            <returns>the all IOwnBagConfiguration that corresponding to the criteria</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfigurationProvider.FindAll">
            <summary>
             Gets the list of all<see cref="T:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration">IOwnBagConfiguration</see> that exists in storage.
            </summary>
            <returns>The all IOwnBagConfiguration</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration.RetailSegmentId">
            <summary>
            Gets or sets the retail segment Id which the configuration is defined for it .
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration.TouchPointApplicationId">
            <summary>
            Gets or sets the touch point type which the configuration is defined for it .
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration.OwnBagEnabled">
            <summary>
            Gets or sets the abilty to enable/ disable this functionality. true - for enable own bag functionality. false - for disable own bag functionality
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration.ProductId">
            <summary>
            Gets or sets the product Id, which present the bag.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration.Identifier">
            <summary>
            Gets or sets the product Identifier 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration.MethodOfWork">
             <summary>
             Gets or sets the method of work, that define the time to pop up message in the client to declare about own bag configuration.
             </summary>
            <example>Two types may be: TriggeredOnPayment and TriggeredOnSell</example>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.OwnBagConfiguration.IOwnBagConfiguration.OwnBagLimit">
            <summary>
            Gets or sets the maximum of own bags to use.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand">
            <summary>
            Represents a command available at a specific touch point type, in specific groups of commands. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand.Name">
            <summary>
            Gets or sets the Command name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand.Id">
            <summary>
            Gets the unique Commands ID.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand.TouchPointType">
            <summary>
            Gets or sets the TouchPoint Application for which the command is relevant.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand.AvailableParameters">
            <summary>
            Represents a collection of <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandParameter">Parameters</see> which are sent by the command.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand.AddParameter(System.String,System.String)">
            <summary>Adds a new TouchPointCommandParameter to the command.</summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterType">The type of the parameter.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand.GetGroups">
            <summary>Returns a collection of Groups to which the command is associated.</summary>
            <returns>The collections of Groups associated to the command.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand.IsRequiredInGroup(System.String)">
            <summary>Gets a boolean value indicating whether the command is a required part of the specified command group.</summary>
            <param name="group">The group in which a validation is performed.</param>
            <returns>True, if the command is required in the group.  False, if the command in the group is optional.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand.AddGroup(System.String,System.Boolean)">
            <summary>Associates the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand">touchpoint command</see> with a group, and marks the association as optional or required.</summary>
            <param name="group">The group to associate the command with</param>
            <param name="isRequired">Indicates whether the command is required or optional in this group.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandDao">
            <summary>
            Represents the Dao for the TouchPointCommand entity.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandDao.Get(System.String,System.String)">
            <summary>
            Retrieves a command by the ID.
            </summary>
            <param name="touchointType">The touch point type in which the command is used.</param>
            <param name="commandlId">The command ID.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandDao.GetBy(System.String)">
            <summary>
            Retrieves all the available Touchpoint commands by the Touchpoint Type.
            </summary>
            <param name="touchPointType"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandDao.GetAll">
            <summary>
            Retrieves all the TouchPoint commands available in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandDao.Save(Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand)">
            <summary>
            Saves the relevant TouchPoint command in the system.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandDao.Delete(Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand)">
            <summary>
            Deletes the TouchPoint command with the assigned ID for the specific Touchpoint Type.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandFactory">
            <summary>Represents the factory for returning concrete instances of ITouchPointCommands.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandFactory.CreateTouchPointCommand(System.String)">
            <summary>Creates a new instance of the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand">ItouchPointCommand.</see></summary>
            <param name="id">The ID for the new instance.</param>
            <returns>The created instance of the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand">ItouchPointCommand.</see></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandParameter">
            <summary>
            Represents the parameters which are sent to a command.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandParameter.Name">
            <summary>
            Gets or sets the Parameter name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandParameter.ParameterTypeName">
            <summary>
            Gets or sets the Parameter Type.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication">
            <summary>
             Specifies a TouchPoint <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole">IRole</see>.
            </summary>
             <remarks>
             The ITouchPointApplication specifies a TouchPoint role. 
             When defined, this role can be assigned to multiple touch points.
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication.Id">
            <summary>
             Gets the unique identifier of the ITouchPointApplication.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication.Description">
            <summary>
             Gets or sets the description of the ITouchPointApplication.
             </summary>
             <remarks>
             </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication.Role">
            <summary>
             Gets or sets the actual <see cref="T:Retalix.StoreServices.Model.Infrastructure.Security.Identity.IRole">IRole</see> that is specified for the ITouchPointApplication.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication.AccountProfileType">
            <summary>
            Gets or Sets the default account profile to be used in CashOffice.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplicationDao">
            <summary>
             Represents the persistency services for TouchPointApplications, such as add/Update/find, Get, and Delete.
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplicationDao.Save(Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication)">
            <summary>
             Adds (Non persisted) or Updates (Previously persisted) services to a single TouchPointApplication.
             </summary>
            <param name="touchPointApplication">The TouchPointApplication which is persisted.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplicationDao.Get(System.String)">
            <summary>Retrieves a TouchPointApplication that match the given Id.</summary>
            <param name="id">The Id of the TouchPointApplication to retrieve from persistence.</param>
            <returns>The existing persistent TouchPointApplication. An error is thrown if no match is found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplicationDao.Find(System.String)">
            <summary>Finds a TouchPointApplication that was previously persisted.</summary>
            <param name="id">The Identity of the TouchPointApplication to retrieve from persistence.</param>
            <returns>The previously persisted TouchPointApplication or null if no match is found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplicationDao.FindAll">
            <summary>Returns all TouchPointApplications that were previously persisted.</summary>
            <returns>The previously persisted TouchPointApplications or an empty list if no TouchPointApplications were persisted.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplicationDao.Delete(Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication)">
            <summary>Permanently removes a TouchPointApplication for the persistence store.</summary>
            <param name="touchPointApplication">The TouchPointApplication which is removed.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyBindingCommandParameter">
            <summary>Represents the parameter and its value used with the command triggered by a key binding.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyBindingCommandParameter.Parameter">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandParameter">parameter</see> used with the command triggered by a key binding.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyBindingCommandParameter.Value">
            <summary>
            The value of the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommandParameter">parameter</see> when used with the specified <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand">command</see>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationEnvironment">
            <summary>Represents a single Business Unit and/or Retail Segment where a specific keyboard configuration is relevant.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationEnvironment.BusinessUnit">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">Business Unit</see> where this configuration is used.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationEnvironment.RetailSegment">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">Retail Segment</see> where this configuration is used.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationFactory">
            <summary>
            Use this  interface to create a <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration">ITouchPointKeyboardConfiguration</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationFactory.Create(System.String,System.String,System.String)">
            <summary>Creates a new TouchPointKeyboardConfiguration with the specified values.</summary>
            <param name="name">The name of the keyboard configuration.</param>
            <param name="description">The description of the keyboard configuration.</param>
            <param name="touchPointApplicationId">The ID of the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication">TouchPointApplication</see> used with this configuration.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding">
            <summary>Represents the configuration Binding a single key code to a specific command.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding.KeyCode">
            <summary>
            Gets or sets the Keyboard Key Code (usually ASCII code).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding.Modifier">
            <summary>
            Gets or sets the Modofier that can appear with Key Code.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding.Command">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.Command.ITouchPointCommand">Command</see> executed when the key is pressed.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding.GetCommandParameters">
            <summary>
            Retrieves all the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyBindingCommandParameter">parameter</see> values used with the executed command.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding.AddCommandParameter(System.String,System.String,System.String)">
            <summary>Adds a parameter value to the collection of parameters for the command</summary>
            <param name="name">The name of the parameter.</param>
            <param name="parameterTypeName">The type of the parameter</param>
            <param name="value">The value used by the client for this parameter.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding.RemoveCommandParameter(Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyBindingCommandParameter)">
            <summary>Removes a parameter value from the collection of parameters for this command</summary>
            <param name="parameterToRemove">The <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyBindingCommandParameter">parameter</see> to remove.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration.Name">
            <summary>
            Gets or sets a unique name for the keyboard configuration.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration.Description">
            <summary>
            Gets or sets the Keyboard Configuration description.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration.TouchPointApplication">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.ITouchPointApplication"/> application for which this Keyboard Configuration is used.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration.GetKeyBindings">
            <summary>
             Retrieves all of the Keyboard Configuration's Key Mappings.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration.CreateKeyBinding(System.String,System.String,System.String)">
            <summary>Creates a new <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding">key binding</see> associated with this keyboard configuration.</summary>
            <param name="commandName">The executed command.</param>
            <param name="keyCode">The keyCode that triggers this command.</param>
            <param name="modifier">The Ctrl, Alt or Shift modifier.</param>
            <returns>The newly added <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding">key binding.</see></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration.AddKeyBinding(Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding)">
            <summary>Adds a new <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding">key binding</see> to the collection of key bindings for this keyboard configuration.</summary>
            <param name="keyBinding">The <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding">key binding</see> added to the collection.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration.RemoveKeyBinding(Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding)">
            <summary>Removes a <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding">key binding</see> from this configuration</summary>
            <param name="keyBinding">The removed <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationKeyBinding">key binding.</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration.GetEnvironments">
            <summary>
             Retrieves all the environments in which this layout is relevant.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration.AddEnvironment(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>Adds a new <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationEnvironment">environment</see> where the keyboard configuration is used.</summary>
            <param name="businessUnit">The businessUnit where this configuration can be used</param>
            <param name="retailSegment">The retail segment where this configuration can be used</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration.RemoveEnvironment(Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationEnvironment)">
            <summary>Removes an existing <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationEnvironment">environment</see> from the collection of environments.</summary>
             <param name="environment">The removed <see cref="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.IKeyboardConfigurationEnvironment">environment.</see></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfigurationDao">
            <summary>Represents the persistence for Keyboard Configuration objects.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfigurationDao.Save(Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration)">
            <summary>
            Creates a new touch Point Keyboard Configuration record. </summary>
            <param name="touchPointKeyboardConfiguration">The saved keyboard configuration.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfigurationDao.Update(Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration)">
            <summary>
            Updates an existing touch Point Keyboard Configuration record. </summary>
            <param name="touchPointKeyboardConfiguration">The updated keyboard configuration.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfigurationDao.Delete(Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfiguration)">
            <summary>
            Deletes an existing touch Point Keyboard Configuration record. </summary>
            <param name="touchPointKeyboardConfiguration">The deleted keyboard configuration.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfigurationDao.GetAllRelevant(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>Retrieves multiple existing keyboard configurations relevant to a businessUnit and RetailSegment</summary>
            <returns>The relevant keyboard configurations.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfigurationDao.Get(System.String)">
            <summary>Retrieves an existing keyboard configuration by its unique name.</summary>
            <returns>The existing keyboard configuration.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KeyboardConfigurations.ITouchPointKeyboardConfigurationDao.FindAll">
            <summary>Retrieves all keyboard configurations.</summary>
            <returns>A list of all relevant keyboard configuration.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayout.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayout.KitProductId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayout.Template">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayout.IsMandatoryToShowDisplay">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayout.IsShowRecipe">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayout.GroupLayouts">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayTemplate.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitGroupLayout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitGroupLayout.LinkGroupId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitGroupLayout.LinkGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitGroupLayout.DisplayIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitGroupLayout.IngredientLayouts">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitIngredientLayout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitIngredientLayout.IngredientId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitIngredientLayout.DisplayIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitIngredientLayout.IsVisible">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayoutDao">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayoutDao.Get(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayoutDao.FindAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayoutDao.Save(Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayout)">
            <summary>
            
            </summary>
            <param name="kitDisplayLayout"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayoutDao.Delete(Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayout)">
            <summary>
            
            </summary>
            <param name="kitDisplayLayout"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayoutDao.FindByProduct(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct})">
            <summary>
            
            </summary>
            <param name="products"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.TouchPointApplication.KitDisplayLayout.IKitDisplayLayoutDao.GetAllKnownDisplayTemplates">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.IAccessServicesVersionManager">
            <summary>
            The version manager responsibility is to register adaptors and resolve them when needed.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IAccessServicesVersionManager.GetNewToOldAdaptorType(System.String,System.Version)">
            <summary>
            Gets the adaptor type according to interface type and specific version
            </summary>
            <param name="type">interface type</param>
            <param name="version">interface for version</param>
            <returns>relevant adaptor type</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IAccessServicesVersionManager.GetOldToNewAdaptorType(System.String,System.Version)">
            <summary>
            Gets the adaptor type according to interface type and specific version
            </summary>
            <param name="type">interface type</param>
            <param name="version">interface from version</param>
            <returns>relevant adaptor type</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IAccessServicesVersionManager.Register(Retalix.StoreServices.Model.Infrastructure.AccessServices.AdaptorDescriptor)">
            <summary>
            Register adaptor for specific interface in version
            </summary>
            <param name="adaptor">adaptor descriptor</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.NodeNotAvailableException">
            <summary>
            Exception that indicate problem with server node requested by access service
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.NodeNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Construct new instance of NodeNotAvailableException
            </summary>
            <param name="ex">The exception when trying to connect to the remote server.</param>
            <param name="url">The URL of the remote node.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.DataProtection.IDataProtectionConfiguration">
            <summary>
            Container of business configuration requiered by the GDPR regulations
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.DataProtection.IDataProtectionConfiguration.ProtectCustomerPersonalInformation">
            <summary>
            Gets true if customer personal information protection requiered
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.DataProtection.IDataProtectionConfiguration.ProtectUserPersonalInformation">
            <summary>
            Gets true if user personal information protection requiered
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.DataProtection.IDataProtector">
            <summary>
            Interface which is responsible for providing the correct data protection services.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.DataProtection.IDataProtector.Protect(System.String)">
            <summary>
            Method responsible for protect a given string 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.IPosLogCustomerOrderTransactionVisitor">
            <summary>
            Represents an extension point for additional data in response
            </summary>
            <remarks>
            The visitor is called while creating pos log customer order response
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.IPosLogCustomerOrderTransactionVisitor.Visit(System.Object,Retalix.StoreServices.Model.Selling.CustomerOrder.ICustomerOrder)">
            <summary>
            Visits pos log customer order.
            </summary> 
            <param name="posLogCustomerOrderTransaction">The arts per transaction, Retalix.Contracts.Generated.Arts.PosLogV4.Source.POSLogCustomerOrderTransaction</param>
            <param name="customerOrder">The customer order of retail transaction</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Receipts.Binary">
            <summary>
            Represents a single certified binary
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Receipts.Binary.Name">
            <summary>
            Binary name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Receipts.Binary.CheckSum">
            <summary>
            Calculated checksum
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Receipts.Binary.CheckSumSHA">
            <summary>
            Calculated checksum new
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Receipts.Binary.CheckSumMD5">
            <summary>
            Calculated checksum old
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Receipts.ISlipTypesPrintSelector">
            <summary>
            Extension point for handling the slipTypes selection 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Receipts.ISlipTypesPrintSelector.GetNotToPrintSlipTypes(Retalix.StoreServices.Model.Selling.IRetailTransaction,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Document.GeneratedSlip})">
            <summary>
            Return list of the slipTypes names that not to br printed
            </summary>
            <param name="retailTransaction"></param>
            <param name="slips"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Receipts.DigitalReceipt.IDigitalReceiptModeStrategy">
            <summary>
            Required to define DigitalReceiptMode value
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Receipts.DigitalReceipt.IDigitalReceiptModeStrategy.GetReceiptDeliveryChannel">
            <summary>
            Return current Receipt Delivery Channel.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Receipts.ISlipPrintManager">
            <summary>
            Manager of slips
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Receipts.ISlipPrintManager.UpdateTransactionSlipStatus(Retalix.StoreServices.Model.Selling.IRetailTransaction,Retalix.StoreServices.Model.Receipts.ReceiptParameters)">
            <summary>
            Update the slip according to receiptParameters
            </summary>
            <param name="retailTransaction"></param>
            <param name="receiptParameters"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Receipts.ISlipPrintManager.ValidateTransactionFinish(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            Validate slip parameters in transaction
            </summary>
            
            Exception
            <param name="retailTransaction"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Receipts.ReceiptParameters">
            <summary>
            Parameters for Receipt
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Receipts.ReceiptParameters.MainSlipPrinted">
            <summary>
            Define wether Main Slip should be printed
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Receipts.CrcData">
            <summary>
            Represents a set of binary data for certification report
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Receipts.CrcData.Binaries">
            <summary>
            The list of binaries in the report
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Supplier.IReceivingConfiguration">
            <summary>
            Supplier receiving configuration
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Supplier.IReceivingConfiguration.ReceivingMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Supplier.IReceivingConfiguration.AllowItemNotInOrder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Supplier.ISupplier">
            <summary>
            Products supplier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Supplier.ISupplier.Id">
            <summary>
            Supplier identifier
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Supplier.ISupplier.Name">
             <summary>
            Gets or sets the full name of the supplier.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Supplier.ISupplier.IsActive">
            <summary>
            Gets or sets a flag which indicates if the supplier is Active.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Supplier.ISupplier.Phone">
            <summary>
            Phone number
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Supplier.ISupplier.MobilePhone">
            <summary>
            Mobile phone number
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Supplier.ISupplier.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Supplier.ISupplier.ContactPerson">
            <summary>
            Contact Person
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Supplier.ISupplier.Address">
            <summary>
            Supplier address
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Supplier.ISupplier.ReceivingConfiguration">
            <summary>
            Receiving configuration
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Supplier.ISupplierDao">
            <summary>
            Class for supplier's management
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Supplier.ISupplierDao.GetById(System.String)">
            <summary>
            Get supplier by it's identifier
            </summary>
            <param name="id">Identifier</param>
            <returns>Supplier</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Supplier.ISupplierDao.FindAll">
            <summary>
            Get all suppliers
            </summary>
            <returns>List of all suppliers</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Supplier.ISupplierDao.FindAll(System.Linq.Expressions.Expression{System.Func{Retalix.StoreServices.Model.Supplier.ISupplier,System.Boolean}})">
            <summary>
            Get all suppliers by specification
            </summary>
            <param name="specification">Criteria specificatin expressed by matching lambda pedicate</param>
            <returns>List of matching suppliers</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Supplier.ISupplierDao.Save(Retalix.StoreServices.Model.Supplier.ISupplier)">
            <summary>
            Insert new supplier
            </summary>
            <param name="supplier">New supplier instance</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Supplier.ISupplierFactory">
            <summary>
            Factory for creation of suppliers
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Supplier.ISupplierFactory.CreateSupplier(System.String)">
            <summary>
            Create new supplier
            </summary>
            <param name="identifier">Supplier identifier</param>
            <returns>New created supplier</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Supplier.ReceivingMode">
            <summary>
            Represent optional modes for store receiving from specific supplier
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Supplier.ReceivingMode.Random">
            <summary>
            Receiving done on part of the items received to store
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Supplier.ReceivingMode.Full">
            <summary>
            Receiving done on all items received to store
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Common.DMS.Configuration.IDmsConfigurationParameter">
            <summary>
            A simple implementation of a DMS configuration parameter (key, value).
            </summary>    
        </member>
        <member name="P:Retalix.StoreServices.Common.DMS.Configuration.IDmsConfigurationParameter.Key">
            <summary>
             Represents the key of the configuration parameter, which is basically it's logical name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Common.DMS.Configuration.IDmsConfigurationParameter.Value">
            <summary>
             Represents the value of a given configuration parameter.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Common.DMS.Configuration.IDmsConfigurationRepository">
            <summary>
            Provides access to the dms configuration.
            </summary>   
        </member>
        <member name="M:Retalix.StoreServices.Common.DMS.Configuration.IDmsConfigurationRepository.SaveConfigurationParameter(Retalix.StoreServices.Common.DMS.Configuration.IDmsConfigurationParameter)">
            <summary>
            Saves and updates a dms configuration parameter.
            </summary>
            <param name="dmsConfigurationParameter">The parameter to save / update.</param>
        </member>
        <member name="M:Retalix.StoreServices.Common.DMS.Configuration.IDmsConfigurationRepository.GetConfigurationParameterByKey(System.String)">
            <summary>
            Gets a dms configuration parameter by key.
            </summary>
            <param name="key">The parameter key.</param>
            <returns>The dms configuration parameter or null if not found.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Common.DMS.Configuration.IDmsConfigurationRepository.GetAllConfiguration">
            <summary>
            Get all dms configuration parameters.
            </summary>
            <returns>An enumerable of all dms configuration parameter.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Common.DMS.IFailedTokenErrorHandler.HandleIfFailedToken(Retalix.StoreServices.Common.DMS.TransportationErrorArgsContainer)">
            <summary>
            If the try-count of the token has reached the threshold, or if the failure contains no changes (de-serialization failure),
            then create a failed token. (NACK)
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.FailedPublishMessageToNR1">
            <summary>
            Error code notifying failure to publish message to NR1.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.MessageWasSentToNR1">
            <summary>
            Successfully code notifying that message was sent to NR1.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.InvalidOrderForPickupLocked">
            <summary>
            Error code for the External Order InvalidOrderForPickupLocked
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.InvalidOrderForPickupFinished">
            <summary>
            Error code for the External Order InvalidOrderForPickupFinished
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.InvalidOrderForPickupExpired">
            <summary>
            Error code for the External Order InvalidOrderForPickupExpired
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.InvalidOrderForPickupCancelled">
            <summary>
            Error code for the External Order InvalidOrderForPickupCancelled
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.InvalidOrderForPickupNotReady">
            <summary>
            Error code for the External Order InvalidOrderForPickupNotReady
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.InvalidOrderLocationForPickup">
            <summary>
            Error code for the External Order InvalidOrderLocationForPickup
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.InvalidOrderForPickupNotReadyStoreName">
            <summary>
            Error code for the External Order InvalidOrderForPickupNotReadyStoreName
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.OrderAlreadyFinished">
            <summary>
            Error code for the External Order OrderAlreadyFinished
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.ExternalOrderNotFound">
            <summary>
            Error code for the External Order R1OrderNotFound
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.ExternalOrderNotExist">
            <summary>
            Error code for the External Order R1OrderNotExist
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.PharmacyServiceOfflineExceptionErrorCode">
            <summary>
            Error code for the External Order PharmacyServiceOfflineExceptionErrorCode
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.PromotionError">
            <summary>
            Error code for the External Order PromotionError
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.BusinessServices.FrontEnd.PickUp.Exceptions.ExternalOrderBusinessExceptionErrorCodes.PharmacyServiceError">
            <summary>
            Error code for the External Order PharmacyServiceError
            </summary>
        </member>
        <member name="T:AssociatedProduct">
            <summary>
            Accociated product for filtering promotion by intersection subgroups
            </summary>
        </member>
        <member name="P:AssociatedProduct.PromotionId">
            <summary>
            promotion
            </summary>
        </member>
        <member name="P:AssociatedProduct.ProductId">
            <summary>
            product
            </summary>
        </member>
        <member name="P:AssociatedProduct.IsContain_InterSectionSubGroup">
            <summary>
            intersection subgroup flag
            </summary>
        </member>
        <member name="F:AssociatedProduct.ProductToCategory">
            <summary>
            categories
            </summary>
        </member>
        <member name="F:AssociatedProduct.ProductToSelectionGroup">
            <summary>
            selected groups
            </summary>
        </member>
    </members>
</doc>
