<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Retalix.StoreServices.Model.Private</name>
    </assembly>
    <members>
        <member name="T:Retalix.StoreServices.Model.AccessServices.Attributes.AccessServiceFormatterAttribute">
            <summary>
             Attribute that mark entity concreate how format the entity
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.Attributes.AccessServiceFormatterAttribute.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.Attributes.AccessServiceFormatterAttribute.PreferedFormatter">
            <summary>
             Prefered Formatter (defaul - DMS Movable )
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.Attributes.AccessServiceFormatterAttribute.OverrideMovableEntityName">
            <summary>
             Overrided EntityName for DMS MovableServicesResolver
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.Attributes.PreferedFormatter">
            <summary>
             Prefered Formatter for Serialization
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.AccessServices.Attributes.PreferedFormatter.Movable">
            <summary>
             DMS Movable Services Resolver 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.AccessServices.Attributes.PreferedFormatter.Binary">
            <summary>
             use Binary Serialization
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.ExecutionInfo">
            <summary>
            Result of access services execution on some Url
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.ExecutionInfo.RemoteException">
            <summary>
            Exception thrown from target
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.ExecutionInfo.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.ExecutionInfo.#ctor(Retalix.StoreServices.Model.AccessServices.IExecutionInfo)">
            <summary>
             Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.IEntityPolicy">
            <summary>
             assign policy to component  
            </summary>   
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.IEntityPolicy.Entity">
            <summary>
             type of entity to define to it a policy
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.IEntityPolicy.PolicyName">
            <summary>
             policy name to execute on entity 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.IEntityPolicy.BusinessUnitId">
            <summary>
            The id of the business unit which the policy is relevant for.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.IEntityPolicyDao">
            <summary>
             DAO for IEntityPolicy
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IEntityPolicyDao.Get(System.String,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            retrieve IEntityPolicy by entity name and businessUnit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IEntityPolicyDao.Save(Retalix.StoreServices.Model.AccessServices.IEntityPolicy)">
            <summary>
            save entityPolicy
            </summary>
            <param name="entityPolicy">entityPolicy to save</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IEntityPolicyDao.Delete(Retalix.StoreServices.Model.AccessServices.IEntityPolicy)">
            <summary>
            delete IEntityPolicy
            </summary>
            <param name="entityPolicy">entityPolicy to delete</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IEntityPolicyDao.Create(System.String,System.String,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            factory for EntityPolicy
            </summary>
            <param name="entity">entity name</param>
            <param name="policyName"></param>
            <param name="businessUnit">businessUnit</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.IExecutionInfo">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.IExecutionInfo.SourceServerNode">
            <summary>
            Server node Uri information to be used by for Access Service invocation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.IExecutionInfo.TargetServerNode">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.IExecutionInfo.HasValue">
            <summary>
            Value returned from Uri
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.IExecutionInfo.RemoteException">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.IExecutionInfo.LocalException">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.IExecutionInfoProvider">
            <summary>
            Provide access to execution info of last proxy call
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IExecutionInfoProvider.GetLastExecutionInfo(System.Object)">
            <summary>
            Restore execution info.
            obviously can return null
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.IInvoker">
            <summary>
            Interface for access service invocation accross different server nodes
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IInvoker.Invoke(Retalix.StoreServices.Model.AccessServices.Request)">
            <summary>
            Invoke given request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.IPolicy">
            <summary>
            Describe access services invocation policy, that defines order of server nodes to be invoked by access services 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IPolicy.Apply(Retalix.StoreServices.Model.AccessServices.Request)">
            <summary>
            Apply policy in current context and return list of PolicyResult objects
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.IPolicyEnforcable">
            <summary>
             Enforcement action on access service
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.IPolicyEnforcer">
            <summary>
             set the Enforce method on access service 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IPolicyEnforcer.EnforceOnlyLocal(System.Object)">
            <summary>
             enforce to execute on local only
            </summary>
            <param name="proxy">the proxy implementation to enforce on</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IPolicyEnforcer.EnforcePolicy(System.Object,Retalix.StoreServices.Model.AccessServices.IPolicy)">
            <summary>
            </summary>
            <param name="proxy"></param>
            <param name="policy"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.IServerNode">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.IServerNode.NodeName">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.IServerNode.NodeId">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IServerNode.GetUrlFor(Retalix.StoreServices.Model.AccessServices.IServerNode)">
            <summary>
            </summary>
            <param name="requestingNode"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IServerNode.GetUrlForCurrentNode">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IServerNode.GetDefaultUrl">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.IServerNodeProvider">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IServerNodeProvider.GetCurrentServerNode">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IServerNodeProvider.GetRootServerNode">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IServerNodeProvider.CreateServerNode(System.String,System.Int32,System.String)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IServerNodeProvider.GetParentServerNode(Retalix.StoreServices.Model.AccessServices.IServerNode)">
            <summary>
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.IServerNodeProvider.GetAnsestors(Retalix.StoreServices.Model.AccessServices.IServerNode)">
            <summary>
            The order is from direct father to root
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.NoDataException">
            <summary>
            To be thrown by remote object to indicate that data wasn't found on given server node
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.NoDataException.#ctor">
            <summary>
            Construct NoDataException
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.NoDataException.#ctor(System.String)">
            <summary>
            Construct NoDataException with message
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.NodeProcessingActionEnum">
            <summary>
            Enumeration of available action during server node processing by access services
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.AccessServices.NodeProcessingActionEnum.ReturnEmptyResult">
            <summary>
            Empty result to be returned by invoker
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.AccessServices.NodeProcessingActionEnum.ContinueExecution">
            <summary>
            Node result should be ignored by invoker 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.AccessServices.NodeProcessingActionEnum.ThrowException">
            <summary>
            Exception should be throw by invoker
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.AccessServices.NodeProcessingActionEnum.StopExecution">
            <summary>
            stop execute by invoker
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.NoPolicyException">
            <summary>
            To be thrown by IPolicyManager implementation in case policy can't be supplied for given type
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.NoPolicyException.#ctor(System.Type)">
            <summary>
            Instanciate NoPolicyException for given Type
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.AccessServices.PolicyResult">
            <summary>
            Result to be returned from IPolicy implementation
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.AccessServices.PolicyResult.#ctor">
            <summary>
            Construct default PolicyResult
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.PolicyResult.Retries">
            <summary>
            How many retries to perform when the server is busy
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.PolicyResult.InvokeTimeout">
            <summary>
            Timeout for the policy (can't be smaller than the minimum system value)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.PolicyResult.ServerNode">
            <summary>
            Server node Url information to be used by for Access Service invocation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.PolicyResult.OnNotAvailableNode">
            <summary>
            Action to be performed when server node is not available
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.PolicyResult.OnEmptyResult">
            <summary>
            Action to be performed when empty result (mean NoDataException is thrown) is returned from access services invocation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.PolicyResult.OnError">
            <summary>
            Action to be performed when error occured during access services invocation node
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.PolicyResult.OnErrorOnTarget">
            <summary>
            Action to be performed when error occured on remote server during access services invocation 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.PolicyResult.OnSuccess">
            <summary>
            Action to be performed when error occured on remote server during access services invocation 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.AccessServices.PolicyResult.IsEmptyResult">
            <summary>
             Function that return true if empty result was returned.
             Default function is DefaultEmptyCheck which considers following situations as no result:
             - NULL is returned
             - Empty IEnumerable is returned
             Developer may create other implementation for this check
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLog.TransactionType">
            <summary>
            a string that represents the transaction type
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator">
            <summary>
            Responsible for control transaction log creation.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateOperatorBypassLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            operator bypass TLOG.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateEndOfDayLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            end of day TLOG as result of end of day process.
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateEndOfDayLog(Retalix.StoreServices.Model.Document.IControlTransaction,Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            end of day TLOG as result of end of day process.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateItemNotFoundLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            create control transaction for item not found activity
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateItemLockedForSaleLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            create control transaction for item locked for sale
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateTrainingOffLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateXReportLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
             Create XReport TLog
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateInvalidSignOnLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create invalid sign on TLog
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateIdentityLockLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create Identity lock TLog
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateAuthorizedChangePasswordLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create authorized password change log.
            </summary>
            <param name="controlTransaction">Control transaction.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateForcedLoginLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
             Create a forced login log.
            </summary>
            <param name="controlTransaction">The control transaction to log.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateStartupLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create touchpoint startup log
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateShutdownLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create touchpoint shutdown log
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateReprintLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create Reprint Transaction log
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateGiftReceiteLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create Gift Receipt
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreatePriceUpdateLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create Price Update
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateConfirmNotificationLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create confirm notification control transaction
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateOpenCashDrawerLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create no sale control transaction for open cash drawer
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateCtmApplicationEntryLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create ctm cash management entry control transaction.
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateCertificateSlipGeneratorLog(Retalix.StoreServices.Model.Document.IControlTransaction,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Document.GeneratedSlip})">
            <summary>
            Create certificate control transaction
            </summary>
            <param name="controlTransaction"></param>
            <param name="slips"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateFiscalApplicationEntryLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create fiscal supervisor app entry control transaction.
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateRunExternalAppLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create Run External App entry control transaction.
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogCreator.CreateEpsReconcileControlLog(Retalix.StoreServices.Model.Document.IControlTransaction)">
            <summary>
            Create Eps Reconcile control transaction.
            </summary>
            <param name="controlTransaction"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogReader">
            <summary>
            A Reader which reads content of ControlTransactionLog, represented by Xml.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLogReader.TryToReadXml(System.String,Retalix.StoreServices.Model.Document.ControlTransactionLog.IControlTransactionLog@)">
            <summary>
            Try to read the xml and return the control transaction as IControlTransactionLog
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Indicator.IIndicator">
             <summary>
            Represents the Indicator.
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicator.Ik">
            <summary>
            Internal use only!!!!!
            Key for the entity in the persistence node.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicator.Id">
            <summary>
                The Indicator external identifier in the system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicator.IndicatorKey">
            <summary>
                The Indicator key identifier in the system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicator.Group">
            <summary>
                The Indicator group in the system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicator.Indication">
            <summary>
                The Indicator name in the system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicator.Symbol">
            <summary>
                The Indicator symbol in the system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicator.Priority">
            <summary>
                The Indicator priority in the system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicator.BusinessUnit">
            <summary>
                The Indicator businessUnit in the system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicator.IndicatorType">
            <summary>
                The Indicator type in the system.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Indicator.IIndicatorAdaptor">
            <summary>
            A adaptor for getting Indicator entities.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Indicator.IIndicatorAdaptor.GetIndicators(Retalix.StoreServices.Model.Selling.IRetailTransaction,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Used to get an Indicators.
            <param name="transaction"></param>
            <param name="line"></param>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Indicator.IIndicatorAdaptor.GetGroupedIndicators(Retalix.StoreServices.Model.Selling.IRetailTransaction,Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine)">
            <summary>
            Used to get Indicators, this method will group indicators if there are more than 3 indicators for line .
            <param name="transaction"></param>
            <param name="line"></param>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Indicator.IIndicatorDao">
            <summary>
            Encapsulates data access operations for the Indicator entity, such as Delete, Update, Save, etc.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Indicator.IIndicatorDao.GetByIndicatorKey(System.String,System.String,System.String)">
            <summary>
                Find indicator according to the indicator type, indicator key, businessUnitFk.
            </summary>
            <param name="type">
                The indicator type.
            </param>
            <param name="key">
                The indicator key.
            </param>
            <param name="businessUnitFk">
                The businessUnitFk
            </param>
            <returns>
                Indicator information.
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Indicator.IIndicatorDao.GetIndicatorById(System.String)">
            <summary>
                Find indicator according to the indicator id.
            </summary>
            <param name="id">
                The indicator id.
            </param>
            <returns>
                Indicator information.
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Indicator.IIndicatorDao.GetIndicatorByPriority(System.Int32,System.String)">
            <summary>
                Find indicator according to the priority.
            </summary>
            <param name="priority">
                The indicator priority.
            </param>
            <param name="businessUnitFk">
                The businessUnitFk
            </param>
            <returns>
                Indicator Priority.
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Indicator.IIndicatorDao.Save(Retalix.StoreServices.Model.Document.Indicator.IIndicator)">
            <summary>
                Save indicator.
            </summary>
            <param name="indicator">
                The indicator.
            </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Indicator.IIndicatorDao.Delete(Retalix.StoreServices.Model.Document.Indicator.IIndicator)">
            <summary>
                Delete indicator.
            </summary>
            <param name="indicator">
                The indicator.
            </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Indicator.IIndicatorDao.GetAll">
            <summary>
             Gets all indicators
            </summary>
            <returns>A list of Indicators</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Indicator.IIndicatorExtractor">
            <summary>
            A Extractor for getting Indicators.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicatorExtractor.IndicatorType">
            <summary>
            Used to get an Indicator type.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Indicator.IIndicatorFactory">
            <summary>
            A factory for creating Indicator entities.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Indicator.IIndicatorFactory.CreateNew(System.String,System.String,Retalix.StoreServices.Model.Document.Indicator.IIndicatorGroup,System.String,System.Int32,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.String,System.String)">
            <summary>
            Used to create an Indicator entity.
            </summary>
            <param name="id"></param>
            <param name="key"></param>
            <param name="group"></param>
            <param name="symbol"></param>
            <param name="priority"></param>
            <param name="businessUnit"></param>
            <param name="indication"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Indicator.IIndicatorGroup">
            <summary>
                Represents the Indicator group.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicatorGroup.Ik">
            <summary>
            Internal use only!!!!!
            Key for the entity in the persistence node.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicatorGroup.Id">
            <summary>
                The Indicator group external identifier in the system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicatorGroup.Name">
            <summary>
                The Indicator group name in the system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicatorGroup.Symbol">
            <summary>
                The Indicator group symbol in the system.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Indicator.IIndicatorGroupDao">
            <summary>
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Indicator.IIndicatorGroupDao.Save(Retalix.StoreServices.Model.Document.Indicator.IIndicatorGroup)">
            <summary>
                Save indicator group.
            </summary>
            <param name="indicatorGroup">
                The indicator group.
            </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Indicator.IIndicatorGroupDao.Delete(Retalix.StoreServices.Model.Document.Indicator.IIndicatorGroup)">
            <summary>
                Delete indicator group.
            </summary>
            <param name="indicatorGroup">
                The indicator group.
            </param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Indicator.IIndicatorGroupFactory">
            <summary>
            A factory for creating Indicator Group entities.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.Indicator.IIndicatorGroupFactory.CreateNew(System.String,System.String,System.String)">
            <summary>
            Used to create an Indicator Group entity.
            </summary>
            <param name="groupId"></param>
            /// <param name="groupName"></param>
            /// /// <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Indicator.IIndicatorPresentation">
            <summary>
                Represents the Indicator Presentation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicatorPresentation.Group">
            <summary>
                The Indicator presentation group.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicatorPresentation.Indicator">
            <summary>
                The Indicator presentation name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicatorPresentation.Symbol">
            <summary>
                The Indicator presentation symbol.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicatorPresentation.Priority">
            <summary>
                The Indicator presentation priority.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.Indicator.IIndicatorPresentation.Combined">
            <summary>
                The Indicator presentation combined flag.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TransactionLog.RetailTransactionLogSaleLineLinkSpecification.SequenceNumber">
            <summary>
            Sequence number of the original retail transaction log. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TransactionLog.RetailTransactionLogSaleLineLinkSpecification.StoreRetailerId">
            <summary>
            The Id of the store at which the transaction was performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TransactionLog.RetailTransactionLogSaleLineLinkSpecification.TouchPointId">
            <summary>
            The Id of the touch point at which the transaction was performed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TransactionLog.RetailTransactionLogSaleLineLinkSpecification.EndDateTime">
            <summary>
            EndDateTime of the original retail transaction log.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TransactionLog.RetailTransactionLogSaleLineLinkSpecification.NewSpecificationMatchingLog(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog)">
            <summary>
            Returns a new specification that is satisified by <paramref name="transactionLog"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TransactionLog.RetailTransactionLogSaleLineLinkByItemSpecification">
            <summary>
            A specification by which to match transaction-links. 
            It identifies a single RetailTransactionLog and item ID. 
            Matching transaction-links are those that point to the matching RetailTransactionLog and to a line in that log that has the specified item ID.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TransactionLog.RetailTransactionLogSaleLineLinkByItemSpecification.#ctor(System.Int32,System.String,System.String,System.DateTime,System.String)">
            <summary>
            
            </summary>
            <param name="sequenceNumber"></param>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
            <param name="endDateTime"></param>
            <param name="itemId"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.TransactionLog.RetailTransactionLogSaleLineLinkByItemSpecification.ItemId">
            <summary>
            The Id of the item in the original retail transaction according to which to search for matching transaction-links.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TransactionLog.ITenderControlTransactionLogCreator">
            <summary>
            Responsible for transaction log creation.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.TransactionLog.ITenderControlTransactionLogCreator.WriteTLogDocument(Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog)">
            <summary>
             Create and save transaction log document for deposit money into personal account
            </summary>
            <param name="savingAccountTransactionLog"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ICashierBarcodeUser">
            <summary>
            Update cashier authentication barcode
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IMovableDocumentConverter">
            <summary>
            Handles creation of movable<see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument"> documents </see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IMovableDocumentConverter.CreateMovableDocument(Retalix.StoreServices.Model.Document.TDM.IDocument)">
            <summary>
            Create <see cref="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable">movable</see> representation of provided 
            <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">document </see>, so the returned can propagate in the 
            system via dms.
            </summary>
            <param name="document"><see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">Document</see> that should be represented as movable.</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable">Movable</see> representation of provided <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">document</see> </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IMovableDocumentConverter.CreateMovableRetransmitDocument(Retalix.StoreServices.Model.Document.TDM.IDocument,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates <see cref="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable">movable</see> representation of provided <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">document </see>
            that will be used in retransmit flow. 
            </summary>
            <param name="document"><see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">Document</see> that should be represented as movable.</param>
            <param name="destinationBusinessUnitId">Represents id of <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">business unit</see> this retransmitted 
            <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">document</see> should be delivered.</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Infrastructure.DataMovement.IMovable">Movable</see> implementation for retransmit <see cref="T:Retalix.StoreServices.Model.Document.TDM.IDocument">document</see> </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptConfigurationParameterFactory">
            <summary>Returns the properly typed Receipt Configuration Parameter</summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationParameterFactory.Get(System.String)">
            <summary>Retrieve a typed configuration parameter for the specified type (from contract)</summary>
             <param name="type">name of the type from the contract</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IXReportReceiptGenerator">
            <summary>
            An interface used for generating X reports
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IXReportReceiptGenerator.GenerateXReportReceipt(System.String)">
            <summary>
            Generates an X Report slip using the POS Totalizers
            </summary>
            <param name="printerName">The designated printer for the X report printing</param>
            <returns>Returns an <cref>Receipt</cref> containing the slip of the X Report in OPOS Format</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.EftSignatureSlipReceiptArgs">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.FormatOutputType">
            <summary>
             Enumeration of available output types of the receipt formatter
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.FormatOutputType.Opos">
            <summary>
             Create an output with the Opos formatting for the printer
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.FormatOutputType.Html">
            <summary>
             Create HTML output for screen display or email
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IAnalyticsConnectionStringFactory">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IBIRepository">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ICashierBarcode">
            <summary>
            Generates cashier authentication barcode
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ICashierBarcode.GenerateBarcode">
            <summary>
            Produce a barcode used by the cashier to get authenticated
            </summary>
            <returns>Dictionary of Encoded barcode strings</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IDocumentFormatter">
            <summary>
            Interface IDocumentFormatter
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IDocumentFormatter.GenerateReceipt(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            generate receipt and append it by external builder
            </summary>
            <param name="retailTransaction"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IDocumentFormatter.GenerateReprintReceipt(System.String,Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog)">
            <summary>
            generate re-print receipt and append it by external builder
            </summary>
            <param name="printingTypes"></param>
            <param name="retailTransactionLog"> </param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IDocumentFormatter.GenerateBlindPickUp(Retalix.StoreServices.Model.Selling.Drawer.DrawerOpenArgs)">
            <summary>
            generate blind pickup slip by external builder using the provided open drawer arguments
            </summary>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IDocumentFormatter.GenerateDeclaration(Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog)">
            <summary>
            generate declaration slip by external builder using the provided declaration arguments
            </summary>
            <param name="declarationReceiptArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IDocumentFormatter.GenerateFundTransfer(Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog)">
            <summary>
            generate fund transfer slip by external builder using the provided fund transfer arguments
            </summary>
            <param name="fundTransferReceiptArgs">Details of this fund transfer transaction</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IDocumentFormatter.GetnerateSavingAccountReceipt(Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDoucmentBuilderArgs)">
            <summary>
            Generates personal account receipt.
            </summary>
            <param name="savingAccountDoucmentBuilderArgs">personal account receipt arguments.</param>
            <returns>Receipt</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IDocumentFormatter.GenerateXReportReceipt(Retalix.StoreServices.Model.Finance.XZReports.XReportData)">
            <summary>
            Generates X Report receipt.
            </summary>
            <param name="xReportData">X Report receipt arguments</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IDocumentFormatter.GenerateZReportReceipt(Retalix.StoreServices.Model.Finance.XZReports.ZReportData)">
            <summary>
            Generates Z Report receipt.
            </summary>
            <param name="zReportData">Z Report receipt arguments</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IFormattableDocument">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IItemHierarchyTemplateLine">
            <summary>
             Defines the Item Hierarchy line template
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ILayoutLineTemplateRepository">
            <summary>
            Layout template repository interface, which defines API for CRUD operations on layout template entity.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ILayoutLineTemplateRepository.Get(System.String,System.String,System.String)">
            <summary>
             Gets a layout template by template name and version
            </summary>
            <param name="lineDefinitionName"></param>
            <param name="templateName"></param>
            <param name="version">The version of the required layout template. null for current version</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ILayoutLineTemplateRepository.GetAll(Retalix.StoreServices.Model.Document.VersionSelector)">
            <summary>
             Gets all layout templates for requiered version
             <param name="versionSelector">Indicates whether to retrieve layout template of all\current\spacific version. default = current</param>    
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ILayoutLineTemplateRepository.GetSectionLayoutTemplates(System.String)">
            <summary>
             Gets a layout templates defined for a specific LineDefinition
            </summary>
            <param name="lineDefinitionName"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ILayoutLineTemplateRepository.Save(Retalix.StoreServices.Model.Document.IReceiptLayoutLineTemplate)">
            <summary>
             Persists a layout template
            </summary>
            <param name="newLayoutTemplate"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ILayoutLineTemplateRepository.Update(Retalix.StoreServices.Model.Document.IReceiptLayoutLineTemplate)">
            <summary>
             Updates an existing layout template
            </summary>
            <param name="updatedLayoutTemplate"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ILayoutLineTemplateRepository.Delete(System.String,System.String,Retalix.StoreServices.Model.Document.VersionSelector)">
            <summary>
             Deletes a receipt layout template by template section name, template name and version
            </summary>
            <param name="sectionName"></param>
            <param name="templateName"></param>
            <param name="versionSelector">Indicates whether to delete layout template of all\current\spacific version. default = current</param>    
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ILayoutLineTemplateRepository.DeleteAll(Retalix.StoreServices.Model.Infrastructure.DataMovement.DeleteAllProviders.ITruncateHelperDao)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IPrintingInformation">
            <summary>
             Information relevant for receipt printing
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IPrintingInformation.PrinterType">
            <summary>
            The printer used for the current requested print request
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IPrintingInformation.ClosedTransactionDataPatternId">
            <summary>
            The closed transaction data pattern Id used for barcode printing
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IPrintingInformation.SuspendedTransactionDataPatternId">
            <summary>
            The suspended transaction data pattern Id used for barcode printing
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IPrintingInformation.HierarchyCulture">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptConfigurationRepository">
            <summary>
            Persistency for Receipt Configurations
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationRepository.Save(Retalix.StoreServices.Model.Document.IReceiptConfigurationParameter)">
            <summary>
            saves a specific configuration
            </summary>
            <param name="configurationParameter"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationRepository.FindAll">
            <summary>
            gets all configurations (sorted alphabetically by the key)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationRepository.FindAll(Retalix.StoreServices.Model.Document.IReceiptConfigurationParameter)">
            <summary>
            gets all configurations after the specified parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationRepository.GetCurrentConfigurationSet">
            <summary>
            Gets all configuration for the current business unit and touchpoint group 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationRepository.GetConfigurationSet(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment})">
            <summary>
            Gets all configuration for the specified business unit and touchpoint group.
            For Parameters that do not exist in the required business unit, parameters from higher in the hierarchy are included.
            For Parameters that exist per primary touchpoint group and per additional touchpoint group also, parameters from additional touchpoint group are included.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationRepository.FindAll(System.String,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
            Find all configuration entries for the specified parameter key, business unit and retail Segment.
            If RetailSegment is null, all entries for the given key and business unit are returned.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationRepository.Get``1(System.String)">
            <summary>
            gets a configuration parameter by name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="paremeterKey"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationRepository.Get(System.String)">
            <summary>
            </summary>
            <param name="paremeterKey"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationRepository.GetConfigurationParameter(System.String,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
             Gets a configuration parameter by name, location and retailSegment
            </summary>
            <param name="paremeterKey">The parameter key name</param>
            <param name="businessUnit">The Location</param>
            <param name="retailSegment">The retailSegment</param>
            <returns>The configuration parameter</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationRepository.Delete(Retalix.StoreServices.Model.Document.IReceiptConfigurationParameter)">
            <summary>
            
            </summary>
            <param name="configurationParameter"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptConfigurationRepository.ShouldPrintReceiptOverrideByConfig(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            Check if needed to override the printing receipt option by roll configuration.
            </summary>
            <param name="retailTransaction">The retail transaction.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptEngine">
            <summary>
             The receipt formatting engine
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptEngine.GetFormattedLayout(System.Xml.Linq.XDocument,Retalix.StoreServices.Model.Document.ILayout,Retalix.StoreServices.Model.Document.FormatOutputType,System.String,System.Boolean)">
            <summary>
            Formats a receipt according to a given data and layout to a requested output 
            </summary>
            <param name="printableData">The data to be formatted</param>
            <param name="layout">The layout in which the data will be formatted</param>
            <param name="formatOutputType">The output type of the formatting (e.g. OPOS document, HTML)</param>
            <param name="targetDevice">The device which this output will be sent to.</param>
            <param name="initConfigurationAndCulture"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptEngine.GetFormattedLayout(System.Xml.Linq.XDocument,Retalix.StoreServices.Model.Document.FormatOutputType,System.String)">
            <summary>Returns a set of formatted receipts for the provided data.
            </summary>
            <param name="printableData">The data to be used to select the slips to print and fill details in the layout</param>
            <param name="formatOutputType">The format of the outputted receipts</param>
            <param name="targetDevice">The device that this output will be displayed on.</param>
            <returns></returns> 
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptEngine.GetFormattedLayout(System.Xml.Linq.XDocument,Retalix.StoreServices.Model.Document.ILayout)">
            <summary>Returns a single slip for the provided layout and printable data
            </summary>
            <param name="printableData">Data to be used for processing and formatting the layout</param>
            <param name="layout">Layout instructions for use in preparing the formatted output.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptEngine.GetFormattedLayout(System.Xml.Linq.XDocument,Retalix.StoreServices.Model.Document.FormatOutputType,System.String,Retalix.StoreServices.Model.Selling.RetailTransaction.IRetailTransactionContext)">
            <summary>Returns a set of formatted receipts for the provided data.
            </summary>
            <param name="printableData">The data to be used to select the slips to print and fill details in the layout</param>
            <param name="formatOutputType">The format of the outputted receipts</param>
            <param name="targetDevice">The device that this output will be displayed on.</param>
            <param name="transactionContext">Context data, conatins Store and TouchPoint data.</param>
            <returns></returns> 
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptFormatterAdaptor`1">
            <summary>
             Used to abstract the integration with any receipt provider in order to receive receipt output
            </summary>
            <typeparam name="T"></typeparam>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptFormatterAdaptor`1.GenerateSlip(`0)">
            <summary>
             Generate receipt slip with data of the cash office transaction log.
            </summary>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptLayout">
            <summary>
             Layout instructions for preparing formatted output
             Layouts are per PrinterType, Culture, and Environment.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLayout.PrinterType">
            <summary>
             The type of printer to format for.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLayout.Active">
            <summary>Indicates whether this layout is currently active and available for use.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLayout.StartDate">
            <summary>The earliest date that this layout should be used.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IReceiptLayout.Environments">
            <summary>
             All the environments relevant for this layout
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayout.AddEnvironment(Retalix.StoreServices.Model.Document.IReceiptEnvironment)">
            <summary>
             Add an environment to the receipt
            </summary>
            <param name="environment"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayout.AddLayoutLine(System.String,System.String,Retalix.StoreServices.Model.Document.IReceiptLayoutLineTemplate,System.String,System.String,System.String)">
            <summary>Add a Line (connection between data binding and template) to this Receipt Layout</summary>
            <param name="lineDefinitionName">The contained template should be applied to data matching this line definition</param>
            <param name="description">A description to be used for identifying this Receipt Line</param>
            <param name="template">The template to be applied to the matching data.</param>
            <param name="sectionName">The sectionName for this line (specified)</param>
            <param name="layout">The actual layout (used if this line has a layout that is not a saved template)</param>
            <param name="version"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayout.AddLayoutLine(System.String,System.String,Retalix.StoreServices.Model.Document.IReceiptLayoutLineTemplate,System.String)">
            <summary>Add a Line (connection between data binding and template) to this Receipt Layout</summary>
            <param name="lineDefinitionName">The contained template should be applied to data matching this line definition</param>
            <param name="description">A description to be used for identifying this Receipt Line</param>
            <param name="template">The template to be applied to the matching data.</param>
            <param name="version"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptLayoutFactory">
            <summary>
            responsible for creating new receipt layouts
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayoutFactory.GetReceiptLayout(System.String,System.String)">
            <summary>
            Makes a new concrete layout
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReceiptLayoutRepository">
            <summary>
            Repository interface for the receipt layout entity
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayoutRepository.GetAllReceiptLayouts(Retalix.StoreServices.Model.Document.VersionSelector)">
            <summary>
            Returns all receipt layouts stored in repository for requierd version
            </summary>
             <param name="versionSelector">Indicates whether to retrive ReceyptLayout of all\current\spacific version, default is current version</param>    
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayoutRepository.GetAllActiveReceiptLayouts">
            <summary>Returns all currently active receipt layouts stored in repository
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayoutRepository.Get(System.String,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment,System.String,System.String)">
            <summary>
            Gets a receipt layout by device name, hierarchy level node and touch point group
            </summary>
            <param name="deviceName"></param>
            <param name="businessUnit"></param>
            <param name="retailSegment"></param>
            <param name="slipType"></param>
            <param name="cultureName"></param>
            <returns>Receipt layout, which is associated with given parameters or null, if not found a match</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayoutRepository.Get(System.String,System.String)">
            <summary>
            Gets a receipt layout by layout name and version
            </summary>
            <param name="layoutName"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayoutRepository.DeleteAllReceiptLayouts">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayoutRepository.Save(Retalix.StoreServices.Model.Document.IReceiptLayout)">
            <summary>
            Persists new receipt layout
            </summary>
            <param name="newReceiptLayout"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayoutRepository.Save(Retalix.StoreServices.Model.Document.IReceiptLayout,System.Boolean)">
            <summary>
            Persists new receipt layout
            </summary>
            <param name="newReceiptLayout"></param>
            <param name="overrideActiveStatus"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayoutRepository.Update(Retalix.StoreServices.Model.Document.IReceiptLayout)">
            <summary>
            Updates an existing receipt layout
            </summary>
            <param name="updatedReceiptLayout"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayoutRepository.Update(Retalix.StoreServices.Model.Document.IReceiptLayout,System.Boolean)">
            <summary>
            Updates an existing receipt layout
            </summary>
            <param name="updatedReceiptLayout"></param>
            <param name="overrideActiveStatus"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IReceiptLayoutRepository.Delete(System.String,Retalix.StoreServices.Model.Document.VersionSelector)">
            <summary>
            Deletes receipt layout with given receipt layout name 
            </summary>
            <param name="layoutName"></param>
            <param name="versionSelector">Indicates whether to delete ReceyptLayout of all\current\spacific version, default is current version</param>    
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IReportingContext">
            <summary>
            the Context (Device) for which a report is relevent
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IRescanComparisson">
            <summary>
            Contains total amount for aggregated sale lines.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IRescanComparissonCriteria">
            <summary>
             Holds parameters for running self scan sales report of average of business date interval.
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IRescanComparissonCriteria.StartBusinessDate">
            <summary>
             Report Start business date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IRescanComparissonCriteria.EndBusinessDate">
            <summary>
             Report End business date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IRescanComparissonCriteria.StoreRetailerIds">
            <summary>
            Identifiers of the store retailer ids (store external ids).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IRescanComparissonCriteria.GroupByTimeInterval">
            <summary>
            Sum the report according to a time period every certain interval.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ISaleLinesSum">
            <summary>
            Contains total amount for several sale lines, grouped by the same id and date time interval.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ISalesAggregation">
            <summary>
            Contains total amount for aggregated sale lines.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IStoreSalesOfBusDateRangeCriteria">
            <summary>
             Holds parameters for running self scan sales report of average of business date interval.
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoreSalesOfBusDateRangeCriteria.StartBusinessDate">
            <summary>
             Report Start business date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoreSalesOfBusDateRangeCriteria.EndBusinessDate">
            <summary>
             Report End business date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoreSalesOfBusDateRangeCriteria.StoreRetailerIds">
            <summary>
            Identifiers of the store retailer ids (store external ids).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoreSalesOfBusDateRangeCriteria.TouchPointGroupIds">
            <summary>
            Identifiers of the touch point group ids(touch point group external ids).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoreSalesOfBusDateRangeCriteria.TotalAmountType">
            <summary>
            Which total sales to return.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoreSalesOfBusDateRangeCriteria.GroupByTimeInterval">
            <summary>
            Sum the report according to a time period every certain interval.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoreSalesOfBusDateRangeCriteria.CreationChannel">
            <summary>
            Choose creation channel
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.CreationChannelTypeEnum">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IStoreSalesReportContext">
            <summary>
            Holds arguments for running store sales reports
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoreSalesReportContext.ReportCriteria">
            <summary>
            Criteria of the report.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IStoreSalesReportDocument">
            <summary>
            Represents a document that stores the content of a store sales Report.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IStoreSalesReportDocument.ContentAsXml">
            <summary>
            Content of this document, represented by Xml
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IStoreSalesReportExecuter">
            <summary>
            Used for executing store sales report according to the report context.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IStoreSalesReportsDao">
            <summary>
             Returns summary of sale lines according to a time interval for the store sales reports.
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IStoreSalesReportsDao.GetStoresSaleSummariesByStore(Retalix.StoreServices.Model.Document.IStoresSalesCriteria)">
            <summary>
             Builds a dictionary of store id and a list of sale transactions which were made at this store.
             Retrieve a list of <see cref="T:Retalix.StoreServices.Model.Document.ISaleLinesSum"/> that match the given <see cref="T:Retalix.StoreServices.Model.Document.IStoresSalesCriteria"/> 
             and sum the sale lines by the time interval of the transaction end date.
             List is ordered by the time interval (accedning).
             For example: Time interval of 15 minutes- 08:00, 08:15,08:30...
            </summary>
            <param name="criteria">Holds the criteria parameters</param>
            <returns>
            Dictionary of store id and a list of sale line summaries which were made at this store.
            Will return an empty Dictionary incase there are no sales results.
            Dictionary will not contain stores which have no sales results.
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IStoreSalesReportsDao.GetStoresSaleSummariesByTouchPointGrp(Retalix.StoreServices.Model.Document.IStoresSalesCriteria)">
            <summary>
             Builds a dictionary of Touch Point Group id and a list of sale transactions which were made at touch points which belongs to this touch point group.
             Retrieve a list of <see cref="T:Retalix.StoreServices.Model.Document.ISaleLinesSum"/> that match the given <see cref="T:Retalix.StoreServices.Model.Document.IStoresSalesCriteria"/> 
             and sum the sale lines by the time interval of the transaction end date.
             List is ordered by the time interval (accedning).
             For example: Time interval of 15 minutes- 08:00, 08:15,08:30...
            </summary>
            <param name="criteria">Holds the criteria parameters</param>
            <returns>
            Dictionary of Touch Point Group id and a list of sale line summaries which were made at touch points which belongs to this touch point group.
            Will return an empty Dictionary incase there are no sales results.
            Dictionary will not contain touch point groups which have no sales results.
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.IStoreSalesReportsDao.GetStoresSaleAvgOfLastBusinessDatesByStore(Retalix.StoreServices.Model.Document.IStoresSalesOfLastBusDatesCriteria)">
            <summary>
             Builds a dictionary of store id and a list of sale transactions which were made at this store.
             Retrieve a list of <see cref="T:Retalix.StoreServices.Model.Document.ISaleLinesSum"/> that match the given <see cref="T:Retalix.StoreServices.Model.Document.IStoresSalesOfLastBusDatesCriteria"/> 
             and average the sale lines of the last business dates, by the time interval of the transaction end date.        
             List is ordered by the time interval (accedning).
             For example: Time interval of 15 minutes- 08:00, 08:15,08:30...
             The average will be calculated from the first business day of the store.  For example if a store just started working 2 weeks ago, 
             although trying to get the average of the last 4 weeks we will still get the average of the last 2 weeks.
            </summary>
            <param name="criteria">Holds the criteria parameters</param>
            <returns>
            Dictionary of store id and a list of sale line averages which were made at this store.
            Will return an empty Dictionary incase there are no sales results.
            Dictionary will not contain stores which have no sales results.
            </returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IStoresSalesOfLastBusDatesCriteria">
            <summary>
             Holds parameters for running store sales report of average of last business dates.
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoresSalesOfLastBusDatesCriteria.CurrentBusinessDate">
            <summary>
             Current business date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoresSalesOfLastBusDatesCriteria.EndTime">
            <summary>
             Average transactions untill the end time of each last business date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoresSalesOfLastBusDatesCriteria.LastBusinessDates">
            <summary>
            Defines the last business dates by number of last date periods.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoresSalesOfLastBusDatesCriteria.StoreRetailerIds">
            <summary>
            Identifiers of the store retailer ids (store external ids).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoresSalesOfLastBusDatesCriteria.TouchPointGroupIds">
            <summary>
            Identifiers of the touch point group ids(touch point group external ids).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoresSalesOfLastBusDatesCriteria.TotalAmountType">
            <summary>
            Which total sales to return.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoresSalesOfLastBusDatesCriteria.GroupByTimeInterval">
            <summary>
            Sum the report according to a time period every certain interval.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.LastBusinessDates">
            <summary>
            Defines which sales of the last business dates to average.
            Last business dates are configured by the date period and number of last periods.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.LastBusinessDates.DatePeriod">
            <summary>
            Date period of Interval.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.LastBusinessDates.NumOfLastPeriods">
            <summary>
            Number of time periods
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.DatePeriodEnum">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.IStoresSalesCriteria">
            <summary>
            Holds parameters for running store sales report.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoresSalesCriteria.StoreRetailerIds">
            <summary>
            Identifiers of the store retailer ids (store external ids).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoresSalesCriteria.TouchPointGroupIds">
            <summary>
            Identifiers of the touch point group ids(touch point group external ids).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoresSalesCriteria.TotalAmountType">
            <summary>
            Which total sales to return.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoresSalesCriteria.GroupByTimeInterval">
            <summary>
            Sum the report according to a time period every certain interval.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.IStoresSalesCriteria.CreationChannel">
            <summary>
            Choose creation channel
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TotalAmountTypeEnum">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.GroupByTimeInterval">
            <summary>
            Group according to interval of time period.
            For example: TimePeriod = Minute and Interval = 15, means group every 15 minutes.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.GroupByTimeInterval.TimePeriod">
            <summary>
            Time period of Interval.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Document.GroupByTimeInterval.Interval">
            <summary>
            Number of time periods
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.TimePeriodEnum">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ITransactionContentDataBuilder">
            <summary>
            Builder responsible for transforming IRetailTransaction into PrintableData
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1. Please use IPrintableDataBuilder instead.</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ITransactionContentDataBuilder.Build(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>Builder responsible for transforming IRetailTransaction into PrintableData
             </summary>
            <param name="retailTransaction">The transaction to Transform</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ITransactionLogDao">
            <summary>
             Data access for any kind of Transaction Log such as: Retail Transaction Log, Control Transaction Log, Cash Office Logs etc. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ITransactionLogDao.FindReturnTransactionXmlsBySaleLineLinks(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLink,System.String)">
            <summary>
            Gets return transactions according to criteria
            </summary>
            <param name="linkSpecification"></param>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ITransactionLogDao.FindReturnTransactionXmlsBySaleLineLinks(Retalix.StoreServices.Model.Document.TransactionLog.RetailTransactionLogSaleLineLinkSpecification)">
            <summary>
            Gets return transactions according to criteria
            </summary>
            <param name="linkSpecification"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Document.ITransactionLogDao.GetFirstNotVoided(System.String)">
            <summary>
             Return the first retail transaction in a specific store which is not voided.
             Used by Cash Office.
            </summary>
            <param name="businessUnitId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.MessageSubTypeType">
            <summary>
            Enumaration to define message subtype
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.MessageSubTypeType.MessageForTotalSection">
            <summary>
            Total section message
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.MessageSubTypeType.MessageForEndOfTicket">
            <summary>
            End of ticket message
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.MessageSubTypeType.MessageForSeparateReceiptSplit">
            <summary>
            Separate receipt split message
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.MessageSubTypeType.MessageForTenderSection">
            <summary>
            Tender section message
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Document.MessageSubTypeType.MessageForStartOfTicket">
            <summary>
            Start of ticket message
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.PrintLoyaltyDiscount">
            <summary>
            Enumeration for Loayalty Discount printing options
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.ReceiptContext">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Reports.ReportType">
            <summary>
            
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.Reports.TaxReportValue">
            <summary>
            Holds taxes amounts per tax rate.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Document.StubPrintingTypes">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderAmountsHandler">
            <summary>
             Provides balancing data functionality for <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderAmountsHandler.CreateUpdateBalanceTenderData(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement})">
            <summary>
            This interface is in charge of handling the preparation of balancing data by grouping and caching before calling the stored procedures 
            that will create <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">periods</see> and update balances.
            Formed in order to prevent database round trips and thus improve performance.
            </summary> 
            <param name="balanceTenderAmounts">balancing data resulting from a transaction (retail or CashOffice)</param>
            <param name="balanceActivityTypeCounts"> count of transaction per type</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IBalanceDtoDao">
            <summary>
             provides all the DAL functionality involved in BalanceDto
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalanceDtoDao.FindBalanceByCriteria(System.String,System.String,System.String,Retalix.StoreServices.Model.Infrastructure.Globalization.AbsoluteDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.AbsoluteDateTime)">
            <summary>
            Retrieve BalanceDto by criteria
            </summary>
            <param name="businessUnitId"></param>
            <param name="accountExternalId"></param>
            <param name="storeBalancingType"></param>
            <param name="declarationDateValue"></param>
            <param name="balanceShiftStart"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceDto.TotalInFunds">
            <summary>
            Total in funds per business day (e.g. paid-in)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceDto.TotalOutFunds">
            <summary>
            Total out funds per business day (e.g. paid-out)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceDto.DeclarationDate">
            <summary>
            Declaration date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceDto.OpeningAmountFunds">
            <summary>
            Opening amount funds per business day (e.g. constant carry over)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceDto.ExpectedAmountFunds">
            <summary>
            Total in/out funds per business day (e.g. paid-in)
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalanceDto.Update(Retalix.StoreServices.Model.Finance.Balancing.IBalance)">
            <summary>
            Update method for the Balance entity
            </summary>
            <param name="balance"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement">
            <summary>
             Provides balance information regarding the tender and amount moved to/from an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement.TenderTypeId">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender</see>'s Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement.Amount">
            <summary>
            The amount of the balancing data include base and converted amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement.TransactionType">
            <summary>
             the type of transaction (loan pickup,retail etc)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement.Direction">
            <summary>
            The direction of the transaction, in (false) or out (true).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement.BusinessUnitId">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">business unit</see>'s Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement.BusinessDate">
            <summary>
            The business date of the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement.ShiftStart">
            <summary>
            The ShiftStart on the  transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement.ShiftEnd">
            <summary>
            The ShiftStart on the  transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement.AccountId">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see>'s Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement.TouchPointId">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">touchPoint</see>'s Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement.AccountBalanceId">
            <summary>
            the Account Balance Identifier
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao">
            <summary>
             Provides DAL functionality for <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement"/>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao.CreateOrUpdateBalanceTenderData(System.Collections.Generic.Dictionary{Retalix.StoreServices.Model.Finance.Balancing.GroupByTenderBalanceDirectionKey,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement}})">
            <summary>
            Saves grouped bulk of given <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement"/> entity to DB.
            </summary>
            <param name="balanceTenderAmounts"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao.SetDeclaration(Retalix.StoreServices.Model.Finance.Funds,System.DateTime,System.Int32)">
            <summary>
            Set the Declaration property of the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance"/>.
            </summary>
            <param name="declaration">The amount that was declared</param>
            <param name="declarationCreationDate">The creation date of the declaration transaction</param>
            <param name="balanceId">Account Balance Id</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao.GetOrCreateAccountBalanceId(Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement)">
            <summary>
            Verify the existence of store balance period, if not exists, create the period and all relevant account balances
            then return the relevant account balance info.
            
            In case that the period already exists, verifying that the relevant account balance exists, if not exists, create relevant account balance,
            then return the relevant account balance info.
            
            Moreover, dispatching newly period created to the reporting.
            </summary>
            <param name="balanceTenderMovement"><see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement"/></param>
            <returns>AccountBalanceInfo</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao.GetOrCreateCashierAccountBalanceId(Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement)">
            <summary>
            Verify the existence of store balance period, if not exists, create the period and all relevant account balances
            then return the relevant account balance info.
            
            In case that the period already exists, verifying that the relevant account balance exists, if not exists, create relevant account balance,
            then return the relevant account balance info.
            
            Moreover, dispatching newly period created to the reporting.
            </summary>
            <param name="balanceTenderMovement"><see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement"/></param>
            <returns>AccountBalanceInfo</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao.GetOrCreateDrawerAccountBalanceId(Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement)">
            <summary>
            Verify the existence of store balance period, if not exists, create the period and all relevant account balances
            then return the relevant account balance info.
            
            In case that the period already exists, verifying that the relevant account balance exists, if not exists, create relevant account balance,
            then return the relevant account balance info.
            
            Moreover, dispatching newly period created to the reporting.
            </summary>
            <param name="balanceTenderMovement"><see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalanceTenderMovement"/></param>
            <returns>AccountBalanceInfo</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao.GetAccountBalanceInfos(Retalix.StoreServices.Model.Finance.Balancing.AccountBalanceExternalKey[])">
            <summary>
            Tries to get a collection of Account Balance Info rows that were commited since the last time the thread read data from the DB.
            </summary>
            <param name="balanceExternalKeys">The keys of the Balances we are trying to read</param>
            <returns>A dictionary of AccountBalanceExternalId and the corresponding AccountBalanceInfo</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao.LookupAccountBalanceSummary(Retalix.StoreServices.Model.Finance.Balancing.AccountBalanceSummaryLookupCriteria)">
            <summary>
            Lookup account balance summaries for a certain <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see> in a certain <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>.
            The start and end dates are those of the relevant <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao.FindAccountBalance(Retalix.StoreServices.Model.Finance.Account.AccountId,System.DateTime,System.DateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.AbsoluteDateTime)">
            <summary>
            Lookup account balance  <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see> in a certain <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>.
            The start and end dates are those of the relevant <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>.
            </summary>
            <param name="accountId">The id of the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see> for which the balancing data is retrieved.</param>
            <param name="shiftStart">The shift start <see cref="T:Retalix.StoreServices.Model.Infrastructure.Globalization.AbsoluteDateTime">time</see> for which the balancing data is retrieved.</param>
            <param name="periodStartDate">The start date of the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see> for which the balancing data is retrieved.</param>
            <param name="periodEndDate">The end date of the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see> for which the balancing data is retrieved.</param>
            <returns>BalanceActivitySummaries, which are DTOs that hold amount aggregations (per tender) for a certain balancing activity</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao.GetBalancingAmounts(System.Int32,Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod)">
            <summary>
            Get the total balancing amounts
            </summary>
            <param name="accountBalanceId">Account Balance Id of <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance"/></param>
            <param name="storeBalancePeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao.LookupAccountBalanceSummary(Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod)">
            <summary>
            Lookup account balance summaries for a certain <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount">account</see> in a certain <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>.
            The start and end dates are those of the relevant <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">period</see>.
            </summary>
            <param name="storeBalancePeriod">  store period where to get the balance data from</param>
            <returns>BalanceActivitySummaries, which are DTOs that hold amount aggregations (per tender) for a certain balancing activity per account balance id</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao.GetConstantCarryOverAmount(Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance)">
            <summary>
            Returns records with activity type ConstantCaryOver from BalanceTenderSummarys for certain account balance
            </summary>
            <param name="accountBalance">account balance for search</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao.GetBalanceId(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Gets the balance ID for the relevant key
            </summary>
            <param name="businessunitId"></param>
            <param name="touchpointId"></param>
            <param name="businessDate"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalancingDao.IsReasonCodeUsed(System.String)">
            <summary>
            Check if reasonId was used by Settling Period process (CO_AccountBalance table)
            </summary>
            <param name="reasonId"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalanceApprovalValidator">
            <summary>
            Used to validate an <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance"/> before it is approved.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalanceApprovalValidator.Validate(Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance)">
            <summary>
            Validates the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance"/> before approval.
            </summary>
            <param name="accountBalance">The account balance to be validated</param>
            <exception cref="T:Retalix.StoreServices.Model.Infrastructure.Exceptions.BusinessException">Exception thrown in case validation fails</exception>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableProfile">
            <summary>
            An interface of a component containing rules relevant to the balancing of an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableProfile.CarryOverMethodName">
            <summary>
            Gets the <see cref="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableProfile.CarryOverMethodName">CarryOverMethodName</see> of the associated
            account (e.g. constant ,carry over).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableProfile.TenderAmounts">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Finance.TenderAmount">TenderAmount</see> of the associated
            for constant carry over method
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableProfile.OverReasonRestriction">
            <summary>
            Contains parameters which impact whether a reason is required in order to approve the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance"/> 
            when the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance"/> is in 'over' state (= OverShort value of the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance"/> is positive).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableProfile.ShortReasonRestriction">
            <summary>
            Contains parameters which impact whether a reason is required in order to approve the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance"/> 
            when the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance"/> is in 'short' state (= OverShort value of the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance"/> is negative).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableProfile.ShortBusinessActivityRestriction">
            <summary>
            Contains parameters which impact whether user is requiered to have the buisness activity to approve the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance"/> 
            when the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance"/> is in 'short' state (= OverShort value of the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance"/> is negative).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableProfile.OverBusinessActivityRestriction">
            <summary>
            Contains parameters which impact whether user is requiered to have the buisness activity to approve the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance"/> 
            when the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance"/> is in 'over' state (= OverShort value of the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalance"/> is positive).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableProfile.SetOverReasonRestriction(Retalix.StoreServices.Model.Finance.Balancing.ThresholdMethod,System.Decimal)">
            <summary>
            Sets the 'over' reason <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IThresholdRestriction"/>.
            </summary>
            <param name="method">The threshold method (e.g. Percentage)</param>
            <param name="value">The threshold value</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableProfile.SetShortReasonRestriction(Retalix.StoreServices.Model.Finance.Balancing.ThresholdMethod,System.Decimal)">
            <summary>
            Sets the 'short' reason  <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IThresholdRestriction"/>.
            </summary>
            <param name="method">The threshold method (e.g. Percentage)</param>
            <param name="value">The threshold value</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableProfile.SetOverBusinessActivityRestriction(Retalix.StoreServices.Model.Finance.Balancing.ThresholdMethod,System.Decimal)">
            <summary>
            Sets the 'over' business activity restriction  <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IThresholdRestriction"/>.
            </summary>
            <param name="method">The threshold method (e.g. Percentage)</param>
            <param name="value">The threshold value</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalanceableProfile.SetShortBusinessActivityRestriction(Retalix.StoreServices.Model.Finance.Balancing.ThresholdMethod,System.Decimal)">
            <summary>
            Sets the 'short' business activity restriction  <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IThresholdRestriction"/>.
            </summary>
            <param name="method">The threshold method (e.g. Percentage)</param>
            <param name="value">The threshold value</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDaoObserver">
            <summary>
            Interface used to implement an observer to <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao"/> actions
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDaoObserver.OnSaveCompleted(Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod)">
            <summary>
            Method called when an  <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> is saved
            </summary>
            <param name="storeBalancePeriod"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodByBusinessDayCreator">
            <summary>
            Responsible for creating a new business period based on a transaction.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodByBusinessDayCreator.CreatePeriodFor(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Finance.Balancing.StoreBalancingType,System.DateTime)">
            <summary>
            Creates and saves a period for the given date in the given store, according to the store's <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/>.
            </summary>
            <param name="store"></param>
            <param name="storeBalancingType"></param>
            <param name="transactionBusinessDay"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodObserver">
            <summary>
            Interface used to implement an observer to <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>'s actions
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodObserver.OnSettled(Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod)">
            <summary>
            Method called when StoreBalancePeriod Settle operation is completed
            </summary>
            <param name="storeBalancePeriod"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider">
            <summary>
            Component used to locate information required for Cash office balancing operations.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.GetLastDeclarationTransactionLog(Retalix.StoreServices.Model.Finance.Account.IAccount,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Get the log of the last <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> performed on the specified <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>
            prior to the given date.
            </summary>
            <param name="priorToDate">Lookup logs of <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>s performed prior to this date</param>
            <param name="account">The account on which the <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> was performed</param>
            <returns>The log of the last <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> performed</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.GetLastDeclarationByDateRange(Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Finance.Account.IAccount)">
            <summary>
             Get the log of the last <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> performed on the specified <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>
             between to the given dates.
            </summary>
             <param name="dayFrom">Lookup logs of <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>s performed after this date</param>
             <param name="dayTo">Lookup logs of <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>s performed before this date</param>
             <param name="account">The account on which the <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> was performed</param>
             <returns>The log of the last <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> performed between these dates</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.LookupDeclarationTransactionLogs(Retalix.StoreServices.Model.Finance.Account.IAccount,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Get the logs of all <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>s performed on the specified <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/>
            between to the given dates.
            </summary>
            <param name="account">The account on which the <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> was performed</param>
            <param name="fromDate">Lookup logs of <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>s performed after this date</param>
            <param name="toDate">Lookup logs of <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>s performed before this date</param>
            <returns>Logs of <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>s matching the search parameters</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.LookupFundTransferTransactionLogs(Retalix.StoreServices.Model.Finance.Account.IAccount,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Finance.CashOfficeActivityName},System.Nullable{System.Boolean})">
            <summary>
            Get the logs of <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction"/>s matching the given search parameters.
            </summary>
            <param name="account">The account on which the <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction"/> was performed</param>
            <param name="fromDate">Lookup logs of <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction"/>s performed after this date</param>
            <param name="toDate">Lookup logs of <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction"/>s performed before this date</param>
            <param name="cashOfficeActivityNames">Search for logs of <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction"/>s of this cash office activities</param>
            <param name="isSource">Search for logs of <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction"/>s where the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> is 
            the source (or isn't) according to this <see cref="T:System.Boolean"/> value</param>
            <returns>Logs of <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction"/>s matching the given search parameters</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.LaterRetailTransactionLogExists(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Checks if there are any <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/>s closed within the period dates but after the declaration date.
            </summary>
            <param name="touchPoint">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed on this touchPoint</param>
            <param name="declarationDate">The date of the <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/></param>
            <param name="periodFromDate">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed after this date</param>
            <param name="periodToDate">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed before this date</param>
            <returns>True/False (according to whether such a <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> exists or not)</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.FindSalesTenderSummaries(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Get sales tender summaries from <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> according to the given parameters.
            </summary>
            <param name="touchPoint">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed on this touchPoint</param>
            <param name="fromDate">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed after this date</param>
            <param name="toDate">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed before this date</param>
            <returns>The sale tender summaries from retail transactions found by the given parameters</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.FindCashbackTenderSummaries(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Get cashback tender summaries from <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> according to the given parameters.
            </summary>
            <param name="touchPoint">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed on this touchPoint</param>
            <param name="fromDate">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed after this date</param>
            <param name="toDate">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed before this date</param>
            <returns>The cash back tender summaries from retail transactions found by the given parameters</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.FindSalesActivitySummary(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Get sales Activity Summary (summary of tenders and amounts and the number of summed transactions) from <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> according to the given parameters.
            </summary>
            <param name="touchPoint">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed on this touchPoint</param>
            <param name="fromDate">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed after this date</param>
            <param name="toDate">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed before this date</param>
            <returns>The cash back tender summaries from retail transactions found by the given parameters and the transactions count</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.FindCashbackActivitySummary(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Get cashback Activity Summary(summary of tenders and amounts and the number of summed transactions) from <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> according to the given parameters.
            </summary>
            <param name="touchPoint">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed on this touchPoint</param>
            <param name="fromDate">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed after this date</param>
            <param name="toDate">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog"/> performed before this date</param>
            <returns>The cash back tender summaries from retail transactions found by the given parameters and the transactions count</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.ProcessTransactions(Retalix.StoreServices.Model.Finance.Account.IAccount,System.DateTime,System.DateTime,Retalix.StoreServices.Model.Finance.Balancing.TransactionAccumulating.IRetailTransactionsActivitySummariesAccumulator[])">
            <summary>
            This method looks up <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">retailTransactionLog</see>s according to first three parameters provided, 
            and processes them according to the handlers received (fourth parameter). The processing results (ActivitySummaries) reside on the handlers.
            </summary>
            <param name="tillAccount">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">retailTransactionLog</see>s performed on the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">touchPoint</see> 
            that's related to this till account</param>
            <param name="fromDate">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">retailTransactionLog</see>s performed after this date</param>
            <param name="toDate">Search for <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">retailTransactionLog</see>s performed before this date</param>
            <param name="transactionsAccumulators">These components are in charge of accumulating the <see cref="T:Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog">retailTransactionLog</see>s.
            The result of that accumulation (ActivitySummaries) is found on the handlers</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.GetPeriodStartDateFrom(Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod)">
            <summary>
            Suggests a start <see cref="T:System.DateTime"/> for the next <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> after the given one.
            </summary>
            <param name="storeBalancePeriod">The <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> after which to check</param>
            <returns>The suggested start <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.GetPeriodStartDateFrom(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog)">
            <summary>
            Return the business date of the given retail transaction log.
            </summary>
            <param name="retailTransactionLog">The transaction from which to get the business date</param>
            <returns>The business date from the transaction</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.GetPeriodStartDateFrom(Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog)">
            <summary>
            Return the business date of the given fund transfer transaction log.
            </summary>
            <param name="fundTransferTransactionLog">The transaction from which to get the business date</param>
            <exception cref="T:System.InvalidOperationException">Exception thrown in case <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog"/> has no business date</exception>
            <returns>The business date from the transaction</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider.GetPeriodStartDateFrom(Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog)">
            <summary>
            Return the business date of the given fund transfer transaction log.
            </summary>
            <param name="declarationTransactionLog">The transaction from which to get the business date</param>
            <exception cref="T:System.InvalidOperationException">Exception thrown in case <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog"/> has no business date</exception>
            <returns>The business date from the transaction</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProviderFactory">
            <summary>
            Component in charge of supplying an <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider"/> according to
            systems configuration.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProviderFactory.GetProvider(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Returns the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IBalancingDataProvider"/> suitable to the given <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>, based
            on the set <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration">configuration</see> for <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>
            or for one of it's parent <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnits</see>
            </summary>
            <param name="businessUnit"><see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/> used to locate configuration.</param>
            <returns>The provider created based on the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/> sent.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancePeriodLookupCriteria">
            <summary>
             keeps all the criteria options upon lookup for a specific store balance period
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancePeriodLookupCriteria.Store">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">IBusinessUnit</see> to which the balance periods belong to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancePeriodLookupCriteria.StoreId">
            <summary>
            Gets or sets the StoreId to which the balance periods belong to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancePeriodLookupCriteria.BalancingType">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancingType">StoreBalancingType</see> of balance period to search for, can be till balancing or safe balancing.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancePeriodLookupCriteria.ExternalId">
            <summary>
            Gets or sets the external id of the existing store balance period to return.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancePeriodLookupCriteria.IsSetteld">
            <summary>
            Gets or sets a flag indicating the balance period to search for should be settled or not
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancePeriodLookupCriteria.FromDate">
            <summary>
            Gets or sets the start date of the store balance period to search for.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancePeriodLookupCriteria.ToDate">
            <summary>
            Gets or sets the end date of the store balance period to search for.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancePeriodLookupCriteria.DateInRange">
            <summary>
            Gets or sets a date around which the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod">IStoreBalancePeriod</see> revolves, the search will locate periods using the 
            given date between startDate (including) and endDate (excluding).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancePeriodLookupCriteria.OrderByCreationDateDescending">
            <summary>
            Gets or sets a flag which indicates if the results of this search should be sorted according to creation date in a descending order, 
            the default order is ascending by creation date, i.e. first to last.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancePeriodLookupCriteria.Top">
            <summary>
            Gets or sets the top amount of results to return.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancePeriodLookupCriteria.Skip">
            <summary>
            Gets or sets the amount of results to skip.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao">
            <summary>
             provides all the DAL functionality involved in a store balance period
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao.Save(Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod)">
            <summary>
            Saves the given <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>.
            </summary>
            <param name="storeBalancePeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao.Get(System.String,System.Boolean)">
            <summary>
            Retrieve <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> by its external id.
            </summary>
            <param name="externalId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao.GetByStore(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Retrieve <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> by its associated <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao.FindByCriteria(Retalix.StoreServices.Model.Finance.Balancing.StoreBalancePeriodLookupCriteria,System.Boolean)">
            <summary>
            retrieve a list of <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> upon specific criteria
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao.FindAll">
            <summary>
            Retrieve all <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao.GetLast(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,Retalix.StoreServices.Model.Finance.Balancing.StoreBalancingType)">
            <summary>
            Retrieve latest <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> belonging to the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/> 
            according to the period end date and <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.StoreBalancingType"/>.
            </summary>
            <param name="store"></param>
            <param name="storeBalancingType"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao.GetPrevious(Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod)">
            <summary>
            Retrieve the previous <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> 
            (the one before the received storeBalancePeriod, according to the period end date).
            </summary>
            <param name="storeBalancePeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao.DeleteAll">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao.FindAccountBallance(Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod,Retalix.StoreServices.Model.Finance.Account.IAccount)">
            <summary>
            Find account balance by store balance period and account
            </summary>
            <param name="storeBalancePeriod">store balance period</param>
            <param name="account">account</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao.GetAccountBallance(System.Int32)">
            <summary>
            Get account balance by interal key.
            </summary>
            <param name="ik">internal key</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao.SaveAccountBallance(Retalix.StoreServices.Model.Finance.Balancing.IAccountBalance)">
            <summary>
            Save single 
            </summary>
            <param name="accountBalance">accountBalance</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodFactory">
            <summary>
             provides the functionality for store balance period creation thru a factory 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodFactory.Create(System.String,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Finance.Balancing.StoreBalancingType,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Creates a new <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> according to a <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>s StoreCode,
            and populates it with accounts according to the accountProfileName, according to the given start and end dates.
            <para>This Method will not save the created period, see <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriodDao"/>.</para>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Balancing.Exception.StoreBalancingNoActivitiesException">
            <summary>
             This exception will be thrown when trying to retrieve cash office activity transactions 
             that were performed in an <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/>, when there are none.
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Balancing.Exception.StoreBalancingNoActivitiesException.#ctor(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
             Public constructor receiving the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/> on which the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> is defined.
            </summary>
            <param name="businessUnit">The business unit on which the <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> is defined</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.DrawerLimitConfiguration">
            <summary>
            Holds Configuration for the drawer's limit amount and the tenders participating in the calculation of this amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.DrawerLimitConfiguration.Amount">
            <summary>
            The drawer limit amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.DrawerLimitConfiguration.ParticipatingTenders">
            <summary>
            Tenders participating in the drawer exceeded limit calculation.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IActivityReferenceConfiguration">
            <summary>
            Defines configuration of Reference to CashOfficeActivity (holds that activity name 
            and the reference).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IActivityReferenceConfiguration.Id">
            <summary>
            Uniquely identifies each Activity Reference Configuration.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IActivityReferenceConfiguration.ActivityName">
            <summary>
            The CashOfficeActivity (e.g. TenderLoan, PayIn, ...)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IActivityReferenceConfiguration.IsReferenceMandatory">
            <summary>
            The Boolean flag to indicate if Reference is mandatory or not for this activity.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IActivityReferenceConfigurationDao">
            <summary>
            Provides CRUD functionality for <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IActivityReferenceConfiguration"/> (used to persist and retrieve instances).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IActivityReferenceConfigurationDao.AddOrUpdate(Retalix.StoreServices.Model.Finance.Configuration.IActivityReferenceConfiguration)">
            <summary>
            Add or Update the ActivityReference Configuration
            </summary>
            <param name="activityReferenceConfiguration"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IActivityReferenceConfigurationDao.GetAll">
            <summary>
            Retrieves all <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IActivityReferenceConfiguration"/>s in the system.
            </summary>
            <returns>All <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IActivityReferenceConfiguration"/>s in the system</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IActivityReferenceConfigurationDao.Get(System.String)">
            <summary>
            Get the reference configuration with the specific activityName
            </summary>
            <param name="activityName"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IActivityReferenceConfigurationDao.Delete(System.String)">
            <summary>
            Deletes the ActivityReference Configuration with the specific activityName.
            </summary>
            <param name="activityName"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.BalancePeriodSchedulingConfigurationCriteria">
            <summary>
            Search criteria for <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/>s.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.BalancePeriodSchedulingConfigurationCriteria.BusinessUnit">
            <summary>
            The Business Unit (for which to search).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration">
            <summary>
             Holds configuration for CashOffice definitions for a drawer. 
             Contains information regarding the limit amount for the drawer and the <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/>s involved.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration.RetailSegment">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see> associated with this configuration.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration.DrawerLimitConfiguration">
            <summary>
            The drawer's limit configuration.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration.BusinessUnit">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see> associated with this configuration.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfigurationDao">
            <summary>
            Provides CRUD functionality for <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration"/> (e.g. used to persist and retrieve instances).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfigurationDao.SaveOrUpdate(Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration)">
            <summary>
            Saves the <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration"/> instance, in case of a pre-existing instance, 
            the existing instance will be replaced with the updated one.
            </summary>
            <param name="configuration">The configuration to be saved</param>
            <returns>The saved configuration</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfigurationDao.Delete(Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
            Deletes the <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration">configuration</see> associated to this 
            <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see>.
            </summary>
            <param name="retailSegment">The <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see> associated with the configuration to be deleted</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfigurationDao.Delete(Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Deletes the <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration">configuration</see> associated to this 
            <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see> and <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see>.
            </summary>
            <param name="retailSegment">The <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see> associated with the configuration to be deleted</param>
            <param name="businessUnit">The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see> associated with the configuration to be deleted</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfigurationDao.GetAll">
            <summary>
            Retrieves all existing <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration"/>s in the system.
            </summary>
            <returns>All existing <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration"/>s in the system</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfigurationDao.GetBy(Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
            Retrieves an <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration"/> associated to the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment"/> sent.
            </summary>
            <param name="retailSegment">The <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment"/> associated with the configuration searched for</param>
            <returns>The configuration associated to the retail segment sent</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfigurationDao.GetBy(Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Retrieves the <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration">configuration</see> associated to this 
            <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see> and <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see>.
            </summary>
            <param name="retailSegment">The <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment">RetailSegment</see> associated with the configuration searched for</param>
            <param name="businessUnit">The <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit">BusinessUnit</see> associated with the configuration searched for</param>
            <returns>The configuration associated to the retail segment and business unit sent</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfigurationDao.FindByCriteria(Retalix.StoreServices.Model.Infrastructure.Query.IQuery)">
             <summary>
             Retrieves <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration">configuration</see>s according to various criteria.
             </summary>
            <param name="query">query criteria sort and paging section</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfigurationDao.DeleteAll">
            <summary>
             Deletes all <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IDrawerCashOfficeConfiguration"/> instances from the system.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IAutomatedOpeningFundsExecuter">
            <summary>
             Executer for an automated Opening Funds process.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IAutomatedOpeningFundsExecuter.Execute(Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            Executes Automatic opening funds operations according to the <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/>
            found for the given <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint"/>.
            </summary>
            <param name="touchPoint">The <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint"/> for which the automatic opening funds will be done</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.ICarryOverOpeningFundsStrategy">
            <summary>
            Opening funds Carry Over strategy, only a single Active (IOC activated) implementation is allowed.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsStrategy">
            <summary>
             Strategy for <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/> allocation 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsStrategy.Execute(Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration,Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint)">
            <summary>
            Executes a specific opening funds operation on the given <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint"/>
            based on it's <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/>.
            </summary>
            <param name="openingFundsConfiguration">The configuration that the strategy is based on</param>
            <param name="touchPoint">The touchPoint for which the strategy is executed</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IOpenFundsPerCashierStrategy.Execute(Retalix.StoreServices.Model.Finance.Balancing.IShiftAccount,Retalix.StoreServices.Model.Finance.Balancing.ShiftStartTriggeringEvent)">
            <summary>
            Executes a specific opening funds operation on the given 
            based on it's touch point
            </summary>
            <param name="shiftAccount">The configuration that the strategy is based on</param>
            <param name="triggeringEvent"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IOpenFundsPerCashierStrategy.IsManualLoanNeeded">
            <summary>
            Determines whether manual loan is needed.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IOpenLoanOpeningFundsStrategy">
            <summary>
            Opening funds Open Loan strategy, only a single Active (IOC activated) implementation is allowed.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsConfigurationCreationArgs">
            <summary>
            Contains information required to create an instance of <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/>.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsConfigurationCreationArgs.ExternalId">
            <summary>
            External Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsConfigurationCreationArgs.RetailSegments">
            <summary>
             The <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment"/>s this configuration will assigned to
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsConfigurationCreationArgs.OpeningFundsMethod">
            <summary>
            Opening funds method
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsConfigurationCreationArgs.OpeningFundsTriggeringEvent">
            <summary>
            Opening funds triggering event (e.g. AfterEndOfDay)
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsMethod">
            <summary>
            Contains the available options for an <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/> method.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsMethod.Manual">
            <summary>
            Opening funds are to be supplied manually according to store policy.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsMethod.OpenLoan">
            <summary>
            Opening funds are assigned automatically at the beginning of each day.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsMethod.CarryOver">
            <summary>
            Opening funds are carried over from a prior period/business day.
            This method does not allow for <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsPredefinedTenderAmount"/> to be used.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsMethod.ManualStartShiftAddLoan">
            <summary>
            Opening funds are to be supplied on login from add loan screen.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfigurationFactory">
            <summary>
            Factory in charge of instantiating new instances of <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/>.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfigurationFactory.Create(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Creates a new instance of <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/> with the given <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>.
            </summary>
            <param name="businessUnit">The business unit that the new <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/> is relevant for</param>
            <returns>The new created <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancingDaySchedule">
            <summary>
            Daily scheduling settings for <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/> (Till and Safe)
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IBalancingDaySchedule.IsTillBalancing">
            <summary>
            Defines whether an <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> of type "till" should be scheduled for the specified ScheduleDay.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IBalancingDaySchedule.IsSafeBalancing">
            <summary>
            Defines whether an <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> of type safe should be scheduled for the specified ScheduleDay.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IBalancingDaySchedule.ScheduleDay">
            <summary>
            The day of week for which an <see cref="T:Retalix.StoreServices.Model.Finance.Balancing.IStoreBalancePeriod"/> should be scheduled.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.CashOfficeBalancingMethod">
            <summary>
            CashOffice balancing method - can be manual or linked to EOD.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.CashOfficeBalancingMethod.#ctor(System.String)">
            <summary>
            Public constructor receiving the balancing method as string.
            </summary>
            <param name="balancingMethod"></param>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Configuration.CashOfficeBalancingMethod.Manual">
            <summary>
            PeriodBalance Manual Mode
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Configuration.CashOfficeBalancingMethod.LinkedToEndOfDay">
            <summary>
            PeriodBalance Linked To End Of Day Mode
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration.ExternalId">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration.OpeningFundsMethod">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration.OpeningFundsTriggeringEvent">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration.RetailSegments">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration.PredefinedTenderAmounts">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration.SetPredefinedTenderAmount(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration.ResetPredefinedTenderAmounts">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration.Validate">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfigurationDao">
            <summary>
            Provides CRUD functionality for <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/> (used to persist and retrieve instances).
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfigurationDao.Save(Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration)">
            <summary>
            Saves the configuration instance, incase of a pre-existing instance (identified by it's external id) ,
            the existing instance will be replaced with the updated one.
            </summary>
            <param name="openingFundsConfiguration">The configuration to be saved</param>
            <returns>The saved configuration</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfigurationDao.Delete(System.String)">
            <summary>
            Deletes the <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/> instance having the external id sent.
            </summary>
            <param name="configurationExternalId">The ExternalId associated with the configuration to be deleted</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfigurationDao.GetAll">
            <summary>
            Retrieves all <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/>s in the system.
            </summary>
            <returns>All <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/>s in the system</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfigurationDao.GetBy(System.String)">
            <summary>
            Retrieves an <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/> that has the external id sent.
            </summary>
            <param name="externalId">The id by which to search for the configuration (is unique and therefore only one result is expected)</param>
            <returns>The configuratino that was retrieved</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfigurationDao.GetBy(Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment)">
            <summary>
            Retrieves a <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/> that matches the <see cref="T:Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment"/> sent.
            </summary>
            <param name="retailSegment">The retail segment for which to retrieve the <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/></param>
            <returns>The configuration found</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfigurationDao.DeleteAll">
            <summary>
             Deletes all instances of <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/>s in the system.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfigurationFactory">
            <summary>
            Used to instantiate new instances of <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/>.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfigurationFactory.Create(Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsConfigurationCreationArgs)">
            <summary>
            Creates a new <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/> according to the given arguments 
            (the new instance will have properties according to the given arguments).
            </summary>
            <param name="configurationCreationArgs">Arguments used in when creating a new instance of <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/></param>
            <returns>The new configuration created</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsPredefinedTenderAmount">
            <summary>
            Represents a predefined <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/> and a <see cref="N:Retalix.StoreServices.Model.Finance.Money"/> amount for an <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsConfiguration"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsPredefinedTenderAmount.Tender">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/> used.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsPredefinedTenderAmount.Amount">
            <summary>
            Amount of specified tender to be added.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsTriggeringEvent">
            <summary>
            Opening Funds Triggering Events 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsTriggeringEvent.AfterEndOfDay">
            <summary>
            Opening funds will be triggered directly after End Of Day process is completed successfully.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsTriggeringEvent.OnSignIn">
            <summary>
            Opening funds will be triggered directly after Sign In, it is up to the executed <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IOpeningFundsStrategy"/>
            to implement a mechanism that will allow only a single call per period.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Configuration.OpeningFundsTriggeringEvent.None">
            <summary>
            Opening funds will not be triggered by core events, extensions can override this option and choose
            to activate opening funds according to a previously unknown event by calling  <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IAutomatedOpeningFundsExecuter"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration">
            <summary>
            Configuration for the Balance Period Scheduling
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration.BalancingMethod">
            <summary>
            Defines the balancing method for a certain <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration.BusinessUnit">
            <summary>
            The <see cref="P:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration.BusinessUnit"/> this configuration is attached to.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration.AddOrUpdateBalancingDaySchedule(System.DayOfWeek,System.Boolean,System.Boolean)">
            <summary>
            Add or update an <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancingDaySchedule"/>.
            </summary>
            <param name="dayOfWeek">The <see cref="T:System.DayOfWeek"/> for which the balancing is scheduled</param>
            <param name="isSafeBalancingScheduled">Value represents whether it's safe balancing or not</param>
            <param name="isTillBalancingScheduled">Value represents whether it's till balancing or not</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration.GetBalancingDaySchedule(System.DayOfWeek)">
            <summary>
            Retrieve the <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancingDaySchedule"/> for the given day.
            </summary>
            <param name="dayOfWeek">The <see cref="T:System.DayOfWeek"/> for which the retrieve is done</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancingDaySchedule"/> found by the criteria</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration.BalancingDaySchedules">
            <summary>
            Retrieve all the <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancingDaySchedule"/> that exist in the system.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfigurationDao">
            <summary>
            Dao for saving, updating, deleting and fetching <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/>s.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfigurationDao.Save(Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration)">
            <summary>
            Saves or updates the <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/>.
            </summary>
            <param name="cashOfficeConfiguration">Configuration to be saved (updated)</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfigurationDao.Get(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Gets the <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/> for the given <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>.
            </summary>
            <returns>The schedule found by criteria</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfigurationDao.Delete(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Deletes the <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/> for the given <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfigurationDao.Lookup(Retalix.StoreServices.Model.Finance.Configuration.BalancePeriodSchedulingConfigurationCriteria)">
            <summary>
            Finds <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/>s according to the search Criteria.
            </summary>
            <param name="searchCriteria">Criteria upon which the search is done (including, for instance, <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/>)</param>
            <returns>The <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/>s found according to the search citeria</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfigurationDao.DeleteAll">
            <summary>
             Deletes all the <see cref="T:Retalix.StoreServices.Model.Finance.Configuration.IBalancePeriodSchedulingConfiguration"/> from the system.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IRemovePaymentForDepositFromAutoReconciledTenders.Execute(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog,System.Collections.Generic.IDictionary{System.String,Retalix.StoreServices.Model.Finance.Money.Money},System.Collections.Generic.Dictionary{System.String,Retalix.StoreServices.Model.Finance.Money.ExchangeMoney})">
            <summary>
            Removes payment for deposit from auto reconciled tenders
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogReader">
            <summary>
            Used for parsing a string which represents a log document of type Declaration Transaction into a IDeclarationTransactionLog object.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogReader.TryToRead(System.String,Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog@)">
            <summary>
            Tries to read the document content string into a IDeclarationTransactionLog object.
            </summary>
            <param name="documentContent">Content of the document.</param>
            <param name="declarationTransactionLog"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogReader.TryToRead(Retalix.StoreServices.Model.Document.TDM.IRawDocument,Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog@)">
            <summary>
            Tries to read the document properties into a IDeclarationTransactionLog object.
            </summary>
            <param name="rawDocument">Content of the document.</param>
            <param name="declarationTransactionLog"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Declaration.DeclarationDenominationCreationArgs">
            <summary>
             Contains data for creating <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogLine"/>'s denomination.
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationDenominationCreationArgs.Denomination">
            <summary>
             The line's denomination.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationDenominationCreationArgs.Quantity">
            <summary>
             Quantity of the denomination on the line.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs">
            <summary>
            Class containing the arguments required to create a new <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog"/>
            (a log of an <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>).
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.StoreCode">
            <summary>
            StoreCode of the <see cref="T:Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit"/> where the transaction occurred.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.TouchPointId">
            <summary>
            Id of the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint"/> where the <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> occurred (will be null if the transaction came from the Office client).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.Location">
            <summary>
            Location where the <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> occurred (e.g. TouchPoint, Office).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.UserName">
            <summary>
            UserName of the <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser"/> that initiated the <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.Account">
            <summary>
            External Id of the <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> on which the <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> was made.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.OperatorId">
            <summary>
            User id of the <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser"/> that initiated the <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.CreationDate">
            <summary>
            <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>'s creation date.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.DeclarationDate">
            <summary>
            Date when the <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> occured.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.SequenceNumber">
            <summary>
             The <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> log's sequence number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.TransactionExternalId">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> log's External Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.IsTrainingMode">
            <summary>
            True when the  <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/> was done in training mode (false otherwise).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.BusinessDate">
            <summary>
            The relevant business date of the <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.TenderIdsAndAmounts">
            <summary>
            A collection of tender ids and amounts, will be used to create <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogLine"/>s.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs.TenderIdsAndDenominations">
            <summary>
             A collection of tender ids and denominations, will be used to create <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogLine"/>s.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionObserverBase">
            <summary>
            Default implementation of IDeclarationTransactionObserver
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogFactory">
            <summary>
            A factory for creating movable declaration transaction logs.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogFactory.Create(Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogCreationArgs)">
            <summary>
            A method for creating a new movable log according to the provided args.
            </summary>
            <param name="creationArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionObserver">
            <summary>
            Interface used to implement an observer to <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>'s actions
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionObserver.OnClosed(Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog)">
            <summary>
            Method called when DeclarationTransaction Close operation is about to be completed
            </summary>
            <param name="delcarationTransactionLog"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionObserver.OnLogCreated(Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog)">
            <summary>
            Method called after <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog"/> was created during DeclarationTransaction Close opration
            </summary>
            <param name="delcarationTransactionLog"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction">
            <summary>
            A transaction of declaration of tenders and amounts on some account. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction.IsClosed">
            <summary>
            Flag indicating that the Transaction is closed. Flag is set by the "Close" method.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction.AddLine(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Adds a line to the transaction with the declared tender and its amount.
            </summary>
            <param name="tender">The declared tender</param>
            <param name="amount">The declared amount</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction.AddLine(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Finance.Money.Denomination,System.Int32)">
            <summary>
            Adds a line to the transaction with the declared tender, its denomination, and the quantity of the denomination.
            </summary>
            <param name="tender">The declared tender</param>
            <param name="denomination">the denomination of the tender</param>
            <param name="denominationQuantity">the quantity of the denomination</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction.Close(Retalix.StoreServices.Model.Finance.ActivityLocation,Retalix.StoreServices.Model.Finance.Account.IAccount,Retalix.StoreServices.Model.Infrastructure.Globalization.AbsoluteDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.AbsoluteDateTime)">
            <summary>
            Closes the DeclarationTransaction (and creates a log and saves it).
            </summary>
            <param name="activityLocation">Location where the transaction occured (TouchPoint/Office + Store)</param>
            <param name="account">External Id of the account on which the declaration was made</param>
            <param name="creationDate">Creation datetime of the transaction</param>
            <param name="declarationDate">Signifies the point in time when the declaration transaction occured,
            if received null, the CreationDate will be set. If not, will set the date received minus 1 second.
            </param>
            <returns></returns>
        </member>
        <member name="E:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction.BeforeAddLine">
            <summary>
            event called as the first line inside AddLine method
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction.BalanceShiftStart">
            <summary>
            the shift start of the relevant cashier pos
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogSearchCriteria">
            <summary>
            Search criteria for <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog"/>s.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogSearchCriteria.DeclarationTransactionLogDao">
            <summary>
             Dao name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogSearchCriteria.SequenceNumbers">
            <summary>
            Logs with these sequence numbers will be returned.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogSearchCriteria.StoreCode">
            <summary>
            Logs of transactions that occurred in the store with this StoreCode will be returned.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogSearchCriteria.Activity">
            <summary>
            Type of the activity - can only be CashOfficeActivityName.SafeDeclaration or CashOfficeActivityName.TillDeclaration
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogSearchCriteria.DeclaredFrom">
            <summary>
            Logs of <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>s that occurred on (or after) this date will be returned (according to <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog"/>.DeclarationDate).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogSearchCriteria.DeclaredTo">
            <summary>
            Logs of <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>s that occurred on (or before) this date will be returned (according to DeclarationTransactionLog.DeclarationDate).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Declaration.DeclarationReceiptPayment">
            <summary>
            A struct representing data for the declaration receipt (used at the end of an <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransaction"/>).
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Declaration.DeclarationReceiptPayment.TenderId">
            <summary>
            Id of the declared <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/>.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Declaration.DeclarationReceiptPayment.TenderName">
            <summary>
            Name of the declared <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/>.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Declaration.DeclarationReceiptPayment.Amount">
            <summary>
            Amount of the declared <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/>.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Declaration.DeclarationReceiptPayment.Quantity">
            <summary>
            Quantity of the declared <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType"/>.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.Declaration.DeclarationReceiptPayment.IsVoid">
            <summary>
            Indicate that Void was called for this object.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog">
            <summary>
            The log of a DeclarationTransaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog.Account">
            <summary>
            External Id of the account on which the transaction was made.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog.AccountName">
            <summary>
            Name of the account on which the transaction was made.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog.DeclarationDate">
            <summary>
            Date when the declaration transaction occurred.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog.SequenceNumber">
            <summary>
             The transaction log's sequence number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog.Lines">
            <summary>
            A collection of <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogLine"/>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog.TotalAmount">
            <summary>Gets or sets the sum of tender line amounts in local currency</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog.OverShort">
            <summary>
            The <see cref="T:Retalix.StoreServices.Model.Finance.Funds">OverShort</see> value in the system when the declaration occured.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog.IsUpToDate">
            <summary>
            Flag to identify if the OverShort is updated when the HQ was online
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog.EndDateTime">
            <summary>
            Gets / sets Db recordset time
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog.ActivityName">
            <summary>Type of declaration: Till or Safe</summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDao">
            <summary>
             provides the DAL functionality related to DeclarationTransactionLog
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDao.Save(Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog)">
            <summary>
            Saves the given declaration transaction log.
            </summary>
            <param name="declarationTransactionLog"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDao.Get(System.Int32,System.DateTime,System.String,System.String)">
            <summary>
            Get declaration transaction log according to the given parameters.
            </summary>
            <param name="sequenceNumber"></param>
            <param name="creationDate"></param>
            <param name="storeCode"></param>
            <param name="touchPointId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDao.Get(Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogSearchCriteria)">
            <summary>
            Get declaration transaction log according to the given parameters.
            </summary>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDao.GetLast(System.DateTime,System.String,System.String)">
            <summary>
            Get transaction log of the last declaration transaction that occured up to and including the given date, 
            belonging to the given account.
            </summary>
            <param name="declarationDateTo"></param>
            <param name="accountId"></param>
            <param name="storeCode">StoreCode is important for query performance. Provide StoreCode in order to use correct TDM connection and use main index in DB.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDao.GetLastByBusinessDate(System.DateTime,System.String,System.String)">
            <summary>
            Get transaction log of the last declaration transaction that occurred up to and including the given business date, 
            belonging to the given account.
            </summary>
            <param name="businessDate"></param>
            <param name="accountId"></param>
            <param name="storeCode">StoreCode is important for query performance. Provide StoreCode in order to use correct TDM connection and use main index in DB.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDao.GetLastByBusinessDateRange(System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
             Get transaction log of the last declaration transaction that occurred in specifed range of business days, 
             belonging to the given account.
            </summary>
            <param name="businessDayFrom"></param>        
            <param name="businessDayTo"></param>
            <param name="accountId"></param>
             <param name="storeCode">StoreCode is important for query performance. Provide StoreCode in order to use correct TDM connection and use main index in DB.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDao.Lookup(System.String,System.DateTime,System.DateTime,System.String)">
            <summary>
            Lookup DeclarationTransactionLogs according to the given parameters.
            </summary>
            <param name="accountExternalId"></param>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="storeCode">StoreCode is important for query performance. Provide StoreCode in order to use correct TDM connection and use main index in DB.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDao.Lookup(Retalix.StoreServices.Model.Finance.Declaration.DeclarationTransactionLogSearchCriteria)">
            <summary>
            Lookup DeclarationTransactionLogs according to the search criteria received.
            </summary>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDao.GetFirst(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Get the log of the first DeclarationTransaction in the store (according to CreationDate).
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDaoObserver">
            <summary>
            Interface used to implement an observer to <see cref="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDao"/>'s
            actions
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDaoObserver.OnSaveCompleted(Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog)">
            <summary>
            Method called incase save of a DeclarationTransactionLog was completed successfully.
            </summary>
            <param name="declarationTransactionLog"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogDaoObserver.OnSaveFailed(Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog)">
            <summary>
            Method called incase save of a DeclarationTransactionLog failed.
            </summary>
            <param name="declarationTransactionLog"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogLine">
            <summary>
            The log of a line in DeclarationTransaction (containing the tender and amount).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogLine.TenderId">
            <summary>
            External Id of the Tender declared in the TransactionLine
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogLine.Amount">
            <summary>
            Amount declared in the TransactionLine
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLogLine.Denominations">
            <summary>
             A collection of <see cref="T:Retalix.StoreServices.Model.Finance.Money.ILineDenomination"/>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.Events.FundTransferTransactionAdjustingEvent">
            <summary>
            Represents a Fund Transfer Transaction Adjustment event that occurred after updating a <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog">FundTransferTransactionLog</see>> .
            The event contains IFundTransferTransactionLog, SourceAccount, TargetAccount and BusinessUnit with information about the FundTransferTransaction 
            that move form account to account from specific businees unit.
            </summary>
            <remarks>
            This event will be dispatched via the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEventsDispatcher">Dispatcher</see> when <br></br>
            a new MonetaryActivitiesAdjustmentService action was done.<br></br>
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.IAutoReconcileFundTransferTransaction">
            <summary>
            A transaction where funds are transferred from some account to another with auto reconcile.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IAutoReconcileFundTransferTransaction.OperatorId">
            <summary>
            The identifier which performs auto reconcile fund transfer transaction.
            </summary>
            <remarks>
            The identifier represents <see cref="T:Retalix.StoreServices.Model.Organization.User.IUser">IUser</see> Id or <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see> Id.
            </remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IAutoReconcileFundTransferTransaction.UserName">
            <summary>
            The user name which performs auto reconcile fund transfer transaction.
            </summary>
            <remarks>
            When the <see cref="T:Retalix.StoreServices.Model.Organization.TouchPoint.ITouchPoint">ITouchPoint</see> performs auto reconcile fund transfer transaction
            UserName value will be null.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IAutoReconcileTransactionAdaptor.HandleFundTransferTransactionForAutoReconcileTenders(Retalix.StoreServices.Model.Selling.RetailTransaction.RetailTransactionLog.IRetailTransactionLog)">
            <summary>
            Create lof of AutoReconcile transaction for auto reconcile tenders in the retail transaction.
            </summary>
            <param name="retailTransactionLog"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IAutoReconcileTransactionAdaptor.HandleFundTransferTransactionForAutoReconcileTenders(Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog,System.String)">
            <summary>
            Create lof of AutoReconcile transaction for auto reconcile tenders in fund transfer transaction.
            </summary>
            <param name="fundTransferTransactionLog"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogAdjustmentTransaction.Create(Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog,System.Int32,System.Decimal,System.String)">
            <summary>
            This method gets a <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog">fundTransferTransactionLog</see> and performs 
            adjustment on the relevant line (the key is the tender type's id).
            </summary>
            <param name="fundTransferTransactionLogToAdjust">The original log that's going to be adjusted</param>
            <param name="adjustedTenderTypeId">The tender who's amount will be adjusted</param>
            <param name="adjustedValue">The adjustment value</param>
            <param name="adjustmentReason">The reason for adjustment</param>
            <returns>The new log after adjustment</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogAdjustmentTransaction.Create(Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog,System.Int32,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Finance.Money.ILineDenomination},System.String)">
            <summary>
            This method gets a <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog">fundTransferTransactionLog</see> and performs 
            adjustment of the denominations on the relevant line (the key is the tender type's id).
            </summary>
            <param name="fundTransferTransactionLogToAdjust">The original log that's going to be adjusted</param>
            <param name="adjustedTenderTypeId">The tender who's denominations will be adjusted</param>
            <param name="lineDenominations">The adjusted denominations for this line</param>
            <param name="adjustmentReason">The reason for adjustment</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLink">
            <summary>
            This interface holds data of the original <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog">fundTransferTransactionLog</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLink.BusinessUnitId">
            <summary>
            Getter for an id belonging to the business unit where the original transaction took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLink.TransactionSequenceNumber">
            <summary>
            Getter for the sequence number assigned to the original transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLink.TouchPointId">
            <summary>
            Getter for an id belonging to the TouchPoint at which the original transaction took place (in case a till account was involved).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLink.EndDateTime">
            <summary>
            Getter for a dateTime representing when the original transaction was closed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLink.BusinessDayDate">
            <summary>
            Getter for a dateTime representing the original transaction's business date.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.IncludedTaxLogLine">
            <summary>
            A log line representing the included tax in a transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IncludedTaxLogLine.TaxType">
            <summary>
            Gets or sets the tax's type, e.g. "VAT".
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IncludedTaxLogLine.TaxAmount">
            <summary>
            Gets or sets the amount of the tax.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.EventArgs.ClosingEventArgs">
            <summary>
            Arguments before closing Fund Transfer Transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.EventArgs.ClosingEventArgs.ActivityLocation">
            <summary>
            Location of the fund transfer transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.EventArgs.ClosingEventArgs.SourceAccount">
            <summary>
            Source account
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.EventArgs.ClosingEventArgs.TargetAccount">
            <summary>
            Target account
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.EventArgs.ClosingEventArgs.Reference">
            <summary>
            Reference
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.EventArgs.ClosingEventArgs.CreationDate">
            <summary>
            Creation date and time of the fund transfer transaction
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.EventArgs.ClosedEventArgs">
            <summary>
            Arguments after closing Fund Transfer Transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.EventArgs.ClosedEventArgs.FundTransferlog">
            <summary>
            Fund Transfer Transaction
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTLogReaderFactory">
            <summary>
            Interface for Fund Transfer Transaction Log Reader Factory
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTLogReaderFactory.GetFundTransferTransactionLogReader(System.String,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime,Retalix.StoreServices.Model.Finance.CashOfficeActivityName)">
            <summary>
            Get appropriate FundTransferTransactionLog Reader according to transaction type
            </summary>
            <param name="logDocumentText"></param>
            <param name="businessDate"></param>
            <param name="fundTransferTransactionType"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTLogReaderFactory.GetFundTransferTransactionLogReader(System.String)">
            <summary>
            Get appropriate FundTransferTransactionLog Reader given the document xml only
            </summary>
            <param name="logDocumentText"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTLogReaderFactory.GetFundTransferTransactionLogReader(Retalix.StoreServices.Model.Document.TDM.IRawDocument)">
            <summary>
            Get appropriate FundTransferTransactionLog Reader given the document xml only
            </summary>
            <param name="rawDocument">Content of the document.</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogBuilder">
            <summary>
            The builder of Fund Transfer Transaction Log document
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogBuilder.GetLogDocument(Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog)">
            <summary>
            Build and return a new Fund Transfer Transaction Log with the document xml inside
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader">
            <summary>
            Interface for Fund Transfer Transaction Log Reader (read from the TLog document into properties)
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.GetTransactionLogInstance">
            <summary>
            Returns a Fund Transfer TLog instance based on 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.Document">
            <summary>
            get the TLog document xml
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.TransactionDomainSpecific">
            <summary>
            get the ARTS TransactionDomainSpecific representation converted from the Xml
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadLocation">
            <summary>
            Read the Location
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadOperatorId">
            <summary>
            Read the Operator Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadOperatorType">
            <summary>
            Read the Operator Type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadLogLines">
            <summary>
            Read the Fund Transfer Transaction Log Lines
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadTaxLogLines">
            <summary>
            Read the transaction log's tax lines
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadReference">
            <summary>
            Read the Fund Transfer Transaction Reference
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadUserName">
            <summary>
            Read the User Name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadTransactionExternalId">
            <summary>
            Read the Transaction External Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadBusinessDate">
            <summary>
            Read the Business Date
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadTransactionLinks">
            <summary>
            Read the <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLink">link</see>s from the Document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadCreated">
            <summary>
            Read the Creation date
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadBalanceShiftStart">
            <summary>
            Read the ShiftStart date
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadFundTransferTransactionType">
            <summary>
            Read the Fund Transfer Transaction Type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadIsTrainingMode">
            <summary>
            Read Training Mode flag
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadSourceAccount">
            <summary>
            Read the Source Account
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadStoreCode">
            <summary>
            Read the Store Code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadTargetAccount">
            <summary>
            Read the Target Account
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadTouchPointId">
            <summary>
            Read the Touch Point Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadTouchPointType">
            <summary>
            Read the Touch Point Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadTransactionSequenceNumber">
            <summary>
            Read the Transaction Sequence Number
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadSourceAccountName">
            <summary>
            Read the Source Account Name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogReader.ReadTargetAccountName">
            <summary>
            Read the Target Account Name
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.ManagerCredentials">
            <summary>
            Manager credentials 
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.ManagerCredentials.UserName">
            <summary>
            Manager username
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.ManagerCredentials.Password">
            <summary>
            Manager password
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.FundTransferTransactionObserverBase">
            <summary>
            Default implementation of IFundTransferTransactionObserver
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionObserver">
            <summary>
            Interface used to implement an observer to <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction"/>'s actions
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionObserver.OnClosed(Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog)">
            <summary>
            Method called when FundTransferTransaction Close operation is about to be completed
            </summary>
            <param name="fundTransferTransactionLog"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionObserver.OnLogCreated(Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog)">
            <summary>
            Method called after <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog"/> was created during FundTransferTransaction Close opration
            </summary>
            <param name="fundTransferTransactionLog"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionObserver.OnAdjust(Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog)">
            <summary>
            Method called after <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog"/> was was adjusted.
            </summary>
            <param name="fundTransferTransactionLog"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction">
            <summary>
            A transaction where funds are transferred from some account to another (for example, in a process of Pickup).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.IsClosed">
            <summary>
            Flag indicating that the Transaction is closed. Flag is set by the "Close" method.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.RelatedDepositedTransactionsIds">
            <summary>
            Related deposited transaction ids.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.AddLine(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Adds a line to the transaction with the transferred tender and its amount.
            </summary>
            <param name="tender">The tender transferred</param>
            <param name="amount">The amount transferred</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.AddLine(Retalix.StoreServices.Model.Tender.TenderType.ITenderType,Retalix.StoreServices.Model.Finance.Money.Denomination,System.Int32)">
            <summary>
            Adds a line to the transaction with the transferred <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender</see>, its <see cref="T:Retalix.StoreServices.Model.Finance.Money.Denomination">denomination</see>, and the quantity of the denomination.
            In case there's already an existing line with this <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">tender</see>'s id, a new log line won't be added, but a new denomination line will
            be added to the relevant tender line.
            </summary>
            <param name="tender">The transferred tender</param>
            <param name="denomination">The denomination of the tender</param>
            <param name="denominationQuantity">The quantity of the denomination</param>
        </member>
        <member name="E:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.Closing">
            <summary>
            Occurs before closing the existing <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction">IFundTransferTransaction</see>.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.Closed">
            <summary>
            Occurs after closing the existing <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction">IFundTransferTransaction</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.Close(Retalix.StoreServices.Model.Finance.ActivityLocation,Retalix.StoreServices.Model.Finance.Account.IAccount,Retalix.StoreServices.Model.Finance.Account.IAccount,System.String,Retalix.StoreServices.Model.Infrastructure.Globalization.AbsoluteDateTime)">
            <summary>
            Closes the FundTransferTransaction, creates a log, saves it and returns it.
            </summary>
            <param name="activityLocation">Location where the transaction occurred (TouchPoint/Office + Store)</param>
            <param name="sourceAccount">External Id of the source account</param>
            <param name="targetAccount">External Id of the target account</param>
            <param name="reference">any reference for the transaction</param>
            <param name="creationDate">Creation date of the transaction</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.Close(Retalix.StoreServices.Model.Finance.ActivityLocation,Retalix.StoreServices.Model.Finance.Account.IAccount,Retalix.StoreServices.Model.Finance.Account.IAccount,System.String,Retalix.StoreServices.Model.Infrastructure.Globalization.AbsoluteDateTime,Retalix.StoreServices.Model.Infrastructure.Globalization.NominalDateTime)">
            <summary>
            Closes the FundTransferTransaction, creates a log, saves it and returns it.
            </summary>
            <param name="activityLocation">Location where the transaction occurred (TouchPoint/Office + Store)</param>
            <param name="sourceAccount">External Id of the source account</param>
            <param name="targetAccount">External Id of the target account</param>
            <param name="reference">any reference for the transaction</param>
            <param name="creationDate">Creation date of the transaction</param>
            <param name="businessDate">Business date of the transaction</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.TransactionType">
            <summary>
            The type of the transaction (e.g. "Tender Loan", "Bank Receipt", ..).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.BalanceShiftStart">
            <summary>
            the shift start of the relevant cashier pos
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.SetManagerCredentials(Retalix.StoreServices.Model.Finance.FundTransfer.ManagerCredentials)">
            <summary>
            Set Manager credentials used to approve the activity.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.LoanStarting">
            <summary>
            Occurs before adding a line where the cash office activity is one of the loan types.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.BankReceiptDepositStarting">
            <summary>
            Occurs before adding a line where the cash office activity is one of the bank receipt types.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.PickupStarting">
            <summary>
            Occurs before adding a line where the cash office activity is one of the pickup types.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.PaidInStarting">
            <summary>
            Occurs before adding a line where the cash office activity is paid in.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.PaidOutStarting">
            <summary>
            Occurs before adding a line where the cash office activity is paid out.
            </summary>
        </member>
        <member name="E:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.SafeTranferStarting">
            <summary>
            Occurs before adding a line where the cash office activity is safe transfer.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.Lines">
            <summary>
            Lines of the current fund transfer transaction.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransaction.AddTaxLine(System.String,Retalix.StoreServices.Model.Finance.Money.Money)">
            <summary>
            Adds a tax line to the transaction specifying the tax's type and amount.
            </summary>
            <param name="taxType">The tax's type, e.g. "VAT".</param>
            <param name="taxAmount">The tax's amount.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.ILineAdjustment">
            <summary>
            contains the latest updated data for tender adjustment
            </summary>   
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.ILineAdjustment.UpdatedValue">
            <summary>
            The new adjusted tender amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.ILineAdjustment.Reason">
            <summary>
            Reason for adjustment.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.ILineAdjustment.UserName">
            <summary>
            UserName belonging to the Adjusting User.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.ILineAdjustment.CreationDateTime">
            <summary>
            Adjustment timestamp.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.ILineAdjustment.HasValue">
            <summary>
            Returns true if has values, otherwise false
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.ILineAdjustment.UpdatedDenominations">
            <summary>
            Gets a collection of all <see cref="T:Retalix.StoreServices.Model.Finance.Money.ILineDenomination">LineDenomination</see>s of this adjustment. If the
            adjustment is in local currency and denominations were used, this collection won't be empty.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.ILineAdjustment.UpdatedBaseDenominations">
            <summary>
            Gets a collection of all <see cref="T:Retalix.StoreServices.Model.Finance.Money.ILineDenomination">LineDenomination</see>s of this adjustment. If the
            adjustment is in foreign currency and denominations were used, this collection won't be empty.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.LineAmount">
            <summary>
            keeps amounts for original and adjusted (upon adjust tender amount request)
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.FundTransfer.LineAmount.OriginalAmount">
            <summary>
            original amount of tender
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.FundTransfer.LineAmount.AdjustedAmount">
            <summary>
            adjusted amount of tender
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.FundTransferTransactionLogSearchCriteria">
            <summary>
            Search criteria for FundTransferTransaction logs
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Finance.FundTransfer.FundTransferTransactionLogSearchCriteria.FundTransferTransactionLogDaoName">
            <summary>
            The Registered key of FundTransferTransactionLogDao
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.FundTransferTransactionLogSearchCriteria.AdjustedTransactionsOnly">
            <summary>Determines if the service should return all transactions or just adjusted transactions.
            Note: when flag is true no declaration transactions will be returned</summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog">
            <summary>
            The log of a FundTransferTransaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog.TransactionSequenceNumber">
            <summary>
            The transaction log's sequence number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog.LinkedTransactions">
            <summary>
            Collection of transaction details containing information about other transaction logs linked to this transaction log.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog.SourceAccount">
            <summary>
            External Id of the source account of the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog.SourceAccountName">
            <summary>Name of the source account</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog.TargetAccount">
            <summary>
            External Id of the target account of the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog.TargetAccountName">
            <summary>Name of the target account</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog.FundTransferTransactionType">
            <summary>
            The type of the transaction (e.g. "Tender Loan", "Bank Receipt", ..).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog.Lines">
            <summary>
            A collection of <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLine"/>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog.GetTransactionLineByTenderId(System.Int32)">
            <summary>
            fetch TransactionLogLine based on tender id
            </summary>
            <param name="tenderId"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog.Reference">
            <summary>
             Any reference used in this transaction (e.g. the reference number on the envelope which is taken to the bank on a bank deposit)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog.IncludedTaxLines">
            <summary>
            A collection of <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IncludedTaxLogLine">tax lines</see>, representing the included tax on the transaction.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog.RelatedDepositedTransactionsIds">
            <summary>
            Related deposited transaction ids.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogDaoObserver">
            <summary>
            Interface used to implement an observer to <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogDao"/>'s
            actions
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogDaoObserver.OnSaveCompleted(Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog)">
            <summary>
            Method called incase save of a FundTransferTransactionLog was completed successfully.
            </summary>
            <param name="fundTransferTransactionLog"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogDaoObserver.OnSaveFailed(Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog)">
            <summary>
            Method called incase save of a FundTransferTransactionLog failed.
            </summary>
            <param name="fundTransferTransactionLog"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLine">
            <summary>
            The log of a line in FundTransferTransaction (containing the tender and amount).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLine.TenderId">
            <summary>
            External Id of the Tender transferred in the TransactionLine.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLine.CurrentAmount">
            <summary>
            Amount transferred in the TransactionLine, updated to reflect latest adjustment.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLine.OriginalAmount">
            <summary>
            Original amount transferred in the TransactionLine, ignores adjustments.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLine.CurrentAdjustment">
            <summary>
            contains the latest adjustment requested
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLine.LineAdjustments">
            <summary>
            All <see cref="T:Retalix.StoreServices.Model.Finance.FundTransfer.ILineAdjustment"/>s performed on this line
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLine.OriginalDenominations">
            <summary>
             Gets the enumerated original <see cref="T:Retalix.StoreServices.Model.Finance.Money.ILineDenomination">LineDenomination</see>s.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLine.Denominations">
            <summary>
             Gets the current collection of <see cref="T:Retalix.StoreServices.Model.Finance.Money.ILineDenomination">LineDenomination</see>s held by this log line.
            If there were no adjustments done on this line, then this holds the original denominations, otherwise, it 
            will be the latest adjustment's denominations.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLine.AddAdjustment(Retalix.StoreServices.Model.Finance.FundTransfer.ILineAdjustment)">
            <summary>
            
            </summary>
            <param name="lineAdjustment"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogLine.IsAutoReconcile">
            <summary>
            Specifies whether it is an autoReconcile tender
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogDao">
            <summary>
             provides all the DAL functionality regarding IFundTransferTransactionLog 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogDao.Save(Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog)">
            <summary>
            Saves the FundTransferTransactionLog received.
            </summary>
            <param name="fundTransferTransactionLog">log to be saved</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogDao.Lookup(Retalix.StoreServices.Model.Finance.FundTransfer.FundTransferTransactionLogSearchCriteria)">
            <summary>
            Lookup FundTransferTransactionLogs according to search criteria received.
            </summary>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogDao.GetFirst(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Get the log of the first FundTransferTransaction int the store (according to CreationDate).
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLogDao.Get(Retalix.StoreServices.Model.Finance.FundTransfer.FundTransferTransactionLogSearchCriteria)">
            <summary>
            Get one transaction log based upon searchCriteria
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Money.Denomination">
            <summary>
             Denomination is a proper description of a currency amount, usually for coins or banknotes. 
             Denominations may also be used with other means of payment like gift cards. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.Denomination.Id">
            <summary>
             Gets or sets The id of the Denomination.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.Denomination.Schema">
            <summary>
            Gets or sets the Schema of the denomination <see cref="T:Retalix.StoreServices.Model.Finance.Money.DenominationSchema">DenominationSchema</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.Denomination.Amount">
            <summary>
            Gets or sets the denomination amount.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.Denomination.Description">
            <summary>
            Gets or sets the description (e.g. "Coin").
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.Denomination.Type">
            <summary>
            Gets or sets the type of the denomination (e.g. "Roll" ).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.Denomination.TypeName">
            <summary>
            type of the denomination for persisstance usages (e.g. "Roll" ).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Money.DenominationSchema">
            <summary>
            The Denomination Schema represents a stand alone denomination schema table . 
            In the Denomination Scheme form define new denomination schemes in the system.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.DenominationSchema.Id">
            <summary>
            This is an id field for ORM by nHibernate implementation, namely using: access="field.camelcase-underscore" 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.DenominationSchema.ExternalId">
            <summary>
            Gets or sets The external id of the Denomination Schema (unique).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.DenominationSchema.Name">
            <summary>
            Gets or sets The name of the Denomination Schema.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.DenominationSchema.Description">
            <summary>
            Gets or sets the description (e.g. "Coin").
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.DenominationSchema.Currency">
            <summary>
            Gets or sets the Currency .
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.DenominationSchema.Denominations">
            <summary>
            Gets or sets The Denomination.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.DenominationSchema.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Money.ForeignCurrencyExchangeRate">
            <summary>
            The Currency Exchange Rate class enables you to define the foreign exchange rate per <see cref="T:Retalix.StoreServices.Model.Tender.TenderType.ITenderType">TenderType</see> 
            that is not defined as the local currency (used in the store).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ForeignCurrencyExchangeRate.Id">
            <summary>
             Gets or sets The id of the Foreign Currency Exchange Rate.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ForeignCurrencyExchangeRate.BaseCurrencyCode">
            <summary>
            Gets or sets The Foreign currency code (e.g. 'GBP').
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ForeignCurrencyExchangeRate.ConvertedCurrencyCode">
            <summary>
            Gets or sets The Local currency code (e.g. 'USD').
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ForeignCurrencyExchangeRate.StartDate">
            <summary>
            Gets or sets The The first time this exchange rate was set.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ForeignCurrencyExchangeRate.UpdateDate">
            <summary>
            Gets or sets The date from which this exchange rate is relevant.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ForeignCurrencyExchangeRate.Rate">
            <summary>
            Gets or sets The actual conversion rate.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ForeignCurrencyExchangeRate.EntityName">
            <summary>
            Entity name, used for DMS.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.ForeignCurrencyExchangeRate.Equals(Retalix.StoreServices.Model.Finance.Money.ForeignCurrencyExchangeRate)">
            <summary>
            Override the Equals method.
            </summary>
            <param name="other"></param>
            <returns>boolean</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Money.IDenominationSchemaRepository">
             <summary>
            Represents repository of denomination schemas.
             </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.IDenominationSchemaRepository.Save(Retalix.StoreServices.Model.Finance.Money.DenominationSchema)">
            <summary>
                Save the given schema.
            </summary>
            <param name="denominationSchema"></param>
            <returns></returns>
            //TODO should not return object
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.IDenominationSchemaRepository.Get(System.Nullable{System.Int32})">
            <summary>
                Get schema be the given denomination schema identifier by denominationSchemaId.
             </summary>
            <param name="denominationSchemaId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.IDenominationSchemaRepository.Delete(Retalix.StoreServices.Model.Finance.Money.DenominationSchema)">
            <summary>
             Delete the given scheme and all related denominations.
            </summary>
            <param name="denominationSchema"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.IDenominationSchemaRepository.GetSchemaByIsoCurrencySymbol(Retalix.StoreServices.Model.Finance.Money.CurrencyInfo)">
            <summary>
                Gets denomination list by the given ISO Currency Symbol
             </summary>
            <param name="currency"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.IDenominationSchemaRepository.Update(Retalix.StoreServices.Model.Finance.Money.DenominationSchema)">
            <summary>
            Update the given schema 
            </summary>
            <param name="denominationSchema"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Money.IForeignCurrencyExchangeRateDao">
            <summary>
            Represents the common foreign currency exchange rate data provider
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.IForeignCurrencyExchangeRateDao.Save(Retalix.StoreServices.Model.Finance.Money.ForeignCurrencyExchangeRate)">
            <summary>
            Saves a new Exchange Rate into the system 
            </summary>
            <param name="exchangeRate"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.IForeignCurrencyExchangeRateDao.GetForeignCurrencyExchangeRatesBy(System.String,System.String,System.DateTime)">
            <summary>
            Gets the exchange rates by the given parameters
            </summary>
            <param name="baseCurrencyCode"></param>
            <param name="convertedCurrencyCode"></param>
            <param name="startDate"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.IForeignCurrencyExchangeRateDao.GetEffectiveForeignCurrencyExchangeRatesBy(System.String,System.String,System.DateTime)">
            <summary>
            Gets the effective exchange rate by the given parameters (according to the max start date)
            </summary>
            <param name="baseCurrencyCode"></param>
            <param name="convertedCurrencyCode"></param>
            <param name="startDate"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.IForeignCurrencyExchangeRateDao.GetAllForeignCurrencyExchangeRates">
            <summary>
            Gets all exchange rates        /// </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.IForeignCurrencyExchangeRateDao.GetExactForeignCurrencyExchangeRateFromDb(System.String,System.String,System.DateTime)">
            <summary>
            Gets the exact exchange rates by the given parameters from DB
            </summary>
            <param name="baseCurrencyCode"></param>
            <param name="convertedCurrencyCode"></param>
            <param name="startDate"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.IForeignCurrencyExchangeRateDao.DeleteAllExchangeRates">
            <summary>
             Delete all exchange rates from the system.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Money.IForeignCurrencyExchangeRateDao.CheckIfToRaiseDuplicateException(System.String,System.String,System.DateTime)">
            <summary>
             Check if the Currency Codes are equals.
            </summary>
            <param name="baseCurrencyCode">one CurrencyCode</param>
            <param name="convertedCurrencyCode">second CurrencyCode</param>
            <param name="startDate">DateTime</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Money.ILineDenomination">
            <summary>
             Contains data for CashOffice transaction line's denomination.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ILineDenomination.Denomination">
            <summary>
             The line's denomination.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Money.ILineDenomination.Quantity">
            <summary>
             Quantity of the denomination on the line.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.Exception.AccountActivityRestricitionManagerApprovalViolationException">
            <summary>
            Exception thrown when manager approval is required in order to perform a cash office activity (e.g. PayIn, PayOut)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.Exception.AccountActivityRestricitionManagerApprovalViolationException.ManagerApprovalMessage">
            <summary>
            Message to display for the manager approval
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.Exception.AccountActivityRestricitionManagerApprovalViolationException.#ctor(System.String,Retalix.StoreServices.Model.Infrastructure.Message.IMessage)">
            <summary>
            Public constructor for this exception (receiving the name of the activity that required the manager approval and the message to display)
            </summary>
            <param name="activityName">The cash office activity that has manager approval required (and caused this exception to be thrown)</param>
            <param name="message">The message to display for the manager approval</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.ActivityRestriction">
            <summary>
             A class holding an abstraction of a restriction for a cash office activity (e.g. max amount from which the activity is prohibited)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.ActivityRestriction.Activity">
            <summary>
             The activity on which the restriction applies.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.ActivityRestriction.ProhibitForHigher">
            <summary>
             If the activity amount is higher than this, it will be prohibited.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.ActivityRestriction.ProhibitForLower">
            <summary>
             If the activity amount is lower than this, it will be prohibited.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.ActivityRestriction.ManagerApprovalForHigher">
            <summary>
             If the activity amount is higher than this, it will require manager approval.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.ActivityRestriction.ManagerApprovalForLower">
            <summary>
             If the activity amount is lower than this, it will require manager approval.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.ActivityRestriction.ManagerApprovalMessage">
            <summary>
            The localized message to display for the manager approval
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.ActivityRestriction.ActivityString">
            <summary>
             The activity name displayed as a string
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Account.IActivityRestrictedProfile">
            <summary>
             An interface for a component containing restrictions relevant to cash office activities done on an 
             <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccount"/> with an <see cref="T:Retalix.StoreServices.Model.Finance.Account.IAccountProfile"/> having these restrictions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Account.IActivityRestrictedProfile.ActivityRestrictions">
            <summary>
             The restrictions for cash office activities
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Account.IActivityRestrictedProfile.SetActivityRestrictions(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Finance.Account.ActivityRestriction})">
            <summary>
             Set the activity restrictions
            </summary>
            <param name="activityRestrictions"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Log.ITenderControlTransactionCreationVisitor">
            <summary>
             Cash office log  visitor that allows to add log data to cash office log  
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Log.ITenderControlTransactionCreationVisitor.Visit(Retalix.StoreServices.Model.Finance.FundTransfer.IFundTransferTransactionLog,Retalix.StoreServices.Model.Finance.Log.ITenderControlTransactionWriter)">
            <summary>
            Allow writing to the log using the provided writer
            </summary>
            <param name="fundTransferTransactionLog">The log of a Fund Transfer Transaction.</param>
            <param name="writer">The writer that writes the log</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Log.ITenderControlTransactionCreationVisitor.Visit(Retalix.StoreServices.Model.Finance.Declaration.IDeclarationTransactionLog,Retalix.StoreServices.Model.Finance.Log.ITenderControlTransactionWriter)">
            <summary>
            Allow writing to the log using the provided writer
            </summary>
            <param name="declarationTransactionLog">The log of a declaration Transaction.</param>
            <param name="writer">The writer writes the log</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.Log.ITenderControlTransactionWriter">
            <summary>
             Allow manipulation of the Log Document content during its creation.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.Log.ITenderControlTransactionWriter.LogDocument">
            <summary>
            The TenderControlTransactionLogDocument instance that was written until now.
            Notice that it might not be valid.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.Log.ITenderControlTransactionWriter.UpdateXmlDocument(System.String)">
            <summary>
            Set the content of the xml document.
            </summary>
            <param name="xmlContent">The new xml content to set</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.ActivityLocation">
            <summary>
            The Location of some cash office activity (e.g. Pickup/LoanAdd/Declaration...).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.ActivityLocation.Store">
            <summary>
            The store where the activity took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.ActivityLocation.TouchPoint">
            <summary>
            The touchpoint on which the activity took place.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Finance.ActivityLocation.Location">
            <summary>
            The location of the activity (TouchPoint/Office).
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Finance.IActivityLocationProvider">
            <summary>
             provides functionality for retrieving an activity location given an store and a touch point id
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Finance.IActivityLocationProvider.GetBy(System.String,System.String)">
            <summary>
            Get an ActivityLocation by store and touchpoint
            </summary>
            <param name="storeId"></param>
            <param name="touchPointId"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.ISpecialCasePermissions">
            <summary>
            Implement this interface to allow a user to perform an activity that would not normally be allowed by standard IDM mechanism.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.ISpecialCasePermissions.ShouldAllowException(Retalix.StoreServices.Model.Infrastructure.Security.Identity.IIdentity,Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivity,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Return true to allow the specified activity in a special case.
            </summary>
            <param name="identity"></param>
            <param name="businessActivity"></param>
            <param name="location"></param>
            <returns>True - grants the permission</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivityExtender.GetAll">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivityPermissionsHandler.IsLoggedInUserHavePermissions(Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivity,Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            </summary>
            <param name="businessActivity"></param>
            <param name="businessUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivityPermissionsHandler.IsLoggedInUserHaveAnyPermissionsFor(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            </summary>
            <param name="businessUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivityPermissionsHandler.Authorize(Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivity,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            </summary>
            <param name="businessActivity"></param>
            <param name="contextValues"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IncludedAttributes.IncludedInBRMControlTransactionList">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IncludedAttributes.IncludedInBRMSaleTransactionList">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivityController">
            <summary>Interface provides a way to test for permissions to perform a specified activity.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivityController.TriggerActivity(Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivity,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            </summary>
            <param name="businessActivity"></param>
            <param name="contextValues"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivityController.TriggerActivity(Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivity)">
            <summary>
            </summary>
            <param name="businessActivity"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivityController.GetBusinessActivitiesList(System.Attribute)">
            <summary>
            </summary>
            <param name="includedAttribute"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.IBusinessActivityObserver">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.InfrastractureResource">
            <summary>
            Resources for infrastructure actions
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.InfrastractureResource.RetentionPolicyMaintenance">
            <summary>
            Action of maintenance a retention policy
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.InfrastractureResource.RetentionPolicyExecution">
            <summary>
            Action of execute a retention policy
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.ECommerce">
            <summary>
            Resources for Packing actions
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.ECommerce.EcommercePicking">
            <summary>
            Action of picking items to place in packages
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.DMS.SkipActivity">
            <summary>
            Action of picking items to place in packages
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.AdditionalTouchpointGroupsResource">
            <summary>
            Resources for configuration of Additional touchpoint groups
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.VenueShiftResource">
            <summary>
            Resources for configuration of Venue Shift
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.OpenCloseDaysResource">
            <summary>
            Resources for configuration of Open Close Hours
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.TenderRoundingRulesResource">
            <summary>
            Resources for configuration of Tender Rounding Rules
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.AutoLoadResource">
            <summary>
            Resources for configuration Auto Load transaction on the Scan End Of Trip barcode
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.TdmConfigurationParametersResource">
            <summary>
            Resources for configuration TDM retention policy parameters
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessActivity.BrandingImagesResource">
            <summary>
            Resources for configuration of Branding Images
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataAccess.ISessionProvider">
            <summary>
            Provides that active instance of NHibernate ISession or IStatelessSession
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataAccess.ISessionProvider.GetSession``1(System.String)">
            <summary>
            Get an NHibernate ISession or IStatelessSession
            </summary>
            <typeparam name="TSession">Can be ISession or IStatelessSession</typeparam>
            <param name="moduleName">The business module name you want a connection for</param>
            <returns>An NHibernate ISession or IStatelessSession</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataAccess.IUnitOfWorkTracker">
            <summary>
            Expose unit of work tracking of changes
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataAccess.IUnitOfWorkTracker.UnitOfWork">
            <summary>
            The tracked unit of work
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataAccess.IUnitOfWorkTracker.ChangedEntities">
            <summary>
            List of data Entities that was changed in the Unit of Work scope.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataAccess.IUnitOfWorkActivitiesObserver">
            <summary>
             Represent listener to single unit of work activities
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataAccess.IUnitOfWorkActivitiesObserver.BeforeComplete(Retalix.StoreServices.Model.Infrastructure.DataAccess.IUnitOfWorkTracker)">
            <summary>
            Called when unitofWork.Completed is called, just before the internal data-transaction committed.
            </summary>
            <param name="tracker">The caller unit of work tracker</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataAccess.ISessionProvider`1">
            <summary>
            Bridge interface to access a session instance
            </summary>
            <typeparam name="TSession">The session object type</typeparam>
            <summary><para><b>Use none generic Retalix.StoreServices.Model.Infrastructure.DataAccess.ISessionProvider instead</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataAccess.ISessionProvider`1.Session">
            <summary>
            Provide access to the session instance
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataAccess.ISessionProvider`1.IsSessionActive">
            <summary>
             determent if the session is active will be use only by session that related to data
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataAccess.ISessionProvider`1.NotifyExtensionsOnSave``1(``0)">
            <summary>
            Notify Extensions on save
            </summary>        
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataAccess.ISessionProvider`1.NotifyExtensionsOnLoad``1(``0)">
            <summary>
            Notify extensions on entity load.
            </summary>
            <param name="entity"></param>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataAccess.ISessionProvider`1.NotifyExtensionsOnDelete``1(``0)">
            <summary>
            Notify extensions on entity delete.
            </summary>
            <param name="entity"></param>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataAccess.ISessionProvider`1.NotifyExtensionsOnDispose``1(``0)">
            <summary>
            Notify extensions on dispose.
            </summary>
            <param name="entity"></param>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.DataPatternPrefixRangesFilter">
            <summary>
            Filter for PrefixRanges of DataPattern
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.DataPatternPrefixRangesFilter.#ctor(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternSearchCriteria)">
            <summary>
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.DataPatternAllowedBusinessUnitsFilter">
            <summary>
            Filter for AllowedBusinessUnits of DataPattern
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternBaseFilter">
            <summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternBaseFilter.Filter(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern})">
            <summary>
             return true if the dataPattern should not pass the filter
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.DataPatternBaseFilter`1">
            <summary>
            Used to filter data pattern on find request
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.DataPatternDecodedDataTypeFilter">
            <summary>
            Filter for DecodedDataPattern of Data Pattern
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.DataPatternDecodedDataTypeFilter.#ctor(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternSearchCriteria)">
            <summary>
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.DataPatternExternalIdsFilter">
            <summary>
            Filter for DataPatternExternalId
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.DataPatternExternalIdsFilter.#ctor(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternSearchCriteria)">
            <summary>
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.DataPatternLengthFilter">
            <summary>
            Filter for Length of DataPattern
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.DataPatternLengthFilter.#ctor(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternSearchCriteria)">
            <summary>
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.DataPatternLengthFilter.Filter(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern})">
            <summary>
             return true if the dataPattern should not pass the filter
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.DataPatternPrefixRangesConflictFilter">
            <summary>
            Filter for PrefixRanges of DataPattern
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.DataPatternPrefixRangesConflictFilter.#ctor(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternSearchCriteria)">
            <summary>
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternExtractorFactory">
            <summary>
            Represents a IDataPatternExtractor factory.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternExtractorFactory.Create(Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternExtractorConfiguration,Retalix.StoreServices.Model.Infrastructure.DataPattern.IDecoderProvider)">
            <summary>
            Creates a data pattern extractor based on the given configuration and the decoder provider.
            </summary>
            <param name="configuration"></param>
            <param name="decoderProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternExtractorFactory.Supports(System.String)">
            <summary>
            Checks if the data pattern extractor support the given extractor type.
            </summary>
            <param name="extractorType"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.ICheckDigitAlgorithm">
            <summary>
            Represents an interface for a check digit algorithm. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.ICheckDigitAlgorithm.Calculate(System.String)">
            <summary>
            Calculates the given data according to the algorithm implementation.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.ICheckDigitAlgorithm.Setup(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            A setup method which provides various derriving algorithms to perform initialization.
            </summary>
            <param name="parameters">Essential parameters for the check digit algorithms.</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.ICheckDigitAlgorithm.Name">
            <summary>
             The Algorithm Name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.ICheckDigitAlgorithm.NumberOfDigits">
            <summary>
             The Number of check digits
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDecoderFactory">
            <summary>
            Represents an IDecoder factory.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDecoderFactory.Create(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameter})">
            <summary>
            Creates an IDecoder according the given parameters.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDecoderFactory.Supports(System.String)">
            <summary>
            Check if the factory supports the given decoder.
            </summary>
            <param name="decoderName"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternRecognizerFactory">
            <summary>
            Represents an IDataPatternRecognizer factory.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternRecognizerFactory.Create(Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternRecognizerConfiguration,Retalix.StoreServices.Model.Infrastructure.DataPattern.IDecoderProvider)">
            <summary>
            Creates a data pattern recognizer based on the given configuration and the decoder provider.
            </summary>
            <param name="configuration"></param>
            <param name="decoderProviderStub"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternRecognizerFactory.Supports(System.String)">
            <summary>
            Checks if the data pattern recognizer support the given recognizer type.
            </summary>
            <param name="recognizerType"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternValidatorFactory">
            <summary>
            Represents a IDataPatternValidator factory
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternValidatorFactory.Create(Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.DataPatternValidatorConfiguration,Retalix.StoreServices.Model.Infrastructure.DataPattern.IDecoderProvider)">
            <summary>
            Creates a data pattern validator based on the given configuration and the decoder provider.
            </summary>
            <param name="configuration"></param>
            <param name="decoderProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDataPatternValidatorFactory.Supports(System.String)">
            <summary>
            Checks if the data pattern validator support the given validator type.
            </summary>
            <param name="validatorType"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDecoder">
            <summary>
            Represents an interface for a decoder.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDecoder.ExtractFrom(System.String)">
            <summary>
            Extracts the data. In case of numeric decoding the extracted data will be in the number format according to CultureSettings of the Business Unit.
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Component.IDecoder.EncodeInto(System.String,System.String)">
            <summary>
            Encodes the given value by the given template. The input value for encoding, in case of numeric data, MUST be in the CultureSettings of the Business Unit .
            </summary>
            <param name="template"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataExtRepository">
            <summary>
            A repository that holds data pattern metadata for extensions
            </summary>
            
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataExtRepository.GetDataPatternMetadataByType(System.String)">
            <summary>
             returns metadata by type
            </summary>
            <param name="metadataType"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataExtRepository.GetDataPatternMetadataTypes">
            <summary>
             returns metadata types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataExtRepository.SaveOrUpdate(Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadata)">
            <summary>
             saves or update the extension data pattern
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataExtRepository.Delete(System.String)">
            <summary>
             deletes data pattern metadata
            </summary>
            <param name="metadataType"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataExtRepository.GetGroupNamesDictionary">
            <summary>
             returns group names dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataRepository">
            <summary>
            A repository that holds data pattern metadata for core
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataRepository.GetDataPatternMetadataByType(System.String)">
            <summary>
            returns metadata by type
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataRepository.GetDataPatternMetadataTypes">
            <summary>
            returns all metadata types
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataRepository.GetDataPatternMetadataFieldTypes">
            <summary>
            returns all metadata field types
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataRepository.GetGroupNamesDictionary">
            <summary>
             returns group name dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataRepositoryManager">
            <summary>
            An interface for repository manager that holds data pattern metadata for core and for extensions
            This manager is able to merge metadata's types in case GetDataPatternMetadataTypes service, 
            return the metadata with additional fields in case GetDataPatternMetadataByType service with additional fields from extension
            and allows to save or update additional fields for extension
            </summary>
            <summary/>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataRepositoryManager.GetDataPatternMetadataByType(System.String)">
            <summary>
             returns data pattern metadata according to type
            </summary>
            <param name="metadataType"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataRepositoryManager.GetDataPatternMetadataTypes">
            <summary>
             returns all data pattern metadata 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataRepositoryManager.SaveOrUpdate(Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadata)">
            <summary>
             saves or updates metadata
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataRepositoryManager.Delete(System.String)">
            <summary>
             deletes metadata
            </summary>
            <param name="metadataType"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataRepositoryManager.ValidateMetaDataBeforeSave(Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadata)">
            <summary>
             validates metadata before save
            </summary>
            <param name="dataPattern"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataRepositoryManager.GetDataPatternMetadataFieldTypes">
            <summary>
            returns all metadata field types
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.IDataPatternMetadataRepositoryManager.GetGroupNamesDictionary">
            <summary>
             returns dictionary of data pattern group names according to data pattern type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadata">
            <summary>
            Metadata for "Tender" includes list of fields for tender, "Item", "Coupon"
            </summary>
            <summary/>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadata.Id">
            <summary>
            Internal id for NHibernate and for GetAll(IMovable) implementation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadata.Type">
            <summary>
            Data pattern metadata type ("Tender", "Item")
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadata.GroupName">
            <summary>
            Data pattern metadata GroupName 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadata.MetadataFields">
            <summary>
            Metadata fields
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadataFieldType">
            <summary>
            Field types of the Data Pattern 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadataFieldType.FieldTypeName">
            <summary>
            Field id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadataFieldType.Description">
            <summary>
            Field description
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadataFieldType.ExtractorName">
            <summary>
            Extractor type name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadataFieldType.DecoderName">
            <summary>
            Decoder name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.DataPatternMetadataFieldType.Parameters">
            <summary>
            Available field type parameters
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.FieldTypeParameter">
            <summary>
            Holds data for Filed type parameter, for example, "Fixed" or "Variable" types.
            </summary>
            <summary/>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.FieldTypeParameter.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.FieldTypeParameter.ParameterType">
            <summary>
            Parameter type, may be string, boolean
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.MetadataField">
            <summary>
            Holds a metadata field data for data pattern. For example, for field ItemCode the DecodedKeyName will be "Code" and AllowedFieldTypes will be "Fixed", "Variable" and "Manipulated.
            </summary>
            <summary/>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.MetadataField.DataPatternMetadata">
            <summary>
            Used only for NHibernate
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.MetadataField.#ctor">
            <summary>
            Used only for NHibernate
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.MetadataField.ExternalName">
            <summary>
            View name of field (in UI)
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.MetadataField.DecodedKeyName">
            <summary>
            Identifier
            Name of the field that server knows
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.MetadataField.AllowedFieldTypes">
            <summary>
            Allowed types of the field
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DatapatternMetadata.MetadataField.IsMandatory">
            <summary>
            Is a Mandatory recognizer
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.EftTenderReceiptDecodedData.TransactionIdKey">
            <summary>
            Represents the transaction id.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.EftTenderReceiptDecodedData.PosIdKey">
            <summary>
            Represents the pos id.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.EftTenderReceiptDecodedData.StoreCodeKey">
            <summary>
            Represents the store code key.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.EftTenderReceiptDecodedData.EftTransactionIdKey">
            <summary>
            Represents the Eft transaction id number.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.EftTenderReceiptDecodedData.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            Constructs a new EftTenderReceiptDecodedData instance, override the base constructor. 
            <param name="parsedData">Parsed data's dictionary</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.EftTenderReceiptDecodedData.EftTransactionId">
            <summary>
            Gets the Eft Transaction Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.EftTenderReceiptDecodedData.TransactionId">
            <summary>
            Gets the Transaction Id according to the TransactionIDKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.EftTenderReceiptDecodedData.PosId">
            <summary>
            Gets the Terminal Id according to the PosIDKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.EftTenderReceiptDecodedData.StoreCode">
            <summary>
            Gets the StoreNumber according to the StoreCodeKey.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.EndOfTripDecodedData.StoreCodeKey">
            <summary>
            Business Unit Id
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.EndOfTripDecodedData.TouchpointIdKey">
            <summary>
            Touchpoint Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.EndOfTripDecodedData.PosId">
            <summary>
            Gets the Terminal Id according to the PosIDKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.EndOfTripDecodedData.StoreCode">
            <summary>
            Gets the StoreNumber according to the StoreCodeKey.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.OrderServiceTransactionDecodedData.OrderNumberKey">
            <summary>
            Represents the order number.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.OrderServiceTransactionDecodedData.TypeKey">
            <summary>
            Represents the transaction type.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.OrderServiceTransactionDecodedData.OrderNumber">
            <summary>
            Gets the tranaction order number
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.OrderServiceTransactionDecodedData.Type">
            <summary>
            Gets the Transaction Type 
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.ReturnItemVoucherDecodedData.IdKey">
            <summary>
            Represents the Originating Store ID.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.ReturnItemVoucherDecodedData.CreationDateKey">
            <summary>
            Represents the Issuing Date.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.ReturnItemVoucherDecodedData.AmountKey">
            <summary>
            Represents the Voucher Amount.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.ReturnItemVoucherDecodedData.DefaultVoucherKey">
            <summary>
            Represents the Default Voucher.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.ReturnItemVoucherDecodedData.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            Constructs a new ReturnItemVoucherDecodedData instance, override the base constructor. 
            <param name="parsedData">Parsed data's dictionary</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.ReturnItemVoucherDecodedData.Id">
            <summary>
            Gets the Id according to the IdKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.ReturnItemVoucherDecodedData.CreationDate">
            <summary>
            Gets the Issuing Date according to the CreationDateKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.ReturnItemVoucherDecodedData.Amount">
            <summary>
            Gets the Voucher Amount AmountKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.ReturnItemVoucherDecodedData.DefaultVoucher">
            <summary>
            Gets the Default Voucher DefaultVoucherKey.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.CashierDecodedData">
            <summary>
             Cashier decoded data
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.CashierDecodedData.DataType">
            <summary>
             Represents the data pattern type
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.CashierDecodedData.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             ctor
            </summary>
            <param name="parsedData"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.CashierDecodedData.Keys">
            <summary>
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.CashierDecodedData.Keys.CashierReferenceId">
            <summary>
            Represents the cashier reference id.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.CashierDecodedData.Keys.CheckDigit">
            <summary>
             Represents check digit for barcode
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.OLSProfileDecodedData">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.UnitOfMeasureConvertor">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DatabarCouponDecodedData">
            <summary>
            decode data of databar coupon
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.CustomerDecodedData">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.UserDecodedData">
            <summary>
            Represents a user decoded data, derived from DecodedData base class.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.UserDecodedData.UserIdentifyNumberKey">
            <summary>
            Represents the user identify number key.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.UserDecodedData.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructs a new UserDecodedData instance, override the base constructor. 
            </summary>
            <param name="parsedData">Parsed data's dictionary</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.UserDecodedData.UserIdentifyNumber">
            <summary>
            Gets the User Identify Number according to the UserIdentifyNumberKey.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData">
            <summary>
            Represents a tender decoded data, derived from DecodedData base class.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.AmountKey">
            <summary>
            Represents the amount key.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.IsGiftCardKey">
            <summary>
            Represents the is giftcard key.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.TenderExternalIdKey">
            <summary>
            Represents the external id.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.VoucherIdKey">
            <summary>
            Represents the voucher id.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.StoreNumberKey">
            <summary>
            Represents the store number key.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.PosIdKey">
            <summary>
            Represents the pos id key.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.VoucherTypeKey">
            <summary>
            Represents the voucher type key.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.TenderIdKey">
            <summary>
            Represents the tender id.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.CustomerIdKey">
            <summary>
            Represents the customer id.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.SeriesKey">
            <summary>
            Represents the series key.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.NeedApprovalAgainstLoyaltyKey">
            <summary>
            Represents the need approval against loyalty key.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.ExpiryDateKey">
            <summary>
            Represents the expiry date key.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructs a new TenderDecodedData instance, override the base constructor. 
            </summary>
            <param name="parsedData">Parsed data's dictionary</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.Amount">
            <summary>
            Gets the Amount according to the Amount key.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.IsGiftCard">
            <summary>
            Gets the Is gift card according to the IsGiftCardKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.TenderExternalId">
            <summary>
            Gets the Tender external id according to the TenderExternalIdKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.VoucherId">
            <summary>
            Gets the Voucher Id according to the VoucherIdKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.VoucherType">
            <summary>
            Gets the Voucher Type according to the VoucherTypeKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.StoreNumber">
            <summary>
            Gets the Store Number according to the StoreNumberKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.PosId">
            <summary>
            Gets the Pos Id according to the PosIdKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.CustomerId">
            <summary>
            Gets the Customer Id according to the CustomerIdKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.Series">
            <summary>
            Gets the Series according to the SeriesKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.NeedApprovalAgainstLoyalty">
            <summary>
            Gets the Need approval against loyalty according to the NeedApprovalAgainstLoyaltyKey.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.TenderDecodedData.ExpiryDate">
            <summary>
            Gets the ExpiryDate according to the ExpiryDateKey.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.DataPatternSearchCriteria">
            <summary>
            
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.DataPatternSearchCriteria.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternFinder">
            <summary>
            Data pattern finder
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternFinder.FindPatternsMatchingCriteria(Retalix.StoreServices.Model.Infrastructure.DataPattern.DataPatternSearchCriteria)">
            <summary>
            Finds data patterns that match search criteria
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternFinder.FindSpecificDataPattern(System.String)">
            <summary>
            Finds data pattern that match a specific code
            </summary>
            <param name="specificDataPatternValue"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternFinder.ConflictingDataPatternsExist(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern)">
            <summary>
            Check whether any data patterns with the same prefix range, length and type exist.
            If a data pattern has matching prefix ranges, length and type is found an exception of type DuplicatedDataPatternException is thrown.
            If only prefix range and length matches, returns true.
            If no match is found returns false
            </summary>
            <param name="dataPattern">The data pattern that requires conflict check</param>
            <returns>True if no data pattern matches, false if a match by prefix and length only.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.BusinessAction">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameterException">
            <summary>
            Represents a generic parameter exception. 
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameterException.#ctor(System.String,System.String,System.String)">
            <summary>
            Override in derived exception, represents a generic parameter exception supplies the relevant message.
            </summary>
            <param name="componentName">The component that invoked the error</param>
            <param name="parameterName">The component's parameter that invoked the error</param>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.GenericParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.MissingGenericParameterException">
            <summary>
            Represents a missing generic parameter exception. 
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.MissingGenericParameterException.#ctor(System.String,System.String)">
            <summary>
            Override in derived exception, represents a missing generic parameter exeption supplies the relevant message.
            </summary>
            <param name="componentName">The component's name that invoked the error</param>
            <param name="parameterName">The component's parameter that invoked the error</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Configuration.MissingGenericParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.Exceptions.MissingDataPatternComponentException">
            <summary>
            Represents a missing data pattern component exception.
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Exceptions.MissingDataPatternComponentException.ComponentName">
            <summary>
            The component's name that invoked the error
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.DataPattern.Exceptions.MissingDataPatternComponentException.ComponentType">
            <summary>
            The component's type that invoked the error
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DataPattern.Exceptions.MissingDataPatternComponentException.MissingDataPatternFactoryComponentMessage">
            <summary>
            The error message format.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Exceptions.MissingDataPatternComponentException.#ctor(System.String,System.String)">
            <summary>
            Override in derived exception, represents a missing data pattern component exeption supplies the relevant message.
            </summary>
            <param name="componentType">The component's type that invoked the error</param>
            <param name="componentName">The component's name that invoked the error</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.Exceptions.MissingDataPatternComponentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDaoObserver">
            <summary>
            Represent Observer for Data-Pattern entity data-flow
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDaoObserver.SaveComplete(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern)">
            <summary>
            Invoked just after the data of the instance was saved or updated.
            </summary>
            <param name="dataPattern">The saved data pattern object</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternDaoObserver.DeleteComplete(Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPattern)">
            <summary>
            Invoked just after an instance was deleted.
            </summary>
            <param name="dataPattern">The deleted data pattern object</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DataPattern.IDataPatternEncoder.Encode(System.String,Retalix.StoreServices.Model.Infrastructure.DataPattern.DecodedData.DecodedData)">
            <summary>Returns the collection of possible encoded values with their matching DataPatternId</summary>
            <param name="businessAction"></param>
            <param name="decodedData"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DomainAction.Action">
            <summary>
            Represents action type like 'Update'
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DomainAction.Action.#ctor(System.String)">
            <summary>
            Creates an instance with a given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Action.Update">
            <summary>
            'Update' action name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Action.Execution">
            <summary>
            'Execution' action name
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DomainAction.Domain">
            <summary>
            Represents domain names like 'MenuConfiguration'
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DomainAction.Domain.#ctor(System.String)">
            <summary>
            Creates an instance with a given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Domain.MenuConfiguration">
            <summary>
            'MenuConfiguration' domain name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Domain.Receipt">
            <summary>
            'Receipt' domain name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Domain.Organization">
            <summary>
            'Organization' domain name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Domain.Item">
            <summary>
            'Item' domain name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Domain.Product">
            <summary>
            'Product' domain name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Domain.Selling">
            <summary>
            'Selling' domain name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Domain.TouchPoint">
            <summary>
            'TouchPoint' domain name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Domain.Job">
            <summary>
            'Job' domain name
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity">
            <summary>
            Represents entity names like 'MenuItem'
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.#ctor(System.String)">
            <summary>
            Creates an instance with a given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.MenuItem">
            <summary>
            'MenuItem' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.MenuDisplayTerm">
            <summary>
            'MenuDisplayTerm' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.ReceiptParameter">
            <summary>
            'ReceiptParameter' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.OpenCloseDay">
            <summary>
            'OpenCloseDay' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.Category">
            <summary>
            'Category' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.LinkGroup">
            <summary>
            'LinkGroup' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.Manufacturer">
            <summary>
            'Manufacturer' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.Product">
            <summary>
            'Product' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.ProductClassification">
            <summary>
            'ProductClassification' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.ProductRestriction">
            <summary>
            'ProductRestriction' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.ProductGroup">
            <summary>
            'ProductGroup' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.ProductLinkGroup">
            <summary>
            'ProductLinkGroup' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.SecurityScale">
            <summary>
            'SecurityScale' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.StoreRange">
            <summary>
            'StoreRange' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.ConsumableGroup">
            <summary>
            'ConsumableGroup' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.Price">
            <summary>
            'Price' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.Department">
            <summary>
            'Department' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.ProductAvailability">
            <summary>
            'ProductAvailability' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.Kit">
            <summary>
            'Kit' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.Command">
            <summary>
            'Command' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.ReportingWarehouse">
            <summary>
            'ReportingWarehouse' entity name
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.DomainAction.Entity.TenderRoundingRule">
            <summary>
            'TenderRoundingRule' entity name
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DomainAction.DomainAction">
            <summary>
            Represents last domain action
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.DomainAction.ILastDomainActionDao">
            <summary>
             Represents an entity which is responsible to store and retrieve <see cref="T:Retalix.StoreServices.Model.Infrastructure.DomainAction.DomainAction">DomainAction</see>.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DomainAction.ILastDomainActionDao.Get(System.Collections.Generic.ICollection{Retalix.StoreServices.Model.Infrastructure.DomainAction.DomainAction},System.DateTime)">
            <summary>
            Retrieves domain actions by domain action data which updated after specific time
            </summary>
            <param name="domainActions"></param>
            <param name="specifiedTime"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DomainAction.ILastDomainActionDao.Update(System.Nullable{System.DateTime})">
            <summary>
            Updates an existing domain action with last time.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.DomainAction.ILastDomainActionDao.UpdateByColdstartExecution(System.DateTime)">
            <summary>
            Updates an existing domain action with last time.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Instrumentation.IInstrumentationAdaptor">
            <summary>
            Represents the adaptor implementation used to send the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Instrumentation.CommandRequest">Command Request</see>
            to the remote instrumentation agent.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Instrumentation.IInstrumentationAdaptor.SendMessage(Retalix.StoreServices.Model.Infrastructure.Instrumentation.CommandRequest)">
            <summary>
            Sends the message to the remote listening Instrumentation Agent.
            </summary>
            <param name="commandRequest">The instrumentation command handled by the Instrumentation Agent</param>
            <returns><see cref="T:Retalix.StoreServices.Model.Infrastructure.Instrumentation.CommandResponse">command response</see>as a result of the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Instrumentation.CommandRequest">command request</see> execution.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Instrumentation.CommandRequest">
            <summary>
            Represents an instrumentation command request handled by a listening 
            Instrumentation Agent on a remote POS/store machine.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Instrumentation.CommandRequest.Target">
            <summary>
            Gets or sets the address (valid IPv4/IPv6 or domain hostname) 
            of the remote Instrumentation Agent.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Instrumentation.CommandRequest.Command">
            <summary>
            Gets or sets the instrumentation command alias executed by the Instrumentation Agent 
            on the remote host. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Instrumentation.CommandRequest.Content">
            <summary>
            Gets or sets additional parameters required by the request command.
            It can be an XML structure or any relevant string used 
            to execute the request command.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Instrumentation.CommandResponse">
            <summary>
            Represents an instrumentation <see cref="T:Retalix.StoreServices.Model.Infrastructure.Instrumentation.CommandResponse">command response</see> returned from the Instrumentation
            Agent on a remote POS/store machine, as a result of a corresponding <see cref="T:Retalix.StoreServices.Model.Infrastructure.Instrumentation.CommandRequest">command request</see>.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Instrumentation.CommandResponse.ProviderResult">
            <summary>
            Gets or sets the Instrumentation Agent execution result (Success or Failure) returned by the  
            specific protocol provider (TCP/IP, SNMP, WMI etc ...) of the remote Instrumentation Agent. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Instrumentation.CommandResponse.Content">
            <summary>
            Gets or sets additional information for the specified executed Instrumentation command, 
            which is returned as part of the Command RTI response .
            This can be xml or a string which can be handled by the command caller.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.IBulkPersisterBehaviour">
            <summary>
            Delegates the decision on whether to delete existing categories.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.IBulkPersisterBehaviour.DeleteExistingProductSelectorCategories">
            <summary>
            Specify if required to delete existing categories
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.StoreRangeProductDTO.RemoveAllForProvidedEntities">
            <summary>
            When true - remove the specified Product from the specified BusinessUnit 
            store range, and is BusinessUnit not available, will remove product from all store range.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.V4_9.StoreRangeMaintenanceDTO.RemoveAllForProvidedEntities">
            <summary>
            When true - remove the specified Product from the specified BusinessUnit 
            store range, and is BusinessUnit not available, will remove product from all store range.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.IProductMovableDao">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.IProductMovableDao.FetchAllOrdered(System.String[])">
            <summary>
            Get all consumables paged, because consumable is large data set, the retrieve method is optimized by paging.
            </summary>
            <returns>IEnumerbale of type IProduct</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.IProductMovableDao.FetchAllOrderedFromPosition(System.String[],System.String)">
            <summary>
            Get all consumables paged from starting position, because consumable is large data set, the retrieve method is optimized by paging.
            </summary>
            <param name="businessUnitIds"></param>
            <param name="lastProductEntityKey">Starting product EntityKey.</param>
            <returns>IEnumerbale of type IProduct</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.IProductMovableDao.FetchAllOrderedNoAttributes(System.String[])">
            <summary>
            Get all consumables paged, because consumable is large data set, the retrieve method is optimized by paging.
            </summary>
            <returns>IEnumerbale of type IProduct</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.IProductMovableDao.FetchAllOrderedFromPositionNoAttributes(System.String[],System.String)">
            <summary>
            Get all consumables paged from starting position, because consumable is large data set, the retrieve method is optimized by paging.
            </summary>
            <param name="businessUnitIds"></param>
            <param name="lastProductEntityKey">Starting product EntityKey.</param>
            <returns>IEnumerbale of type IProduct</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.IProductMovableDao.FetchAllOrderedBasic(System.String[])">
            <summary>
            Get all consumables paged, because consumable is large data set, the retrieve method is optimized by paging.
            </summary>
            <returns>IEnumerbale of type IProduct</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.IProductMovableDao.FetchAllOrderedBasicFromPosition(System.String[],System.String)">
            <summary>
            Get all consumables paged from starting position, because consumable is large data set, the retrieve method is optimized by paging.
            </summary>
            <param name="businessUnitIds"></param>
            <param name="lastProductEntityKey">Starting product EntityKey.</param>
            <returns>IEnumerbale of type IProduct</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.IProductMovableDao.FetchSelectedProducts(System.String[])">
            <summary>
            Get all consumables by productIds
            </summary>
            <param name="productIds"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.IProductMovableDao.FetchAllAttributes(System.String[])">
            <summary>
            Get all product attributes paged , because consumable is large data set load the attributes as single entity
            </summary>
            <returns>IEnumerbale of type IProduct</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.IProductRestrictionBulkPersister.ClearProducts(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Product.IProduct})">
            <summary>
            Delete all restrictions for the listed products
            </summary>
            <param name="productsToClear"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Bulk.IPriceBulkPersister">
            <summary>
            responsible to save all prices at once.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IActiveTransactionSuspendJobConfiguration">
            <summary>
            Configuration for suspending Active Transactions Job
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IActiveTransactionSuspendJobConfiguration.Interval">
            <summary>
            Scheduled interval for job, to search for active transaction ready to suspend
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IActiveTransactionSuspendJobConfiguration.GetSuspendTimeSlotByTouchPointGroupName(System.String)">
            <summary>
            Time slot for execution of Job
            </summary>
            <param name="touchPointGroupName"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IActiveTransactionSuspendJobConfiguration.GetLifespanByTouchPointGroupName(System.String)">
            <summary>
            Collection of Touch Point Group names and lifespan for transactions per each, after which the transaction will be suspended
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IActiveTransactionSuspendJobConfiguration.AddLifespanValue(Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.TouchPointGroupNameToLifespan)">
            <summary>
            Adds or updates the value of a certain life span
            </summary>
            <param name="touchPointGroupNameToLifespan"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IBalancingJobConfiguration">
            <summary>
            Interface that holds configuration entries for cash office, such as balancing job configuration proprties.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IBalancingJobConfiguration.QueryTakeUpToInSeconds">
            <summary>
            This property is used by the store business period job.
            According to this property, the job takes only records that were created up until "QueryTakeUpToInSeconds" seconds ago.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IBalancingJobConfiguration.QueryTop">
            <summary>
            This property is used by the store business period job.
            This job runs a query which takes the "top" records according to this property.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IBalancingJobConfiguration.IntervalInSeconds">
            <summary>
            This property determines the interval (in seconds) in which the store business period job runs.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IBalancingJobConfiguration.ShouldRun">
            <summary>
            This property determines if the store business period job should run.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDataIntegrityJobConfiguration.TimeToRunJob">
            <summary>
            Daily running job
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.SuspendTimeSlot">
            <summary>
            Definition for Active transaction suspend job, which enables the job to suspend transactions between configured hours.
            If is not defined, the job will run always
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IRestrictedCardConfiguration">
            <summary>
            Restricted card provider parameters
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IRestrictedCardConfiguration.IsExternalEpsProvider">
            <summary>
            Indication of External or Internal (R10-EPS) provider 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ISelfScanUnregisteredConfiguration">
            <summary>
            Configuration for self scan unregistered job 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ISelfScanUnregisteredConfiguration.CheckStatusIntervalInSeconds">
            <summary>
            Schedule job check time cycle interval
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ISelfScanUnregisteredConfiguration.SelfScanAliveDiffInSeconds">
            <summary>
            Check time in seconds between self scan last status time to business time
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ConfigurationEntryDescriptor">
            <summary>
            Description of a single entry in configuration.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ConfigurationEntryDescriptor.#ctor(System.String,System.String,System.String,System.Type,System.String)">
            <summary>
            Create a new instance of ConfigurationEntryDescriptor
            </summary>
            <param name="group">The group this entry belongs to</param>
            <param name="entry">The entry name</param>
            <param name="description">The entry description</param>
            <param name="type">The entry type</param>
            <param name="defaultValue">The entry default value</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ConfigurationEntryDescriptor.Group">
            <summary>
            The group this entry belongs to
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ConfigurationEntryDescriptor.Entry">
            <summary>
            The entry name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ConfigurationEntryDescriptor.Description">
            <summary>
            The entry description
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ConfigurationEntryDescriptor.Type">
            <summary>
            The entry type
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ConfigurationEntryDescriptor.DefaultValue">
            <summary>
            The entry default value
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IAccessServicesConfiguration">
            <summary>
             configuration for  AccessServices
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IAccessServicesConfiguration.HQUrl">
            <summary>
             URL for R10 HQ 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IAccessServicesConfiguration.ParentUrl">
            <summary>
             URL of current parent R10
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IAccessServicesConfiguration.MobileFarmUrl">
            <summary>
            URL for Mobile Farm
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IAccessServicesConfiguration.UseSecureConnection">
            <summary>
            Indicates whether to use a secure connection when connecting with access services
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IAccessServicesConfiguration.EnableAccessServiceTrace">
            <summary>
            When true, dumps Access-Services requests and made by this client to the log
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IAccessServicesConfiguration.ServerBusyRetryCount">
            <summary>
            How many retries are allowed for an access service call
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IAccessServicesConfiguration.ServerMaxParallelRequests">
            <summary>
            How many concurrent threads can run on the server
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IAccessServicesConfiguration.InvokeTimeOut">
            <summary>
            Accessservices invokation yimeout
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IAccessServicesConfiguration.ServerBusyRetryWait">
            <summary>
            Call between retries
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IBIConfiguration">
            <summary>
            Configuration related to BI agent
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IBIConfiguration.IsBIDaoInUse">
            <summary>
            Check if BI is enabled
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfiguration">
            <summary>
             Generic configuration for business components
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfiguration.Name">
            <summary>
             The configuration name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfiguration.Entries">
            <summary>
            The generic configuration data entries
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfiguration.EntryExists(Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ConfigurationEntryDescriptor)">
            <summary>
            Check for the existence of configuration entry based on its descriptor
            </summary>
            <param name="configurationEntryDescriptor">The entry descriptor to search by</param>
            <returns>True if te entry exists</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfiguration.Get``1(Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ConfigurationEntryDescriptor)">
            <summary>
            Get configuration entry value based on its descriptor
            </summary>
            <typeparam name="T">The type of the entry value</typeparam>
            <param name="configurationEntryDescriptor">The entry descriptor to search by</param>
            <returns>The entry found, or default entry defined by the descriptor if it was not found</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationDao">
            <summary>
             Provide access to configuration instance.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationDao.GetReader(Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationDescriptor)">
            <summary>
            Returns a configuration reader for a specific configuration descriptor
            </summary>
            <param name="configurationDescriptor">The descriptor to locate the reader by</param>
            <returns>The relevant configuration reader.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationDao.GetAndSync(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationDescriptor})">
            <summary>
            Get the configuration instance for the configuration descriptor. 
            If the required configuration d not exists - creates and save default configuration using the descriptor.
            If configuration is out of date, fill the missing entries and save the configuration instance.
            </summary>
            <param name="configurationDescriptors">The descriptor to locate and sync the configuration by</param>
            <returns>The existing-synchronized configuration</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationDao.Save(Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfiguration)">
            <summary>
             Save a configuration instance.
            </summary>
            <param name="configuration">The configuration instance to save.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationDescriptor">
            <summary>
            Describe a generic configuration storage. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationDescriptor.Name">
            <summary>
            The name of the configuration.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationDescriptor.ConfigurationEntriesDescriptor">
            <summary>
            The descriptors of possible entries in the configuration.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationEntry">
            <summary>
            Entry representing one value in a configuration instance.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationEntry.Group">
            <summary>
            The group this entry belongs to.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationEntry.Entry">
            <summary>
            The entry name.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationEntry.Description">
            <summary>
            The entry description.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationEntry.ValueType">
            <summary>
            The type of the value.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationEntry.DefaultValue">
            <summary>
            The default value of the entry.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationEntry.Value">
            <summary>
            The value saved in the entry.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationEntryValue`1">
            <summary>
            The value of a configuration entry
            </summary>
            <typeparam name="T">The type of the entry value</typeparam>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationEntryValue`1.Value">
            <summary>
            The value of the entry
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationEntryValue`1.IsNull">
            <summary>
            indecent if the value is null
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationReader">
            <summary>
             Reads configuration entries based their descriptors
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationReader.Name">
            <summary>
             The name of the configuration reader
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationReader.Read``1(Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ConfigurationEntryDescriptor)">
            <summary>
            Read one entry based on its descriptor.
            </summary>
            <typeparam name="T">The entry value type</typeparam>
            <param name="configurationEntryDescriptor">The descriptor to use for reading</param>
            <returns>The entry value found.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationResolver">
            <summary>
             Can locate configuration descriptors based on its type.
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IConfigurationResolver.Resolve``1">
            <summary>
             Get configuration descriptor based on its type
            </summary>
            <typeparam name="T">The type of the configuration descriptor to look for.</typeparam>
            <returns>The descriptor found.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ICustomerConfiguration">
            <summary>
            Customer component configuration
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ICustomerConfiguration.LoyaltyProvider">
            <summary>
            The loyalty provider
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ICustomerConfiguration.CreditAccountProvider">
            <summary>
            Credit account provider
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ICustomerConfiguration.ResetHour">
            <summary>
            The account reset hour
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ICustomerConfiguration.GetMailingValue(System.String)">
            <summary>
            Returns settings value of customer mailing
            </summary>
            <param name="entryName">The name of the settings entry</param>
            <returns>Settings value of customer mailing</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfiguration">
            <summary>
            Configuration related to Dms agent
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfiguration.GetAllConfiguration">
            <summary>
             Return all DMS related configuration entries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfiguration.GetParameterValue(System.String)">
            <summary>
             Return DMS configuration parameter value
            </summary>
            <param name="parameterName">Configuration parameter name</param>
            <returns>Configuration parameter value</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfiguration.SessionProcessTokenKeyName">
            <summary>
            the same value as SessionUploadTokenIdKeyName or SessionDownloadTokenIdKeyName
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfiguration.SessionUploadTokenIdKeyName">
            <summary>
            Key for the valid security context placed on the current request for Upload
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfiguration.SessionDownloadTokenIdKeyName">
            <summary>
            Key for the valid security context placed on the current request for Download
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfiguration.SessionAllTokenIdKeyName">
            <summary>
             Key for the valid security context placed on the current request for All
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfiguration.DefaultRootBusinessUnitId">
            <summary>
            Default value of business unit id
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfiguration.TryGetParameterValue(System.String,System.String@)">
            <summary>
             Return DMS configuration parameter value
            </summary>
            <param name="parameterName">Configuration parameter name</param>
            <param name="value">result output</param>
            <returns>Configuration parameter value</returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfiguration.ColdStartRecoveryOn">
            <summary>
            Retrieves configuration representing if cold star recovery feature should be
            turned on.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfiguration.GetAllMaxExecutionInSeconds">
            <summary>
            Every implementation of IMovableDao.GetAll(...) must return immediatelly with a lazy IEnumerable.
            When executing this method, if it takes more time than this config param, then an error is logged.
            It does not, however, interrupt the execution.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfiguration.SecureMode">
            <summary>
            This paramter store the information whether to use claim mechanism in the cold start (2) solution.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfigurationEntry">
            <summary>
            Configuration entry for DMS 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfigurationEntry.Key">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDmsConfigurationEntry.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDPSSecurityConfiguration">
            <summary>
            Configuration of DPS
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDPSSecurityConfiguration.ApplicationId">
            <summary>
            Application Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDPSSecurityConfiguration.ApplicationUserName">
            <summary>
            Application user name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IDPSSecurityConfiguration.ConfigFileName">
            <summary>
            The name of the DPS configuration file
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IEPSSimulatorConfiguration">
            <summary>
            Configuration for EPS
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IEPSSimulatorConfiguration.EPSSimulatorProvider">
            <summary>
            The provider for the EPS simulator
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IFuelConfiguration">
            <summary>
            Configuration for fuel components 
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IFuelConfiguration.ForecourtHostUri">
            <summary>
            The forecourt host service URI
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IFuelConfiguration.FuellingPointHostUri">
            <summary>
            The forecourt Fuelling Point host service URI
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration">
            <summary>
            Container for all general configuration settings.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.PerformanceCountersEnable">
            <summary>
            Is performance counters are enable
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.CultureInfo">
            <summary>
            Application CultureInfo default "en-GB"
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.FirstDayOfBusinessWeek">
            <summary>
            The first day of the business week default 2 - 1 = Sunday, 2=Monday...
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.EnablePosCache">
            <summary>
            Indicates if caching is enabled to improve performance of selling actions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.PosCacheRefreshIntervalInMinutes">
            <summary>
            Interval in minutes for cache refresh
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.PromotionCacheRefreshIntervalInMinutes">
            <summary>
            Interval in minutes for cache refresh
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.TransactionCacheSlidingExpirationTimeInSeconds">
            <summary>
            Sets the sliding expiration time (in seconds) for the in memory implementation that uses idle sliding expiration time as a cleanup strategy.  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.EndOfDayDefaultStartTime">
            <summary>
            The Start time for the first End Of Day in the POS. Default is 23:30:00
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.TabInfoSynchronizationInterval">
            <summary>
            Synchronization time for tab infos
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.TabInfoSynchronizationEnabled">
            <summary>
            Synchronization time for tab infos
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.TabInfoSynchronizationRetailSegment">
            <summary>
            TabInfo synchronization retail segment
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.TabOrderForcePersistence">
            <summary>
            Tab order force persistance 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.RwhConfigurationDataSynchronizationInterval">
            <summary>
            Synchronization interval for datawarehouse configuration data
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.RwhAnalyticsJobAliveIntervalHours">
            <summary>
            Interval to check if RWH analytics job is alive
            In case of field ExecutionEndDate value of latest MD.Mng_BatchesLog table record more than specifyed in this parameter
            it's mean that RWH analytics job is not running
            Using to prevent of filling of ODS tables by OdsUpdateJob
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.EnableTaxCache">
            <summary>
            Indicates if tax caching is enabled to improve performance of selling actions.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.BusinessRuleCacheRefreshIntervalInMinutes">
            <summary>
            Interval in minutes for cache refresh
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.ConditionalRestrictionCacheRefreshIntervalInMinutes">
            <summary>
            Interval in minutes for cache refresh for Conditional Restriction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.AllowedReceiptVersionsForChange">
            <summary>
            Get the list of receipt versions allowed for editing. Returns null if all are allowed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IGeneralParametersConfiguration.BlockReceiptMaintenanceThroughOffice">
            <summary>
            Get whether updating receipts through office is allowed or not.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ILoyaltyProviderConfigurationEntry">
            <summary>
            Configuration entry of loyalty provider
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ILoyaltyProviderConfigurationEntry.Url">
            <summary>
            The providers' service URL
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ILoyaltyProviderConfigurationEntry.Timeout">
            <summary>
            Timeout to use when calling the provides' service
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ILoyaltyProviderConfigurationEntry.ControlQueryUrl">
            <summary>
            The control query service URL
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ILoyaltyProviderConfigurationEntry.ControlQueryPolling">
            <summary>
            The intervals for polling of control status
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ILoyaltyProviderConfigurationEntry.ReverseHebrewChars">
            <summary>
            Reverse char for Hebrew
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IPaymentValidatorConfiguration">
            <summary>
            Configuration for the payment validation services
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IPaymentValidatorConfiguration.ChequeValidator">
            <summary>
            Check validation service configuration
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IPaymentValidatorConfiguration.VoucherValidator">
            <summary>
            Voucher validation service configuration
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IPaymentValidatorConfiguration.CreditNoteValidator">
            <summary>
            Credit Note validation service configuration
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IPaymentValidatorConfigurationEntry">
            <summary>
            Configuration entry for a payment validation 
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IPaymentValidatorConfigurationEntry.Url">
            <summary>
            The services' URL
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IPaymentValidatorConfigurationEntry.Timeout">
            <summary>
            Timeout to use when calling the service
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IPriceApprovalActivationConfiguration">
            <summary>
            Price approval activation configuration.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IPriceApprovalActivationConfiguration.IsPriceApprovalActivated">
            <summary>
             Is price approval activated
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IPriceApprovalActivationConfiguration.GetPriceStatusDefaultValue">
            <summary>
            Get the price status default (Approved - in case IsPriceApprovalActivated = true or Pending otherwise)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IR10ServerIdentityInfo">
            <summary>
            Server identity configuration
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IR10ServerIdentityInfo.LogicName">
            <summary>
            The server's logical name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.IR10ServerIdentityInfo.ParentUri">
            <summary>
            The parent URI
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ITransactionLogConfiguration">
            <summary>
            Configuration for Transaction Log
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ITransactionLogConfiguration.TransactionLogPath">
            <summary>
            On disk log path
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ITransactionLogConfiguration.MsgQueOnline">
            <summary>
            MQ path
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ITransactionLogConfiguration.TransactionFileEnable">
            <summary>
            Enable writing transaction log to file
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ITransactionLogConfiguration.TransactionDBEnable">
            <summary>
            Enable writing transaction log to DB
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ITransactionLogConfiguration.MessageQueueEnable">
            <summary>
            Enable sending transaction to message queue
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ITransactionLogConfiguration.MSMQTransactional">
            <summary>
            Indicate that MSMQ is transactional
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ITransactionLogConfiguration.WriteContinuityAccountForNotIdentifiedCustomer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Configuration.ITransactionLogConfiguration.ValidateTransactionLog">
            <summary>
            Validating the t-log xml while writing it
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.LocalizedResourceSearchCriteria">
            <summary>
            Basic SearchCriteria that can be used for localized resource lookup.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.LocalizedResourceSearchCriteria.BusinessUnitIds">
            <summary>
            Identifiers of the business units for which resources are defined.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.LocalizedResourceSearchCriteria.ApplicationId">
            <summary>
            The application id of requested localized resource
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.LocalizedResourceSearchCriteria.Version">
            <summary>
            The version of requested localized resource
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.LocalizedResourceSearchCriteria.Context">
            <summary>
            The context of requested localized resource
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.LocalizedResourceSearchCriteria.Name">
            <summary>
            The name of requested localized resource
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.LocalizedResourceSearchCriteria.Culture">
            <summary>
            The culture of requested localized resource
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedDescriptionShared">
            <Summary>
             This interface holds the Localized Description definitions.
            </Summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedDescriptionShared.Value">
            <summary>
            The localized description data
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedDescriptionShared.Culture">
            <summary>
            The culture name in the format "lnguagecode2-country/regioncode2", ex: en-US, fr-CA
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedDescriptionShared.GetLocalizedDescription(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Globalization.ILocalizedDescription},System.String)">
            <summary>
            
            </summary>
            <param name="descriptions"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.Exceptions.CurrencySeparatorNotValidException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.Exceptions.CurrencyDecimalSeparatorNotValidException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.Exceptions.CurrencyDecimalSeparatorNotValidException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="currencyDecimalSeparator"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.Exceptions.CurrencyGroupSeparatorNotValidException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.Exceptions.CurrencyGroupSeparatorNotValidException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="currencyGroupSeparator"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.Exceptions.ShortDateFormatNotValidException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.Exceptions.ShortDateFormatNotValidException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.Exceptions.ShortTimeFormatNotValidException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.Exceptions.ShortTimeFormatNotValidException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="shortTimeFormat"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.Exceptions.NotFoundHierarchyCulturesException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IGlobalized`1">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.CultureInformation">
            <summary>
             A wrapper for the culture information in order to put it on the retail transaction extension data
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.CultureInformation.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Constructor
            </summary>
            <param name="cultureInfo">The culture info to wrap</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.CultureInformation.#ctor(System.Globalization.CultureInfo,System.String,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Constructor
            </summary>
            <param name="cultureInfo">The culture info to wrap</param>
            <param name="shortDateFormat">The Short Format of date</param>
            <param name="shortTimeFormat">The Short Format of time</param>
            <param name="numberFormatInfo">The formatting rules of a number</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.CultureInformation.Name">
            <summary>
            Culture name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.CultureInformation.ShortDateFormat">
            <summary>
            The Short Format of date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.CultureInformation.ShortTimeFormat">
            <summary>
            The Short Format of time
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.CultureInformation.NumberFormatInfo">
            <summary>
             Specifies the formatting of a number
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.GlobalString.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.GlobalString.Item(System.String)">
            <summary>
            Gets or Sets value for cultureName (in the format "lnguagecode2-country/regioncode2" - "en-US")  
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.GlobalString.LocalValue">
            <summary>
            Gets or Sets value for Default Culture ("en-US"). For Get, If value does not not exist for "en-US", gets First value from dictionary. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.GlobalString.GetValueAccordingToStoreCulture(System.String)">
            <summary>
            Gets value for cultureName (in the format "lnguagecode2-country/regioncode2" - "en-US"). If value does not not exist for given cultureName, gets First value from dictionary. 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.GlobalString.Empty">
            <summary>
            This property is not valid for a mutable object. Either use new() or the IsEmpty property.
            Empty instance of GlobalString. Practically the same as creating a new instance of GlobalString.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.GlobalString.IsEmpty">
            <summary>
            Indicate is there is any strings in the GlobalString instance.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.HierarchyCultureCriteria">
            <summary>
            Cireteria for searching the cultures of the store hiererchy
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.HierarchyCultureCriteria.StoreHierarchyLevelNodes">
            <summary>
            Hierarchy nodes to look for
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.Country.ICountryInfo">
            <summary>
            
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.Country.ICountryInfo.Code">
            <summary>
            Country code (e.g "ISR")
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.Country.ICountryInfo.Name">
            <summary>
            Country name (e.g "Israel")
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCultureDao">
            <summary>
            Data access object for associating culture to hierarchy node
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCultureDao.Save(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture})">
            <summary>
            Save association between hierarchy node and culture
            </summary>
            <param name="hierarchyCultures"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCultureDao.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit})">
            <summary>
            Deletes hierarchy cultures according to specified businessUnits
            </summary>
            <param name="businessUnits"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCultureDao.Lookup(Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.HierarchyCultureCriteria)">
            <summary>
            Lookup for hierarchy - culture associations 
            </summary>
            <param name="hierarchCultureCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCultureDao.GetHierarchyCultureOrAncester(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Get singe Hierarchy Culture by store hierarchy level node , 
            </summary>
            <param name="businessUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCultureDao.GetCultureInformation">
            <summary>
            Get current culture information by Business Unit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCultureDao.GetAllDifferentHierarchyCultures">
            <summary>
            Get all different cultures
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCultureDao.DeleteAll">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture">
             <summary>    
            
             </summary>
             <example> 
             <code lang="cs" description="This example shows how to create a HierarchyCulture in the context of a business service.">
             <![CDATA[
             public class CreateHierarchyCultureService
             {
                 private readonly IStoreApplication _storeApplication;
             
                 public CreateCustomerOrderService(IStoreApplication storeApplication)
                 {
                     _storeApplication = storeApplication;
                 }
             
                 public IHierarchyCulture CreateCustomerOrderTest()
                 {
                     var hierarchyCultureFactory = _storeApplication.Resolver.Resolve<IHierarchyCultureFactory>();
                     IHierarchyCulture hierarchyCulture = hierarchyCultureFactory.Create();
                     return hierarchyCulture;
                 }
             }]]>
             </code> 
             </example>
             <example>      
             <code lang="cs" description="This example shows how to retrieve an existing Hierarchy Culture in the context of a business service.">
             <![CDATA[
             public class GetHierarchyCultureService
             {
                 private readonly IHierarchyCultureDao _hierarchyCultureDao;
             
                 public GetHierarchyCultureService(IHierarchyCultureDao hierarchyCultureDao)
                 {
                     _hierarchyCultureDao = hierarchyCultureDao;
                 }
             
                 public IHierarchyCulture GetCustomerOrderTest()
                 {
                     string externalCustomerOrderId = "123";
                     ICustomerOrder customerOrder = _customerOrderDao.GetById(externalCustomerOrderId);
                     return customerOrder;
                 }
             }]]>
             </code>
             </example>
             
             <summary>
             Assigns culture to hierarchy level node
             </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.CultureName">
            <summary>
            <![CDATA[The culture name in the format "<languagecode2>-<country/regioncode2>", 
            where <languagecode2> is a lowercase two-letter code derived from ISO 639-1 and <country/regioncode2> is an uppercase two-letter code derived from ISO 3166.]]>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.ISOCurrencySymbol">
            <summary>
               The three-character ISO 4217 currency symbol which associated to the StoreHierarchy(e.g "USD").
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.ShortDateFormat">
            <summary>
            The Short Format of date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.ShortTimeFormat">
            <summary>
            The Short Format of time
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.CurrencyPositivePattern">
            <summary>
             Specifies the location of the currency symbol relative to Positive number
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.CurrencyNegativePattern">
            <summary>
             Specifies the location of the currency symbol relative to Negative number
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.CurrencyDecimalSeparator">
            <summary>
            The string to use as the decimal separator in currency values. 
            No longer than 3 chars and not include digit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.CurrencyGroupSeparator">
            <summary>
            The string that separates groups of digits to the left of the decimal in currency values.
            No longer than 3 chars and not include digit.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.BusinessUnit">
            <summary>
            Location to which the culture is assigned.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.VolumeUnitOfMeasure">
            <summary>
            A <see cref="T:System.String"/>that represent the volume unit of measure 
            For example it can be LTR which represent litters or GL which represent gallons 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.VolumeUnitOfMeasurePrecision">
            <summary>
            A <see cref="T:System.Int32"/> that represent the precision of the volume unit.
            for example if Precision is set to 3 and the volume is 4.5678 LTR then it will be set to 4.568
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.VolumePricePrecision">
            <summary>
            A <see cref="T:System.Int32"/> that represent the precision of the volume price.
            for example if Precision is set to 3 and the volume price is 4.5678 then it will be set to 4.568
            </summary> 
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.TemperatureUnitOfMeasure">
            <summary>
            A <see cref="T:System.String"/> that represent the Temperature unit of measure 
            For example it can be FAH which represent Fahrenheit or CEL which represent celsius 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.LengthUnitOfMeasure">
            <summary>
            A <see cref="T:System.String"/> that represent the Length unit of measure 
            For example it can be CEN which represent centimeter or INCH which represent INCH
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.DimensionsPrecision">
            <summary>
            A <see cref="T:System.Int32"/> that represent the precision of the Dimensions e.g. length.
            for example if Precision is set to 3 and the Dimensions is 4.5678 then it will be set to 4.568
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.PricePrecision">
            <summary>
            A <see cref="T:System.Int32"/> that represent the precision of the price unit.
            for example if Precision is set to 3 and the price is 4.5678  then it will be set to 4.568
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.WeightPrecision">
            <summary>
            A <see cref="T:System.Int32"/> that represent the precision of the Weight unit.
            for example if Precision is set to 3 and the Weight is 4.5678  then it will be set to 4.568
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture.QuantityPrecision">
            <summary>
            A <see cref="T:System.Int32"/> that represent the precision of the Quantity unit.
            for example if Precision is set to 3 and the volume is 4.5678  then it will be set to 4.568
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource">
            <summary>
            Represents a data structure that is defined differently for each Locale
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource.ApplicationId">
            <summary>
            The application Id using the resource
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource.Version">
            <summary>
            The application version
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource.Context">
            <summary>
            The context in witch this resource should appear
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource.Name">
            <summary>
            the Name/Key defines the resource
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource.DefaultData">
            <summary>
            the default data of the resource not relate to specific culture
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource.AddResourceData(System.String,System.String,System.String,System.String)">
            <summary>
            Add new resource data to the collection
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource.AddOrUpdateResourceData(System.String,System.String,System.String,System.String)">
            <summary>
            Add new resource data to the collection or Update existing
            </summary>
            <param name="culture">The culture of the data</param>
            <param name="dataType">The data type</param>
            <param name="data">The data</param>
            <param name="businessUnitId">The business unit</param>
            <returns>The constructed instance of the new ILocalizedResourceData</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource.GetResourceData(System.String,System.String)">
            <summary>
            Retrieve resource data from the collection according to the culture and business unit id
            </summary>
            <param name="culture"></param>
            <param name="businessUnitId"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource.ResourceData">
            <summary>
            Retrieve all resource data from the collection
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource.LastUpdated">
            <summary>
            Gets Last Modified Date of the localized resource record. Each time the localized resource is updated, the LastUpdated gets new value.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao">
            <summary>
            Data access object for localized resources
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.Update(Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource)">
            <summary>
            saves given localized resource
            </summary>
            <param name="localizedResource"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.GetResourcesByAppAndVersion(System.String,System.String)">
            <summary>
            /// Get localized resources according to application and version
            </summary>
            <param name="applicationId"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.GetResourcesByAppVersionAndContext(System.String,System.String,System.String)">
            <summary>
            /// Get localized resources according to application and version and context
            </summary>
            <param name="applicationId"></param>
            <param name="version"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.GetResourcesByAppVersionAndName(System.String,System.String,System.String)">
            <summary>
            /// Get localized resources according to application and context and name
            </summary>
            <param name="applicationId"></param>
            <param name="context"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.GetResources(Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.LocalizedResourceSearchCriteria)">
            <summary>
            Get localized resources according to searchCriteria
            </summary>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.GetDistinctApplications">
            <summary>
            /// Get destinct ApplicationIds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.GetDistinctVersions(System.String)">
            <summary>
            /// Get destinct versions of resources by application
            </summary>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.GetDistinctContexts(System.String,System.String)">
            <summary>
            /// Get destinct Contexts of resources by applicationId and version
            </summary>
            <param name="applicationId"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.GetDistinctCultures(System.String,System.String,System.String)">
            <summary>
            Return all the cultures that are associated to resources of specific application, version and context(if exists)
            </summary>
            <param name="applicationId"></param>
            <param name="version"></param>
            <param name="context"></param>
            <returns>culture name</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.GetFilteredResourcesByAppVersionContextAndCulture(System.String,System.String,System.String,System.String)">
            <summary>
            /// Get localized resources according to applicationId and version and context, where Data filtered by culture
            </summary>
            <param name="applicationId"></param>
            <param name="version"></param>
            <param name="context"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.GetFilteredResourcesByAppVersionAndCulture(System.String,System.String,System.String)">
            <summary>
            /// Get localized resources according to applicationId and version, where Data filtered by culture
            </summary>
            <param name="applicationId"></param>
            <param name="version"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.Add(Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource)">
            <summary>
            Add new resource to the data storage
            </summary>
            <param name="localizedResource"></param>
            <returns>The constructed new instance of the ILocalizedResource</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.CreateUniqueIdetifierXml(Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource)">
            <summary>
            OnCreate xml with identifier data for data movement provider
            </summary>
            <param name="localizedResource"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.Get(System.String)">
            <summary>
            Retrieve localized resource according to xml identifier, for data movement provider
            </summary>
            <param name="xmlIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.AddDefaultResource(Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResource)">
            <summary>
            Add new localizedResource
            </summary>
            <param name="localizedResource"> Must have DefaultValue</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceDao.DeleteAll">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceData">
            <summary>
            Represents the data stores for each locale
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceData.Culture">
            <summary>
            The culture in witch the data belongs
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceData.DataType">
            <summary>
            The type of data stores
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceData.Data">
            <summary>
            the data stores
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.ILocalizedResourceData.BusinessUnitId">
            <summary>
            Gets or sets the IBusinessUnit ID to which the localized resource data parameters are relevant
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.DefaultCountersTracker">
            <summary>
            This class is aims to track and update default set of performance counters on the given instance.
            The default counters are:
            Total Of Message Requests Received
            Total Of Message Requests Succeeded
            Total Of Message Requests Failed
            Total Of Message Requests Per Sec
            Average Request Processing Time
            
            
            In case that counters are enable in the application and in case that the R10Server category exists than the class will start and update the counters above at the end of the track able operation.
            In case of null instance no tracker will be created.
            
            The class is deposable so end of operation will be at the end of the instance scope.
            You should set status to success in the last raw of your tractable execution otherwise the tracker will consider the execution result as failed.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.DefaultCountersTracker.#ctor(System.String)">
            <summary>
            Init counters for the given instance name
            </summary>
            <param name="instanceName"></param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.DefaultCountersTracker.Success">
            <summary>
            Determine if the call for the service was passed ok. 
            Without set success = true the call will be considered as failure.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.DefaultCountersTracker.Dispose">
            <summary>
            The tracker implement disposable. When scope is ending the tracker will increment the counters for this service.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Extensions.IDataExtension">
            <summary>
             interface for extend any entity in R10 server 
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Extensions.IDataExtension.GetData``1">
            <summary>
            Get a data extension by type.
            </summary>
            <typeparam name="T">The type of the paticipant to fetch</typeparam>
            <returns>The instance of the paticipant is exists.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Extensions.IDataExtension.GetData``1(System.String)">
            <summary>
            Get a data extension by type and key.
            </summary>
            <typeparam name="T">The type of the paticipant to fetch</typeparam>
            <param name="key">The key of the participant to fetxh</param>
            <returns>The instance of the paticipant is exists.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Extensions.IDataExtension.SetData``1(System.Object)">
            <summary>
            Set a data extension by type.
            </summary>
            <typeparam name="T">The type of the paticipant to set</typeparam>
            <param name="value">The participant instance.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Extensions.IDataExtension.SetData``1(System.String,System.Object)">
            <summary>
            Set a data extension by type and key.
            </summary>
            <typeparam name="T">The type of the paticipant to set</typeparam>
            <param name="key">The key of the paticipant to set</param>
            <param name="value">The participant instance.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Extensions.IOnSaveObserver`1">
            <summary>
            Generic entity data movment observer
            </summary>
            <typeparam name="TEntity">The type of entity to observe</typeparam>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Extensions.IOnSaveObserver`1.EndSave(`0)">
            <summary>
            Called after the entity was logically sent to the data storage
            </summary>
            <param name="entity">The type of entity</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Extensions.IOnSaveObserver`1.EndSave(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Called after a list of entities was logically sent to the data storage
            </summary>
            <param name="entities">The type of entity</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Extensions.IOnSaveObserver`1.FailedToSave(System.Exception)">
            <summary>
            Called after saving of entity to the data storage failed
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParameters">
            <summary>
            receive parameterValue from Application parameters
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParameters.ParameterExists(System.String,System.String)">
            <summary>
            Check if parameter exists
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="storeId">Store internal key the parameter is set for</param>
            <returns>True if the parameter exists</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParameters.GetParameter(System.String,System.String)">
            <summary>
            Get parameter value
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="storeId">Store internal key the parameter is set for</param>
            <returns>Parameter value</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParametersRepository">
            <summary>
            Data access object for for system parameters
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParametersRepository.GetByKeyAndStore(System.String,System.String)">
            <summary>
            Gets an <see cref="T:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter">ISystemParameter</see> object associated with the store by searching up the business unit  
            hierarchy starting at the business unit associated with <paramref name="storeId"/>.
            If no matching parameter exists throws ApplicationParameterNotExistException.
            </summary>
            <param name="parameterKey">The parameter key.</param>
            <param name="storeId">
            The ID of the business unit at which to start looking for the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter">ISystemParameter</see>
            with the specified <paramref name="parameterKey"/>.
            If <paramref name="storeId"/> is null, searches for a <see cref="T:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter">ISystemParameter</see> with the 
            specified <paramref name="parameterKey"/> in the root business unit.
            </param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter">ISystemParameter</see> object associated with the store by searching up the business unit  
            hierarchy starting at the business unit associated with <paramref name="storeId"/>.
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParametersRepository.GetByKeyStoreAndGeneralStore(System.String,System.String,System.String)">
            <summary>
            Get system parameter by key, store and general store id
            </summary>
            <param name="parameterKey">The parameter key</param>
            <param name="storeId">The store internal id</param>
            <returns>The System Parameter</returns>
            <param name="generalStoreId">The systems' root store id </param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParametersRepository.FindByKeyAndStore(System.String,System.String)">
            <summary>
            Gets an <see cref="T:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter">ISystemParameter</see> object associated with the store by searching up the business unit  
            hierarchy starting at the business unit associated with <paramref name="storeId"/>, or null if no matching system parameter is found.
            </summary>
            <param name="parameterKey">The parameter key.</param>
            <param name="storeId">
            The ID of the business unit at which to start looking for the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter">ISystemParameter</see>
            with the specified <paramref name="parameterKey"/>.
            If <paramref name="storeId"/> is null, searches for a <see cref="T:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter">ISystemParameter</see> with the 
            specified <paramref name="parameterKey"/> in the root business unit.
            </param>
            <returns>An <see cref="T:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter">ISystemParameter</see> object associated with the store by searching up the business unit  
            hierarchy starting at the business unit associated with <paramref name="storeId"/>, or null if no matching system parameter is found.
            </returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParametersRepository.SafeFindByKeyAndStore(System.String,System.String)">
            <summary>
             Retrieve a system parameter by key, and store.
            </summary>
            <param name="parameterKey">The parameter key</param>
            <param name="storeId">The store internal id.  If null is passed, root is used in its place.</param>
            <returns>The System Parameter with value from database. If not exists in database, returns ISystemParameter with NULL value.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParametersRepository.TryGetByKeyStoreAndGeneralStore(System.String,System.String,System.String,Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter@)">
            <summary>
            Try get system parameter by key, store and general store id
            </summary>
            <param name="parameterKey">The parameter key</param>
            <param name="storeId">The store internal id</param>
            <param name="generalStoreId">The systems' root store id</param>
            <param name="systemParameter">The system parameter to return if found</param>
            <returns>True of fetch succeed</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParametersRepository.SetApplicationParameter(Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter)">
            <summary>
            Save system parameter
            </summary>
            <param name="systemParameter">The system parameter to save</param>
            <returns>The saved system parameter</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParametersRepository.SaveOrUpdate(Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter)">
            <summary>
            Adds Or Update System Parameter
            </summary>
            <param name="systemParameter">The system parameter to save</param>
            <returns>The saved system parameter</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParametersRepository.GetByGroupAndStores(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            get parameters by group type and list of stores
            </summary>
            <param name="group"></param>
            <param name="storeIds"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParametersRepository.Delete(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter})">
            <summary>
            delete a system Parameter
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IApplicationParametersRepository.FindByGroup(System.String)">
            <summary>
             Find system parameters by group name
            </summary>
            <param name="group">group name</param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.IComponentConfigurationDao">
            <summary>
            Provide access to component configuration resources.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.IComponentConfigurationDao.GetAllResources">
            <summary>
            Return all the resource available through this DAO implementation.
            </summary>
            <returns>List of configuration resource</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter">
            <summary>
            Generic system parameter
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter.StoreId">
            <summary>
            The store id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter.ParameterKey">
            <summary>
            The parameter key
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter.ParameterValue">
            <summary>
            The parameter value
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter.ParameterGroup">
            <summary>
            The parameter group
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.ISystemParameter.ConvertToBool(System.Boolean)">
            <summary>
            Returns a Boolean representation of the parameter's value if possible.
            Otherwise returns default value 
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.LightDataContainer">
            <summary>
            Factory implementation of IDataContainer
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.LightDataContainer.#ctor">
            <summary>
            OnCreate new instance of DataContainer
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.LightDataContainer.Set``1(``0)">
            <summary>
            Set a value using the supplied type as it's key.
            </summary>
            <typeparam name="T">The type-key.</typeparam>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.LightDataContainer.Set``1(System.String,``0)">
            <summary>
            Set a value using the supplied type combined with a string key as it's key.
            </summary>
            <typeparam name="T">The type part of the key.</typeparam>
            <param name="key">The string part of the key.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.LightDataContainer.Get``1">
            <summary>
            Get a value using the supplied type as it's key.
            </summary>
            <typeparam name="T">The type-key</typeparam>
            <returns>The value</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.LightDataContainer.Get``1(System.String)">
            <summary>
            Get a value using the supplied type combined with a string key as it's key.
            </summary>
            <typeparam name="T">The type part of the key</typeparam>
            <param name="key">The string part of the key.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.LightDataContainer.Contains``1">
            <summary>
            Test for the existence of a value using the supplied type as it's key.
            </summary>
            <typeparam name="T">The type-key</typeparam>
            <returns>True is any value was set using this key.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.LightDataContainer.Contains``1(System.String)">
            <summary>
            Test for the existence of a value using the supplied type combined with a string key as it's key.
            </summary>
            <typeparam name="T">The type part of the key</typeparam>
            <param name="key">The string part of the key.</param>
            <returns>True is any value was set using this key</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.LightDataContainer.Remove``1">
            <summary>
            Remove a value using the supplied type as it's key.
            </summary>
            <typeparam name="T">The type-key</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.LightDataContainer.Remove``1(System.String)">
            <summary>
            Remove a value using the supplied type combined with a string key as it's key
            </summary>
            <typeparam name="T">The type part of the key</typeparam>
            <param name="key">The string part of the key.</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.LightDataContainer.Get(System.Tuple{System.Type,System.String})">
            <summary>
            Get value using DataContainerKey
            </summary>
            <param name="dataContainerKey">The key to use for lookup</param>
            <returns>The value if exists, or null if not</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.LightDataContainer.Set(System.Tuple{System.Type,System.String},System.Object)">
            <summary>
            Set value using DataContainerKey
            </summary>
            <param name="key">The key to use for set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.PerformanceCounterTracker">
            <summary>
            Allow setting up performance counter from code, to track performance without access to the unit-of-work scope.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.PerformanceCounterTracker.MeasureInstanceForCurrentRequest(System.String)">
            <summary>
            Setup set of counters to be committed at the conclusion of the current-request, that is the default unit of work.
            The proffered implementation will use the DefaultCountersTracker <see cref="T:Retalix.StoreServices.Model.Infrastructure.Legacy.DefaultCountersTracker"/>
            The duration of a single instance measurement will start from the moment the method is called, up to the completion or failure of the current request.
            </summary>
            <param name="instanceName">The instance to update the performance counters for</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.PerformanceCounterTracker.Initialize(Retalix.StoreServices.Model.Infrastructure.Legacy.PerformanceCounterTracker)">
            <summary>
            This is an initialization method, that should be called only once at the system setup.
            </summary>
            <param name="performanceCounterTracker">The PerformanceCounterTracker implementation</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.PerformanceCounterTracker.Instance">
            <summary>
            Return the PerformanceCounterTracker instance.
            This may return null if not initialized.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Exceptions.BulkMaintenance.BulkMaintenanceActionException">
            <summary>
            Bulk action exception used for handling business exception thrown during a bulk maintenance process
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Exceptions.BulkMaintenance.BulkMaintenanceActionException.#ctor(System.Exception,System.String,System.String,System.String)">
            <summary>
            Initialize new bulk action exception
            </summary>
            <param name="businessException">Caught business exception</param>
            <param name="businessEntityIdentifier">Object's identifier for which action failed</param>
            <param name="actionName">Failed action name</param>
            <param name="errorCode">Error code</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Exceptions.BulkMaintenance.BulkMaintenanceExceptionSummary">
            <summary>
            Handle bulk action exceptions 
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Exceptions.BulkMaintenance.BulkMaintenanceExceptionSummary.BusinessErrors">
            <summary>
            Get all handled bulk action exceptions 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.Exceptions.BulkMaintenance.BulkMaintenanceExceptionSummary.Count">
            <summary>
            Count of business errors
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Legacy.Exceptions.BulkMaintenance.BulkMaintenanceExceptionSummary.AddException(System.Exception,System.String,System.String)">
            <summary>
            Add bulk action exception
            </summary>
            <param name="ex">The business exception which caught while performing bulk actions</param>
            <param name="entityBusinessidentifier">Object's identifier for which action failed</param>
            <param name="actionName">Failed action name</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.Exceptions.RoleActionsDaoServiceCannotBeCreatedException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.AuxiliaryTool.AuxiliaryData">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.AuxiliaryTool.ComplexVersions">
            <summary>
             Hold versions of all types of applications
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.AuxiliaryTool.ComplexVersions.CoreVersion">
            <summary>
             Server version
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Legacy.AuxiliaryTool.IAuxiliaryData">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.AuxiliaryTool.IAuxiliaryData.TouchPointGroupId">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.AuxiliaryTool.IAuxiliaryData.TouchPointId">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.AuxiliaryTool.IAuxiliaryData.ComputerName">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.AuxiliaryTool.IAuxiliaryData.DomainName">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.AuxiliaryTool.IAuxiliaryData.StoreId">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.AuxiliaryTool.IAuxiliaryData.ReadyToUpdate">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Legacy.AuxiliaryTool.IAuxiliaryData.Version">
            <summary>
             Hold versions of all types of applications
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Message.IExpressionResolver">
            <summary>
             Resolver the values from expression 
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IExpressionResolver.GetValue(Retalix.StoreServices.Model.Infrastructure.Message.IExpressionContext,System.String)">
            <summary>
             Resolver the value from  requestContext by expression
            </summary>
            <param name="expressionContext"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IExpressionResolver.GetValues(Retalix.StoreServices.Model.Infrastructure.Message.IExpressionContext,System.String,System.Type)">
            <summary>
             Resolver the values from  requestContext by expression
            </summary>
            <param name="ruleContext"></param>
            <param name="expression"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IExpressionResolver.GetTag(System.String)">
            <summary>
             Resolver the tags from expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessageDao">
            <summary>
            The Message data acess interface gets/creates/updates/deletes Message in the data source.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IMessageDao.SaveOrUpdate(Retalix.StoreServices.Model.Infrastructure.Message.IMessage)">
            <summary>
            Save or update Message in the data source.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IMessageDao.Get(System.String)">
            <summary>
            Get Message from data source.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IMessageDao.GetById(System.Int32)">
            <summary>
            Get message by its ID - use locally only, the ID is not maintained over multi-tiers
            </summary>
            <param name="id">PK of the message</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IMessageDao.Find(System.String[])">
            <summary>
            Find Message from the data source by Message names.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IMessageDao.Delete(Retalix.StoreServices.Model.Infrastructure.Message.IMessage)">
            <summary>
            Delete Message from the data source.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessageFactory">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinition">
            <summary>
            Dynamic field for message editor definitions
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinition.Key">
            <summary>
            The parameter identifier, should be EntityName.PropertyName
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinition.DisplayLength">
            <summary>
            The amount of chars this parameter uses within the message
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinition.ParameterType">
            <summary>The type of parameter</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinition.Align">
            <summary>Default alignment for the data in this parameter.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinition.CurrencySignElement">
            <summary>Default Currency Sign Element for parameter.</summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinition.OptionFilter">
            <summary>Filter used to limit choices for option selectors in the UI</summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinitionDao">
            <summary>
            Data Access Object for Message Parameter Definitions
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinitionDao.Get(System.String)">
            <summary>
            Get a Message Parameter Defintion
            </summary>
            <param name="key">The key of the parameter, EntityName.PropertyName</param>
            <returns>Message Parameter Definition</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinitionDao.Save(Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinition)">
            <summary>
            Add or Update a Message Parameter Definition
            </summary>
            <param name="messageParameterDefinition">Message Parameter Definition</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinitionDao.GetAll">
            <summary>
            Get All Message Parameter Definitions
            </summary>
            <returns>Enumerable of Message Parameter Definitions</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinitionDao.Delete(Retalix.StoreServices.Model.Infrastructure.Message.IMessageParameterDefinition)">
            <summary>
            Delete Message Parameter Definition
            </summary>
            <param name="messageParameterDefinition">the Message Parameter Definition to delete</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Audit.SerializedKeyValuePair`2">
            <summary>
            Provides the ability to serialize a <see cref="T:System.Collections.Generic.KeyValuePair`2">KeyValuePair</see>
            </summary>
            <typeparam name="TK">KeyValuePair Key type</typeparam>
            <typeparam name="TV">KeyValuePair Value type</typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.VoidStatus">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.VoidStatus">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.StoreId">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.AmountValue">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.EntryMethod">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.Currency">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.RequestedAmountValue">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.RequestedAmountCurrency">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.ReferenceNumber">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.MerchantNumber">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.TransactionDate">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.ProviderId">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.ProviderData">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.CardId">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.CardType">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.TenderId">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.TenderDescription">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.VerifiedByPinFlag">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.SignatureRequired">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.IsRefundTender">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.IsChangeTender">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.MaskedAccountId">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.AuthorizationType">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.CreditTypeName">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.LineCreationDateTime">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.LineSequenceNumber">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.CustomerReceipt">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.CommonAuditLogData.EpsAuthorizationAuditLogData.TerminalId">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Audit.RelatedAuditLog">
            <summary>
            Audit activity that depends on another (Significant) activity, so audits made to the Significant activity 
            applys to this activity as well.
            Example: Payment that was completed based on authorization of its' Term.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.RelatedAuditLog.LineSequenceNumber">
            <summary>
            Gets or sets the sequence number of the line the audit was logged for.
            </summary>
            <value>The sequence number.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Audit.RelatedAuditLog.RelatedLineSequenceNumber">
            <summary>
            The line number in the transaction that this audited line is depends on.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.ApprovalRequiredAuditLog">
            <summary>
            Class ApprovalRequiredAuditLog
            This entity is used to save data about the business rules with approval required results in the TLog
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.ApprovalRequiredAuditLog.IsApproved">
            <summary>
            Gets or sets a value indicating whether the rule has been approved.
            </summary>
            <value><c>true</c> if the rule has been approved; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.ApprovalRequiredAuditLog.OperatorName">
            <summary>
            Gets or sets the name of the operator that was required to approve the operation.
            </summary>
            <value>The name of the operator.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.ApprovalRequiredAuditLog.OperatorId">
            <summary>
            Gets or sets the id number of the operator that approved the operation.
            </summary>
            <value>The operator id.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.ApprovalRequiredAuditLog.OperatorType">
            <summary>
            Gets or sets the type of the operator that approved the operation.
            </summary>
            <value>The operator id.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.InputDataRequiredAuditLog">
            <summary>
            Class InputDataRequiredAuditLog
            This entity is used to save data about the business rules with input data required results in the TLog
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.InputDataRequiredAuditLog.InputName">
            <summary>
             Gets or sets the name of the input field that was received from the client in response to an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.InputDataRequiredAuditLog">InputDataRequired</see> exception.
            </summary>
             <value>The name of the input data received form the user.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.InputDataRequiredAuditLog.InputType">
            <summary>
             Gets or sets the type of the data that was received from the client in response to an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.InputDataRequiredAuditLog">InputDataRequired</see> exception.
            </summary>
             <value>The type of input data received form the user.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.InputDataRequiredAuditLog.InputData">
            <summary>
             Gets or sets the data that was received from the client in response to an <see cref="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.InputDataRequiredAuditLog">InputDataRequired</see> exception.
            </summary>
             <value>The input data received form the user.</value>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.ReasonCodeRequiredAuditLog">
            <summary>
            Class ReasonCodeRequiredAuditLog
            This entity is used to save data about the business rules with reason code required results in the TLog
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.ReasonCodeRequiredAuditLog.ReasonCodeId">
            <summary>
            Gets or sets the reason code id of the business rule result.
            </summary>
            <value>
            The reason code id.
            </value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.ReasonCodeRequiredAuditLog.ReasonCodeName">
            <summary>
             Gets or sets the data received from the user after sending a ReasonCodeRequired Exception.
            </summary>
             <value>The name of the reason code received form the user.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.BusinessRules.Audit.ReasonCodeRequiredAuditLog.ReasonCodeGroupId">
            <summary>
            Gets or sets the reason code group id of the business rule result.
            </summary>
            <value>
            The reason code group id.
            </value>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.FailuresMessagesHandlers.ISendExternalOrderServiceErrorMessagesToDbHandler.HandleFailuresMessages(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage})">
            <summary>
            Save the error messages into the database
            </summary>
            <param name="failures">List of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage">messages</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.FailuresMessagesHandlers.ISendExternalOrderServiceErrorMessagesToDbHandler.HandleFailuresMessages(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage},System.Exception)">
            <summary>
            Save the error messages into the database
            </summary>
            <param name="messages">List of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage">messages</see></param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.FailuresMessagesHandlers.ISendExternalOrderServiceErrorMessagesToDbHandler.HandleFailuresMessages(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage},System.Exception)">
            <summary>
            Save the error messages into the database
            </summary>
            <param name="messages">List of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage">messages</see></param>
            <param name="ex">Exception</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.FailuresMessagesHandlers.ISendExternalOrderServiceErrorMessagesToDeadLetterExchangeHandler">
            <summary>
            Send an error messages to the deadletter exchange
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.FailuresMessagesHandlers.ISendExternalOrderServiceErrorMessagesToDeadLetterExchangeHandler.HandleFailuresMessages(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage})">
            <summary>
            Send the error messages to the deadletter exchange
            </summary>
            <param name="failures">List of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage">messages</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.FailuresMessagesHandlers.ISendExternalOrderServiceErrorMessagesToDeadLetterExchangeHandler.HandleFailuresMessages(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage})">
            <summary>
            Send the error messages to the deadletter exchange
            </summary>
            <param name="messages">List of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage">messages</see></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.FailuresMessagesHandlers.ISendReportingWarehouseErrorMessagesToDbHandler">
            <summary>
            Send an error messages to the database
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.FailuresMessagesHandlers.ISendReportingWarehouseErrorMessagesToDbHandler.HandleFailuresMessages(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage})">
            <summary>
            Save the error messages into the database
            </summary>
            <param name="failures">List of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage">messages</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.FailuresMessagesHandlers.ISendReportingWarehouseErrorMessagesToDbHandler.HandleFailuresMessages(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage},System.Exception)">
            <summary>
            Save the error messages into the database
            </summary>
            <param name="messages">List of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage">messages</see></param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.FailuresMessagesHandlers.ISendReportingWarehouseErrorMessagesToDbHandler.HandleFailuresMessages(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage},System.Exception)">
            <summary>
            Save the error messages into the database
            </summary>
            <param name="messages">List of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage">messages</see></param>
            <param name="ex">Exception</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.FailuresMessagesHandlers.ISendReportingWarehouseErrorMessagesToDeadLetterExchangeHandler">
            <summary>
            Send an error messages to the deadletter exchange
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.FailuresMessagesHandlers.ISendReportingWarehouseErrorMessagesToDeadLetterExchangeHandler.HandleFailuresMessages(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage})">
            <summary>
            Send the error messages to the deadletter exchange
            </summary>
            <param name="failures">List of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage">messages</see></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.FailuresMessagesHandlers.ISendReportingWarehouseErrorMessagesToDeadLetterExchangeHandler.HandleFailuresMessages(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage})">
            <summary>
            Send the error messages to the deadletter exchange
            </summary>
            <param name="messages">List of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage">messages</see></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.IErrorQueueArchive">
            <summary>
            Error messages to archive connector
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IErrorQueueArchive.SaveErrorMessage(Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage)">
            <summary>
            Save message to the archive
            </summary>
            <param name="queueErrorMessage">Error message</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IErrorQueueArchive.GetMessagesList(System.Guid)">
            <summary>
            Gets a single or no error message from the archive
            </summary>
            <param name="messageId">Error Message's id</param>
            <returns>Queue Error Message (or none)</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IErrorQueueArchive.GetMessagesList(System.DateTime,System.DateTime)">
            <summary>
            Gets a set of error messages
            </summary>
            <param name="startDateTime">Starting date-time</param>
            <param name="endDateTime">Ending date-time</param>
            <returns>Set of error messages</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IErrorQueueArchive.DeleteQueueErrors(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes error messages by their ids.
            </summary>
            <param name="queueErrorMessages">Set of ids to be deleted</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IErrorQueueArchive.GetMessagesList(System.Int32)">
            <summary>
            Gets a set of error messages
            </summary>
            <param name="batchSize">The max number of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage">messages</see> to retrieve</param>
            <returns>Set of error messages</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IErrorQueueArchive.GetMessagesList(Retalix.StoreServices.Model.ThirdPartyIntegration.TLog.ThirdPartyUndeliveredTlogSearchCriteria,Retalix.StoreServices.Model.ThirdPartyIntegration.TLog.ThirdPartyUndeliveredTlogOrderBy)">
            <summary>
            Gets a set of error messages
            </summary>
            <param name="searchCriteria">The search criteria.</param>
            <param name="orderBy">The search criteria.</param>
            <returns>Set of error messages</returns>
        </member>
        <member name="E:Retalix.StoreServices.Model.Infrastructure.Queue.IDocumentQueueHandler.QueueMessageHandled">
            <summary>
            Notify subscribers that message was handled.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IDocumentQueueHandler.PublishDocumentEvent(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage})">
            <summary>
            Used by current implementation of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IMessageQueueHandler">IMessageQueueHandler</see> to 
            provide backward compatibility.
            </summary>
            <param name="documentMessages"><see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage">Messages</see> fetched from <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IMessageQueue">queue</see> 
            and should be passed to legacy handlers</param>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage.MessageId">
            <summary>
            Message Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage.Id">
            <summary>
            Transaction Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage.User">
            <summary>
            The user of the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage.WorkstationId">
            <summary>
            The workstation id of the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage.TransactionDate">
            <summary>
            Transaction date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage.BusinessDate">
            <summary>
            The business date of the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage.Resend">
            <summary>
            Define if need to send a message again to Reporting Warehouse
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage.ErrorDescription">
            <summary>
            The description of the error from Reporting Warehouse
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage.DocumentType">
            <summary>
            Type of document
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceErrorMessage.OriginalQueueMessage">
            <summary>
            A message that was sent to the Reporting Warehouse
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueConfiguration.DequeueBatchSize">
            <summary>
            Number of messages pulled in a single de-queue action
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueConfiguration.DefaultAttempts">
            <summary>
            The default number of retry attempts to perform before turning the message to "poisoned"
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueConfiguration.DequeueInterval">
            <summary>
            Sleep time in milliseconds between de-queue attempts
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueConfiguration.MaximumParallelThreads">
            <summary>
            Maximum Number of parallel threads 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueConfiguration.IsRunning">
            <summary>
            If false, message queue system is turned off.
            Default is true.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueConfiguration.DeadletterDequeueBatchSize">
            <summary>
            Number of deadletter messages pulled in a single de-queue action 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueConfiguration.DeadletterDefaultAttempts">
            <summary>
            The default number of retry attempts to perform before turning the deadletter message to "poisoned"
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueConfiguration.DeadletterDequeueInterval">
            <summary>
            Sleep time in milliseconds between deadletter de-queue attempts
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueConfiguration.QueueIsLazy">
            <summary>
            If true queue is in lazy mode.
            default is false.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueErrorMessageDao.Save(Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage)">
            <summary>
            Save message to the database
            </summary>
            <param name="queueErrorMessage">Error message</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueErrorMessageDao.Get(System.Guid)">
            <summary>
            Gets a single or no error message from the database
            </summary>
            <param name="messageId">Error Message's id</param>
            <returns>Queue Error Message (or none)</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueErrorMessageDao.Get(System.DateTime,System.DateTime)">
            <summary>
            Gets a set of error messages
            </summary>
            <param name="startDateTime">Starting date-time</param>
            <param name="endDateTime">Ending date-time</param>
            <returns>Set of error messages</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueErrorMessageDao.Delete(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes error messages by their ids.
            </summary>
            <param name="queueErrorMessages">Set of ids to be deleted</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueErrorMessageDao.Get(System.Int32,System.Linq.Expressions.Expression{System.Func{Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueErrorMessage,System.Object}},System.Linq.Expressions.Expression{System.Func{Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueErrorMessage,System.Boolean}})">
            <summary>
            Gets a set of error messages
            </summary>
            <param name="batchSize">The max number of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage">messages</see> to retrieve</param>
            <param name="orderBy">Expressioin that defined the order of the selected messages. For example: orderBy = message => message.Attempts</param>
            <param name="filter">Expressioin that define a filter for messages. For example: filter = message => message.NeedResend</param>
            <returns>Set of error messages</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IExternalOrderServiceQueueErrorMessageDao.GetAndDelete(System.Int32,System.Boolean)">
            <summary>
            Gets a set of error messages
            </summary>
            <param name="batchSize">The max number of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage">messages</see> to retrieve</param>
            <param name="needResend">Filter criteria</param>
            <returns>Set of error messages</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.IMessageQueue">
            <summary>
            The following represents a classic <see href="http://en.wikipedia.org/wiki/FIFO">FIFO</see> collection of objects. 
            The following collection should be persistable. 
            </summary>
            <remarks>
            The implementors should provide thread safe api over provided interface.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IMessageQueue.Enqueue(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage},System.Type)">
            <summary>
            Pushes provided enumerable of<see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage">messages</see> objects to the end of the IQueue, while
            keeping <see href="http://en.wikipedia.org/wiki/FIFO">FIFO</see> .
            </summary>
            <param name="queueMessages">The <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage">messages</see> to be place in queue.</param>
            <param name="type">The type of the element stored inside the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage">messages</see>.
            <remarks>
            All messages provided as <param name="queueMessages">first</param> argument should have exactly the same type described in <param name="type">second</param> 
            parameter.
            </remarks>
            </param>
            <remarks>
            Exception will be thrown if null object provided instead of <param name="queueMessages">input parameter</param>.
            Participates in ambient transaction/UOW.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IMessageQueue.Dequeue(System.Int32)">
            <summary>
            Removes and returns the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage">messages</see> enumeration from the beginning of the 
            IQueue based on specified batch size, while keeping <see href="http://en.wikipedia.org/wiki/FIFO">FIFO</see> principle.
            Each queue message is followed by type the message is carrying in.
            </summary>
            <param name="batchSize">The max number of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage">messages</see> to retrieve,
             and remove from the beginning of the IQueue</param> <returns>IQueueMessage collection object</returns>
            <remarks>
            Participates in ambient transaction/UOW.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IMessageQueue.Clean">
            <summary>
            Removes all objects from the Queue.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.IPublisherConfiguration">
            <summary>
            Configuration for publish operation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IPublisherConfiguration.PublisherMode">
            <summary>
            Publisher mode
            When Config to Disable (default value), no publish to All Queue.
            When Config to Enable, publish to All Queues.
            When Config to Auto, publish to All Queue if there is at least one worker that in running state.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IPublisherConfiguration.DeadletterDequeueBatchSize">
            <summary>
            Number of publisher messages pulled in a single de-queue action
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IPublisherConfiguration.DeadletterDequeueInterval">
            <summary>
            Sleep time in milliseconds between publisher de-queue attempts
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueConfiguration">
            <summary>
            Configuration for Message Queue operation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueConfiguration.DequeueBatchSize">
            <summary>
            Number of messages pulled in a single de-queue action
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueConfiguration.DefaultAttempts">
            <summary>
            The default number of retry attempts to perform before turning the message to "poisoned"
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueConfiguration.DequeueInterval">
            <summary>
            Sleep time in milliseconds between de-queue attempts
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueConfiguration.RetryDequeueInterval">
            <summary>
            Sleep time in milliseconds between de-queue retry attempts
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueConfiguration.ErrorDequeueInterval">
            <summary>
            Sleep time in milliseconds between error de-queue attempts
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueConfiguration.MaximumParallelThreads">
            <summary>
            Maximum Number of parallel threads 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueConfiguration.IsRunning">
            <summary>
            If false, message queue system is turned off.
            Default is true.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueConfiguration.IsExternalQueue">
            <summary>
            Indicate if internal queue system is used, or an external asynchronous queue framework.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueConfiguration.DeadletterDequeueBatchSize">
            <summary>
            Number of deadletter messages pulled in a single de-queue action 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueConfiguration.DeadletterDefaultAttempts">
            <summary>
            The default number of retry attempts to perform before turning the deadletter message to "poisoned"
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueConfiguration.DeadletterDequeueInterval">
            <summary>
            Sleep time in milliseconds between deadletter de-queue attempts
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueConfiguration.QueueIsLazy">
            <summary>
            If true queue is in lazy mode.
            default is false.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.IMessageQueueErrorsResubmit">
            <summary>
            Take message from the archive and enqueue it again
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IMessageQueueErrorsResubmit.ResubmitMessages(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            
            </summary>
            <param name="queueErrorMessages"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.IMessageQueueHandler">
            <summary>
            Responsible for fetching <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage">message</see>  from <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IMessageQueue">queue</see>, 
            and publishing <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage">messages</see> to specific <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IEventHandler`1"> queue handler</see>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IMessageQueueHandler.Handle">
            <summary>
            When invoked reads the queue and publishes domain events to relevant subscribers, containing 
            <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueMessage">messages</see> enumerable retrieved from the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IMessageQueue">queue</see> 
            object.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage.MessageId">
            <summary>
            Message Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage.Id">
            <summary>
            Transaction Id
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage.User">
            <summary>
            The user of the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage.WorkstationId">
            <summary>
            The workstation id of the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage.TransactionDate">
            <summary>
            Transaction date
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage.BusinessDate">
            <summary>
            The business date of the transaction
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage.Resend">
            <summary>
            Define if need to send a message again to Reporting Warehouse
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage.ErrorDescription">
            <summary>
            The description of the error from Reporting Warehouse
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage.DocumentType">
            <summary>
            Type of document
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseErrorMessage.OriginalQueueMessage">
            <summary>
            A message that was sent to the Reporting Warehouse
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseQueueErrorMessageDao.Save(Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage)">
            <summary>
            Save message to the database
            </summary>
            <param name="queueErrorMessage">Error message</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseQueueErrorMessageDao.Get(System.Guid)">
            <summary>
            Gets a single or no error message from the database
            </summary>
            <param name="messageId">Error Message's id</param>
            <returns>Queue Error Message (or none)</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseQueueErrorMessageDao.Get(System.DateTime,System.DateTime)">
            <summary>
            Gets a set of error messages
            </summary>
            <param name="startDateTime">Starting date-time</param>
            <param name="endDateTime">Ending date-time</param>
            <returns>Set of error messages</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseQueueErrorMessageDao.Delete(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes error messages by their ids.
            </summary>
            <param name="queueErrorMessages">Set of ids to be deleted</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseQueueErrorMessageDao.Get(System.Int32,System.Linq.Expressions.Expression{System.Func{Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseQueueErrorMessage,System.Object}},System.Linq.Expressions.Expression{System.Func{Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseQueueErrorMessage,System.Boolean}})">
            <summary>
            Gets a set of error messages
            </summary>
            <param name="batchSize">The max number of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage">messages</see> to retrieve</param>
            <param name="orderBy">Expression that defined the order of the selected messages. For example: orderBy = message => message.Attempts</param>
            <param name="filter">Expression that define a filter for messages. For example: filter = message => message.NeedResend</param>
            <returns>Set of error messages</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IReportingWarehouseQueueErrorMessageDao.GetAndDelete(System.Int32,System.Boolean)">
            <summary>
            Gets a set of error messages
            </summary>
            <param name="batchSize">The max number of <see cref="T:Retalix.StoreServices.Model.Infrastructure.Queue.IQueueErrorMessage">messages</see> to retrieve</param>
            <param name="needResend">Filter criteria</param>
            <returns>Set of error messages</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.IThirdPartyPublisherInitializer">
            <summary>
            Initialize a publisher
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IThirdPartyPublisherInitializer.Initialize">
            <summary>
            Initialize a publisher
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.IThirdPartyWorker">
            <summary>
            Initialize a third party worker
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Queue.IThirdPartyWorker.IsEnable">
            <summary>
            Define if need to start listening
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Queue.IThirdPartyWorker.StartListening">
            <summary>
            Start worker
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.PublisherModeEnum">
            <summary>
            Values for configuration for publish operation
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Queue.PublisherModeEnum.Disable">
            <summary>
            Default value. No publish to All Queue.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Queue.PublisherModeEnum.Enable">
            <summary>
            Publish to All Queues.
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Infrastructure.Queue.PublisherModeEnum.Auto">
            <summary>
            Publish to All Queues if there is at least one worker that in running state.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Queue.QueueEvent`1">
            <summary>
            Represents <see cref="T:Retalix.StoreServices.Model.Infrastructure.Events.IDomainEvent">domain event</see> implementation for event publishing mechanism in message 
            queue domain.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IExtendedInfoHandler`2">
            <summary>
             Handles extending of <typeparamref name="TInfo">TInfo</typeparamref>,
             when source for extension data is <typeparam name="TRequest">TRequest</typeparam>.
            </summary>
            <typeparam name="TRequest">Request type.</typeparam>
            <typeparam name="TInfo">Info type.</typeparam>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IExtendedInfoHandler`2.UpdatedInfoByRequest(`0,`1)">
            <summary>
             Updates provided <paramref name="info">info</paramref>
             with values from provided <paramref name="request">request</paramref>.
            </summary>
            <param name="request">The request to parse.</param>
            <param name="info">The info to update.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IInternalServiceExecuter">
             <summary>
             A way to run a service from within another service
             </summary>
            <remarks>
             This is a bad parctice, services should never call other services.
             This is a temporary solution until we can migrate all business logic into components and out of Services
             </remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext">
            <summary>
            Represents the data used during the service-execution process.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext.ServiceName">
            <summary>
            Gets the name of the service being executed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext.SecurityToken">
            <summary>
            Gets the security token sent by the client with its request.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext.DocumentRequest">
            <summary>
            Returns a <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentRequest"/> instance created for this service request.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext.DocumentResponse">
            <summary>
            Gets or sets the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IDocumentResponse"/> instance returned from the Execute method of the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IBusinessService"/>
            </summary>
            <remarks>This will be null until after the service execution</remarks>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext.BusinessService">
            <summary>
            Returns the business-service instance being executed.
            </summary>
            <value>A <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IBusinessService"/> instance resolved according to <see cref="P:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext.ServiceName"/>.</value>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext.Service">
            <summary>
            Returns the instance of the service being executed.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext.Error">
            <summary>
            Gets the error that occurred during the service execution process, or null if no error has occurred.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionObserver">
            <summary>
            Implementors of this interface may intervene during the service execution process.
            </summary>
            <remarks>
            There is no guarantee that a specific implementor of this interface will be called for any of the handled events,
            nor is there any gurantee of the order in which implementors are called.
            If an implementor of an event throws an exception, invokation of remaining observers does not continue.
            It is, therefore, possible, that an implementor will not be invoked to handle the <see cref="M:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionObserver.OnBegin(Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext)"/> event, 
            but will be called to handle the <see cref="M:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionObserver.OnError(Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext,System.Exception)"/> event.
            It is not, however, possible for an implementor to be invoked to handle the <see cref="M:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionObserver.OnBeforeExecute(Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext)"/> event
            without having first been called to handle the <see cref="M:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionObserver.OnBegin(Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext)"/> event.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionObserver.OnBegin(Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext)">
            <summary>
            Occurrs before a service is executed and the client session is validated, but after the unit-of-work has been started.
            This event always occurs regardless of the service to be executed.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionObserver.OnBeforeExecute(Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext)">
            <summary>
            Occurrs before a business-service is executed, but after the client session has been validated and the unit-of-work has been started.
            This event occurs only before the execution of an <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IBusinessService"/> implementation.
            </summary>
            <param name="context"></param>
            <remarks>
            Occurrance of this event depends on the specific type of service being run. 
            Execution of some services, e.g., streamed business services, will not trigger this event.
            To execute logic before service execution that is guaranteed to occur, handle the <see cref="M:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionObserver.OnBegin(Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext)">OnBegin</see> event.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionObserver.OnAfterExecute(Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext)">
            <summary>
            Occurrs after a business-service is executed, but before the unit-of-work completes.
            This event occurs only after the execution of an <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IBusinessService"/> implementation.
            </summary>
            <param name="context"></param>
            <remarks>
            Occurrance of this event depends on the specific type of service being run. 
            Execution of some services, e.g., streamed business services, will not trigger this event.
            </remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionObserver.OnComplete(Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext)">
            <summary>
            The final event before the service executer completes the execution of the <see cref="T:Retalix.StoreServices.Model.Infrastructure.Service.IBusinessService"/>
            </summary>
            <param name="context"></param>
            <remarks>This event happens after OnAfterExecute or OnError depending if there was an error or not</remarks>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionObserver.OnError(Retalix.StoreServices.Model.Infrastructure.Service.IServiceExecutionContext,System.Exception)">
            <summary>
            Occurrs when an error occurrs in the service execution process.
            Occurrs after the unit-of-work encompassing execution has been rolled back, within the scope of a new unit-of-work.
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkObserver">
            <summary>
            Implementors of this interface may intervene during the life-cycle of the unit-of-work that encompasses service-execution.
            </summary>
            <remarks>
            There is no guarantee that a specific implementor of this interface will be called for any of the handled events,
            nor is there any gurantee of the order in which implementors are called.
            If an implementor of an event throws an exception, invokation of remaining observers does not continue.
            It is, therefore, possible, that an implementor will not be invoked to handle the <see cref="M:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkObserver.OnBegin"/> event, 
            but will be called to handle the <see cref="M:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkObserver.OnFailure"/> event.
            It is not, however, possible for an implementor to be invoked to handle the <see cref="M:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkObserver.OnComplete"/> event
            without having first been called to handle the <see cref="M:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkObserver.OnBegin"/> event.
            </remarks>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkObserver.OnBegin">
            <summary>
            Occurrs after the unit-of-work has started.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkObserver.OnComplete">
            <summary>
            Occurrs before the unit-of-work has completed successfully.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IUnitOfWorkObserver.OnFailure">
            <summary>
            Occurrs after the unit-of-work has been rolled back.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.RtiResponse">
            <summary>
            Provides capabilites vis-a-vis the underlying context-dependent response object.
            </summary>
            <remarks>
            E.g., in an http-context this object wraps the HttpResponse object.
            </remarks>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.RtiResponse.BufferOutput">
            <summary>
            Gets or sets a value indicating whether to buffer output and only send it once service-execution completes.
            </summary>
            <remarks>This defaults to true</remarks>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.ServiceExecutionObserverBase">
            <summary>
            A convenience base-class for implementing IServiceExecutionObserver.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.UnitOfWorkObserverBase">
            <summary>
            A convenience base-class for implementing IUnitOfWorkObserver.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IBusinessServiceErrorHandler">
            <summary>
            Represents a business-service that wishes to handle errors that occur during the business-service execution process.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IBusinessServiceErrorHandler.HandleError(System.Exception)">
            <summary>
            Called by the service-execution framework when an error occurrs during business-service execution.
            </summary>
            <param name="exception">The exception that failed the business-service execution process.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IPerformanceMonitorService">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IPerformanceMonitorService.GetCounter``1(System.String,System.String,System.String)">
            <summary>
            </summary>
            <param name="categoryName"></param>
            <param name="counterName"></param>
            <param name="instanceName"></param>
            <typeparam name="TCounterType"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IBasePerformanceCounter">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IBasePerformanceCounter.CategoryName">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IBasePerformanceCounter.CounterName">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Infrastructure.Service.IBasePerformanceCounter.InstanceName">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.INumberOfItemsCounter">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.INumberOfItemsCounter.Increment">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IRateOfCountsPerSecondCounter">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IRateOfCountsPerSecondCounter.IncrementBy(System.Int64)">
            <summary>
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IAverageTimerCounter">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.Service.IServicePerformanceCountersFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IServicePerformanceCountersFactory.SetFactorySettings(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="categoryName"></param>
            <param name="categoryNameAverage"></param>
            <param name="instanceName"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IServicePerformanceCountersFactory.GetTotalNumberOfItemsCounter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IServicePerformanceCountersFactory.GetSuccededNumberOfItemsCounter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IServicePerformanceCountersFactory.GetFailedNumberOfItemsCounter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IServicePerformanceCountersFactory.GetTotalRateOfCountsPerSecondCounter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IServicePerformanceCountersFactory.GetSuccededRateOfCountsPerSecondCounter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IServicePerformanceCountersFactory.GetFailedRateOfCountsPerSecondCounter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.Service.IServicePerformanceCountersFactory.CreateAverageTimerCounter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.LocationHandler.IOverridenBusinessUnitHandler">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.LocationHandler.IOverridenBusinessUnitHandler.FindOverridenBusinessUnits">
            <summary>
             Returns Business Units whose configurations have been overridden.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.DuplicateActionCodeException">
            <summary>
            Action code duplicate input
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.ReasonCodeDoesNotExistException">
            <summary>
            Reason code duplicate input
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.ReasonGroupNotFoundException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.ReasonWithNoDescriptionException">
            <summary>
            Reason with no descriptions provided
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.ReasonWithNoGroupException">
            <summary>
            Reason with no Id provided
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.ReasonWithNoIdException">
            <summary>
            Reason with no Id provided
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.DuplicateReasonCodeException">
            <summary>
            Reason code duplicate input
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCodeDao">
            <summary>
            Responsible to Save, delete and lookup of Reason Code
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCodeFactory">
            <summary>
            A factory for creating Reason Code entities.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCodeFactory.CreateReasonCode(System.String,System.Collections.Generic.IList{Retalix.StoreServices.Model.Infrastructure.ReasonCode.CulturedDescription},Retalix.StoreServices.Model.Infrastructure.ReasonCode.IReasonCodeGroup)">
            <summary>
            Used to create an Reason Code  entity.
            </summary>
            <param name="id"></param>
            <param name="culturedDescriptions"></param>
            <param name="reasonCodeGroup"></param>
            ///
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog">
            <summary>
            personal Account Transaction Log.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog.Id">
            <summary>
             Internal id of SavingAccountTransactionLog 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog.StoreCode">
            <summary>
            StoreCode of the store where the transaction occurred.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog.TouchPointId">
            <summary>
            Id of the touch point where the transaction occurred (will be null if the transaction came from Office).
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog.TransactionSequenceNumber">
            <summary>
            The transaction log's sequence number.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog.TransactionExternalId">
            <summary>
            The transaction log's External Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog.OperatorId">
            <summary>
            Operator id 
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog.BusinessDate">
            <summary>
            The relevant business date of the declaration operation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog.SavingAccountName">
            <summary>
             An external identifier of the personal account as defined in the provider
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog.SavingAccountDescription">
            <summary>
             Description of the personal account
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog.Provider">
            <summary>
             The adaptor that should be used to get the appropriate provider for validate the account of the customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog.CustomerId">
            <summary>
             Id of the customer that deposit money into personal account
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog.Slips">
            <summary>
            personal account slips.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog.Lines">
            <summary>
            A list of <see cref="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLogLine"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLogDao">
            <summary>
             Provides persistency functionality regarding ISavingAccountTransactionLog 
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLogDao.Save(Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog)">
            <summary>
            Saves the SavingAccountTransactionLog received.
            </summary>
            <param name="savingAccountTransactionLog">log to be saved</param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLogDao.Get(Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountTransactionLogSearchCriteria)">
            <summary>
            Get SavingAccountTransactionLogs according to search criteria received.
            </summary>
            <param name="searchCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLogDao.Get(System.Int32)">
            <summary>
            Get personal account transaction log by id.
            </summary>
            <param name="id">personal account transaction log id.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLogDao.Delete(Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog)">
            <summary>
            Delete personal account transaction log.
            </summary>
            <param name="savingAccountTransactionLog">personal account transaction log.</param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLogDao.GetAll">
            <summary>
            Get all personal account transaction logs.
            </summary>
            <returns>Enumerable of type ISavingAccountTransactionLog.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLogDao.GetAll(Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLog)">
            <summary>
            Get all personal account transaction logs.
            </summary>
            <param name="savingAccountTransactionLog">Starting position.</param>
            <returns>Enumerable of type ISavingAccountTransactionLog.</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLogDao.DeleteAll">
            <summary>
            Delete all personal account transaction logs.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLogLine">
            <summary>
             personal account tender line.
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLogLine.TenderDescription">
            <summary>
            The Tender to deposit into the personal account.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLogLine.TenderId">
            <summary>
             Tender Id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountTransactionLogLine.Amount">
            <summary>
            Amount deposit into the personal account.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountTransactionLogSearchCriteria">
            <summary>
            Search criteria for SavingAccountTransaction logs
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountTransactionLogSearchCriteria.FromBusinessDate">
            <summary>
            Logs of transactions created on or after this business date will be returned.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountTransactionLogSearchCriteria.ToBusinessDate">
            <summary>
            Logs of transactions created on or before this business date will be returned.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountTransactionLogSearchCriteria.TouchPointId">
            <summary>
            Logs of transactions that occurred in the TouchPoint with this id will be returned.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountTransactionLogSearchCriteria.StoreCode">
            <summary>
            StoreCode of the store where the transaction occurred.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccount">
            <summary>
             Represents data and behavior for personal account (such as Christmas account) for customers.
             The customer can can deposit money to this account and at some point to use the money in the account.
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccount.Id">
            <summary>
             An internal identifier of the personal account
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccount.Name">
            <summary>
             An external identifier of the personal account as defined in the provider
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccount.Description">
            <summary>
             Description of the personal account
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccount.ProviderName">
            <summary>
             The adaptor that should be used to get the appropriate provider for validate the account of the customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccount.IsBalanceInquiry">
            <summary>
             Indicates whether or not to display the current balance of the account in the POS
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccount.TenderDefinitions">
            <summary>
             Defines the Tender which can be used for this account, and the max amount allowed to each Tender
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccount.Validate(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver)">
            <summary>
             Checks validation of SavingAccount
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccount.LocateProvider(Retalix.StoreServices.Model.Infrastructure.StoreApplication.IResolver)">
            <summary>
             Returns SavingAccountProvider according to the providerName
            </summary>
            <returns></returns>
            <param name="resolver"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountDao">
            <summary>
             Retrieves and saves SavingAccount
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountDao.Get(System.String,System.String)">
            <summary>
             Get SavingAccount by identifier: personal account name and provider name
            </summary>
            <param name="savingAccountName"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountDao.FindAllAccounts">
            <summary>
            returns all existing personal accounts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountDao.Save(Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccount)">
            <summary>
             Save new or updated SavingAccount
            </summary>
            <param name="savingAccount"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountDepositManager">
            <summary>
             Manage deposit process into SavingAccount
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.ISavingAccountDepositManager.Deposit(Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDepositDetails)">
            <summary>
             Deposit money into specific SavingAccount
            </summary>
            <param name="savingAccountDepositDetails"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.Provider.ICustomerAccountDetails">
            <summary>
             Account details for a specific customer and specific account
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.Provider.ICustomerAccountDetails.BalanceAmount">
            <summary>
             The balance of the customer in the account
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.Provider.ISavingAccountProvider">
            <summary>
             Represents an API to communicate with a SavingAccount provider.
             The provider should return data on the account for a customer, and commit transaction (such as deposit etc) on the account.
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.Provider.ISavingAccountProvider.GetCustomerAccount(Retalix.StoreServices.Model.Customer.ICustomer,System.String)">
            <summary>
             Get details from the provider on the customer account (Such as balance amount etc)
            </summary>
            <param name="customer"></param>
            <param name="accountName"></param>
            <returns></returns>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.Provider.ISavingAccountProvider.ShouldSwipeLoyaltyCard">
            <summary>
            input parameter pre validation
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.Provider.ISavingAccountProvider.IsProcessedByEps">
            <summary>
            input parameter pre validation
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.Provider.ISavingAccountProvider.Finalize(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            does finalize action of personal account lines.
            </summary>
            <param name="retailTransaction"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.Provider.ISavingAccountProviderAdaptor">
            <summary>
             Adaptor for SavingAccount providers.
             It will get requests from Server, find the proper provider to work with,
             and send it the requests for getting response back to Server.
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.Provider.ISavingAccountProviderAdaptor.Name">
            <summary>
            Unique name for provider adaptor.  Used for presentation in Office.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.Provider.ISavingAccountProviderAdaptor.GetSavingAccountProvider">
            <summary>
             Returns the appropriate provider for Server to work with
            </summary>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDoucmentBuilderArgs">
            <summary>
            Saving document transaction log RDR document builder arguments.
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDoucmentBuilderArgs.SavingAccountTransactionLog">
            <summary>
            >personal account transaction log
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDoucmentBuilderArgs.CustomerFirstName">
            <summary>
            Customer First Name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDoucmentBuilderArgs.CustomerLastName">
            <summary>
            Customer Last Name
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDoucmentBuilderArgs.Balance">
            <summary>
            Account balance.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDepositDetails">
            <summary>
             Contains information about the deposit process (SavingAccount identifier, customer, tenders and amounts used for deposit)
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDepositDetails.Name">
            <summary>
             An external identifier of the personal account as defined in the provider
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDepositDetails.Description">
            <summary>
             Description of the personal account
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDepositDetails.Provider">
            <summary>
             The adaptor that should be used to get the appropriate provider for validate the account of the customer
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDepositDetails.CustomerId">
            <summary>
             Id of the customer that deposit money into personal account
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDepositDetails.Lines">
            <summary>
            A collection of <see cref="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDepositTenderDefinition"/>.
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDepositTenderDefinition">
            <summary>
             Represents Tender which can be used for a SavingAccount, and the max amount allowed to the Tender
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDepositTenderDefinition.Tender">
            <summary>
             Tender used for deposit SavingAccount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountDepositTenderDefinition.Amount">
            <summary>
             Amount of Tender used for deposit SavingAccount
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountTenderDefinition">
            <summary>
             Represents Tender which can be used for a SavingAccount, and the max amount allowed to the Tender
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountTenderDefinition.Tender">
            <summary>
             Tender to be used for a SavingAccount
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountTenderDefinition.TenderId">
            <summary>
            tender id.
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.Customer.Legacy.SavingAccount.SavingAccountTenderDefinition.UpToAmount">
            <summary>
             Max allowed amount for Tender in a SavingAccount
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.ConversionRateMustBeUniquePerCurrencyException">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.ConversionRateMustBeUniquePerCurrencyException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.ConversionRateMustBeUniquePerCurrencyException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.ConversionRateRequiredException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.ConversionRateRequiredException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerSegmentDoesNotExistException">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerSegmentDoesNotExistException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="segmentId"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerSegmentDoesNotExistException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
            <param name="segmentId"></param>
            <param name="inner"></param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerDoesNotBelongToGroupException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerDoesNotBelongToGroupException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerDoesNotBelongToGroupException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerAccountTypeDoesNotExistException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerAccountTypeDoesNotExistException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerAccountTypeDoesNotExistException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerAccountTypeUniqueNameViolationException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerAccountTypeUniqueNameViolationException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerAccountTypeUniqueNameViolationException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerAuthenticationFailedException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerAuthenticationFailedException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerAuthenticationFailedException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerGroupNotFoundException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerGroupNotFoundException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerGroupNotFoundException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerGroupSingleRelationException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerGroupSingleRelationException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerGroupSingleRelationException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerIdentityValidationException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerIdentityValidationException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerIdentityValidationException.#ctor(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerLoyaltyCardNumberAlreadyExistsException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerLoyaltyCardNumberAlreadyExistsException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerLoyaltyCardNumberAlreadyExistsException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.MissingMandatoryFieldException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.MissingMandatoryFieldException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.MissingMandatoryFieldException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerNotAssociatedWithAnyGroupException">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerNotAssociatedWithAnyGroupException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerNotAssociatedWithAnyGroupException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.WSClubQueryAccessException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.Exceptions.CustomerProviderOfflineException">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.OnlineAccount.IOnlineAccountDepositObserver">
            <summary>
            Represents an observer for online account deposits. 
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.OnlineAccount.IOnlineAccountDepositObserver.BeforeDeposit">
            <summary>
            Method executed before deposit.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.OnlineAccount.IOnlineAccountDepositObserver.AfterDeposit">
            <summary>
            Method executed after deposit is done.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.OnlineAccount.IOnlineAccountDepositObserver.FailToDeposit(System.Exception)">
            <summary>
            Method executed in case an error occurs during deposit
            </summary>
            <param name="exception">Specific exception</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.OnlineAccount.IOnlineAccountCommand">
            <summary>
            Represents an online account commands
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.OnlineAccount.IOnlineAccountCommand.Execute(Retalix.StoreServices.Model.Selling.CustomerOrder.Line.IOrderLine,Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            The execute method of the command
            </summary>
            <param name="onlineAccountOrderLine">Online account item.</param>
            <param name="retailTransaction">Retail transaction data.</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.OnlineAccount.IOnlineAccountCommandFactory">
            <summary>
            Reperesents a factory for creating online account commands
            </summary>
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.OnlineAccount.IOnlineAccountCommandFactory.Create(System.String)">
            <summary>
            Creates an Online Account command
            </summary>
            <param name="onlineAccountProvider">Online account provider.</param>
            <returns>Online account command.</returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.OnlineAccount.IOnlineAccountHandler">
            <summary>
            Represents a handler for online account command.
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.OnlineAccount.IOnlineAccountHandler.Deposit(Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            Handles the deposit command
            </summary>
            <param name="retailTransaction">Retail transaction</param>
        </member>
        <member name="T:Retalix.StoreServices.Model.Customer.Legacy.CustomerLogExt">
            <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Legacy.CustomerLogExt.R10ExNamespace">
            <summary>
             The official R10 extensions for ARTS xml namespace
            </summary>
        </member>
        <member name="F:Retalix.StoreServices.Model.Customer.Legacy.CustomerLogExt.R10ExNamespacePrefix">
            <summary>
             The official R10 extensions for ARTS xml namespace prefix
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.CustomerLogExt.CreateXmlElement(System.String)">
            <summary>
            OnCreate xml element with the R10 extension namespace and prefix.
            </summary>
            <param name="elementname">The element name.</param>
            <returns>An xml element instance</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.CustomerLogExt.CreateXmlAttribute(System.String)">
            <summary>
             OnCreate xml attribute with the R10 extension namespace and prefix.
            </summary>
            <param name="attributeName">The Attribute name.</param>
            <returns>An xml Attribute instance</returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Customer.Legacy.CustomerLogExt.CreateCustomerExternalId(System.String)">
            <summary>
            create customer extenral id attribute 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Organization.BusinessUnit.ICurrencyInfoProvider">
            <summary>
            Provides currency info values
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.ICurrencyInfoProvider.Get(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit)">
            <summary>
            Returns a <see cref="T:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo"/> of the business unit.
            </summary>
            <param name="businessUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.Organization.BusinessUnit.ICurrencyInfoProvider.Get(Retalix.StoreServices.Model.Organization.BusinessUnit.IBusinessUnit,System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Infrastructure.Legacy.Globalization.IHierarchyCulture})">
            <summary>
            Returns a <see cref="T:Retalix.StoreServices.Model.Finance.Money.CurrencyInfo"/> of the business unit.
            </summary>
            <param name="businessUnit"></param>
            <param name="hierarchyCultures"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.PaymentTransaction.FinalizeTransactionInputParameters">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PaymentTransaction.FinalizeTransactionInputParameters.ListOfTransactions">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PaymentTransaction.FinalizeTransactionInputParameters.ProviderKey">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.PaymentTransaction.IPaymentTransaction">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PaymentTransaction.IPaymentTransaction.SessionId">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PaymentTransaction.IPaymentTransaction.TransactionId">
            <summary>
            </summary>
        </member>
        <member name="P:Retalix.StoreServices.Model.PaymentTransaction.IPaymentTransaction.TransactionRecord">
            <summary>
            </summary>
        </member>
        <member name="T:Retalix.StoreServices.Model.PaymentTransaction.IPaymentTransactionDao">
            <summary>
            </summary>
             <summary><para><b>Note: This Interface is obsolete since version 10.4.1</b></para></summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.PaymentTransaction.IPaymentTransactionDao.Save(Retalix.StoreServices.Model.PaymentTransaction.IPaymentTransaction)">
            <summary>
            </summary>
            <param name="paymentTransaction"></param>
        </member>
        <member name="M:Retalix.StoreServices.Model.PaymentTransaction.IPaymentTransactionDao.GetTransactionsBySessionIds(System.Collections.Generic.List{System.String})">
            <summary>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Retalix.StoreServices.Model.PaymentTransaction.IPaymentTransactionDao.UpdateDepositBySessionIds(System.Collections.Generic.List{System.String})">
            <summary>
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Retalix.StoreServices.Model.Tender.TenderType.IValidTendersStrategyFilter">
            <summary>
            Represents an interface to filter valid tenders
            </summary>
        </member>
        <member name="M:Retalix.StoreServices.Model.Tender.TenderType.IValidTendersStrategyFilter.Filter(System.Collections.Generic.IEnumerable{Retalix.StoreServices.Model.Tender.TenderType.ITenderType},Retalix.StoreServices.Model.Organization.RetailSegment.IRetailSegment,Retalix.StoreServices.Model.Selling.IRetailTransaction)">
            <summary>
            filter tender list
            </summary>
            <param name="tenders"></param>
            <param name="retailSegment"></param>
            <param name="retailTransaction"></param>
            <returns></returns>
        </member>
    </members>
</doc>
